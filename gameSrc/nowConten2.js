var obfuscator = "https://uutool.cn/js/";
var gameVersion = `v3.7.103 2025/2/27
官网:
www.echo61.online
元宵节庆祝,8折优惠
云收菜开启购买`;
var 开发日志 = `1.图鉴加宝石数量
2.赛尔豆大作只打免费次数
3.修复雷恩卡死以及图鉴问题
4.限时活动增加十二兔本体+小怪+雷恩
5.新增背包分析及图鉴分析及符文筛选`;
var winLog;
var sta;
var nnnn;
var iframeDom = document.createElement("iframe");
document.body.appendChild(iframeDom);
window.logger = iframeDom.contentWindow.console.log;
iframeDom.style.display = "none";
window.noLevelCatchPets = null;
window.nowCheckBagPet = null;
window.learnTimeId = null;
var outputStr = "";
var pokers = null;
var rongheStatus = null;
var dianfengstatus = false;
var testBtn;
var rongheData;
var filterTuzhi = 0;
let timeMusic = // TOLOOK
setInterval(() => {
  try {
    if (MFC.userInfo.uid) {
      MFC.entryInfo.loadRes("resource/app/obtainItem/ObtainItem.js", function () {
        if (obtainItem.ObtainItemMethodCell.prototype.dataChanged) {
          var _0x9c7b9e = obtainItem.ObtainItem.prototype.init;
          let _0x446cf5;
          var _0x3cada4 = obtainItem.ObtainItem.prototype.showDetail;
          obtainItem.ObtainItem.prototype.init = function (_0x47f450) {
            _0x446cf5 = _0x47f450.data.type == 0 ? _0x47f450.data.id : null;
            _0x9c7b9e.call(this, _0x47f450);
          };
          obtainItem.ObtainItem.prototype.showDetail = function () {
            if (_0x446cf5 !== null) {
              const _0x5771a0 = {
                name: "tipguid",
                text: "",
                x: 20,
                y: 10,
                bold: true,
                stroke: 1,
                strokeColor: 9297,
                textColor: 14745599,
                size: 20,
                fontFamily: "楷体",
                bold: 1,
                textAlign: "center"
              };
              label = createLabel(_0x5771a0);
              label.x = 300;
              label.y = 20;
              label.visible = false;
              label.touchEnabled = true;
              let _0x58c21d = _0x446cf5 ? PetConfig.getPetByClassId(PetConfig.getDef(_0x446cf5).petClass) : null;
              _0x58c21d = _0x58c21d !== null ? _0x58c21d.map(_0x189c5a => _0x189c5a.id) : null;
              let _0x19ed7c = null;
              if (!xls.mapMonster.hasLoaded) {
                xls.mapMonster.load(() => {});
              }
              let _0x26ba2e = xls.mapMonster.getItems().filter(_0x4b64c5 => _0x4b64c5.canCatch == 1 && _0x4b64c5.mapId !== 0);
              for (let _0x5062b5 = 0; _0x5062b5 < _0x26ba2e.length; _0x5062b5++) {
                if (_0x19ed7c !== null) {
                  break;
                } else if (_0x58c21d.includes(parseInt(xls.pveBoss.getItem(_0x26ba2e[_0x5062b5].bossId).petID.split("_")[0]))) {
                  _0x19ed7c = _0x26ba2e[_0x5062b5].mapId;
                  label.visible = true;
                  label.text = "点击星球跳转";
                  let _0x3f87cb = new eui.Image();
                  if (!xls.mapItem.hasLoaded) {
                    xls.mapItem.load(() => {});
                  }
                  _0x3f87cb.source = Path.getPlanetIcon(xls.mapItem.getItem(_0x19ed7c).planetID);
                  _0x3f87cb.x = 310;
                  _0x3f87cb.y = 60;
                  _0x3f87cb.width = 100;
                  _0x3f87cb.height = 100;
                  BC.addEvent(label, label, egret.TouchEvent.TOUCH_TAP, () => {
                    MFC.rootLayer.hideAllPanel();
                    MFC.mapManager.gotoMap(_0x19ed7c);
                  });
                  BC.addEvent(_0x3f87cb, _0x3f87cb, egret.TouchEvent.TOUCH_TAP, () => {
                    MFC.rootLayer.hideAllPanel();
                    MFC.mapManager.gotoMap(_0x19ed7c);
                  });
                  this.parent.addChild(_0x3f87cb);
                  break;
                }
              }
              this.parent.addChild(label);
            }
            _0x3cada4.call(this);
          };
          obtainItem.ObtainItemMethodCell.prototype.dataChanged = function () {
            this._flag.visible = false;
            this.blackMask.visible = false;
            if (this.data) {
              if (this.data.param && this.data.param.id == -1) {
                DisplayUtils.setEnabled(this, false, true);
              } else {
                DisplayUtils.setEnabled(this, true, false);
              }
              if (this.data.type) {
                if (this.data.type == 1) {
                  this._txtName.text = this.data.name + "";
                  if (!(this.data.iid != 70869 && this.data.iid != 80869 || frame.GuideController.isNewSeer2022())) {
                    this._txtName.text = "挚友回馈";
                  }
                  var _0x30efb0 = xls.item.getItem(this.data.iid);
                  this.img.source = Path.getItemIcon(_0x30efb0.id);
                } else if (this.data.type == 2) {
                  this._txtName.text = this.data.name + "";
                  var _0x4a6fa1 = PetConfig.getDef(this.data.iid);
                  this.img.source = Path.getPetHeadIconURL(_0x4a6fa1.modelID);
                } else if (this.data.type == 3) {
                  var _0x30efb0 = xls.item.getItem(this.data.iid);
                  this._txtName.text = _0x30efb0.name + "";
                  this.img.source = Path.getItemIcon(_0x30efb0.id);
                }
                this.img.scaleX = this.img.scaleY = 0.5;
                return;
              }
              var _0x5a0010 = this.data;
              if (_0x5a0010) {
                var _0x414500 = xls.plantDescription.getItem(_0x5a0010.planetID);
                this._txtName.text = "" + _0x5a0010.levelName;
                if (_0x446cf5 !== null) {
                  let _0x108240 = PetConfig.getPetByClassId(PetConfig.getDef(_0x446cf5).petClass);
                  _0x108240 = _0x108240.map(_0x5226fa => _0x5226fa.id);
                  let _0x3a46a0 = _0x5a0010.bossID;
                  let _0x263dd1 = "";
                  for (let _0x1802e3 = 0; _0x1802e3 < _0x3a46a0.split("|").length; _0x1802e3++) {
                    if (xls.pveBoss.getItem(_0x3a46a0.split("|")[_0x1802e3].split("_")[0]) && xls.pveBoss.getItem(_0x3a46a0.split("|")[_0x1802e3].split("_")[0]).petID && _0x108240.includes(parseInt(xls.pveBoss.getItem(_0x3a46a0.split("|")[_0x1802e3].split("_")[0]).petID.split("_")[0]))) {
                      _0x263dd1 = _0x3a46a0.split("|")[_0x1802e3].split("_")[1];
                      this._txtName.text += " 概率" + _0x263dd1;
                      this._txtName.size = 14;
                    }
                  }
                }
                var _0x150f78 = Path.getPlanetSmallIcon(_0x414500.id);
                this.img.source = _0x150f78;
                this.img.scaleX = 0.7;
                this.img.scaleY = 0.7;
                if (_0x5a0010.planetID > 10000) {
                  this._flag.visible = true;
                }
                if (PveCheckManager.checkLevel(_0x5a0010.id) == 0) {
                  this.m_ShowMask(_0x150f78);
                }
              }
            }
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/petIllustrated/PetIllustrated.js", function () {
        if (petIllustrated.PetIllustrated.prototype.updatePetAttrView) {
          var _0x1235d0 = petIllustrated.PetIllustrated.prototype.updatePetAttrView;
          petIllustrated.PetIllustrated.prototype.updatePetAttrView = function (_0x162935) {
            Promise.all([RES.loadConfig("resource/ui/roomInfo.json", "resource/ui/"), RES.loadConfig("resource/ui/vip_mall.json", "resource/ui/")]).then(() => {
              if (!xls.petEvo.hasLoaded) {
                xls.petEvo.load(() => {});
              }
              if (!xls.evoType.hasLoaded) {
                xls.evoType.load(() => {});
              }
              if (!xls.eggExchange.hasLoaded) {
                xls.eggExchange.load(() => {});
              }
              if (!xls.petbook.hasLoaded) {
                xls.petbook.load(() => {});
              }
              aaa = new eui.Image();
              aaa.source = "roomInfo_openRank_png";
              aaa.x = 0;
              aaa.y = 0;
              aaa.width = 30;
              aaa.height = 30;
              BC.addEvent(aaa, aaa, egret.TouchEvent.TOUCH_TAP, () => {
                function _0xbacf26(_0x33380b) {
                  const [_0x380b51, _0x4b5fe1] = _0x33380b.split("_");
                  const _0x53866a = parseInt(_0x380b51, 10);
                  const _0x4764d6 = parseInt(_0x4b5fe1, 10);
                  const _0x1346ea = ItemManager.getInstance().getItemNumById(_0x53866a) || 0;
                  const _0x4d878c = (xls.item.getItem(_0x53866a) || {
                    name: "未知物品"
                  }).name;
                  return _0x1346ea + "/" + _0x4764d6 + _0x4d878c;
                }
                function _0x2fd7fd(_0x3e321c, _0xf67853, _0x1b9fda = 10, _0x44d49b = 120, _0x709e55 = 30) {
                  let _0x50f077 = _0x1b9fda;
                  let _0x3ab2ad = _0x44d49b;
                  const _0x3c2e53 = _0xf67853.split("\n");
                  _0x3c2e53.forEach(_0x151040 => {
                    if (_0x151040.trim() === "") {
                      return;
                    }
                    const _0x4541f5 = _0x151040.split(" ");
                    _0x4541f5.forEach(_0x18bc83 => {
                      if (_0x18bc83.trim() === "") {
                        return;
                      }
                      const [_0x3b80a4, _0x3320f8] = _0x18bc83.split("/");
                      const _0x49bfbf = _0x3320f8.split(" ")[1];
                      const _0x58848a = _0x3320f8.split(" ")[0];
                      const _0x306a94 = createLabel({
                        text: _0x3b80a4,
                        x: _0x50f077,
                        y: _0x3ab2ad,
                        bold: true,
                        stroke: 1,
                        strokeColor: 9297,
                        textColor: parseInt(_0x3b80a4) < parseInt(_0x58848a) ? 16711680 : 65280,
                        size: 16,
                        fontFamily: "楷体",
                        textAlign: "center"
                      });
                      _0x3e321c.addChild(_0x306a94);
                      const _0x920976 = {
                        text: "/",
                        x: _0x50f077 + _0x306a94.width,
                        y: _0x3ab2ad,
                        bold: true,
                        stroke: 1,
                        strokeColor: 9297,
                        textColor: 16777215,
                        size: 16,
                        fontFamily: "楷体",
                        textAlign: "center"
                      };
                      const _0x511714 = createLabel(_0x920976);
                      _0x3e321c.addChild(_0x511714);
                      const _0x1f83fe = {
                        text: _0x58848a,
                        x: _0x50f077 + _0x306a94.width + _0x511714.width,
                        y: _0x3ab2ad,
                        bold: true,
                        stroke: 1,
                        strokeColor: 9297,
                        textColor: 16777215,
                        size: 16,
                        fontFamily: "楷体",
                        textAlign: "center"
                      };
                      const _0x5e8e5a = createLabel(_0x1f83fe);
                      _0x3e321c.addChild(_0x5e8e5a);
                      const _0x4f83e4 = {
                        text: _0x49bfbf,
                        x: _0x50f077 + _0x306a94.width + _0x511714.width + _0x5e8e5a.width,
                        y: _0x3ab2ad,
                        bold: true,
                        stroke: 1,
                        strokeColor: 9297,
                        textColor: 16777215,
                        size: 16,
                        fontFamily: "楷体",
                        textAlign: "center"
                      };
                      const _0x132969 = createLabel(_0x4f83e4);
                      _0x3e321c.addChild(_0x132969);
                      _0x50f077 += _0x306a94.width + _0x511714.width + _0x5e8e5a.width + _0x132969.width + 10;
                    });
                    _0x50f077 = _0x1b9fda;
                    _0x3ab2ad += _0x709e55;
                  });
                }
                function _0x57a911(_0x20b421) {
                  let _0x36d35d = _0x20b421;
                  let _0x5dd69c = xls.petEvo.getItems().find(_0x13c48e => _0x13c48e.petID == _0x36d35d);
                  while (_0x5dd69c && _0x5dd69c.toPetID) {
                    _0x36d35d = _0x5dd69c.toPetID;
                    _0x5dd69c = xls.petEvo.getItems().find(_0x105db1 => _0x105db1.petID == _0x36d35d);
                  }
                  return _0x36d35d;
                }
                function _0x12038f(_0x1badbb, _0x4f6ea3 = {}) {
                  const _0x4bea6b = _0x1badbb.split("*");
                  for (let _0x474839 = 0; _0x474839 < _0x4bea6b.length; _0x474839++) {
                    const [_0x56e4ab, _0x2f0b89, _0x14d662] = _0x4bea6b[_0x474839].split("_");
                    const _0x370156 = _0x14d662 ? parseInt(_0x14d662) : 1;
                    const _0xe3abeb = _0x57a911(_0x56e4ab);
                    const _0x2c3943 = xls.eggExchange.getItems().find(_0x4491ad => _0x4491ad.petShow == _0xe3abeb);
                    if (_0x2c3943 && _0x2c3943.costPets) {
                      _0x12038f(_0x2c3943.costPets, _0x4f6ea3);
                    } else if (_0x4f6ea3[_0x56e4ab]) {
                      _0x4f6ea3[_0x56e4ab] += _0x370156;
                    } else {
                      _0x4f6ea3[_0x56e4ab] = _0x370156;
                    }
                  }
                  return _0x4f6ea3;
                }
                let _0x4232cd = PetConfig.getPetByClassId(_0x162935.petClass);
                let _0x586df1 = "";
                let _0x446341 = "";
                let _0x587054 = "";
                let _0x2664b6 = "";
                let _0x39ce97 = {};
                for (let _0x58dc10 = 0; _0x58dc10 < _0x4232cd.length - 1; _0x58dc10++) {
                  if (xls.petEvo.getItems().find(_0x47504a => _0x47504a.petID == _0x4232cd[_0x58dc10].id) && xls.petEvo.getItems().find(_0x593570 => _0x593570.petID == _0x4232cd[_0x58dc10].id).specialItems.length > 0) {
                    let _0x51b0d1 = xls.petEvo.getItems().find(_0x414a92 => _0x414a92.petID == _0x4232cd[_0x58dc10].id).specialItems;
                    _0x586df1 += _0xbacf26(_0x51b0d1) + " ";
                  }
                  if (xls.petEvo.getItems().find(_0x5b1ec1 => _0x5b1ec1.petID == _0x4232cd[_0x58dc10].id) && xls.evoType.getItems().find(_0x84c240 => _0x84c240.petDegree == _0x4232cd[_0x58dc10].petDegree && _0x84c240.elem == _0x4232cd[_0x58dc10].elemType)) {
                    let _0x554a66 = xls.evoType.getItems().find(_0x729d4a => _0x729d4a.petDegree == _0x4232cd[_0x58dc10].petDegree && _0x729d4a.elem == _0x4232cd[_0x58dc10].elemType);
                    if (_0x554a66.evoItem1.length > 0) {
                      _0x586df1 += _0xbacf26(_0x554a66.evoItem1) + " ";
                    }
                    if (_0x554a66.evoItem2.length > 0) {
                      _0x586df1 += _0xbacf26(_0x554a66.evoItem2) + " ";
                    }
                    if (_0x554a66.evoItem3.length > 0) {
                      _0x586df1 += _0xbacf26(_0x554a66.evoItem3) + " ";
                    }
                  }
                  _0x586df1 = _0x586df1 + "\n";
                }
                for (let _0x3a9bb0 = 0; _0x3a9bb0 < _0x4232cd.length; _0x3a9bb0++) {
                  if (xls.eggExchange.getItems().find(_0x200202 => _0x200202.petShow == _0x4232cd[_0x3a9bb0].id)) {
                    let _0x517ea6 = xls.eggExchange.getItems().find(_0x3ec495 => _0x3ec495.petShow == _0x4232cd[_0x3a9bb0].id).costItems;
                    let _0x3eadb2 = xls.eggExchange.getItems().find(_0x2f002f => _0x2f002f.petShow == _0x4232cd[_0x3a9bb0].id).costPets;
                    for (let _0x4de437 = 0; _0x4de437 < _0x517ea6.split("*").length; _0x4de437++) {
                      _0x446341 += _0xbacf26(_0x517ea6.split("*")[_0x4de437]) + " ";
                    }
                    for (let _0x497fbd = 0; _0x497fbd < _0x3eadb2.split("*").length; _0x497fbd++) {
                      let _0x21e436 = 1;
                      if (_0x3eadb2.split("*")[_0x497fbd].split("_")[2]) {
                        _0x21e436 = _0x3eadb2.split("*")[_0x497fbd].split("_")[2];
                      }
                      _0x587054 = _0x587054 + _0x21e436 + "只" + _0x3eadb2.split("*")[_0x497fbd].split("_")[1] + "级" + xls.petbook.getItem(_0x3eadb2.split("*")[_0x497fbd].split("_")[0]).name + "  ";
                    }
                    _0x12038f(_0x3eadb2, _0x39ce97);
                  }
                }
                let _0x4330c1 = 0;
                for (const _0x4e1922 in _0x39ce97) {
                  const _0x5a9229 = xls.petbook.getItem(_0x4e1922).name;
                  const _0x33730b = _0x39ce97[_0x4e1922] + "只" + _0x5a9229 + " ";
                  if (_0x4330c1 + _0x33730b.length > 41) {
                    _0x2664b6 += "\n";
                    _0x4330c1 = 0;
                  }
                  _0x2664b6 += _0x33730b;
                  _0x4330c1 += _0x33730b.length;
                }
                var _0x4d0ec4 = new popupView.PopupView();
                bg = new eui.Image();
                bg.source = "vip_mall_img_commonAlert_png";
                bg.width = 550;
                bg.height = 350;
                bg.x = 0;
                bg.y = 0;
                _0x4d0ec4.addChild(bg);
                const _0x294718 = {
                  text: "精灵分析",
                  x: 20,
                  y: 10,
                  bold: true,
                  stroke: 1,
                  strokeColor: 9297,
                  textColor: 14745599,
                  size: 20,
                  fontFamily: "楷体",
                  bold: 1,
                  textAlign: "center"
                };
                let _0x53679b = createLabel(_0x294718);
                _0x53679b.x = bg.width / 2 - _0x53679b.width / 2;
                _0x53679b.y = 20;
                _0x4d0ec4.addChild(_0x53679b);
                function _0x2149cc(_0x21a054, _0x41c655, _0x5dd780, _0x447d22, _0x60aff4, _0x4d7085 = 14745599, _0x1c98ca = 16711680) {
                  const _0x20fda9 = {
                    text: _0x41c655,
                    x: _0x447d22,
                    y: _0x60aff4,
                    bold: true,
                    stroke: 1,
                    strokeColor: 9297,
                    textColor: _0x4d7085,
                    size: 16,
                    fontFamily: "楷体",
                    textAlign: "center"
                  };
                  let _0x6c967b = createLabel(_0x20fda9);
                  _0x21a054.addChild(_0x6c967b);
                  const _0x21b382 = {
                    text: _0x5dd780,
                    x: _0x447d22 + _0x6c967b.width,
                    y: _0x60aff4,
                    bold: true,
                    stroke: 1,
                    strokeColor: 9297,
                    textColor: _0x1c98ca,
                    size: 16,
                    fontFamily: "楷体",
                    textAlign: "center"
                  };
                  let _0x3548ac = createLabel(_0x21b382);
                  _0x21a054.addChild(_0x3548ac);
                  const _0x42533d = {
                    label: _0x6c967b,
                    valueLabel: _0x3548ac
                  };
                  return _0x42533d;
                }
                const _0x4f3d75 = {
                  text: "精灵名称: ",
                  value: _0x162935.name,
                  x: 10,
                  y: 60
                };
                const _0x5605f7 = {
                  text: _0x587054,
                  value: "",
                  x: 10,
                  y: 270
                };
                const _0x860f4b = {
                  text: _0x2664b6,
                  value: "",
                  x: 10,
                  y: 300
                };
                const _0x5f51ba = [_0x4f3d75, {
                  text: "属性: ",
                  value: petConfig.ElemTypesConfig.getDef(_0x162935.elemType).cn,
                  x: 230,
                  y: 60
                }, {
                  text: "进化所需材料:",
                  value: "",
                  x: 10,
                  y: 90
                }, {
                  text: "融合所需材料:",
                  value: "",
                  x: 10,
                  y: 180
                }, {
                  text: "融合所需精灵:",
                  value: "",
                  x: 10,
                  y: 240
                }, _0x5605f7, _0x860f4b];
                _0x5f51ba.forEach(_0x38a131 => {
                  _0x2149cc(_0x4d0ec4, _0x38a131.text, _0x38a131.value, _0x38a131.x, _0x38a131.y, _0x38a131.labelColor);
                });
                _0x2fd7fd(_0x4d0ec4, _0x586df1, 10, 120, 30);
                _0x2fd7fd(_0x4d0ec4, _0x446341, 10, 210, 30);
                MFC.popupMgr.showPopup(PopupStyle.STYLE_SLEF_DIY, {}, _0x4d0ec4);
              });
              gia = new eui.Image();
              gia.source = "resource/item/item_5001.png";
              gia.x = 10;
              gia.y = 0;
              gia.width = 30;
              gia.height = 30;
              BC.addEvent(gia, gia, egret.TouchEvent.TOUCH_TAP, () => {
                let _0x3a746a = PetConfig.getPetByClassId(_0x162935.petClass).filter(_0x76eec8 => _0x76eec8.id < 1000006);
                let _0x34dd07 = [1, 2, 4];
                var _0x104ca5 = new popupView.PopupView();
                bg = new eui.Image();
                bg.source = "vip_mall_img_commonAlert_png";
                bg.width = 550;
                bg.height = 350;
                bg.x = 0;
                bg.y = 0;
                _0x104ca5.addChild(bg);
                const _0x3f13cf = {
                  text: "宝石分析",
                  x: 20,
                  y: 10,
                  bold: true,
                  stroke: 1,
                  strokeColor: 9297,
                  textColor: 14745599,
                  size: 20,
                  fontFamily: "楷体",
                  bold: 1,
                  textAlign: "center"
                };
                let _0x3d5ba2 = createLabel(_0x3f13cf);
                _0x3d5ba2.x = bg.width / 2 - _0x3d5ba2.width / 2;
                _0x3d5ba2.y = 20;
                _0x104ca5.addChild(_0x3d5ba2);
                for (let _0x4bd439 = 0; _0x4bd439 < _0x3a746a.length; _0x4bd439++) {
                  let _0x4da622 = _0x3a746a[_0x4bd439].petDegree <= 5 ? 1 : _0x3a746a[_0x4bd439].petDegree <= 7 ? 2 : _0x3a746a[_0x4bd439].petDegree <= 10 ? 4 : 0;
                  _0x3d5ba2[_0x4bd439] = createLabel({
                    text: _0x3a746a[_0x4bd439].name,
                    x: 10,
                    y: 60 + _0x4bd439 * 100,
                    bold: true,
                    stroke: 1,
                    strokeColor: 9297,
                    textColor: 14745599,
                    size: 16,
                    fontFamily: "楷体",
                    textAlign: "center"
                  });
                  _0x104ca5.addChild(_0x3d5ba2[_0x4bd439]);
                  let _0x35e93b = [];
                  let _0x156f94 = [];
                  for (let _0x1cda74 = 0; _0x1cda74 < 3; _0x1cda74++) {
                    _0x35e93b[_0x1cda74] = createLabel({
                      text: _0x1cda74 == 0 ? "0星=>1星:" : _0x1cda74 == 1 ? "1星=>2星:" : "2星=>3星:",
                      x: 80 + _0x1cda74 * 150,
                      y: 100 + _0x4bd439 * 100,
                      bold: true,
                      stroke: 1,
                      strokeColor: 9297,
                      textColor: 14745599,
                      size: 16,
                      fontFamily: "楷体",
                      textAlign: "center"
                    });
                    _0x104ca5.addChild(_0x35e93b[_0x1cda74]);
                    _0x156f94[_0x1cda74] = createLabel({
                      text: _0x4da622 * _0x34dd07[_0x1cda74] + "*",
                      x: 160 + _0x1cda74 * 150,
                      y: 100 + _0x4bd439 * 100,
                      bold: true,
                      stroke: 1,
                      strokeColor: 9297,
                      textColor: 16711680,
                      size: 16,
                      fontFamily: "楷体",
                      textAlign: "center"
                    });
                    _0x104ca5.addChild(_0x156f94[_0x1cda74]);
                    gia = new eui.Image();
                    gia.source = "resource/item/item_5001.png";
                    gia.x = _0x156f94[_0x1cda74].x + 20;
                    gia.y = 90 + _0x4bd439 * 100;
                    gia.width = 30;
                    gia.height = 30;
                    _0x104ca5.addChild(gia);
                  }
                  let _0x1faff9 = "resource/fight/pet/head/pet" + _0x3a746a[_0x4bd439].modelID + ".png";
                  bg[_0x4bd439] = new eui.Image();
                  bg[_0x4bd439].source = _0x1faff9;
                  bg[_0x4bd439].width = 50;
                  bg[_0x4bd439].height = 50;
                  bg[_0x4bd439].x = 20;
                  bg[_0x4bd439].y = 80 + _0x4bd439 * 100;
                  _0x104ca5.addChild(bg[_0x4bd439]);
                }
                MFC.popupMgr.showPopup(PopupStyle.STYLE_SLEF_DIY, {}, _0x104ca5);
              });
              this.materialGroup.addChild(aaa);
              this.materialGroup.addChild(gia);
            });
            _0x1235d0.call(this, _0x162935);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/petBag/PetBag.js", function () {
        if (petBag.PetBag.prototype.childrenCreated) {
          var _0x443972 = petBag.PetBag.prototype.childrenCreated;
          petBag.PetBag.prototype.childrenCreated = function () {
            Promise.all([RES.loadConfig("resource/ui/roomInfo.json", "resource/ui/"), RES.loadConfig("resource/ui/vip_mall.json", "resource/ui/")]).then(() => {
              if (!xls.features.hasLoaded) {
                xls.features.load(() => {});
              }
              aaa = new eui.Image();
              aaa.source = "roomInfo_openRank_png";
              aaa.x = 660;
              aaa.y = 35;
              BC.addEvent(aaa, aaa, egret.TouchEvent.TOUCH_TAP, () => {
                var _0x1bb884 = new popupView.PopupView();
                bg = new eui.Image();
                bg.source = "vip_mall_img_commonAlert_png";
                bg.width = 450;
                bg.height = 350;
                bg.x = 0;
                bg.y = 0;
                _0x1bb884.addChild(bg);
                const _0x5e5c51 = {
                  text: "精灵背包分析",
                  x: 20,
                  y: 10,
                  bold: true,
                  stroke: 1,
                  strokeColor: 9297,
                  textColor: 14745599,
                  size: 20,
                  fontFamily: "楷体",
                  bold: 1,
                  textAlign: "center"
                };
                let _0x4a94c3 = createLabel(_0x5e5c51);
                _0x4a94c3.x = bg.width / 2 - _0x4a94c3.width / 2;
                _0x4a94c3.y = 20;
                _0x1bb884.addChild(_0x4a94c3);
                function _0x7479ca(_0x491815, _0x10cedb, _0x26ef2c, _0x497c2c, _0x29153f, _0x4f08f4 = 14745599, _0x412d54 = 16711680) {
                  const _0x17ab7f = {
                    text: _0x10cedb,
                    x: _0x497c2c,
                    y: _0x29153f,
                    bold: true,
                    stroke: 1,
                    strokeColor: 9297,
                    textColor: _0x4f08f4,
                    size: 16,
                    fontFamily: "楷体",
                    textAlign: "center"
                  };
                  let _0x296fff = createLabel(_0x17ab7f);
                  _0x491815.addChild(_0x296fff);
                  const _0x2d7748 = {
                    text: _0x26ef2c,
                    x: _0x497c2c + _0x296fff.width,
                    y: _0x29153f,
                    bold: true,
                    stroke: 1,
                    strokeColor: 9297,
                    textColor: _0x412d54,
                    size: 16,
                    fontFamily: "楷体",
                    textAlign: "center"
                  };
                  let _0x448a94 = createLabel(_0x2d7748);
                  _0x491815.addChild(_0x448a94);
                  const _0x27a4ae = {
                    label: _0x296fff,
                    valueLabel: _0x448a94
                  };
                  return _0x27a4ae;
                }
                let _0x3bcffc = PetManager.getInstance().getAllPets().filter(_0x3713f2 => _0x3713f2.featureId !== 0).reduce((_0xb9ae4b, _0x576b43) => {
                  _0xb9ae4b[xls.features.getItem(_0x576b43.featureId).rename] = (_0xb9ae4b[xls.features.getItem(_0x576b43.featureId).rename] || 0) + 1;
                  return _0xb9ae4b;
                }, {});
                let _0x2a7ce8 = Object.entries(_0x3bcffc).sort((_0x3cdc7c, _0x3cde8b) => _0x3cde8b[1] - _0x3cdc7c[1]);
                let _0x5cdc72 = _0x2a7ce8[0] ? parseInt(_0x2a7ce8[0][0]) : 0;
                let _0x363113 = _0x2a7ce8[1] ? parseInt(_0x2a7ce8[1][0]) : 0;
                const _0x138145 = [{
                  text: "等级及天赋:",
                  value: "",
                  x: 10,
                  y: 60,
                  labelColor: 16776960
                }, {
                  text: "满级精灵数量: ",
                  value: PetManager.getInstance().getAllPets().filter(_0x1e965c => _0x1e965c.level == 100).length + "只",
                  x: 10,
                  y: 90
                }, {
                  text: "未满级精灵数量: ",
                  value: PetManager.getInstance().getAllPets().filter(_0x1563ee => _0x1563ee.level !== 100).length + "只",
                  x: 190,
                  y: 90
                }, {
                  text: "31天赋精灵数量: ",
                  value: PetManager.getInstance().getAllPets().filter(_0xc96ee2 => _0xc96ee2.talent == 31).length + "只",
                  x: 10,
                  y: 120
                }, {
                  text: "30天赋精灵数量: ",
                  value: PetManager.getInstance().getAllPets().filter(_0x4aa6a6 => _0x4aa6a6.talent == 30).length + "只",
                  x: 190,
                  y: 120
                }, {
                  text: "学习力:",
                  value: "",
                  x: 10,
                  y: 150,
                  labelColor: 16776960
                }, {
                  text: "满学习力精灵数量: ",
                  value: PetManager.getInstance().getAllPets().filter(_0xd4928a => _0xd4928a.effortValues.slice(0, 6).reduce((_0x215994, _0x5b6376) => _0x215994 + _0x5b6376, 0) == 510).length + "只",
                  x: 10,
                  y: 180
                }, {
                  text: "特性情况:",
                  value: "",
                  x: 10,
                  y: 210,
                  labelColor: 16776960
                }, {
                  text: "开启特性精灵数量: ",
                  value: PetManager.getInstance().getAllPets().filter(_0x123e8f => _0x123e8f.featureId !== 0).length + "只",
                  x: 10,
                  y: 240
                }, {
                  text: "三星特性精灵数量: ",
                  value: PetManager.getInstance().getAllPets().filter(_0x1ce654 => _0x1ce654.featureId !== 0 && xls.features.getItem(_0x1ce654.featureId).level == 3).length + "只",
                  x: 220,
                  y: 240
                }, {
                  text: "精灵数量最多特性: ",
                  value: _0x5cdc72 !== 0 ? xls.features.getItems().find(_0x16af91 => _0x16af91.rename == _0x5cdc72).name : "无",
                  x: 10,
                  y: 270
                }, {
                  text: "共拥有: ",
                  value: _0x5cdc72 !== 0 ? PetManager.getInstance().getAllPets().filter(_0x127b38 => _0x127b38.featureId !== 0 && xls.features.getItem(_0x127b38.featureId).rename == _0x5cdc72).length + "只" : PetManager.getInstance().getAllPets().filter(_0x227f5b => _0x227f5b.featureId == 0).length + "只",
                  x: 220,
                  y: 270
                }, {
                  text: "精灵数量第二多特性: ",
                  value: _0x363113 !== 0 ? xls.features.getItems().find(_0x1a2345 => _0x1a2345.rename == _0x363113).name : "无",
                  x: 10,
                  y: 300
                }, {
                  text: "共拥有: ",
                  value: _0x363113 !== 0 ? PetManager.getInstance().getAllPets().filter(_0x1a7ecd => _0x1a7ecd.featureId !== 0 && xls.features.getItem(_0x1a7ecd.featureId).rename == _0x363113).length + "只" : PetManager.getInstance().getAllPets().filter(_0x3ee9e4 => _0x3ee9e4.featureId == 0).length + "只",
                  x: 220,
                  y: 300
                }];
                _0x138145.forEach(_0x3f450a => {
                  _0x7479ca(_0x1bb884, _0x3f450a.text, _0x3f450a.value, _0x3f450a.x, _0x3f450a.y, _0x3f450a.labelColor);
                });
                MFC.popupMgr.showPopup(PopupStyle.STYLE_SLEF_DIY, {}, _0x1bb884);
              });
              this.parent.addChild(aaa);
            });
            _0x443972.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/friendPanel/FriendPanel.js", function () {
        if (friendPanel.FriendPanelChat.prototype.childrenCreated) {
          var _0x3561d9 = friendPanel.FriendPanelChat.prototype.childrenCreated;
          friendPanel.FriendPanelChat.prototype.childrenCreated = function () {
            testBtn = new eui.Button();
            testBtn.x = 80;
            testBtn.y = -20;
            testBtn.skinName = getTextBtnSkinName("删除非星标");
            BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
              window.nowTask = new Removenotstarfriend();
              window.nowTask.start();
            });
            this.parent.addChild(testBtn);
            _0x3561d9.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/skillRune/SkillRune.js", function () {
        if (skillRune.SkillRune.prototype.childrenCreated) {
          var _0x18b19d = skillRune.SkillRune.prototype.childrenCreated;
          skillRune.SkillRune.prototype.childrenCreated = function () {
            Promise.all([RES.loadConfig("resource/ui/personal_center.json", "resource/ui/")]).then(() => {
              let _0x5483a4 = createLabel({
                text: "筛选已拥有未安装",
                x: 355,
                y: 15,
                stroke: 1,
                strokeColor: 9297,
                textColor: 14745599,
                size: 16,
                textAlign: "center"
              });
              _0x5483a4.background = true;
              _0x5483a4.backgroundColor = 16763904;
              _0x5483a4.touchEnabled = true;
              const _0x2850dc = {
                x: 355,
                y: 35,
                selected: false,
                storageKey: "fwnot"
              };
              let _0x295358 = createToggle(_0x2850dc);
              _0x295358.addEventListener(egret.Event.CHANGE, () => {
                if (_0x295358.selected) {
                  let _0x17f633 = SkillRuneManager.getAllRunes().filter(_0xcac0b3 => _0xcac0b3.bindPet == 0);
                  let _0x1c7aef = [];
                  for (let _0x1de40c = 0; _0x1de40c < _0x17f633.length; _0x1de40c++) {
                    _0x1c7aef.push({
                      def: SkillRuneManager.getNormalRuneConfs().find(_0x31f977 => _0x31f977.id == _0x17f633[_0x1de40c].id),
                      runes: [_0x17f633[_0x1de40c]]
                    });
                  }
                  this._list.dataProvider = null;
                  this._list.dataProvider = new eui.ArrayCollection(_0x1c7aef);
                } else {
                  this.showItems();
                }
              });
              skillRune.SkillRune.prototype.showItems = function () {
                if (_0x295358.selected) {
                  let _0x52cf2d = SkillRuneManager.getAllRunes().filter(_0x318fc6 => _0x318fc6.bindPet == 0);
                  let _0x21e731 = [];
                  for (let _0x18abb6 = 0; _0x18abb6 < _0x52cf2d.length; _0x18abb6++) {
                    _0x21e731.push({
                      def: SkillRuneManager.getNormalRuneConfs().find(_0x1bc9fb => _0x1bc9fb.id == _0x52cf2d[_0x18abb6].id),
                      runes: [_0x52cf2d[_0x18abb6]]
                    });
                  }
                  this._list.dataProvider = null;
                  this._list.dataProvider = new eui.ArrayCollection(_0x21e731);
                } else {
                  for (var _0x4e2d2b = SkillRuneManager.getNormalRuneConfs(), _0x3c59ad = [], _0x55bfeb = [], _0xf70d96 = 0; _0xf70d96 < _0x4e2d2b.length; _0xf70d96++) {
                    if (!(this.level > 0 && _0x4e2d2b[_0xf70d96].level != this.level)) {
                      var _0x8bbad5 = petConfig.SkillConfig.getDef(_0x4e2d2b[_0xf70d96].newSkillId);
                      if (!(this._curElemType > 0 && _0x8bbad5.elemType != this._curElemType) && (this.cb_atk.selected || _0x8bbad5.atkType != 1) && (this.cb_satk.selected || _0x8bbad5.atkType != 2) && (this.cb_elem.selected || _0x8bbad5.atkType != 4)) {
                        var _0x36b33a = SkillRuneManager.getRunesById(_0x4e2d2b[_0xf70d96].id);
                        var _0x23b80c = {
                          def: _0x4e2d2b[_0xf70d96]
                        };
                        var _0x360b30 = [];
                        if (_0x36b33a && _0x36b33a.length > 0) {
                          if (this.type == 2 || this.hideFix) {
                            continue;
                          }
                          for (var _0x93fdde = 0; _0x93fdde < _0x36b33a.length; _0x93fdde++) {
                            if (_0x36b33a[_0x93fdde].bindPet < 0) {
                              _0x3c59ad.push({
                                def: _0x4e2d2b[_0xf70d96],
                                runes: [_0x36b33a[_0x93fdde]]
                              });
                            } else if (_0x36b33a[_0x93fdde].bindPet > 0) {
                              _0x3c59ad.unshift({
                                def: _0x4e2d2b[_0xf70d96],
                                runes: [_0x36b33a[_0x93fdde]]
                              });
                            } else {
                              _0x360b30.push(_0x36b33a[_0x93fdde]);
                            }
                          }
                          if (_0x360b30.length > 0) {
                            _0x23b80c.runes = _0x360b30;
                            _0x55bfeb.unshift(_0x23b80c);
                          }
                        } else {
                          if (this.type == 1) {
                            continue;
                          }
                          _0x55bfeb.push(_0x23b80c);
                        }
                      }
                    }
                  }
                  this._list.dataProvider = null;
                  this._list.dataProvider = new eui.ArrayCollection(_0x3c59ad.concat(_0x55bfeb));
                }
              };
              this.parent.addChild(_0x295358);
              this.parent.addChild(_0x5483a4);
              _0x18b19d.call(this);
            });
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/expDevice/ExpDevice.js", function () {
        let _0x19feb6 = ["提升5级", "提升10级", "提升20级", "自定义", "自定义经验"];
        if (expDevice.ExpDevice.prototype.childrenCreated) {
          var _0x315a2c = expDevice.ExpDevice.prototype.childrenCreated;
          expDevice.ExpDevice.prototype.childrenCreated = function () {
            for (let _0x429c49 = 0; _0x429c49 < _0x19feb6.length; _0x429c49++) {
              testBtn = new eui.Button();
              testBtn.x = 40 + _0x429c49 * 110;
              testBtn.y = 15;
              testBtn.skinName = getTextBtnSkinName(_0x19feb6[_0x429c49]);
              BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
                if (expDevice.ExpDeviceManager.getInstance().curPet == undefined) {
                  addGameLog("请选择要升级的精灵,点击一下就行");
                  MFC.bubbleAlert.showAlert("请选择要升级的精灵");
                } else {
                  if (_0x429c49 < 4) {
                    window.nowTask = new ExpUp();
                    if (_0x429c49 == 0) {
                      window.nowTask.levelupnum = 5;
                    } else if (_0x429c49 == 1) {
                      window.nowTask.levelupnum = 10;
                    } else if (_0x429c49 == 2) {
                      window.nowTask.levelupnum = 20;
                    }
                  } else {
                    window.nowTask = new cusExpUp();
                  }
                  if (_0x429c49 < 3) {
                    window.nowTask.upui();
                  } else {
                    window.nowTask.start();
                  }
                }
              });
              this.parent.addChild(testBtn);
            }
            _0x315a2c.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/geneCombin/GeneCombin.js", function () {
        if (geneCombin.GeneCombin.prototype.childrenCreated) {
          var _0x1f68b5 = geneCombin.GeneCombin.prototype.childrenCreated;
          geneCombin.GeneCombin.prototype.childrenCreated = function () {
            testBtn = new eui.Button();
            testBtn.x = this.parent.width / 2 - 70;
            testBtn.y = this.parent.height / 2 - 50;
            testBtn.skinName = getTextBtnSkinName("一键重组");
            BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
              window.nowTask = new Cztalent();
              window.nowTask.start();
            });
            this.parent.addChild(testBtn);
            _0x1f68b5.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/holeRelicBag/HoleRelicBag.js", function () {
        if (holeRelicBag.HoleRelicBag.prototype.childrenCreated) {
          var _0x2a9537 = holeRelicBag.HoleRelicBag.prototype.childrenCreated;
          holeRelicBag.HoleRelicBag.prototype.childrenCreated = function () {
            testBtn = new eui.Button();
            testBtn.x = 350;
            testBtn.y = 7;
            testBtn.skinName = getTextBtnSkinName("一键分解");
            BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
              window.nowTask = new Relicsfj();
              window.nowTask.start();
            });
            this.parent.addChild(testBtn);
            _0x2a9537.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/preFight/PreFight.js", function () {
        if (preFight.PreFight.prototype.childrenCreated) {
          var _0x480b8d = preFight.PreFight.prototype.childrenCreated;
          preFight.PreFight.prototype.childrenCreated = function () {
            let _0x13bc13 = ["特级", "专家", "神兽", "清空"];
            let _0x41b092 = [43775, 13395711, 16763904, 0];
            let _0x135de3 = [2, 3, 5, 0];
            for (let _0x216d6a = 0; _0x216d6a < _0x13bc13.length; _0x216d6a++) {
              const _0x1cf1e7 = {
                text: _0x13bc13[_0x216d6a],
                x: this.width / 2 + 80 + _0x216d6a * 45,
                y: 25,
                stroke: 1,
                strokeColor: 9297,
                textColor: 14745599,
                size: 15,
                textAlign: "center"
              };
              let _0x59c19a = createLabel(_0x1cf1e7);
              _0x59c19a.background = true;
              _0x59c19a.backgroundColor = _0x41b092[_0x216d6a];
              _0x59c19a.touchEnabled = true;
              BC.addEvent(_0x59c19a, _0x59c19a, egret.TouchEvent.TOUCH_TAP, () => {
                filterTuzhi = _0x135de3[_0x216d6a];
                MFC.bubbleAlert.showAlert(_0x13bc13[_0x216d6a] + "过滤");
                this.showPetsByElem(0);
              });
              this.addChild(_0x59c19a);
            }
            testBtn = new eui.Button();
            testBtn.x = MFC.rootLayer.width / 2 + 260;
            testBtn.y = 13;
            testBtn.skinName = getTextBtnSkinName("属性关系");
            BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
              addGameLog("打开属性克制面板");
              MFC.moduleManager.openModule(1084, {
                type: 3
              });
            });
            this.parent.addChild(testBtn);
            _0x480b8d.call(this);
          };
        }
        if (preFight.PreFight) {
          var _0x9afcee = preFight.PreFight.prototype.stopMove;
          preFight.PreFight.prototype.stopMove = function (_0x36229b) {
            this.startTime = 99999999;
            return _0x9afcee.call(this, _0x36229b);
          };
        }
        if (preFight.PreFight.prototype.updateBagItems) {
          var _0x5f253e = preFight.PreFight.prototype.updateBagItems;
          preFight.PreFight.prototype.updateBagItems = function () {
            if (!this.oldPets) {
              this.oldPets = this.totalPets;
            }
            if (filterTuzhi != 0) {
              let _0xfad997 = xls.eggExchange.getItems().filter(_0x38223b => _0x38223b.exchangeLevel == filterTuzhi);
              if (filterTuzhi == 5) {
                _0xfad997 = xls.eggExchange.getItems().filter(_0x3d804b => _0x3d804b.exchangeLevel == filterTuzhi || _0x3d804b.exchangeLevel == 4 || _0x3d804b.exchangeLevel == 6);
              }
              this.totalPets = this.oldPets.filter(_0x1ae5bb => _0xfad997.find(_0x1337f9 => _0x1337f9.petShow == _0x1ae5bb.petId || _0x1ae5bb.petId == 2870 && _0x1337f9.petShow == 10775 || _0x1ae5bb.petId == 10200 && _0x1337f9.petShow == 10199 || _0x1ae5bb.petId == 1791 && _0x1337f9.petShow == 216 || _0x1ae5bb.petId == 3590 && _0x1337f9.petShow == 804 || _0x1ae5bb.petId == 1122 && _0x1337f9.petShow == 999 || _0x1ae5bb.petId == 10406 && _0x1337f9.petShow == 10861 || _0x1ae5bb.petId == 10862 && _0x1337f9.petShow == 10861));
            } else {
              this.totalPets = this.oldPets;
            }
            _0x5f253e.call(this);
          };
        }
        if (preFight.PreFightChooseElem.prototype.updateElems) {
          var _0x368fd4 = preFight.PreFightChooseElem.prototype.updateElems;
          preFight.PreFightChooseElem.prototype.updateElems = function (_0x5b7b24, _0x35340e) {
            if (filterTuzhi != 0) {
              let _0x2527af = xls.eggExchange.getItems().filter(_0x2118e9 => _0x2118e9.exchangeLevel == filterTuzhi);
              this.totalPets = PetManager.getInstance().getAllPets().filter(_0x5e2124 => _0x2527af.find(_0x518a3e => _0x518a3e.petShow == _0x5e2124.petId));
            } else {
              this.totalPets = PetManager.getInstance().getAllPets();
            }
            _0x5b7b24 = this.totalPets;
            return _0x368fd4.call(this, _0x5b7b24, _0x35340e);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/release/Release.js", function () {
        if (release.Release.prototype.childrenCreated) {
          var _0x4583cd = release.Release.prototype.childrenCreated;
          release.Release.prototype.childrenCreated = function () {
            testBtn = new eui.Button();
            testBtn.x = this.parent.width / 2 - 250;
            testBtn.y = 10;
            testBtn.skinName = getTextBtnSkinName("一键放生");
            BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
              window.nowTask = new ReleasePets();
              window.nowTask.start();
            });
            this.parent.addChild(testBtn);
            _0x4583cd.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/petProperty/PetProperty.js", function () {
        if (petProperty.PetProperty.prototype.childrenCreated) {
          var _0x2c180d = petProperty.PetProperty.prototype.childrenCreated;
          petProperty.PetProperty.prototype.childrenCreated = function () {
            testBtn = new eui.Button();
            testBtn.x = this.parent.width / 2 + 85;
            testBtn.y = -35;
            testBtn.skinName = getTextBtnSkinName("技能学习");
            BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
              window.nowTask = new LearnSkill();
              window.nowTask.start();
            });
            this.parent.addChild(testBtn);
            testBtn1 = new eui.Button();
            testBtn1.x = this.parent.width / 2 - 30;
            testBtn1.y = -35;
            testBtn1.skinName = getTextBtnSkinName("学习力分配");
            BC.addEvent(testBtn1, testBtn1, egret.TouchEvent.TOUCH_TAP, () => {
              window.nowTask = new learnAdd();
              window.nowTask.start();
            });
            this.parent.addChild(testBtn1);
            try {
              let _0x27928e = new Date(window.nowCheckBagPet.getTime * 1000);
              testTxt = createLabel({
                text: "获得时间 " + deden.DateUtil.dateFormat(_0x27928e, "yyyy-MM-dd hh:mm:ss"),
                y: 65,
                textColor: 9960957
              });
              testTxt.x = this.parent.width / 2 - 300;
              testTxt.y = 13;
              this.parent.addChild(testTxt);
            } catch (_0x3b5897) {}
            _0x2c180d.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/selectPet/SelectPet.js", function () {
        if (selectPet.SelectPet.prototype.childrenCreated) {
          var _0x1af58b = selectPet.SelectPet.prototype.childrenCreated;
          selectPet.SelectPet.prototype.childrenCreated = function () {
            testBtn = new eui.Button();
            testBtn.x = this.parent.width / 2 - 145;
            testBtn.y = -180;
            testBtn.skinName = getTextBtnSkinName("获   取");
            BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
              GlobalDispatcher.getInstance().dispatchEventWith("open_module", false, rongheData);
            });
            this.parent.addChild(testBtn);
            _0x1af58b.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/eggExchange/EggExchange.js", function () {
        if (eggExchange.EggExchangeListOpen.prototype.childrenCreated) {
          if (!xls.petEgg.hasLoaded) {
            xls.petEgg.load(() => {});
          }
          var _0x46d5a6 = eggExchange.EggExchangeListOpen.prototype.onClickItem;
          eggExchange.EggExchangeListOpen.prototype.onClickItem = function (_0x5d3bed) {
            testBtn = createLabel({
              name: "petexchangetip1firsttip",
              text: "",
              x: 230,
              y: 330,
              textColor: 16776960,
              size: 18,
              stroke: 1,
              strokeColor: 9297
            });
            this.parent.addChild(testBtn);
            if (_0x5d3bed && _0x5d3bed.item && _0x5d3bed.item.outPutEggs && xls.petEgg.getItem(_0x5d3bed.item.outPutEggs.split("_")[0])) {
              if (PetManager.getInstance().V_JudgePetOwnFromTable(xls.petEgg.getItem(_0x5d3bed.item.outPutEggs.split("_")[0]).petID)) {
                this.parent.$children.find(_0x7f60e7 => _0x7f60e7.$name == "petexchangetip1firsttip").text = "图鉴已解锁";
                this.parent.$children.find(_0x5a35ed => _0x5a35ed.$name == "petexchangetip1firsttip").textColor = 65280;
              } else {
                this.parent.$children.find(_0x1a509b => _0x1a509b.$name == "petexchangetip1firsttip").text = "图鉴未解锁";
                this.parent.$children.find(_0x37f507 => _0x37f507.$name == "petexchangetip1firsttip").textColor = 16711680;
              }
            }
            _0x46d5a6.call(this, _0x5d3bed);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/petEvo/PetEvo.js", function () {
        if (petEvo.PetEvo.prototype.init) {
          if (!xls.petEvo.hasLoaded) {
            xls.petEvo.load(() => {});
          }
          var _0x48b924 = petEvo.PetEvo.prototype.childrenCreated;
          petEvo.PetEvo.prototype.childrenCreated = function () {
            testBtn = createLabel({
              name: "firsttip",
              text: "",
              x: 20,
              y: 290,
              textColor: 16776960,
              size: 18,
              stroke: 1,
              strokeColor: 9297
            });
            testBtn2 = createLabel({
              name: "secondtip",
              text: "",
              x: 20,
              y: 270,
              textColor: 16776960,
              size: 18,
              stroke: 1,
              strokeColor: 9297
            });
            this.parent.addChild(testBtn);
            this.parent.addChild(testBtn2);
            _0x48b924.call(this);
          };
          var _0x2baf7e = petEvo.PetEvo.prototype.updatePet;
          petEvo.PetEvo.prototype.updatePet = function () {
            if (xls.petEvo.getItems().find(_0x38e0af => _0x38e0af.petID == this._currPetInfo.petId)) {
              if (PetManager.getInstance().getAllPets().find(_0x29ca5b => _0x29ca5b.petId == this._petEvoInfo.toPetID)) {
                this.parent.$children.find(_0x497fce => _0x497fce.$name == "firsttip").text = "背包已拥有此进化形态";
                this.parent.$children.find(_0x4d5ae6 => _0x4d5ae6.$name == "firsttip").textColor = 65280;
              } else {
                this.parent.$children.find(_0x26a6c3 => _0x26a6c3.$name == "firsttip").text = "背包未拥有此进化形态";
                this.parent.$children.find(_0x19cf1f => _0x19cf1f.$name == "firsttip").textColor = 16711680;
              }
              if (PetManager.getInstance().V_JudgePetOwnFromTable(this._petEvoInfo.toPetID)) {
                this.parent.$children.find(_0x4fa6ff => _0x4fa6ff.$name == "secondtip").text = "图鉴已拥有此进化形态";
                this.parent.$children.find(_0x4ef52a => _0x4ef52a.$name == "secondtip").textColor = 65280;
              } else {
                this.parent.$children.find(_0x228be8 => _0x228be8.$name == "secondtip").text = "图鉴未拥有此进化形态";
                this.parent.$children.find(_0x5f2785 => _0x5f2785.$name == "secondtip").textColor = 16711680;
              }
            }
            _0x2baf7e.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/braveTower/BraveTower.js", function () {
        if (braveTower.BraveTower) {
          var _0x50e8bf = braveTower.BraveTower.prototype.childrenCreated;
          braveTower.BraveTower.prototype.childrenCreated = function () {
            let _0x15d8a8 = new eui.Button();
            _0x15d8a8.x = 120;
            _0x15d8a8.y = 30;
            _0x15d8a8.skinName = getTextBtnSkinName("对战本层");
            BC.addEvent(_0x15d8a8, _0x15d8a8, egret.TouchEvent.TOUCH_TAP, () => {
              try {
                window.nowTask = new braveOfTower();
                window.nowTask.start();
              } catch (_0x562f69) {}
            });
            this.parent.addChild(_0x15d8a8);
            _0x50e8bf.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/personalCenter/PersonalCenter.js", function () {
        if (personalCenter.PersonalCenterSetup) {
          var _0x5ac693 = personalCenter.PersonalCenterSetup.prototype.childrenCreated;
          personalCenter.PersonalCenterSetup.prototype.childrenCreated = function () {
            let _0x10b467 = new eui.Button();
            _0x10b467.x = this.parent.width / 2 - _0x10b467.width / 2 + 10;
            _0x10b467.y = 50;
            _0x10b467.skinName = getTextBtnSkinName("令   牌");
            BC.addEvent(_0x10b467, _0x10b467, egret.TouchEvent.TOUCH_TAP, () => {
              try {
                let _0x2c17ee = document.createElement("input");
                document.body.appendChild(_0x2c17ee);
                const _0x509abd = {
                  mimiID: localStorage["mimiID" + MFC.userInfo.uid],
                  duid: localStorage["taomee-sdk-duid"]
                };
                let _0x5a4aec = _0x509abd;
                _0x2c17ee.setAttribute("value", JSON.stringify(_0x5a4aec));
                _0x2c17ee.select();
                if (document.execCommand("copy")) {
                  document.execCommand("copy");
                }
                document.body.removeChild(_0x2c17ee);
                MFC.bubbleAlert.showAlert("复制令牌参数成功!");
              } catch (_0x1bfc55) {
                MFC.bubbleAlert.showAlert("复制异常,请重新启动再尝试!");
              }
            });
            this.parent.addChild(_0x10b467);
            _0x5ac693.call(this);
          };
        }
      }, "undefined", "module");
      MFC.entryInfo.loadRes("resource/app/newActivities/NewActivities.js", function () {
        if (newActivities && newActivities.NewActivities) {
          newActivities.NewActivities.prototype.updateTabTypeRed = function () {
            return false;
          };
        }
      }, "undefined", "module");
      if (localStorage.getItem("setup1") === "true") {
        logger("开启声音");
        localStorage.setItem("IS_MUTE_" + MFC.userInfo.uid + "_all", false);
        localStorage.setItem("IS_MUTE_" + MFC.userInfo.uid + "_backgroud", false);
        localStorage.setItem("IS_MUTE_" + MFC.userInfo.uid + "_effects", false);
      } else {
        logger("关闭声音");
        localStorage.setItem("IS_MUTE_" + MFC.userInfo.uid + "_all", true);
        localStorage.setItem("IS_MUTE_" + MFC.userInfo.uid + "_backgroud", true);
        localStorage.setItem("IS_MUTE_" + MFC.userInfo.uid + "_effects", true);
      }
      logger("MFC.userInfo.uid" + MFC.userInfo.uid);
      clearInterval(timeMusic);
    }
  } catch (_0x35c800) {}
}, 200);
var ptChangeLists = null;
let realgetConfTimer = // TOLOOK
setInterval(() => {
  try {
    if (BaseSkinnableContainer.prototype.childrenCreated) {
      var _0x45ae99 = BaseSkinnableContainer.prototype.childrenCreated;
      BaseSkinnableContainer.prototype.childrenCreated = function () {
        if (this.$Component && this.$Component[1] == "PetListBarItemSkin") {
          ptChangeLists = this;
        }
        return _0x45ae99.call(this);
      };
      clearInterval(realgetConfTimer);
    }
  } catch (_0xd65e06) {
    logger(_0xd65e06);
  }
}, 200);
var xiangzi = 0;
document.title = "赛尔号启航 Echo登录器";
let timeID = // TOLOOK
setInterval(() => {
  try {
    if (UserManager.getInstance().userInfo) {
      let _0x515243 = UserManager.getInstance().userInfo;
      let _0x2e4423 = "当前状态:在线 用户:" + _0x515243.roleNick + " 【uid " + _0x515243.uid + "】 超No等级:" + _0x515243.vipLevel;
      document.title = _0x2e4423;
      MFC.bubbleAlert.showAlert("欢迎" + _0x515243.roleNick + "进入启航!");
      if (localStorage.getItem("setup2") === "true") {
        MFC.mapManager.userManager.hideOthers();
      } else {
        MFC.mapManager.userManager.showOthers();
      }
      if (localStorage.getItem("setup3") === "true") {
        MFC.partyManager.refuseInvite = 2;
      } else {
        MFC.partyManager.refuseInvite = 0;
      }
      var _0x1564b4 = new cs_set_invitation_status();
      if (localStorage.getItem("setup4") === "true") {
        _0x1564b4.status = MFC.userInfo.isInvitationPVP = 1;
      } else {
        _0x1564b4.status = MFC.userInfo.isInvitationPVP = 0;
      }
      MFC.online.send(_0x1564b4, function (_0x10c191) {
        if (_0x10c191) {
          MFC.userInfo.isInvitationPVP = _0x10c191.isInvitationPVP;
        }
      });
      let _0xc885bd = localStorage.getItem("setup5") === "true" ? "close" : "open";
      egret.localStorage.setItem(MFC.userInfo.uid + "_BattleEmoji", _0xc885bd);
      if (localStorage.getItem("selfwatch1") === "true") {
        if (MFC.userInfo.match_permissions - 1 != 0) {
          GlobalSocket.PROTOCOL_SOCKET.send(8199, {
            match_permissions: 1
          });
        }
      }
      if (localStorage.getItem("selfwatch2") === "true") {
        if (MFC.userInfo.match_permissions - 1 != 2) {
          GlobalSocket.PROTOCOL_SOCKET.send(8199, {
            match_permissions: 3
          });
        }
      }
      if (localStorage.getItem("selfwatch3") === "true") {
        if (MFC.userInfo.match_permissions - 1 != 1) {
          GlobalSocket.PROTOCOL_SOCKET.send(8199, {
            match_permissions: 2
          });
        }
      }
      let _0x43c61c = [8, 10, 12, 14, 16, 18, 20];
      let _0x30c0d3 = MFC.serverTimer.date;
      let _0x5c3fed = "" + _0x30c0d3.getFullYear() + _0x30c0d3.getMonth() + _0x30c0d3.getDate();
      let _0x3c1dc6 = _0x43c61c.splice(Math.floor((Number(_0x5c3fed) * 9301 + 49297) % 233280 / 233280 * _0x43c61c.length), 1)[0];
      let _0x5225c0 = _0x43c61c.splice(Math.floor((Number(_0x5c3fed + 1) * 9301 + 49297) % 233280 / 233280 * _0x43c61c.length), 1)[0];
      addGameLog("布莱克出现时间" + _0x3c1dc6 + "点和" + _0x5225c0 + "点");
      clearInterval(timeID);
      // TOLOOK
      setTimeout(() => {
        let _0x5673d6 = window.localStorage.getItem("clear_day");
        let _0x17f7a5 = new Date().getTime();
        if (_0x5673d6 == null || isMoreThanSevenDaysApart(_0x17f7a5, parseInt(_0x5673d6))) {
          MFC.alert.show(`您已经很久没有清理缓存了
 电脑手机可能占据过大存储空间
 会保存功能勾选和登录账号 
是否清理[会重新登录]?`, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x2d4a5d) {
            window.localStorage.setItem("clear_day", new Date().getTime());
          }, function (_0x1b40ef) {
            var _0x1e7f8d = MFC.alert.show("正在清理纹理缓存，请耐心等待...");
            var _0x216da5 = JSON.stringify(window.localStorage);
            MFC.stage.touchChildren = false;
            egret.localStorage.clear();
            ktx2Loader.clearCache().then(function () {
              _0x1e7f8d.hide();
              MFC.stage.touchChildren = true;
              _0x216da5 = JSON.parse(_0x216da5);
              Object.keys(_0x216da5).forEach(_0x358237 => {
                window.localStorage.setItem(_0x358237, _0x216da5[_0x358237]);
              });
              MFC.bubbleAlert.showAlert("缓存清理成功！");
              // TOLOOK
              setTimeout(() => {
                window.localStorage.setItem("clear_day", new Date().getTime());
                MFC.entryInfo.logout(true);
              }, 800);
            }).catch(function (_0x23282b) {
              MFC.stage.touchChildren = true;
              console.error("缓存清理失败", _0x23282b);
            });
            return;
          }]);
        }
      }, 2000);
    }
  } catch (_0x4dc254) {
    logger(_0x4dc254);
  }
}, 1000);
function isMoreThanSevenDaysApart(_0x4a4891, _0x33e9fa) {
  const _0x359fe4 = 86400000;
  const _0x54a3d7 = Math.abs(_0x4a4891 - _0x33e9fa);
  return _0x54a3d7 > _0x359fe4 * 7;
}
var pvpContent = "";
var petgroups = {};
var mergeItem = "";
var petfumo = [];
var rushHB = 0;
this.hbstatus = true;
if (window.location.href.startsWith("https://s.61.com")) {
  window.recv_message = function (_0x103eb8, _0x5ae76d) {
    if (_0x103eb8 == "sc_send_new_year_hongbao") {
      try {
        if (rushHB == 1) {
          let _0xf9ae8f = JSON.parse(_0x5ae76d.raw);
          addGameLog("抢红包啦~ 来自:" + _0xf9ae8f.roleNick);
          let _0xc4e128 = new window.cs_get_new_year_hongbao();
          const _0x3e0eb1 = {
            hongbaoId: _0xf9ae8f.hongbaoId,
            sendUid: _0xf9ae8f.uid
          };
          Object.assign(_0xc4e128, _0x3e0eb1);
          MFC.online.send(_0xc4e128);
        }
      } catch (_0x3b7c01) {
        logger(_0x3b7c01);
      }
    }
    if (_0x103eb8 == "sc_get_new_year_hongbao") {
      try {
        if (rushHB == 1) {
          let _0x124646 = JSON.parse(_0x5ae76d.raw);
          if (_0x124646.id == 7) {
            addGameLog("抢到了!");
          } else if (_0x124646.id == 6) {
            rushHB = 0;
            addGameLog("今日五次红包已经抢完啦");
          } else {
            addGameLog("没抢到:" + _0x124646.id);
          }
        }
      } catch (_0x563b66) {}
    }
    if (window.nowTask && window.nowTask.recvList && Array.isArray(window.nowTask.recvList)) {
      window.nowTask.recvList.forEach(_0x2e9d3e => {
        if (_0x2e9d3e.watchEventName === _0x103eb8) {
          if (!_0x2e9d3e.gameBody) {
            _0x2e9d3e.gameBody = [];
          }
          _0x2e9d3e.gameBody.push(_0x5ae76d);
        }
      });
    }
    try {
      if (_0x103eb8 == "on_user_manager_change" && (_0x5ae76d.key == "pvpPointWild" || _0x5ae76d.key == "pvpPoint")) {
        if (MFC.attr.getAttr(MFC.attrType.dailyActivityTaskStepStart + 10024 - 10000 - 1) == 3) {
          if (TaskUtils.GetRestTaskState(xls.activityTaskReset.getItem(10919)) == 1) {
            GlobalSocket.PROTOCOL_SOCKET.send(10497, {
              carnivalId: 10919
            });
          }
        }
        if (MFC.attr.getAttr(MFC.attrType.dailyActivityTaskStepStart + 10024 - 10000 - 1) == 5) {
          if (TaskUtils.GetRestTaskState(xls.activityTaskReset.getItem(10918)) == 1) {
            GlobalSocket.PROTOCOL_SOCKET.send(10497, {
              carnivalId: 10918
            });
          }
        }
        if (TaskUtils.GetRestTaskState(xls.activityTaskReset.getItem(10911)) == 1) {
          GlobalSocket.PROTOCOL_SOCKET.send(10497, {
            carnivalId: 10911
          });
        }
        if (TaskUtils.GetRestTaskState(xls.activityTaskReset.getItem(10910)) == 1) {
          GlobalSocket.PROTOCOL_SOCKET.send(10497, {
            carnivalId: 10910
          });
        }
      }
    } catch (_0x5878e6) {
      logger(_0x5878e6);
    }
    try {
      logger("接受", _0x103eb8, _0x5ae76d, eval(_0x103eb8).prototype.constructor.__cmd);
    } catch (_0x284054) {
      logger("事件读取cmd异常");
    }
    if (_0x103eb8 == "sc_get_mapBoss_data") {
      try {
        window.nowTask.reward = JSON.parse(_0x5ae76d.raw).reward;
      } catch (_0x11c1b5) {}
    }
    if (_0x103eb8 == "sc_notify_change_pet") {
      try {
        const _0x5a0f1a = JSON.parse(_0x5ae76d.raw);
        const _0x30a097 = _0x5a0f1a.pet;
        if (_0x30a097 && _0x30a097.level === 1) {
          window.nowTask.CatchPetDatas = _0x5a0f1a;
        }
      } catch (_0x3d7e05) {}
    }
    if (_0x103eb8 == "sc_get_campaign_pet_challenge_boss") {
      try {
        let _0x4672f1 = JSON.parse(_0x5ae76d.raw);
        let _0x457951 = _0x4672f1.todayLimitAttr.map(_0x429586 => petConfig.ElemTypesConfig.getDef(_0x429586).cn);
        addGameLog("当前极限挑战属性: " + _0x457951.join(","));
      } catch (_0x548c34) {}
    }
    if (_0x103eb8 == "sc_get_effort_value") {
      try {
        logger("监听到了学习力!!!");
        let _0x5a9ec0 = JSON.parse(_0x5ae76d.raw);
        if (window.addPet != null) {
          window.addPet.haveLearns = _0x5a9ec0.curEffortValue;
        }
      } catch (_0x462e7c) {}
    }
    if (_0x103eb8 == "sc_pvp_notify_enter_battle" && (JSON.parse(_0x5ae76d.raw).pvpType == 2001 || JSON.parse(_0x5ae76d.raw).pvpType == 5 || JSON.parse(_0x5ae76d.raw).pvpType == 2000 || JSON.parse(_0x5ae76d.raw).pvpType == 2)) {
      dianfengstatus = true;
    }
    if (_0x103eb8 == "sc_battle_notify_round_result") {
      // TOLOOK
      setTimeout(() => {
        try {
          let _0x5ec09b = ClientOPManager.getInstance().result.playerInfos[0].getPetInfos();
          let _0x271c80 = ClientOPManager.getInstance().result.playerInfos[1].getOPPetInfo().elemType;
          _0x5ec09b.forEach(_0x1182b2 => {
            let _0x192771 = ptChangeLists.parent.$children.find(_0x1994de => _0x1994de.$name == "PetListBarItem_" + _0x1182b2.petID);
            if (_0x192771) {
              let _0x11ce22 = petConfig.RelationManager.getInstance().getRelationValue(_0x271c80, _0x1182b2.elemType);
              let _0x13bfa9 = petConfig.RelationManager.getInstance().getRelationValue(_0x1182b2.elemType, _0x271c80);
              _0x11ce22 = getRealAndBeReal(_0x11ce22);
              _0x13bfa9 = getRealAndBeReal(_0x13bfa9);
              if (_0x192771.$children.length > 12) {
                _0x192771.$children[11].text = _0x13bfa9.text + " >";
                _0x192771.$children[11].textColor = _0x13bfa9.color;
                _0x192771.$children[12].text = "< " + _0x11ce22.text;
                _0x192771.$children[12].textColor = _0x11ce22.color;
              } else {
                const _0x582f74 = {
                  text: _0x13bfa9.text + " >",
                  y: -40,
                  bold: true,
                  stroke: 1,
                  strokeColor: 9297,
                  textColor: _0x13bfa9.color,
                  size: 14,
                  fontFamily: "楷体",
                  bold: 1,
                  textAlign: "center"
                };
                let _0x124e5c = createLabel(_0x582f74);
                _0x124e5c.x = _0x192771.width / 2 - _0x124e5c.width / 2;
                const _0x40741a = {
                  text: "< " + _0x11ce22.text,
                  y: -20,
                  bold: true,
                  stroke: 1,
                  strokeColor: 9297,
                  textColor: _0x11ce22.color,
                  size: 14,
                  fontFamily: "楷体",
                  bold: 1,
                  textAlign: "center"
                };
                let _0x490628 = createLabel(_0x40741a);
                _0x490628.x = _0x192771.width / 2 - _0x490628.width / 2;
                _0x192771.addChild(_0x124e5c);
                _0x192771.addChild(_0x490628);
              }
            }
          });
        } catch (_0x2b2e6c) {}
      }, 1400);
      logger("##############对战结果###############", JSON.parse(_0x5ae76d.raw).result.result);
      logger("对战OP!" + JSON.parse(_0x5ae76d.raw).result.playerInfos.find(_0x5f025c => _0x5f025c.uid == MFC.userInfo.uid).nextRoundOP);
      if (JSON.parse(_0x5ae76d.raw).result.result != 0) {
        if (pokers != null) {
          let _0x4cd92c = // TOLOOK
          setInterval(() => {
            let _0x3a21d8 = MFC.rootLayer.removeChild(pokers);
            if (_0x3a21d8 != null) {
              pokers.y = 120;
              pokers.x = 20;
              pokers.oldy = null;
              pokers.oldx = null;
              pokers.skinName = getTextBtnNullImageSkinName("巅峰记牌器已开启");
              MFC.rootLayer.addChild(pokers);
              clearInterval(_0x4cd92c);
            }
          }, 1000);
        }
      }
      if (JSON.parse(_0x5ae76d.raw).result.result == 1 || JSON.parse(_0x5ae76d.raw).result.result == 2) {
        dianfengstatus = false;
      }
      try {
        if (dianfengstatus) {
          if (JSON.parse(_0x5ae76d.raw).result.roundNum == 0) {
            petgroups = new Map();
            let _0x3471dd = JSON.parse(_0x5ae76d.raw).result.playerInfos;
            pvpContent = _0x3471dd[0].uid === MFC.userInfo.uid ? _0x3471dd[1] : _0x3471dd[0];
            if (_0x3471dd[0].uid === MFC.userInfo.uid) {
              if (_0x3471dd[0].crtPetIndex == -1) {
                _0x3471dd[0].crtPetIndex = 0;
              }
            } else if (_0x3471dd[1].crtPetIndex == -1) {
              _0x3471dd[1].crtPetIndex = 0;
            }
            let _0x2650db = _0x3471dd[0].uid === MFC.userInfo.uid ? _0x3471dd[0].petInfos[_0x3471dd[0].crtPetIndex].elemType : _0x3471dd[1].petInfos[_0x3471dd[1].crtPetIndex].elemType;
            let _0x21940a = JSON.parse(_0x5ae76d.raw).result.processQueue[0].uid === MFC.userInfo.uid ? JSON.parse(_0x5ae76d.raw).result.processQueue[1].affects : JSON.parse(_0x5ae76d.raw).result.processQueue[0].affects;
            let _0x5a9077 = _0x21940a.filter(function (_0x3bf9a3) {
              return _0x3bf9a3.id >= 110001 && _0x3bf9a3.time == "petIn" && xls.enchanting.getItems().filter(function (_0x3adedb) {
                return _0x3adedb.Affects.slice(0, 6).indexOf(_0x3bf9a3.id) !== -1;
              }).length > 0;
            });
            let _0x460969;
            if (_0x5a9077.length > 0) {
              _0x460969 = xls.enchanting.getItems().filter(function (_0x2b8a27) {
                return _0x2b8a27.Affects.slice(0, 6).indexOf(_0x5a9077[0].id) !== -1;
              })[0].name;
            } else {
              _0x460969 = "无。";
            }
            pvpContent = pvpContent.petInfos;
            outputStr = "";
            for (var _0x48688a = 0; _0x48688a < pvpContent.length; _0x48688a++) {
              if (pvpContent[_0x48688a].getTime) {
                let _0x4a42da = pvpContent[_0x48688a].getTime.toString();
                petgroups.set(_0x4a42da, pvpContent[_0x48688a]);
                petgroups.get(_0x4a42da).name = PetConfig.getDef(pvpContent[_0x48688a].petID).name;
                petgroups.get(_0x4a42da).kezhi = petConfig.RelationManager.getInstance().getRelationValue(_0x2650db, pvpContent[_0x48688a].elemType);
                petgroups.get(_0x4a42da).fumo = _0x460969;
                if (_0x460969.indexOf("无") == -1) {
                  petfumo[_0x4a42da] = _0x460969;
                }
              }
            }
            if (pokers != null) {
              outputStr = "";
              let _0x577f02 = Array.from(petgroups.keys());
              _0x577f02.forEach(_0x51b655 => {
                outputStr = outputStr + ("\n" + PetConfig.getDef(petgroups.get(_0x51b655).petID).name + " HP: " + petgroups.get(_0x51b655).crtHp + " 伤害系数:" + petgroups.get(_0x51b655).kezhi + " 附魔:" + petgroups.get(_0x51b655).fumo);
              });
              MFC.rootLayer.removeChild(pokers);
              pokers.oldy = null;
              pokers.oldx = null;
              if (pokers.definex) {
                pokers.x = pokers.definex;
              } else {
                pokers.x = MFC.rootLayer.width / 2 - pokers.width / 2;
              }
              if (pokers.definey) {
                pokers.y = pokers.definey;
              } else {
                MFC.rootLayer.height / 2;
              }
              pokers.skinName = getTextBtnNullImageSkinName(outputStr);
              MFC.rootLayer.addChild(pokers);
            }
          } else {
            let _0x56eb79 = JSON.parse(_0x5ae76d.raw).result.playerInfos;
            pvpContent = _0x56eb79[0].uid === MFC.userInfo.uid ? _0x56eb79[1] : _0x56eb79[0];
            pvpContent = pvpContent.petInfos;
            if (_0x56eb79[0].uid === MFC.userInfo.uid) {
              if (_0x56eb79[0].crtPetIndex == -1) {
                _0x56eb79[0].crtPetIndex = 0;
              }
            } else if (_0x56eb79[1].crtPetIndex == -1) {
              _0x56eb79[1].crtPetIndex = 0;
            }
            let _0x730a45 = _0x56eb79[0].uid === MFC.userInfo.uid ? _0x56eb79[0].petInfos[_0x56eb79[0].crtPetIndex].elemType : _0x56eb79[1].petInfos[_0x56eb79[1].crtPetIndex].elemType;
            let _0x36e855 = [];
            if (JSON.parse(_0x5ae76d.raw).result.processQueue[0].uid === MFC.userInfo.uid) {
              if (JSON.parse(_0x5ae76d.raw).result.processQueue[1]) {
                _0x36e855 = JSON.parse(_0x5ae76d.raw).result.processQueue[1].affects;
              }
            } else if (JSON.parse(_0x5ae76d.raw).result.processQueue[0]) {
              _0x36e855 = JSON.parse(_0x5ae76d.raw).result.processQueue[0].affects;
            }
            let _0x1ffcb1 = _0x36e855.filter(function (_0x503b10) {
              return _0x503b10.id >= 110001 && _0x503b10.time == "petIn" && xls.enchanting.getItems().filter(function (_0x2f530f) {
                return _0x2f530f.Affects.slice(0, 6).indexOf(_0x503b10.id) !== -1;
              }).length > 0;
            });
            let _0x35b7ef;
            if (_0x1ffcb1.length > 0) {
              _0x35b7ef = xls.enchanting.getItems().filter(function (_0x4f98bf) {
                return _0x4f98bf.Affects.slice(0, 6).indexOf(_0x1ffcb1[0].id) !== -1;
              })[0].name;
            } else {
              _0x35b7ef = "无。";
            }
            for (var _0x48688a = 0; _0x48688a < pvpContent.length; _0x48688a++) {
              if (pvpContent[_0x48688a].getTime) {
                let _0x5a69fd = pvpContent[_0x48688a].getTime.toString();
                petgroups.set(_0x5a69fd, pvpContent[_0x48688a]);
                petgroups.get(_0x5a69fd).name = PetConfig.getDef(pvpContent[_0x48688a].petID).name;
                petgroups.get(_0x5a69fd).kezhi = petConfig.RelationManager.getInstance().getRelationValue(_0x730a45, pvpContent[_0x48688a].elemType);
                petgroups.get(_0x5a69fd).fumo = petfumo[_0x5a69fd] !== undefined ? petfumo[_0x5a69fd] : "无。";
                if (_0x35b7ef.indexOf("无") == -1) {
                  petfumo[_0x5a69fd] = _0x35b7ef;
                }
              }
            }
            if (pokers != null) {
              outputStr = "";
              if (JSON.parse(_0x5ae76d.raw).result.processQueue.length == 1 && JSON.parse(_0x5ae76d.raw).result.processQueue[0].uid !== MFC.userInfo.uid) {
                let _0x35a64c = JSON.parse(_0x5ae76d.raw).result.processQueue[0].uid == MFC.userInfo.uid ? JSON.parse(_0x5ae76d.raw).result.processQueue[1].opInfo.petIndex : JSON.parse(_0x5ae76d.raw).result.processQueue[0].opInfo.petIndex;
                let _0x33ad68 = play[0].uid == MFC.userInfo.uid ? play[1].petInfos[_0x35a64c].getTime : play[0].petInfos[_0x35a64c].getTime;
                let _0x1e1e7d = _0x33ad68.toString();
                if (_0x35b7ef.indexOf("无") == -1) {
                  petfumo[_0x1e1e7d] = _0x35b7ef;
                }
              } else {
                let _0x4d600d = Array.from(petgroups.keys());
                _0x4d600d.forEach(_0x5ee1f9 => {
                  outputStr = outputStr + ("\n" + PetConfig.getDef(petgroups.get(_0x5ee1f9).petID).name + " HP: " + petgroups.get(_0x5ee1f9).crtHp + " 伤害系数:" + petgroups.get(_0x5ee1f9).kezhi + " 附魔:" + petgroups.get(_0x5ee1f9).fumo);
                });
                MFC.rootLayer.removeChild(pokers);
                pokers.oldy = null;
                pokers.oldx = null;
                if (pokers.definex) {
                  pokers.x = pokers.definex;
                } else {
                  pokers.x = MFC.rootLayer.width / 2 - pokers.width / 2;
                }
                if (pokers.definey) {
                  pokers.y = pokers.definey;
                } else {
                  MFC.rootLayer.height / 2;
                }
                pokers.skinName = getTextBtnNullImageSkinName(outputStr);
                MFC.rootLayer.addChild(pokers);
              }
            }
          }
        }
      } catch (_0x166507) {
        logger(_0x166507);
      }
    }
  };
  window.send_message = function (_0x1af0e0, _0x6e4eba) {
    try {
      logger("发送", _0x1af0e0, _0x6e4eba, eval(_0x1af0e0).prototype.constructor.__cmd);
    } catch (_0x5c23f9) {
      logger(_0x5c23f9);
    }
  };
  var intervalId = // TOLOOK
  setInterval(listen_socket, 500);
  function listen_socket() {
    console.log("当前intervalId:" + intervalId);
    const _0x589ec7 = {
      KelAZ: "undefined",
      BsONg: function (_0x19bcc5, _0x4c6f46) {
        return _0x19bcc5 !== _0x4c6f46;
      },
      Ylsoc: function (_0x1641b6, _0x347dea) {
        return _0x1641b6 !== _0x347dea;
      },
      ZtiHW: ".egret-player"
    };
    if (typeof GlobalSocket !== _0x589ec7.KelAZ && _0x589ec7.BsONg(typeof GlobalSocket.PROTOCOL_SOCKET, "undefined") && typeof GlobalSocket.PROTOCOL_SOCKET.socket !== "undefined" && _0x589ec7.Ylsoc(typeof GlobalSocket.PROTOCOL_SOCKET.socket.socket, _0x589ec7.KelAZ) && typeof GlobalSocket.PROTOCOL_SOCKET.socket.socket.socket !== "undefined") {
      logger("hook封包 成功 " + intervalId);
      if (!winLog) {
        produceLog();
      }
      clearInterval(intervalId);
      $(_0x589ec7.ZtiHW).css("z-index", 0);
      intervalId = null;
      let _0x3f2ab4 = GlobalSocket.PROTOCOL_SOCKET.socket.socket.socket;
      _0x3f2ab4.onmessage = new Proxy(_0x3f2ab4.onmessage, {
        apply: function (_0x484ea3, _0x4f946d, _0x54e104) {
          try {
            let _0x4c01af = _0x54e104[0].data;
            let _0x3015b2 = new DataView(_0x4c01af);
            let _0x35a3eb = _0x3015b2.getUint32(8, true);
            let _0x249705 = new TextDecoder().decode(_0x4c01af.slice(25));
            let _0x145d60 = ProtocolUtils._sc_cmds[Number(_0x35a3eb)].prototype.__class__;
            const _0xd66437 = {
              raw: _0x249705
            };
            window.recv_message(_0x145d60, _0xd66437);
          } catch (_0x301c07) {}
          return _0x484ea3.apply(_0x4f946d, _0x54e104);
        }
      });
      _0x3f2ab4.send = new Proxy(_0x3f2ab4.send, {
        apply: function (_0x331db1, _0x52ce18, _0x510f30) {
          try {
            let _0x67d66e = _0x510f30[0];
            const _0x30056c = new DataView(_0x67d66e);
            const _0x3e6e31 = _0x67d66e.slice(34);
            let _0x117d0e = new TextDecoder().decode(_0x3e6e31);
            let _0x3a60f4 = _0x30056c.getUint32(17, true);
            let _0x3f6477 = ProtocolUtils._cs_cmds[Number(_0x3a60f4)].prototype.__class__;
            window.send_message(_0x3f6477, _0x117d0e);
          } catch (_0x569f91) {}
          return _0x331db1.apply(_0x52ce18, _0x510f30);
        }
      });
      _0x3f2ab4.close = new Proxy(_0x3f2ab4.close, {
        apply: function (_0x1de42e, _0x4cfd95, _0x4a5689) {
          logger("socket 断开!");
          GlobalSocket.PROTOCOL_SOCKET.socket.socket.socket = undefined;
          intervalId = // TOLOOK
          setInterval(listen_socket, 100);
          window.gameLog = null;
          return _0x1de42e.apply(_0x4cfd95, _0x4a5689);
        }
      });
      let _0x5e87bb;
      var _0xb10fbc = GlobalDispatcher.prototype.dispatchEventWith;
      GlobalDispatcher.prototype.dispatchEventWith = function (_0x51e846, _0x4ffdc1, _0x2eece4) {
        try {
          if (_0x51e846 == "open_module" && _0x2eece4.id === 257) {
            addGameLog("当前天赋药历史使用第" + MFC.attr.getAttr(MFC.attrType.foreverNatureReformTimes) + "瓶\n距离31保底天赋还剩余" + (6 - MFC.attr.getAttr(MFC.attrType.foreverNatureReformTimes)) + "瓶");
          }
          try {
            if (rongheStatus) {
              if (_0x51e846 == "show_panel" && _0x2eece4.name == "pve.Pve" && _0x2eece4.data.type == 1 && !_0x2eece4.RedictC && xls.pvePlanet.getItem(_0x2eece4.data.args).canCatch) {
                RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
                  GlobalDispatcher.getInstance().dispatchEventWith("clear_module_bg", false, {
                    type: 2,
                    id: 215
                  });
                  var _0x16a922 = SimpleAlertUi({});
                  let _0x142801 = createLabel({
                    text: "确定通过助手捕捉吗",
                    textColor: 16776960,
                    x: 30,
                    y: 70
                  });
                  _0x142801.x = _0x16a922.width / 2 - _0x142801.width / 2;
                  _0x16a922.addChild(_0x142801);
                  _0x16a922.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
                    _0x2eece4.RedictC = 1;
                    GlobalDispatcher.getInstance().dispatchEventWith(_0x51e846, _0x4ffdc1, _0x2eece4);
                  }, function () {
                    _0x2eece4.RedictC = 0;
                    let _0x2df88d = xls.pvePlanet.getItem(_0x2eece4.data.args).bossID;
                    if (_0x2df88d.indexOf("_") != -1) {
                      window.noLevelCatchPets = {};
                      window.noLevelCatchPets.bossID = _0x2df88d;
                      window.noLevelCatchPets.levelId = _0x2eece4.data.args;
                    } else {
                      window.noLevelCatchPets = null;
                    }
                    window.nowTask = new LevelCatch();
                    window.nowTask.start();
                  }], null);
                  _0x16a922.showAlert();
                });
                return;
              }
            }
            if (_0x51e846 == "open_module" && _0x2eece4.id === 242 && _0x2eece4.data.hasOwnProperty("lvLimit") && _0x2eece4.data.hasOwnProperty("filter")) {
              const _0x275237 = {
                type: 0,
                id: _0x2eece4.data.ids[0]
              };
              const _0x1ab8df = {
                id: 243,
                data: _0x275237
              };
              rongheData = _0x1ab8df;
            }
          } catch (_0x2d7e3b) {
            logger(_0x2d7e3b);
          }
          try {
            if (rongheStatus) {
              if (_0x51e846 == "obtain_item_click_item" && _0x2eece4.type == 1) {
                const _0x39d773 = {
                  id: _0x2eece4.id,
                  num: _0x2eece4.num
                };
                mergeItem = _0x39d773;
              }
              if (_0x51e846 == "on_show_panel_complete" && _0x2eece4.data.type == 1 && _0x2eece4.name == "obtainItem.ObtainItem") {
                const _0x5a679e = {
                  id: _0x2eece4.data.id,
                  num: 0
                };
                mergeItem = _0x5a679e;
              }
              if (_0x51e846 == "hide_panel" && _0x2eece4.name == "battleEndPanel.BattleEndPanel") {
                _0x5e87bb = false;
              }
              if (_0x51e846 == "update_pve" && _0x2eece4.type == 1) {
                _0x5e87bb = true;
              }
              if (_0x5e87bb) {
                if (_0x51e846 == "show_panel" && _0x2eece4.name == "pve.Pve" && _0x2eece4.data.type == 1 && !_0x2eece4.doneMerge && !_0x2eece4.data.result && !_0x2eece4.data.state && !xls.pvePlanet.getItem(_0x2eece4.data.args).canCatch) {
                  logger("前往融合", _0x2eece4.data.args, mergeItem);
                  RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
                    GlobalDispatcher.getInstance().dispatchEventWith("clear_module_bg", false, {
                      type: 2,
                      id: 215
                    });
                    var _0x39dbda = SimpleAlertUi({
                      width: 360,
                      height: 320
                    });
                    let _0x290c4b = createLabel({
                      text: "融合便捷助手",
                      y: 20
                    });
                    _0x290c4b.x = _0x39dbda.width / 2 - _0x290c4b.width / 2;
                    _0x39dbda.addChild(_0x290c4b);
                    let _0x2e914b = createLabel({
                      text: xls.pvePlanet.getItem(_0x2eece4.data.args).planet_name + " | " + xls.pvePlanet.getItem(_0x2eece4.data.args).levelName,
                      textColor: 16776960,
                      y: _0x290c4b.y + _0x290c4b.height + 20
                    });
                    _0x2e914b.x = _0x39dbda.width / 2 - _0x2e914b.width / 2;
                    _0x39dbda.addChild(_0x2e914b);
                    let _0xcbc9a1 = createLabel({
                      text: xls.item.getItem(mergeItem.id).name,
                      y: _0x2e914b.y + _0x2e914b.height + 20,
                      bold: true,
                      x: 20,
                      textColor: 16711765
                    });
                    _0x39dbda.addChild(_0xcbc9a1);
                    const _0x45b897 = {
                      text: "合成整件需: " + mergeItem.num + "个",
                      y: _0x2e914b.y + _0x2e914b.height + 20,
                      x: _0x39dbda.width / 2 + 15,
                      textColor: 16776960
                    };
                    let _0x165d72 = createLabel(_0x45b897);
                    _0x39dbda.addChild(_0x165d72);
                    let _0x40f21e = getSeerItemNum(mergeItem.id);
                    const _0x31f1b2 = {
                      text: "拥有数: " + _0x40f21e,
                      y: _0x165d72.height + _0x165d72.y + 20,
                      x: 20,
                      textColor: 16776960
                    };
                    let _0x3ca146 = createLabel(_0x31f1b2);
                    _0x39dbda.addChild(_0x3ca146);
                    let _0x231a2b = createLabel({
                      text: "关卡消耗电池数: " + xls.pvePlanet.getItem(_0x2eece4.data.args).costEnergy.split("_")[0],
                      y: _0x165d72.height + _0x165d72.y + 20,
                      bold: true,
                      x: _0x39dbda.width / 2 + 15,
                      textColor: 16776960
                    });
                    _0x39dbda.addChild(_0x231a2b);
                    const _0x196336 = {
                      text: "----------------------------",
                      y: _0x231a2b.height + _0x231a2b.y + 10,
                      x: 20,
                      textColor: 16776960
                    };
                    let _0x39a3cc = createLabel(_0x196336);
                    _0x39dbda.addChild(_0x39a3cc);
                    let _0x5e3143 = createLabel({
                      text: "拥有电池数: " + UserManager.getInstance().userInfo.curEnergy,
                      x: 20,
                      y: _0x39a3cc.height + _0x39a3cc.y + 5,
                      textColor: 16776960
                    });
                    _0x5e3143.x = _0x39dbda.width / 2 - _0x5e3143.width / 2 - 10;
                    _0x39dbda.addChild(_0x5e3143);
                    const _0x264cac = {
                      text: "获取数量  ==>",
                      x: 77,
                      y: _0x39dbda.height / 1.55 + 6,
                      textColor: 16776960
                    };
                    let _0x5f28a8 = createLabel(_0x264cac);
                    _0x39dbda.addChild(_0x5f28a8);
                    const _0x48ff5f = {
                      prompt: "获取数量",
                      x: _0x39dbda.width / 2 + 15,
                      y: _0x39dbda.height / 1.55,
                      width: 100
                    };
                    let _0x275ccc = createEdit(_0x48ff5f);
                    _0x39dbda.addChild(_0x275ccc);
                    _0x39dbda.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
                      _0x2eece4.doneMerge = 1;
                      const _0x1f5ca7 = {
                        type: 2,
                        id: 215,
                        hasOpen: false
                      };
                      GlobalDispatcher.getInstance().dispatchEventWith("set_module_bg", false, _0x1f5ca7);
                      GlobalDispatcher.getInstance().dispatchEventWith(_0x51e846, _0x4ffdc1, _0x2eece4);
                    }, function () {
                      GlobalDispatcher.getInstance().dispatchEventWith("close_module", false, {
                        id: 215
                      });
                      if (isNaN(parseInt(_0x275ccc.text)) || parseInt(_0x275ccc.text) <= 0) {
                        MFC.bubbleAlert.showAlert("请输入有效获取数量");
                        return true;
                      }
                      window.nowTask = new MergeHelper();
                      window.nowTask.levelId = _0x2eece4.data.args;
                      window.nowTask.levelName = xls.pvePlanet.getItem(_0x2eece4.data.args).levelName;
                      window.nowTask.userBattry = parseInt(xls.pvePlanet.getItem(_0x2eece4.data.args).costEnergy.split("_")[0]);
                      window.nowTask.goalItem = {
                        itemId: mergeItem.id,
                        name: xls.item.getItem(mergeItem.id).name,
                        num: mergeItem.num,
                        needNum: parseInt(_0x275ccc.text)
                      };
                      window.nowTask.start();
                    }], null);
                    _0x39dbda.showAlert();
                  });
                  return;
                }
              }
            }
          } catch (_0x227d1d) {}
          if (_0x51e846 == "pet_bag_click_cell") {
            window.nowCheckBagPet = _0x2eece4;
          }
          if (_0x51e846 == "hide_panel" && JSON.stringify(_0x2eece4).indexOf("petProperty.PetProperty") != -1) {
            window.nowCheckBagPet = null;
          }
          if (_0x2eece4.key == "ChooseLevel" && _0x2eece4.targetName == "ChooseLevelItem") {
            logger("直接前往");
            if (_0x2eece4.panel._crtData.bossID.indexOf("_") != -1) {
              window.noLevelCatchPets = {};
              window.noLevelCatchPets.levelId = _0x2eece4.panel._crtData.id;
              window.noLevelCatchPets.bossID = _0x2eece4.panel._crtData.bossID;
            } else {
              window.noLevelCatchPets = null;
            }
          }
          if (_0x2eece4.key == "ChooseLevel" && _0x2eece4.targetName == "preBtn") {
            window.noLevelCatchPets = null;
          }
          if (_0x2eece4.key == "ChooseLevel" && _0x2eece4.targetName == "nextBtn") {
            if (_0x2eece4.panel._crtData.bossID.indexOf("_") != -1) {
              window.noLevelCatchPets = {};
              window.noLevelCatchPets.levelId = _0x2eece4.panel._crtData.id;
              window.noLevelCatchPets.bossID = _0x2eece4.panel._crtData.bossID;
            } else {
              window.noLevelCatchPets = null;
            }
          }
          if (_0x2eece4.key == "ChoosePlanet" && _0x2eece4.targetName == "Planet") {
            let _0x32f36d = xls.pvePlanet.getItem(_0x2eece4.panel._data.level).bossID;
            if (_0x32f36d.indexOf("_") != -1) {
              window.noLevelCatchPets = {};
              window.noLevelCatchPets.bossID = _0x32f36d;
              window.noLevelCatchPets.levelId = _0x2eece4.panel._data.level;
            } else {
              window.noLevelCatchPets = null;
            }
          }
          if (JSON.stringify(_0x2eece4).includes("teamDefend.TeamDefend")) {
            ;
            (async function () {
              let _0x4a7bbf = new window.cs_get_campaign_pet_challenge_boss();
              Object.assign(_0x4a7bbf, {});
              MFC.online.send(_0x4a7bbf);
            })();
          }
        } catch (_0x425e5a) {}
        _0xb10fbc.call(this, _0x51e846, _0x4ffdc1, _0x2eece4);
      };
      var _0x1860a1;
      var _0x3fa7bb = egret.web.WebTouchHandler.prototype;
      _0x1860a1 = _0x3fa7bb.getLocation;
      _0x3fa7bb.getLocation = function (_0x5a02ef) {
        nnnn = this;
        var _0x46005e = _0x1860a1.call(this, _0x5a02ef);
        return _0x46005e;
      };
      var _0x3394c1 = rewardManager.RewardManager.prototype.showReward;
      rewardManager.RewardManager.prototype.showReward = function () {
        const _0x5d5bcc = [100236, 100237, 100238, 100239, 100240, 100241, 100777, 100272, 100021, 100014, 100015, 100016, 100017, 100029, 100030, 100031, 100076, 100077, 100078, 100191, 100193, 100195, 100313, 100315];
        if (this.list.length > 0 && this.list[0].data.length > 0) {
          if (_0x5d5bcc.includes(this.list[0].data[0].i) && this.list[0].display == 1) {
            this.list.shift();
          } else {
            _0x3394c1.call(this);
          }
        } else {
          _0x3394c1.call(this);
        }
      };
      var _0x311397 = BasicRoleInfoBar.prototype.updateAffect;
      BasicRoleInfoBar.prototype.updateAffect = function (_0x5f563e, _0x2af674) {
        try {
          if (this.isLeft) {
            if (this.labelLevel.text.indexOf("LV:") !== -1) {
              hp1.text = "¾血线: " + this._data.hp / 4 * 3;
              hp2.x = hp1.x + hp1.width + 10;
              hp2.text = "¼血线: " + this._data.hp / 4;
            }
          } else if (this.labelLevel.text.indexOf("LV:") !== -1) {
            hp4.text = "¼血线: " + this._data.hp / 4;
            hp4.x = this.parent.width - 77 - hp4.width;
            hp3.text = "¾血线: " + this._data.hp / 4 * 3;
            hp3.x = hp4.x - 10 - hp3.width;
          }
        } catch (_0x5f1c4b) {}
        _0x311397.call(this, _0x5f563e, _0x2af674);
      };
      BattlePanel.prototype.setRealationImg = function (_0x144ee2) {
        try {
          if (_0x144ee2) {
            if (_0x144ee2[0].getOPPetInfo() && _0x144ee2[1].getOPPetInfo()) {
              this.relationImage.visible = false;
              var _0x22976a = petConfig.RelationManager.getInstance().getRelationValue(_0x144ee2[0].getOPPetInfo().getElemType(), _0x144ee2[1].getOPPetInfo().getElemType());
              if (_0x22976a == 0) {
                relation1.text = "无效=>" + _0x22976a;
                relation1.textColor = 16777215;
              } else if (_0x22976a < 1) {
                relation1.text = "微弱=>" + _0x22976a;
                relation1.textColor = 16777215;
              } else if (_0x22976a == 1) {
                relation1.text = "普通=>" + _0x22976a;
                relation1.textColor = 16776960;
              } else {
                relation1.text = "克制=>" + _0x22976a;
                relation1.textColor = 16711680;
              }
              var _0x2c7594 = petConfig.RelationManager.getInstance().getRelationValue(_0x144ee2[1].getOPPetInfo().getElemType(), _0x144ee2[0].getOPPetInfo().getElemType());
              if (_0x2c7594 == 0) {
                relation2.text = _0x2c7594 + "<=无效";
                relation2.textColor = 16777215;
              } else if (_0x2c7594 < 1) {
                relation2.text = _0x2c7594 + "<=微弱";
                relation2.textColor = 16777215;
              } else if (_0x2c7594 == 1) {
                relation2.text = _0x2c7594 + "<=普通";
                relation2.textColor = 16776960;
              } else {
                relation2.text = _0x2c7594 + "<=克制";
                relation2.textColor = 16711680;
              }
            } else {
              this.relationImage.visible = false;
            }
            relation1.x = (this.stage.$stageWidth - relation1.width) / 2;
            relation2.x = (this.stage.$stageWidth - relation2.width) / 2;
          } else {
            relation1.text = "";
            relation2.text = "";
          }
        } catch (_0x4b76fe) {}
      };
      var _0x43e74e = BasicRoleInfoBar.prototype._childrenCreated;
      BasicRoleInfoBar.prototype._childrenCreated = function () {
        hp1 = new eui.Label();
        hp2 = new eui.Label();
        hp3 = new eui.Label();
        hp4 = new eui.Label();
        hp1.lineSpacing = hp2.lineSpacing = hp3.lineSpacing = hp4.lineSpacing = 3;
        hp1.size = hp2.size = hp3.size = hp4.size = 14;
        hp1.text = hp2.text = hp3.text = hp4.text = "";
        hp1.textColor = hp3.textColor = 65280;
        hp1.bold = hp2.bold = hp3.bold = hp4.bold = true;
        hp1.stroke = hp2.stroke = hp3.stroke = hp4.stroke = 1;
        hp1.strokeColor = hp2.strokeColor = hp3.strokeColor = hp4.strokeColor = 9297;
        hp1.fontFamily = hp2.fontFamily = hp3.fontFamily = hp4.fontFamily = "楷体";
        hp1.x = hp2.x = 77;
        hp1.y = hp2.y = 90;
        this.parent.addChild(hp1);
        hp2.textColor = hp4.textColor = 16711680;
        this.parent.addChild(hp2);
        hp3.x = hp4.x = 318;
        hp3.y = hp4.y = 90;
        this.parent.addChild(hp3);
        this.parent.addChild(hp4);
        relation1 = createLabel({
          name: "relation1",
          text: "",
          x: 357,
          y: 9,
          textColor: 16776960,
          size: 16
        });
        this.parent.addChild(relation1);
        relation2 = createLabel({
          name: "relation2",
          text: "",
          x: 357,
          y: 29,
          textColor: 16776960,
          size: 16
        });
        this.parent.addChild(relation2);
        _0x43e74e.call(this);
      };
      var _0x1d210b = MFC.alert.show;
      MFC.alert.show = function (_0x3aaac9, _0x43ea17, _0x8a6792, _0x568ec7, _0x85f197) {
        logger(_0x3aaac9, _0x43ea17, _0x8a6792, _0x568ec7, _0x85f197);
        if (_0x3aaac9.includes("不是开放时间，请稍后再试") && _0x3aaac9.includes("6000502") || _0x3aaac9.includes("挑战次数已用完") && _0x3aaac9.includes("6000501") || _0x3aaac9.includes("次数已用完") && _0x3aaac9.includes("6000141") || _0x3aaac9.includes("战斗已结束") && _0x3aaac9.includes("6005002") || _0x3aaac9.includes("等待CD时间结束") && _0x3aaac9.includes("6000910") || _0x3aaac9.includes("已经领取过") && _0x3aaac9.includes("6002903") || _0x3aaac9.includes("该任务尚未完成") && _0x3aaac9.includes("6002902") || _0x3aaac9.includes("不能重复领取") && _0x3aaac9.includes("6000239") || _0x3aaac9.includes("未达到领取条件") && _0x3aaac9.includes("6000238") || _0x3aaac9.includes("肖恩工程师检修代码") || _0x3aaac9.includes("道具数量不足") && _0x3aaac9.includes("6001205") || _0x3aaac9.includes("余额不足") && _0x3aaac9.includes("请充值") || _0x3aaac9.includes("道具不足") && _0x3aaac9.includes("6000113") || _0x3aaac9.includes("物品不足") && _0x3aaac9.includes("6400005") || _0x3aaac9.includes("商品已卖完") || _0x3aaac9.includes("已经兑换过该奖励") && _0x3aaac9.includes("6008006") || _0x3aaac9.includes("没有历史存档记录") && _0x3aaac9.includes("-1") || _0x3aaac9.includes("不合法的数据") && _0x3aaac9.includes("6106031") || _0x3aaac9.includes("已经兑换过该奖励") || _0x3aaac9.includes("不能重复领取") || _0x3aaac9.includes("未达到领取条件") || _0x3aaac9.includes("目标已阵亡") || _0x3aaac9.includes("游戏未结束") || _0x3aaac9.includes("精灵等级不满足条件") && _0x3aaac9.includes("6010002")) {} else if (_0x3aaac9.includes("神奇密码已使用") && _0x3aaac9.includes("6008034")) {
          addGameLog("神奇密码已使用");
        } else {
          var _0x267a1e = _0x1d210b.call(this, _0x3aaac9, _0x43ea17, _0x8a6792, _0x568ec7, _0x85f197);
          return _0x267a1e;
        }
        if (_0x3aaac9.includes("网络波动~等待超时啦")) {
          (async function () {
            await wait(1200);
            var _0x2d7d24 = await findUIs("_className", "Cls_btn_QueRen");
            touchBtn(_0x2d7d24[0]);
          })();
        }
      };
    }
  }
}
;
0;
window.nowTask = null;
window.gameLog = null;
class SuperTask {
  constructor() {
    this.recvList = [];
    this.CatchPetDatas = null;
    let _0x553f1b = UserManager.getInstance().userInfo;
    if (_0x553f1b.defaultTeam.length == 0) {
      for (let _0x4643ef = 1; _0x4643ef <= 6; _0x4643ef++) {
        if (_0x553f1b["defaultTeam" + _0x4643ef].length > 0) {
          _0x553f1b.defaultTeam = _0x553f1b["defaultTeam" + _0x4643ef];
          break;
        }
      }
    }
  }
  async send_message(_0x4c2261, _0x3372f7) {
    if (window.nowTask !== this && window.nowTask.constructor.name != "DailyTask" && window.nowTask.constructor.name != "Paitepet" && window.nowTask.constructor.name != "LimitActivity") {
      logger("停止执行！");
      throw new Error("任务运行停止！");
    }
    let _0x100d51 = new window[_0x4c2261]();
    Object.assign(_0x100d51, _0x3372f7);
    MFC.online.send(_0x100d51);
    _0x4c2261 = "sc" + _0x4c2261.slice(2);
    if (!window.nowTask.recvList.find(_0x557a77 => _0x557a77.watchEventName === _0x4c2261)) {
      const _0x6d36e6 = {
        watchEventName: _0x4c2261
      };
      this.recvList.push(_0x6d36e6);
      const _0x1a3a7c = {
        watchEventName: _0x4c2261
      };
      window.nowTask.recvList.push(_0x1a3a7c);
    }
    let _0x1a261e = await this.waitEvent(_0x4c2261);
    let _0x2b0472 = JSON.parse(_0x1a261e.gameBody[_0x1a261e.gameBody.length - 1].raw);
    _0x1a261e.gameBody.splice(0, _0x1a261e.gameBody.length);
    logger("this.recvList", this.recvList.length);
    return _0x2b0472;
  }
  async waitEvent(_0x92abed) {
    let _0x40f300 = window.nowTask.recvList.find(_0x272ab3 => _0x272ab3.watchEventName === _0x92abed);
    if (!_0x40f300) {
      throw new Error("缺少配置！" + _0x92abed);
    }
    while (window.nowTask === this || window.nowTask.constructor.name == "DailyTask" || window.nowTask.constructor.name == "Paitepet" || window.nowTask.constructor.name == "LimitActivity") {
      await wait(100);
      if (_0x40f300.gameBody && _0x40f300.gameBody.length > 0) {
        if (_0x92abed == "sc_battle_notify_round_result") {
          let _0x9e7b39 = JSON.parse(_0x40f300.gameBody[_0x40f300.gameBody.length - 1].raw);
          try {
            _0x9e7b39 = fixBattleRes(_0x9e7b39);
            _0x40f300.gameBody[_0x40f300.gameBody.length - 1].raw = JSON.stringify(_0x9e7b39);
          } catch (_0x867bf3) {
            logger(_0x867bf3);
          }
        }
        return _0x40f300;
      }
    }
    throw new Error("任务运行停止！");
  }
  start() {
    if (window.nowTask === this) {
      winLog.txtWatcher.text = "正在执行:" + window.nowTask.nowName;
    }
  }
  stop() {
    if (window.nowTask === this) {
      window.nowTask = null;
      MFC.bubbleAlert.showAlert("任务已结束");
      addGameLog("任务已结束");
      winLog.txtWatcher.text = "正在执行:无";
    }
    if (this.nowUi != null) {
      MFC.rootLayer.removeChild(this.nowUi);
      this.nowUi = null;
    }
  }
  async initBattle() {
    await this.send_message("cs_set_match_battle_speed", {
      speed: 2
    });
    let _0x2967e6 = await this.waitEvent("sc_battle_notify_load_resource");
    _0x2967e6.gameBody.splice(0, _0x2967e6.gameBody.length);
    await this.send_message("cs_online_load_resource", {
      groupId: "",
      battleType: 0
    });
    await wait(300);
    await this.send_message("cs_online_player_operation", {
      opType: 5,
      data: null,
      groupId: ""
    });
    _0x2967e6 = await this.waitEvent("sc_battle_notify_round_result");
    let _0x2a8347 = JSON.parse(_0x2967e6.gameBody[_0x2967e6.gameBody.length - 1].raw);
    _0x2967e6.gameBody.splice(0, _0x2967e6.gameBody.length);
    logger("回合开始");
    await wait(200);
    return _0x2a8347;
  }
  async useSkill(_0x3399d) {
    await wait(100);
    await this.send_message("cs_online_load_battle_result", {
      groupId: ""
    });
    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(_0x3399d).name);
    const _0xc459e3 = {
      skillID: _0x3399d
    };
    const _0x174ead = {
      opType: 1,
      data: _0xc459e3,
      groupId: ""
    };
    await this.send_message("cs_online_player_operation", _0x174ead);
    let _0x194150 = await this.waitEvent("sc_battle_notify_round_result");
    let _0x3d886b = JSON.parse(_0x194150.gameBody[_0x194150.gameBody.length - 1].raw);
    _0x194150.gameBody.splice(0, _0x194150.gameBody.length);
    return _0x3d886b;
  }
  async useItem(_0x4fbab9) {
    const _0x172ec3 = {
      itemID: _0x4fbab9
    };
    const _0x50402f = {
      opType: 3,
      data: _0x172ec3,
      groupId: ""
    };
    await this.send_message("cs_online_player_operation", _0x50402f);
    let _0x5df09f = await this.waitEvent("sc_battle_notify_round_result");
    let _0x2ffd1b = JSON.parse(_0x5df09f.gameBody[_0x5df09f.gameBody.length - 1].raw);
    _0x5df09f.gameBody.splice(0, _0x5df09f.gameBody.length);
    return _0x2ffd1b;
  }
  addAllUis(_0x3f6894) {
    _0x3f6894.forEach(_0x30e66f => {
      this.alertWin.addChild(_0x30e66f);
    });
  }
}
class Defaultsetup extends SuperTask {
  constructor() {
    super();
    this.nowName = "默认设置";
    this.selfwatch = [];
  }
  start() {
    super.start();
    let _0x5bd96f = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x4293be = [];
      var _0x55be30 = SimpleAlertUi({
        width: 450,
        height: 400
      });
      _0x5bd96f.alertWin = _0x55be30;
      const _0xd6b336 = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x55be30.height / 20
      };
      var _0x2b80a6 = createLabel(_0xd6b336);
      _0x4293be.push(_0x2b80a6);
      const _0x1c0e7a = {
        text: "[默认设置]下次进入游戏会按照此次选择设置",
        textColor: 16711680,
        x: 40,
        y: _0x2b80a6.y + 10 + _0x2b80a6.height
      };
      var _0x3f6f66 = createLabel(_0x1c0e7a);
      _0x4293be.push(_0x3f6f66);
      const _0x5eaa24 = {
        text: "默认设置",
        y: _0x3f6f66.y + 10 + _0x3f6f66.height,
        size: 20
      };
      let _0x46f175 = createLabel(_0x5eaa24);
      _0x46f175.x = _0x55be30.applicationWidth / 2 - _0x46f175.width / 2;
      _0x4293be.push(_0x46f175);
      const _0x2f6fe1 = {
        text: "开启声音",
        x: _0x55be30.width / 10,
        y: _0x46f175.y + 40
      };
      let _0x1ba609 = createLabel(_0x2f6fe1);
      _0x4293be.push(_0x1ba609);
      const _0x4251f2 = {
        x: _0x1ba609.x + _0x1ba609.width + 42,
        y: _0x46f175.y + 40,
        selected: true,
        storageKey: "setup1"
      };
      let _0x544769 = createToggle(_0x4251f2);
      _0x4293be.push(_0x544769);
      const _0x27bc04 = {
        text: "屏蔽其他玩家",
        x: _0x55be30.width / 10,
        y: _0x46f175.y + 80
      };
      let _0x1a175a = createLabel(_0x27bc04);
      _0x4293be.push(_0x1a175a);
      const _0x473e51 = {
        x: _0x1a175a.x + _0x1a175a.width + 10,
        y: _0x46f175.y + 80,
        selected: true,
        storageKey: "setup2"
      };
      let _0x33c836 = createToggle(_0x473e51);
      _0x4293be.push(_0x33c836);
      const _0x1450e6 = {
        text: "屏蔽组队邀请",
        x: _0x33c836.x + _0x33c836.width + 10,
        y: _0x46f175.y + 80
      };
      let _0x3177ee = createLabel(_0x1450e6);
      _0x4293be.push(_0x3177ee);
      const _0x50be4d = {
        x: _0x3177ee.x + _0x3177ee.width + 10,
        y: _0x46f175.y + 80,
        selected: true,
        storageKey: "setup3"
      };
      let _0x410023 = createToggle(_0x50be4d);
      _0x4293be.push(_0x410023);
      const _0x36df4b = {
        text: "屏蔽挑战邀请",
        x: _0x55be30.width / 10,
        y: _0x46f175.y + 120
      };
      let _0x316d25 = createLabel(_0x36df4b);
      _0x4293be.push(_0x316d25);
      const _0x2177fd = {
        x: _0x316d25.x + _0x316d25.width + 10,
        y: _0x46f175.y + 120,
        selected: true,
        storageKey: "setup4"
      };
      let _0x33a7cf = createToggle(_0x2177fd);
      _0x4293be.push(_0x33a7cf);
      const _0x1445aa = {
        text: "屏蔽战斗表情",
        x: _0x33a7cf.x + _0x33a7cf.width + 10,
        y: _0x46f175.y + 120
      };
      let _0x1be5a7 = createLabel(_0x1445aa);
      _0x4293be.push(_0x1be5a7);
      const _0x66eb80 = {
        x: _0x1be5a7.x + _0x1be5a7.width + 10,
        y: _0x46f175.y + 120,
        selected: true,
        storageKey: "setup5"
      };
      let _0x577d9d = createToggle(_0x66eb80);
      _0x4293be.push(_0x577d9d);
      const _0x136f0a = {
        text: "观战设置",
        y: _0x1be5a7.y + 40
      };
      let _0x37a23d = createLabel(_0x136f0a);
      _0x37a23d.x = _0x55be30.applicationWidth / 2 - _0x37a23d.width / 2;
      _0x4293be.push(_0x37a23d);
      const _0x1f9896 = {
        x: _0x55be30.width / 10,
        y: _0x37a23d.y + 40,
        selected: false,
        storageKey: "selfwatch1"
      };
      let _0x495139 = createRadio(_0x1f9896);
      _0x4293be.push(_0x495139);
      const _0x3e88ca = {
        text: "所有玩家",
        x: _0x495139.x + _0x495139.width + 10,
        y: _0x495139.y
      };
      let _0x2351ea = createLabel(_0x3e88ca);
      _0x4293be.push(_0x2351ea);
      const _0x588431 = {
        x: _0x2351ea.x + _0x2351ea.width + 30,
        y: _0x495139.y,
        selected: false,
        storageKey: "selfwatch2"
      };
      let _0x39c666 = createRadio(_0x588431);
      _0x4293be.push(_0x39c666);
      const _0x3896a5 = {
        text: "仅好友1",
        x: _0x39c666.x + _0x39c666.width + 10,
        y: _0x495139.y
      };
      let _0x4b26fe = createLabel(_0x3896a5);
      _0x4293be.push(_0x4b26fe);
      const _0x416b9c = {
        x: _0x4b26fe.x + _0x4b26fe.width + 30,
        y: _0x495139.y,
        selected: true,
        storageKey: "selfwatch3"
      };
      let _0x2f2a4c = createRadio(_0x416b9c);
      _0x4293be.push(_0x2f2a4c);
      const _0x35e25f = {
        text: "不允许观战",
        x: _0x2f2a4c.x + _0x2f2a4c.width + 10,
        y: _0x495139.y
      };
      let _0x507f96 = createLabel(_0x35e25f);
      _0x4293be.push(_0x507f96);
      _0x5bd96f.addAllUis(_0x4293be);
      _0x55be30.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x5bd96f.stop();
      }, function () {
        try {
          localStorage.setItem("setup1", _0x544769.selected);
          localStorage.setItem("setup2", _0x33c836.selected);
          localStorage.setItem("setup3", _0x410023.selected);
          localStorage.setItem("setup4", _0x33a7cf.selected);
          localStorage.setItem("setup5", _0x577d9d.selected);
          localStorage.setItem("selfwatch1", _0x495139.selected);
          localStorage.setItem("selfwatch2", _0x39c666.selected);
          localStorage.setItem("selfwatch3", _0x2f2a4c.selected);
          if (_0x544769.selected) {
            addGameLog("开启游戏声音");
            MFC.sound.isEffectsMute = true;
            MFC.sound.isBackgroudMute = false;
          } else {
            addGameLog("关闭游戏声音");
            MFC.sound.isEffectsMute = true;
            MFC.sound.isBackgroudMute = true;
          }
          MFC.sound.saveStatus();
          if (_0x33c836.selected) {
            addGameLog("开启其他玩家屏蔽");
            MFC.mapManager.userManager.hideOthers();
          } else {
            addGameLog("关闭其他玩家屏蔽");
            MFC.mapManager.userManager.showOthers();
          }
          if (_0x410023.selected) {
            addGameLog("开启组队邀请屏蔽");
            MFC.partyManager.refuseInvite = 2;
          } else {
            addGameLog("关闭组队邀请屏蔽");
            MFC.partyManager.refuseInvite = 0;
          }
          var _0x28ad59 = new cs_set_invitation_status();
          _0x28ad59.status = MFC.userInfo.isInvitationPVP = _0x33a7cf.selected ? (addGameLog("开启挑战邀请屏蔽"), 1) : (addGameLog("关闭挑战邀请屏蔽"), 0);
          MFC.online.send(_0x28ad59, function (_0x3ffcbc) {
            if (_0x3ffcbc) {
              MFC.userInfo.isInvitationPVP = _0x3ffcbc.isInvitationPVP;
            }
          });
          if (_0x577d9d.selected) {
            addGameLog("开启战斗表情屏蔽");
            egret.localStorage.setItem(MFC.userInfo.uid + "_BattleEmoji", "close");
          } else {
            addGameLog("关闭战斗表情屏蔽");
            egret.localStorage.setItem(MFC.userInfo.uid + "_BattleEmoji", "open");
          }
          if (_0x495139.selected) {
            _0x5bd96f.selfwatch[0] = 1;
          }
          if (_0x39c666.selected) {
            _0x5bd96f.selfwatch[1] = 1;
          }
          if (_0x2f2a4c.selected) {
            _0x5bd96f.selfwatch[2] = 1;
          }
        } catch (_0x128347) {
          localStorage.clear();
        }
        _0x5bd96f.prcessBody();
      }], null);
      _0x55be30.showAlert();
    });
  }
  async changePer(_0x543140) {
    const _0x3d009f = {
      match_permissions: _0x543140
    };
    await this.send_message("cs_set_match_permissions", _0x3d009f);
  }
  async prcessBody() {
    try {
      if (this.selfwatch[0]) {
        await this.changePer(1);
        addGameLog("允许所有玩家观战");
      }
      if (this.selfwatch[1]) {
        await this.changePer(3);
        addGameLog("仅好友观战");
      }
      if (this.selfwatch[2]) {
        await this.changePer(2);
        addGameLog("不允许观战");
      }
      this.stop();
    } catch (_0xeff63c) {}
  }
}
class FightMapBoss extends SuperTask {
  constructor(_0x4a97bd) {
    super();
    this.nowName = "打野怪";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
    if (_0x4a97bd) {
      this.fightCounts = _0x4a97bd;
    } else {
      this.fightCounts = 120;
    }
    this.levelId = 9;
    this.mapBossList = [];
    this.switchBtnList = [];
  }
  async start() {
    super.start();
    let _0x575b14 = [];
    MFC.mapManager._bossManager.bossDataList.forEach(_0x27c2e3 => {
      if (_0x575b14.indexOf(_0x27c2e3.sweepShow) === -1) {
        let _0x11306f = PetConfig.getDef(_0x27c2e3.sweepShow).name;
        const _0xb36121 = {
          name: _0x11306f,
          levelId: _0x27c2e3.id,
          PetbookId: _0x27c2e3.sweepShow
        };
        this.mapBossList.push(_0xb36121);
        _0x575b14.push(_0x27c2e3.sweepShow);
      }
    });
    if (this.mapBossList.length === 0) {
      MFC.alert.show("当前地图场景没有可对战的精灵!");
      this.stop();
      return;
    }
    let _0x3b1ce0 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x469dd4 = [];
      addGameLog("开始进行");
      var _0x4f0db1 = SimpleAlertUi({});
      _0x3b1ce0.alertWin = _0x4f0db1;
      const _0x53e4ca = {
        text: "        场景对战野怪\n[默认使用首发精灵的首发技能]",
        y: _0x4f0db1.height / 16
      };
      var _0x57acf3 = createLabel(_0x53e4ca);
      _0x57acf3.x = _0x4f0db1.width / 2 - _0x57acf3.width / 2;
      _0x469dd4.push(_0x57acf3);
      let _0x3bb39c = _0x4f0db1.width / 15;
      let _0x47221e;
      _0x3b1ce0.mapBossList.forEach((_0xb3fc9b, _0x1f2e98) => {
        const _0x59b968 = {
          text: _0xb3fc9b.name,
          x: _0x3bb39c,
          y: _0x4f0db1.height / 3,
          textColor: 16776960
        };
        let _0x13b2de = createLabel(_0x59b968);
        const _0x167eb2 = {
          x: _0x3bb39c + _0x13b2de.width + 5,
          y: _0x4f0db1.height / 3,
          selected: _0x1f2e98 === 0,
          levelId: _0xb3fc9b.levelId
        };
        _0x47221e = createToggle(_0x167eb2);
        _0x469dd4.push(_0x13b2de);
        _0x469dd4.push(_0x47221e);
        _0x3bb39c = _0x3bb39c + _0x47221e.x + _0x47221e.width + 10;
        _0x3b1ce0.switchBtnList.push(_0x47221e);
      });
      const _0x90e34e = {
        text: "对战次数 =>",
        x: 40,
        y: _0x47221e.y + _0x47221e.height + 13,
        textColor: 16776960
      };
      let _0xe49335 = createLabel(_0x90e34e);
      _0x469dd4.push(_0xe49335);
      const _0x103dde = {
        x: _0xe49335.width + _0xe49335.x + 40,
        y: _0x47221e.y + _0x47221e.height + 7,
        width: 80,
        text: "120",
        storageKey: "iptC"
      };
      var _0x26a9b8 = createEdit(_0x103dde);
      _0x469dd4.push(_0x26a9b8);
      _0x3b1ce0.addAllUis(_0x469dd4);
      _0x4f0db1.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [() => _0x3b1ce0.stop(), () => {
        localStorage.setItem("iptC", _0x26a9b8.text);
        _0x3b1ce0.fightCounts = parseInt(_0x26a9b8.text);
        _0x3b1ce0.prcessBody();
      }], null);
      _0x4f0db1.showAlert();
    });
  }
  async prcessBody() {
    try {
      for (let _0x5d55eb = 0; _0x5d55eb < this.fightCounts; _0x5d55eb++) {
        let _0x565f2e = UserManager.getInstance().userInfo.defaultTeam[0];
        let _0x203981 = PetManager.getInstance().getPetInfoByGetTime(_0x565f2e).skills[0];
        await wait(300);
        if (window.nowTask.constructor.name == "FightMapBoss") {
          var _0x1b4368 = this.mapBossList[Math.floor(Math.random() * this.mapBossList.length)];
          addGameLog("对战: " + _0x1b4368.name);
          const _0x2ffef9 = {
            levelId: _0x1b4368.levelId,
            battleType: 3
          };
          await this.send_message("cs_pve_activity_battle", _0x2ffef9);
        } else {
          await this.send_message("cs_pve_activity_battle", {
            levelId: this.levelId,
            battleType: 3
          });
        }
        await this.initBattle();
        let _0xf4dfec = await this.useSkill(_0x203981);
        while (_0xf4dfec.result.result === 0) {
          let _0x497382 = _0xf4dfec.result.playerInfos.find(_0x16d8b0 => _0x16d8b0.uid === MFC.userInfo.uid).nextRoundOP;
          if (_0x497382 !== 1) {
            addGameLog("首发被击败");
            break;
          }
          addGameLog("未击败，继续攻击");
          _0xf4dfec = await this.useSkill(_0x203981);
        }
        if (_0xf4dfec.result.result === 1) {
          addGameLog("顺利野怪第" + (_0x5d55eb + 1) + "次");
        } else {
          _0x5d55eb--;
          addGameLog("被野怪击败");
        }
        await wait(300);
      }
      this.stop();
    } catch (_0x3ff6f9) {
      logger(_0x3ff6f9);
    }
  }
}
class braveryBattle extends SuperTask {
  constructor() {
    super();
    this.nowName = "勇者之塔";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
  }
  start() {
    super.start();
  }
  async prcessBody() {
    try {
      if (PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam[0]).level == 100 || PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam[0]).level <= 10) {
        addGameLog("精灵等级不满足条件!");
      } else {
        await this.send_message("cs_set_brave_tower_team", {
          floor: 1,
          getTime: UserManager.getInstance().userInfo.defaultTeam[0]
        });
        while (true) {
          let _0x1cfc06 = await this.send_message("cs_get_daily_task_list", {});
          let _0x3f039b = _0x1cfc06.dailyTask.find(_0x3442de => _0x3442de.taskId === 22).taskProcess;
          if (_0x3f039b == 5) {
            addGameLog("勇者之塔完成!");
            break;
          } else {
            let _0x378e77 = await this.send_message("cs_get_brave_tower_data", {});
            let _0x15ccdf = _0x378e77.tower.curFloor;
            let _0x3871eb = _0x378e77.tower.floor_level.find(_0x13250c => _0x13250c.isPass != 0);
            let _0x8daa0c = _0x3871eb.levelId;
            if (UserManager.getInstance().userInfo.curEnergy < 1) {
              addGameLog("电池不足,勇者之塔结束!");
              break;
            } else {
              let _0x44fc9e = PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam[0]).skills[0];
              await wait(300);
              const _0x513bb9 = {
                floor: _0x15ccdf,
                levelId: _0x8daa0c
              };
              await this.send_message("cs_brave_tower_fight", _0x513bb9);
              await this.initBattle();
              let _0x5baf33 = await this.useSkill(_0x44fc9e);
              while (_0x5baf33.result.result == 0) {
                if (_0x5baf33.result.playerInfos[0].uid == MFC.userInfo.uid) {
                  if (_0x5baf33.result.playerInfos[0].nextRoundOP !== 1) {
                    addGameLog("首发被击败");
                    break;
                  }
                } else if (_0x5baf33.result.playerInfos[1].nextRoundOP !== 1) {
                  addGameLog("首发被击败");
                  break;
                }
                addGameLog("未击败，继续攻击");
                _0x5baf33 = await this.useSkill(_0x44fc9e);
              }
              if (_0x5baf33.result.result === 1) {
                addGameLog("顺利打败勇者之塔");
              } else {
                addGameLog("被勇者之塔击败");
              }
              await wait(300);
            }
          }
        }
      }
    } catch (_0x34b24f) {
      logger(_0x34b24f);
    }
  }
}
class LimitBattle extends SuperTask {
  constructor() {
    super();
    this.nowName = "极限挑战";
    this.taskId;
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
  }
  start() {
    super.start();
  }
  async prcessBody() {
    try {
      let _0x1976ff = await this.getLimits();
      let _0x159401 = PetManager.getInstance().getAllPets();
      let _0x576823 = "";
      for (let _0x2d5c8e = 0; _0x2d5c8e < _0x159401.length; _0x2d5c8e++) {
        if (_0x159401[_0x2d5c8e].level == 1 && _0x1976ff.indexOf(PetConfig.getDef(_0x159401[_0x2d5c8e].petId).elemType) != -1) {
          _0x576823 = _0x159401[_0x2d5c8e];
          break;
        }
      }
      if (_0x576823 == "") {
        addGameLog("背包没1级满足极限挑战属性的精灵");
      } else {
        let _0x547146 = _0x576823.skills[0];
        const _0x5ef014 = {
          op: 1,
          arrayType: "campaignDefaultTeam",
          subArray: 0,
          idx: 1,
          teamUp: 0,
          fightType: 0,
          getTimeList: [_0x576823.getTime]
        };
        await this.send_message("cs_new_change_petArray", _0x5ef014);
        await wait(300);
        addGameLog("派出: " + _0x576823.nick);
        const _0x15956e = {
          levelId: 5,
          hirePetList: [_0x576823.getTime],
          attachBattleSkill: []
        };
        await this.send_message("cs_start_campaign_pet_challenge", _0x15956e);
        await this.initBattle();
        let _0x5bd332 = await this.useSkill(_0x547146);
        while (_0x5bd332.result.result == 0) {
          addGameLog("未被击败，继续攻击");
          _0x5bd332 = await this.useSkill(_0x547146);
        }
        if (_0x5bd332.result.result === 1) {
          addGameLog("打过boss,按理不会触发");
        } else {
          addGameLog("被Boss击败,完成极限挑战!");
        }
        if (_0x5bd332.result.result == 2) {
          let _0x4c76ee = UserManager.getInstance().userInfo.defaultTeam;
          await wait(300);
          await this.send_message("cs_get_daily_task_prize", {
            taskId: this.taskId
          });
          const _0x56093d = {
            op: 1,
            arrayType: "defaultTeam",
            subArray: 0,
            idx: 1,
            teamUp: 0,
            fightType: 0,
            getTimeList: _0x4c76ee
          };
          await this.send_message("cs_new_change_petArray", _0x56093d);
        }
        await wait(200);
      }
    } catch (_0x2a3a7b) {
      logger(_0x2a3a7b);
    }
  }
  async getLimits() {
    let _0x12eeb0 = await this.send_message("cs_get_campaign_pet_challenge_boss", {});
    let _0x59d8a2 = _0x12eeb0.todayLimitAttr;
    return _0x59d8a2;
  }
}
class MapCatch extends SuperTask {
  constructor() {
    super();
    this.nowName = "地图捕捉";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_change_default_team"
    }, {
      watchEventName: "sc_notify_item_change"
    }];
    this.alertWin = null;
    this.capsuleNames = [{
      capName: "普通",
      capId: 4001
    }, {
      capName: "中级",
      capId: 4002
    }, {
      capName: "高级",
      capId: 4003
    }, {
      capName: "无敌",
      capId: 4004
    }];
    this.switchBtnList = [];
    this.radioBtnList = [];
    this.mapBossList = [];
    this.capIds = [];
    this.levelIds = [];
    this.catchCounts = 0;
    this.stopTalent = 0;
    this.addCount = 0;
    this.allCatchPets = [];
    this.canCatchPets = [];
    this.petIndex = 0;
    this.petteamstatus = false;
    this.defaultNum = 999;
  }
  start() {
    let _0x401328 = [];
    MFC.mapManager._bossManager.bossDataList.forEach(_0x569c17 => {
      if (_0x569c17.canCatch && _0x401328.indexOf(_0x569c17.sweepShow) == -1) {
        let _0x19df6f = PetConfig.getDef(_0x569c17.sweepShow).name;
        const _0x3d5779 = {
          name: _0x19df6f,
          levelId: _0x569c17.id,
          PetbookId: _0x569c17.sweepShow
        };
        this.mapBossList.push(_0x3d5779);
        if (_0x19df6f.indexOf("皮皮") !== -1) {}
        if (_0x19df6f.indexOf("皮皮") !== -1) {}
        _0x401328.push(_0x569c17.sweepShow);
      }
    });
    if (this.mapBossList.length == 0) {
      MFC.alert.show("当前地图场景没有可捕捉的精灵!");
      this.stop();
      return;
    }
    this.canCatchPets = this.getUseCatchPets();
    if (this.canCatchPets.length == 0) {
      MFC.alert.show("精灵背包没有可以捕捉的精灵的精灵!");
      this.stop();
      return;
    }
    super.start();
    let _0xcfb56 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      var _0x1bc61c = SimpleAlertUi({
        width: 680,
        height: 450
      });
      _0xcfb56.alertWin = _0x1bc61c;
      let _0x5dbcec = _0x1bc61c.width / 15;
      let _0x31c273 = [];
      const _0x5a5039 = {
        text: "1.胶囊选择  2.精灵选择  3.使用精灵",
        y: _0x1bc61c.height / 11
      };
      var _0x41ac75 = createLabel(_0x5a5039);
      _0x41ac75.x = _0x1bc61c.width / 2 - _0x41ac75.width / 2;
      _0x31c273.push(_0x41ac75);
      for (let _0x54b07d = 0; _0x54b07d < _0xcfb56.capsuleNames.length; _0x54b07d++) {
        const _0x43796a = {
          text: _0xcfb56.capsuleNames[_0x54b07d].capName,
          x: _0x5dbcec,
          y: _0x1bc61c.height / 5
        };
        var _0x41ac75 = createLabel(_0x43796a);
        const _0x583b97 = {
          capId: _0xcfb56.capsuleNames[_0x54b07d].capId,
          x: _0x5dbcec + 60,
          y: _0x1bc61c.height / 5
        };
        let _0x3c2cc2 = createToggle(_0x583b97);
        _0x3c2cc2.selected = true;
        if (_0x54b07d) {
          _0x3c2cc2.selected = false;
        }
        _0x31c273.push(_0x41ac75);
        _0x31c273.push(_0x3c2cc2);
        _0x5dbcec = _0x5dbcec + 150;
        _0xcfb56.switchBtnList.push(_0x3c2cc2);
      }
      let _0x53eabe = _0x1bc61c.height / 3.5;
      _0x5dbcec = _0x1bc61c.width / 15;
      if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") <= "2025_01_23 5:00:00") {
        let _0x4c5694 = _0xcfb56.mapBossList.find(_0x11ec00 => _0x11ec00.name == "卡卡");
        if (_0x4c5694) {
          _0xcfb56.mapBossList.push({
            name: "活动精灵 林克",
            levelId: 365
          });
          _0xcfb56.mapBossList.push({
            name: "活动精灵 米鲁",
            levelId: 366
          });
        }
      }
      for (let _0x522930 = 0; _0x522930 < _0xcfb56.mapBossList.length; _0x522930++) {
        if (_0xcfb56.mapBossList[_0x522930].name == "" || _0xcfb56.mapBossList[_0x522930].name == "提亚斯") {
          continue;
        }
        if (_0x522930 != 0 && _0x522930 % 4 == 0) {
          _0x53eabe = _0x53eabe + 30;
          _0x5dbcec = _0x1bc61c.width / 15;
        }
        const _0x480893 = {
          text: _0xcfb56.mapBossList[_0x522930].name,
          textColor: 16776960,
          x: _0x5dbcec,
          y: _0x53eabe
        };
        let _0x429c69 = createLabel(_0x480893);
        const _0x24d9e4 = {
          levelId: _0xcfb56.mapBossList[_0x522930].levelId,
          x: _0x5dbcec + _0x429c69.width + 15,
          y: _0x53eabe
        };
        let _0x482d67 = createToggle(_0x24d9e4);
        _0x482d67.selected = true;
        if (_0x522930) {
          _0x482d67.selected = false;
        }
        _0x31c273.push(_0x429c69);
        _0x31c273.push(_0x482d67);
        _0x5dbcec = _0x5dbcec + 150;
        _0xcfb56.switchBtnList.push(_0x482d67);
      }
      _0x5dbcec = _0x1bc61c.width / 15;
      _0x53eabe = _0x53eabe + 30;
      for (let _0x415687 = 0; _0x415687 < _0xcfb56.canCatchPets.length; _0x415687++) {
        if (_0x415687 != 0 && _0x415687 % 3 == 0) {
          _0x53eabe = _0x53eabe + 30;
          _0x5dbcec = _0x1bc61c.width / 15;
        }
        const _0x2f4ed9 = {
          x: _0x5dbcec,
          y: _0x53eabe,
          pet: _0xcfb56.canCatchPets[_0x415687]
        };
        let _0x12b391 = createRadio(_0x2f4ed9);
        try {
          if (localStorage.getItem("map:" + _0xcfb56.canCatchPets[_0x415687].getTime) != null) {
            _0x12b391.selected = JSON.parse(localStorage.getItem("map:" + _0xcfb56.canCatchPets[_0x415687].getTime));
          } else {
            _0x12b391.selected = false;
          }
        } catch (_0x72d98b) {
          localStorage.removeItem("map:" + _0xcfb56.canCatchPets[_0x415687].getTime);
          _0x12b391.selected = false;
        }
        if (!(typeof JSON.parse(localStorage.getItem("map:" + _0xcfb56.canCatchPets[_0x415687].getTime)) == "boolean")) {
          localStorage.removeItem("map:" + _0xcfb56.canCatchPets[_0x415687].getTime);
          _0x12b391.selected = false;
        }
        let _0x43cb11 = createLabel({
          text: PetConfig.getDef(_0xcfb56.canCatchPets[_0x415687].petId).name + ("(Lv" + PetManager.getInstance().getPetInfoByGetTime(_0xcfb56.canCatchPets[_0x415687].getTime).level + ")"),
          textColor: 16776960,
          x: _0x5dbcec + _0x12b391.width + 15,
          y: _0x53eabe
        });
        _0x5dbcec = _0x43cb11.x + _0x43cb11.width + 20;
        _0x31c273.push(_0x43cb11);
        _0x31c273.push(_0x12b391);
        _0xcfb56.radioBtnList.push(_0x12b391);
      }
      const _0x58113f = {
        prompt: "捕捉只数",
        width: 100,
        x: 30,
        y: _0x1bc61c.height / 1.35,
        storageKey: "inputCountsMap"
      };
      var _0x5d1034 = createEdit(_0x58113f);
      const _0x49abaf = {
        prompt: "停止天赋",
        width: 100,
        x: _0x5d1034.width + 67,
        y: _0x1bc61c.height / 1.35,
        storageKey: "inputTalentMap"
      };
      var _0x19a3a9 = createEdit(_0x49abaf);
      _0x31c273.push(_0x5d1034);
      _0x31c273.push(_0x19a3a9);
      const _0x51b79a = {
        text: "捕捉只数",
        textColor: 16776960,
        x: 30,
        y: _0x1bc61c.height / 1.35 - 30
      };
      var _0x317a9a = createLabel(_0x51b79a);
      const _0x481f43 = {
        text: "(不输入默认一直抓)\n捕捉天赋",
        textColor: 16776960,
        x: _0x5d1034.width + 67,
        y: _0x1bc61c.height / 1.35 - 45
      };
      var _0x34dd77 = createLabel(_0x481f43);
      const _0x3e1581 = {
        text: "是否上阵多精灵",
        textColor: 16776960,
        x: _0x19a3a9.x + 150,
        y: _0x1bc61c.height / 1.35 - 30
      };
      var _0x59bd5c = createLabel(_0x3e1581);
      const _0xc12c39 = {
        text: "胶囊使用次数\n(不输入会使用到抓到)",
        textColor: 16776960,
        x: _0x59bd5c.x + 140,
        y: _0x1bc61c.height / 1.35 - 45
      };
      var _0x5cd795 = createLabel(_0xc12c39);
      _0x31c273.push(_0x317a9a);
      _0x31c273.push(_0x34dd77);
      _0x31c273.push(_0x59bd5c);
      _0x31c273.push(_0x5cd795);
      const _0x8d4d59 = {
        x: _0x59bd5c.x,
        y: _0x1bc61c.height / 1.35,
        selected: false,
        storageKey: "petteamstatu"
      };
      let _0x468559 = createToggle(_0x8d4d59);
      _0x31c273.push(_0x468559);
      const _0x51dda4 = {
        prompt: "胶囊次数",
        width: 100,
        x: _0x59bd5c.x + 140,
        y: _0x1bc61c.height / 1.35,
        storageKey: "inputcapNum"
      };
      var _0x1db62b = createEdit(_0x51dda4);
      _0x31c273.push(_0x1db62b);
      _0xcfb56.addAllUis(_0x31c273);
      _0x1bc61c.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0xcfb56.stop();
      }, function () {
        let _0x102eae = 0;
        for (let _0x4f02f8 = 0; _0x4f02f8 < _0xcfb56.radioBtnList.length; _0x4f02f8++) {
          if (_0xcfb56.radioBtnList[_0x4f02f8].selected) {
            _0x102eae = 1;
          }
          localStorage.setItem("map:" + _0xcfb56.radioBtnList[_0x4f02f8].pet.getTime, _0xcfb56.radioBtnList[_0x4f02f8].selected);
        }
        localStorage.setItem("inputTalentMap", _0x19a3a9.text);
        localStorage.setItem("inputCountsMap", _0x5d1034.text);
        localStorage.setItem("inputcapNum", _0x1db62b.text);
        localStorage.setItem("petteamstatu", _0x468559.selected);
        if (_0x468559.selected) {
          _0xcfb56.petteamstatus = true;
        } else {
          _0xcfb56.petteamstatus = false;
        }
        if (_0x102eae == 0) {
          MFC.bubbleAlert.showAlert("请勾选使用捕捉精灵的精灵!");
          return true;
        }
        let _0x559cf4 = [];
        let _0x18e679 = [];
        for (let _0x2eea9d = 0; _0x2eea9d < _0xcfb56.switchBtnList.length; _0x2eea9d++) {
          if (_0x2eea9d <= 3 && _0xcfb56.switchBtnList[_0x2eea9d].selected) {
            _0x559cf4.push(_0xcfb56.switchBtnList[_0x2eea9d].capId);
          }
          if (_0x2eea9d > 3 && _0xcfb56.switchBtnList[_0x2eea9d].selected) {
            _0x18e679.push(_0xcfb56.switchBtnList[_0x2eea9d].levelId);
          }
        }
        if (_0x559cf4.length == 0) {
          MFC.bubbleAlert.showAlert("至少设置一种胶囊类型");
          return true;
        }
        if (_0x18e679.length == 0) {
          MFC.bubbleAlert.showAlert("至少设置一种精灵");
          return true;
        }
        if (isNaN(parseInt(_0x5d1034.text))) {
          MFC.bubbleAlert.showAlert("请输入有效捕捉次数");
          return true;
        }
        if (_0x19a3a9.text == "") {} else if (isNaN(parseInt(_0x19a3a9.text)) || parseInt(_0x19a3a9.text) > 31 || parseInt(_0x19a3a9.text) < 0) {
          MFC.bubbleAlert.showAlert("请输入有效精灵天赋");
          return true;
        }
        _0xcfb56.capIds = _0x559cf4;
        _0xcfb56.levelIds = _0x18e679;
        if (!isNaN(parseInt(_0x1db62b.text))) {
          _0xcfb56.defaultNum = parseInt(_0x1db62b.text);
        }
        _0xcfb56.catchCounts = parseInt(_0x5d1034.text);
        _0xcfb56.stopTalent = parseInt(_0x19a3a9.text);
        _0xcfb56.prcessBody();
      }], null);
      _0x1bc61c.showAlert();
    });
  }
  async prcessBody() {
    try {
      if (this.canCatchPets.length == 0) {
        var _0x3fec2f = this.checkUseCatchPet();
      } else {
        var _0x3fec2f;
        for (let _0x4b05c9 = 0; _0x4b05c9 < this.radioBtnList.length; _0x4b05c9++) {
          if (this.radioBtnList[_0x4b05c9].selected) {
            var _0x3fec2f = this.radioBtnList[_0x4b05c9].pet;
            break;
          }
        }
      }
      if (!_0x3fec2f) {
        addGameLog("没有相关满足条件的捕捉精灵，捕捉结束");
        this.stop();
        return false;
      }
      await wait(200);
      let _0x32b28e = [];
      _0x32b28e.push(_0x3fec2f.getTime);
      let _0x2b2940 = PetManager.getInstance().getAllPets().map(_0x4f5cad => {
        if (_0x4f5cad.level <= PetManager.getInstance().getPetInfoByGetTime(_0x3fec2f.getTime).level && _0x4f5cad.petid !== 1656 && _0x4f5cad.petid !== 10746 && _0x4f5cad.nick.indexOf("无名") == -1 && _0x4f5cad.getTime !== _0x3fec2f.getTime && _0x4f5cad.nick.indexOf("熊猫") == -1 && _0x4f5cad.nick.indexOf("阿勇") == -1) {
          return _0x4f5cad;
        }
      }).filter(_0x50e9c6 => _0x50e9c6).sort((_0x88b6f9, _0x19e3be) => _0x19e3be.battleValues[0] - _0x88b6f9.battleValues[0]);
      if (this.petteamstatus) {
        if (_0x2b2940.length > 4) {
          for (let _0x1d87dc = 0; _0x1d87dc < 4; _0x1d87dc++) {
            _0x32b28e.push(_0x2b2940[_0x1d87dc].getTime);
          }
        } else {
          addGameLog("没有4只等级低于" + _0x3fec2f.nick + "的精灵");
        }
      }
      const _0x2add7b = {
        op: 1,
        arrayType: "defaultTeam",
        subArray: 0,
        idx: 1,
        teamUp: 0,
        fightType: 0,
        getTimeList: _0x32b28e
      };
      await this.send_message("cs_new_change_petArray", _0x2add7b);
      addGameLog("设置" + PetConfig.getDef(_0x3fec2f.petId).name + "首发成功！");
      if (this.petIndex === this.levelIds.length - 1) {
        this.petIndex = 0;
      } else {
        this.petIndex++;
      }
      if (this.levelIds[this.petIndex] == 362) {
        if (MFC.attr.getAttr(18878) == 2) {
          addGameLog("每日捕捉的闪光皮皮已经到达上限!");
          MFC.bubbleAlert.showAlert("每日捕捉的闪光皮皮已经到达上限!");
          this.logAllCatchPets(this.allCatchPets);
          this.stop();
          return;
        }
      }
      if (this.levelIds[this.petIndex] == 364) {
        if (MFC.attr.getAttr(18879) == 5) {
          addGameLog("每日捕捉的克里已经到达上限!");
          MFC.alert.show("每日捕捉的克里达已经到达上限!");
          this.stop();
          return;
        }
      }
      if (this.levelIds[this.petIndex] == 361) {
        if (MFC.attr.getAttr(18877) == 3) {
          addGameLog("每日捕捉的小豆芽已经到达上限!");
          MFC.bubbleAlert.showAlert("每日捕捉的小豆芽已经到达上限!");
          this.logAllCatchPets(this.allCatchPets);
          this.stop();
          return;
        }
      }
      let _0xb63499 = await this.send_message("cs_pve_activity_battle", {
        levelId: this.levelIds[this.petIndex],
        battleType: 3
      });
      if (JSON.stringify(_0xb63499).includes("不是开放时间")) {
        MFC.alert.show("当前精灵不是开放时间\n请等待时间开放");
        this.stop();
      }
      await this.initBattle();
      let _0x6352b5 = randomCap(this.capIds);
      if (_0x6352b5 == "NoCap") {
        addGameLog("无可用胶囊,捕捉任务结束");
        this.stop();
        return false;
      }
      await this.send_message("cs_online_load_battle_result", {
        groupId: ""
      });
      await wait(200);
      let _0x4adaa7 = _0x3fec2f.skillID;
      let _0x417327 = await this.useSkill(_0x4adaa7);
      let _0x45869e = true;
      while (1) {
        if (_0x417327.result.result !== 0) {
          addGameLog("怪物已经死亡!!!!");
          await this.prcessBody();
          return false;
        }
        addGameLog("未击败，继续攻击");
        if (_0x417327.result.playerInfos[0].uid == MFC.userInfo.uid) {
          if (_0x417327.result.playerInfos[0].nextRoundOP !== 1) {
            addGameLog("首发被击败");
            _0x45869e = false;
            break;
          }
        } else if (_0x417327.result.playerInfos[1].nextRoundOP !== 1) {
          addGameLog("首发被击败");
          _0x45869e = false;
          break;
        }
        if (_0x417327.result.playerInfos[0].uid !== MFC.userInfo.uid) {
          addGameLog("怪物当前血量:" + _0x417327.result.playerInfos[0].petInfos[0].crtHp);
          if (_0x417327.result.playerInfos[0].petInfos[0].crtHp <= 1) {
            break;
          }
        } else {
          addGameLog("怪物当前血量:" + _0x417327.result.playerInfos[1].petInfos[0].crtHp);
          if (_0x417327.result.playerInfos[1].petInfos[0].crtHp <= 1) {
            break;
          }
        }
        await this.send_message("cs_online_load_battle_result", {
          groupId: ""
        });
        await wait(200);
        _0x417327 = await this.useSkill(_0x4adaa7);
      }
      await wait(200);
      this.CatchPetDatas = null;
      let _0x313c12 = 1;
      let _0x15a1f2 = 0;
      while (_0x417327.result.result == 0) {
        if (_0x45869e) {
          if (_0x417327.result.playerInfos[0].uid == MFC.userInfo.uid) {
            if (_0x417327.result.playerInfos[0].nextRoundOP !== 1) {
              addGameLog("首发被击败,切换精灵");
              await this.send_message("cs_online_load_battle_result", {
                groupId: ""
              });
              const _0x4141eb = {
                petIndex: _0x313c12
              };
              const _0x5b902d = {
                opType: 2,
                data: _0x4141eb,
                groupId: ""
              };
              await this.send_message("cs_online_player_operation", _0x5b902d);
              _0x313c12++;
              if (_0x313c12 == 4) {
                break;
              }
            }
          } else if (_0x417327.result.playerInfos[1].nextRoundOP !== 1) {
            addGameLog("首发被击败,切换精灵");
            await this.send_message("cs_online_load_battle_result", {
              groupId: ""
            });
            const _0x229688 = {
              petIndex: _0x313c12
            };
            const _0x4fe30a = {
              opType: 2,
              data: _0x229688,
              groupId: ""
            };
            await this.send_message("cs_online_player_operation", _0x4fe30a);
            _0x313c12++;
            if (_0x313c12 == 4) {
              break;
            }
          }
        } else if (_0x417327.result.playerInfos[0].uid == MFC.userInfo.uid) {
          if (_0x417327.result.playerInfos[0].nextRoundOP !== 1) {
            addGameLog("首发被击败,野怪未达1血");
            break;
          }
        } else if (_0x417327.result.playerInfos[1].nextRoundOP !== 1) {
          addGameLog("首发被击败,野怪未达1血");
          break;
        }
        addGameLog("怪物血量已经为1,开始捕捉");
        await this.send_message("cs_online_load_battle_result", {
          groupId: ""
        });
        let _0x20f8b3 = randomCap(this.capIds);
        if (_0x20f8b3 == "NoCap") {
          addGameLog("无可用胶囊,捕捉任务结束");
          this.logAllCatchPets(this.allCatchPets);
          this.stop();
          return false;
        }
        await wait(400);
        if (this.defaultNum > _0x15a1f2) {
          addGameLog("使用:" + _0x20f8b3.name + "胶囊,剩余:" + _0x20f8b3.num);
          _0x417327 = await this.useItem(_0x20f8b3.itemId);
          let _0x2d219e = await this.waitEvent("sc_notify_item_change");
          _0x2d219e.gameBody.splice(0, _0x2d219e.gameBody.length);
          _0x15a1f2++;
        } else {
          addGameLog("捕抓" + this.defaultNum + "次未抓到,重新捕抓");
          break;
        }
        if (this.CatchPetDatas || window.nowTask.CatchPetDatas) {
          if (window.nowTask.CatchPetDatas) {
            this.CatchPetDatas = window.nowTask.CatchPetDatas;
          }
          addGameLog("捕捉成功: " + this.CatchPetDatas.pet.nick + " 天赋:" + this.CatchPetDatas.pet.talent);
          MFC.bubbleAlert.showAlert("捕捉成功: " + this.CatchPetDatas.pet.nick + " 天赋:" + this.CatchPetDatas.pet.talent);
          this.allCatchPets.push({
            nick: this.CatchPetDatas.pet.nick,
            talent: this.CatchPetDatas.pet.talent
          });
          this.addCount++;
          if (isNaN(this.stopTalent)) {
            break;
          }
          if (this.CatchPetDatas.pet.talent >= this.stopTalent) {
            addGameLog("天赋满足:" + this.stopTalent, "停止");
            this.logAllCatchPets(this.allCatchPets);
            this.stop();
            return true;
          }
          break;
        }
        addGameLog("继续捕捉");
      }
      if (_0x417327.result.result === 2) {
        addGameLog("被野怪击败");
      }
      if (this.addCount >= this.catchCounts) {
        addGameLog("捕捉执行完毕:" + this.addCount + "次");
        this.logAllCatchPets(this.allCatchPets);
        this.stop();
        return true;
      } else {
        await this.prcessBody();
        return;
      }
    } catch (_0x1fd5bf) {
      logger(_0x1fd5bf);
      this.logAllCatchPets(this.allCatchPets);
    }
  }
  logAllCatchPets(_0x4a6f85) {
    if (_0x4a6f85.length > 0) {
      let _0x32cc81 = [];
      for (let _0x3ba776 = 0; _0x3ba776 < _0x4a6f85.length; _0x3ba776++) {
        _0x32cc81.push("\n精灵: " + _0x4a6f85[_0x3ba776].nick + " 天赋: " + _0x4a6f85[_0x3ba776].talent);
      }
      addGameLog(_0x32cc81.join(""));
    }
    addGameLog("\n捕捉精灵汇总:");
  }
  getUseCatchPets() {
    const _0x39d2f0 = {
      处处留情: 31598,
      真抽打: 31993,
      手下留情: 10057,
      手下留情Plus: 100125,
      天魔裂空闪: 400005
    };
    const _0x604d9a = PetManager.getInstance().getAllPets();
    const _0x511a54 = _0x604d9a.flatMap(_0x2090ee => Object.entries(_0x39d2f0).filter(([_0x288def, _0x29fe4e]) => _0x2090ee.skills.includes(_0x29fe4e)).map(([_0x138592, _0x5490e0]) => ({
      getTime: _0x2090ee.getTime,
      skillID: _0x5490e0,
      petId: _0x2090ee.petId,
      petTokenGetTimeList: _0x2090ee.petTokenGetTimeList,
      skills: _0x2090ee.skills,
      nick: _0x2090ee.nick
    }))).filter(function (_0x3c9c7) {
      if (_0x3c9c7.nick == "皮皮" && _0x3c9c7.skills.indexOf(400005) !== -1) {
        if (_0x3c9c7.petTokenGetTimeList[0] !== 0 && _0x3c9c7.petTokenGetTimeList[1] !== 0 && _0x3c9c7.petTokenGetTimeList[2] !== 0) {
          if (PetTokenManager.getInstance().calcEnchValue(PetTokenManager.getInstance().getTokenInfo(_0x3c9c7.petTokenGetTimeList[0]).ench).enchId == 101 && PetTokenManager.getInstance().calcEnchValue(PetTokenManager.getInstance().getTokenInfo(_0x3c9c7.petTokenGetTimeList[1]).ench).enchId == 101 && PetTokenManager.getInstance().calcEnchValue(PetTokenManager.getInstance().getTokenInfo(_0x3c9c7.petTokenGetTimeList[2]).ench).enchId == 101) {
            return _0x3c9c7;
          }
        }
      } else {
        return _0x3c9c7;
      }
    });
    if (_0x511a54.length) {
      return _0x511a54;
    } else {
      return false;
    }
  }
  checkUseCatchPet() {
    const _0x2fedda = {
      处处留情: 31598,
      真抽打: 31993,
      手下留情: 10057,
      手下留情Plus: 100125,
      天魔裂空闪: 400005
    };
    const _0x3db24b = Object.values(_0x2fedda).map(() => false);
    const _0x56ecc0 = PetManager.getInstance().getAllPets();
    for (let _0x198213 = 0; _0x198213 < _0x56ecc0.length; _0x198213++) {
      const _0x5deaa1 = _0x56ecc0[_0x198213];
      const _0x6bdfca = _0x5deaa1.skills;
      if (_0x5deaa1.level >= 6) {
        Object.values(_0x2fedda).some((_0x14d06a, _0x311fb6) => {
          if (_0x5deaa1.nick == "皮皮" && _0x5deaa1.skills.indexOf(400005) !== -1) {
            if (_0x5deaa1.petTokenGetTimeList[0] !== 0 && _0x5deaa1.petTokenGetTimeList[1] !== 0 && _0x5deaa1.petTokenGetTimeList[2] !== 0) {
              if (PetTokenManager.getInstance().calcEnchValue(PetTokenManager.getInstance().getTokenInfo(_0x5deaa1.petTokenGetTimeList[0]).ench).enchId == 101 && PetTokenManager.getInstance().calcEnchValue(PetTokenManager.getInstance().getTokenInfo(_0x5deaa1.petTokenGetTimeList[1]).ench).enchId == 101 && PetTokenManager.getInstance().calcEnchValue(PetTokenManager.getInstance().getTokenInfo(_0x5deaa1.petTokenGetTimeList[2]).ench).enchId == 101) {} else {
                return false;
              }
            } else {
              return false;
            }
          }
          if (_0x6bdfca.includes(_0x14d06a)) {
            const _0x4ef21b = {
              getTime: _0x5deaa1.getTime,
              skillID: _0x14d06a,
              petId: _0x5deaa1.petId
            };
            _0x3db24b[_0x311fb6] = _0x4ef21b;
            return true;
          }
          return false;
        });
      }
    }
    return _0x3db24b.find(_0x191da6 => _0x191da6) || false;
  }
}
class Mine extends SuperTask {
  constructor() {
    super();
    this.nowName = "采矿";
  }
  start() {
    super.start();
    let _0xe7acd5 = this;
    MFC.alert.show("确定进行采矿吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x5d0ea2) {
      _0xe7acd5.stop();
    }, function (_0x5adf56) {
      _0xe7acd5.prcessBody();
    }]);
  }
  async prcessBody() {
    try {
      const _0x4f940c = xls.collect.getItems().map(_0x5570f5 => {
        if (_0x5570f5.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss") <= _0x5570f5.endTime) {
          return _0x5570f5.id;
        }
      }).filter(_0x116b3b => _0x116b3b !== undefined);
      const _0x3d3938 = xls.collect.getItems().map(_0x4fd255 => {
        if (_0x4fd255.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss") <= _0x4fd255.endTime) {
          return _0x4fd255.dailyLimit;
        }
      }).filter(_0x2dbef0 => _0x2dbef0 !== undefined);
      const _0x5ebcef = _0x4f940c.map(_0x58f9e2 => {
        return MFC.attr.getAttr(parseInt(MFC.attrType.dailyMiningStart) + _0x58f9e2);
      });
      let _0xc9e1f3 = 0;
      while (_0xc9e1f3 < _0x4f940c.length) {
        logger(_0xc9e1f3);
        if (_0x5ebcef[_0xc9e1f3] < _0x3d3938[_0xc9e1f3]) {
          const _0xbe8350 = {
            id: _0x4f940c[_0xc9e1f3]
          };
          await this.send_message("cs_mining", _0xbe8350);
          _0x5ebcef[_0xc9e1f3]++;
        } else {
          let _0x1fa8c8 = xls.collect.getItem(_0x4f940c[_0xc9e1f3]).name;
          addGameLog(_0x1fa8c8 + "采集完毕");
          _0xc9e1f3++;
        }
      }
      addGameLog("所有采集执行完毕");
      this.stop();
    } catch (_0x46ac00) {}
  }
}
class DailyTask extends SuperTask {
  constructor() {
    super();
    this.nowName = "日常";
    this.attr = 0;
    this.nowPetData = null;
    this.switchBtnList = [];
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_notify_change_pet"
    }, {
      watchEventName: "sc_change_default_team"
    }, {
      watchEventName: "sc_notify_item_change"
    }];
  }
  start() {
    super.start();
    let _0x43c421 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x45c622 = SimpleAlertUi({
        width: 460,
        height: 460
      });
      _0x43c421.alertWin = _0x45c622;
      let _0x30751e = [];
      const _0x444d4d = {
        text: "一键日常",
        y: _0x45c622.height / 16
      };
      var _0x1ce64d = createLabel(_0x444d4d);
      _0x1ce64d.x = _0x45c622.width / 2 - _0x1ce64d.width / 2;
      _0x30751e.push(_0x1ce64d);
      const _0x366153 = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x1ce64d.y + _0x1ce64d.height + 12
      };
      var _0x23cce1 = createLabel(_0x366153);
      _0x30751e.push(_0x23cce1);
      const _0x1fda21 = {
        text: "[使用挑战阵容1]请确保将强力的精灵设置首发",
        textColor: 16777215,
        x: 40,
        y: _0x23cce1.y + _0x23cce1.height + 10
      };
      var _0x1443ec = createLabel(_0x1fda21);
      _0x30751e.push(_0x1443ec);
      const _0x3fb06b = {
        text: "请确保首发技能为威力最大的技能",
        textColor: 16777215,
        x: 40,
        y: _0x1443ec.y + _0x1443ec.height + 10
      };
      var _0x8630ab = createLabel(_0x3fb06b);
      _0x30751e.push(_0x8630ab);
      const _0x21550b = {
        text: "进化达人为幽浮,会消耗经验至20级.并消耗6个羽之石\n勇者之塔需要首发未满100级,否则勇者之塔不会完成5次",
        textColor: 16776960,
        x: 40,
        y: _0x8630ab.y + _0x8630ab.height + 10
      };
      var _0x129f27 = createLabel(_0x21550b);
      _0x30751e.push(_0x129f27);
      let _0x3ef411 = [{
        label: {
          text: "野怪10次"
        },
        switch: {
          storageKey: "mapMonster10switch",
          taskId: 19,
          taskName: "mapMonster10"
        }
      }, {
        label: {
          text: "分享电池"
        },
        switch: {
          storageKey: "shareBatteryswitch",
          taskId: 16,
          taskName: "shareBattery"
        }
      }, {
        label: {
          text: "前往观战"
        },
        switch: {
          storageKey: "lookBattleswitch",
          taskId: 15,
          taskName: "lookBattle"
        }
      }, {
        label: {
          text: "先锋达人"
        },
        switch: {
          storageKey: "sptBattleswitch",
          taskId: 5,
          taskName: "sptBattle"
        }
      }, {
        label: {
          text: "进化达人"
        },
        switch: {
          storageKey: "evolutionswitch",
          taskId: 13,
          taskName: "evolution"
        }
      }, {
        label: {
          text: "购买豆子"
        },
        switch: {
          storageKey: "buyCoinswitch",
          taskId: 14,
          taskName: "buyCoin"
        }
      }, {
        label: {
          text: "捕捉达人"
        },
        switch: {
          storageKey: "catchPet1switch",
          taskId: 6,
          taskName: "catchPet1"
        }
      }, {
        label: {
          text: "普通副本"
        },
        switch: {
          storageKey: "normalLevelswitch",
          taskId: 3,
          taskName: "normalLevel"
        }
      }, {
        label: {
          text: "精英副本"
        },
        switch: {
          storageKey: "superLevelswitch",
          taskId: 4,
          taskName: "superLevel"
        }
      }, {
        label: {
          text: "星际迷航"
        },
        switch: {
          storageKey: "TrekBattleswitch",
          taskId: 9,
          taskName: "TrekBattle"
        }
      }, {
        label: {
          text: "豆子作战"
        },
        switch: {
          storageKey: "CoinBattleswitch",
          taskId: 10,
          taskName: "CoinBattle"
        }
      }, {
        label: {
          text: "极限挑战"
        },
        switch: {
          storageKey: "limitBattleswitch",
          taskId: 11,
          taskName: "limitBattle"
        }
      }, {
        label: {
          text: "对战达人"
        },
        switch: {
          storageKey: "PVP3switch",
          taskId: 8,
          taskName: "PVP3"
        }
      }, {
        label: {
          text: "勇者之塔"
        },
        switch: {
          storageKey: "braveryswitch",
          taskId: 22,
          taskName: "bravery"
        }
      }, {
        label: {
          text: "能量补给"
        },
        switch: {
          storageKey: "nl5switch",
          taskId: 2,
          taskName: "nl5"
        }
      }, {
        label: {
          text: "一键水滴"
        },
        switch: {
          storageKey: "sdswitch",
          taskId: null,
          taskName: "sd"
        }
      }];
      let _0x22f2ca = 30;
      let _0x5bb67d = _0x129f27.y + _0x129f27.height + 20;
      for (let _0x2ba205 = 0; _0x2ba205 < _0x3ef411.length; _0x2ba205++) {
        const _0x1e67f8 = {
          text: _0x3ef411[_0x2ba205].label.text,
          x: _0x22f2ca,
          y: _0x5bb67d
        };
        let _0xc35778 = createLabel(_0x1e67f8);
        const _0x79d01c = {
          x: _0xc35778.x + _0xc35778.width + 10,
          y: _0x5bb67d,
          selected: true,
          storageKey: _0x3ef411[_0x2ba205].switch.storageKey,
          taskId: _0x3ef411[_0x2ba205].switch.taskId,
          taskName: _0x3ef411[_0x2ba205].switch.taskName
        };
        let _0x36721a = createToggle(_0x79d01c);
        _0x22f2ca = _0x22f2ca + _0xc35778.width + 10 + _0x36721a.width + 10;
        this.switchBtnList.push(_0x36721a);
        _0x30751e.push(_0xc35778);
        _0x30751e.push(_0x36721a);
        if ((_0x2ba205 + 1) % 3 == 0) {
          _0x5bb67d = _0x5bb67d + _0x36721a.height + 10;
          _0x22f2ca = 30;
        }
      }
      _0x43c421.addAllUis(_0x30751e);
      _0x45c622.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x43c421.stop();
      }, function () {
        _0x43c421.switchBtnList.forEach(_0x18a16c => localStorage.setItem(_0x18a16c.storageKey, _0x18a16c.selected));
        _0x43c421.prcessBody();
      }], null);
      _0x45c622.showAlert();
    });
  }
  async prcessBody() {
    try {
      let _0x46a40f = await this.send_message("cs_get_daily_task_list", {});
      for (let _0x4c9d06 = 0; _0x4c9d06 < this.switchBtnList.length; _0x4c9d06++) {
        if (this.switchBtnList[_0x4c9d06].taskName == "mapMonster10" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x5dc8e7 = this.switchBtnList[_0x4c9d06].taskId;
          let _0x3b0a85 = _0x46a40f.dailyTask.find(_0x41d343 => _0x41d343.taskId === _0x5dc8e7).taskProcess;
          if (_0x3b0a85 < 10) {
            addGameLog("执行野怪10次");
            let _0x13293d = new FightMapBoss(10);
            await _0x13293d.prcessBody();
            await wait(300);
            const _0x2d6027 = {
              taskId: _0x5dc8e7
            };
            await this.send_message("cs_get_daily_task_prize", _0x2d6027);
          } else if (_0x3b0a85 == 10) {
            await wait(300);
            addGameLog("野怪10次已完成");
            const _0x3fe9a8 = {
              taskId: _0x5dc8e7
            };
            await this.send_message("cs_get_daily_task_prize", _0x3fe9a8);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "shareBattery" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x23ac35 = this.switchBtnList[_0x4c9d06].taskId;
          let _0x1e44db = _0x46a40f.dailyTask.find(_0x445642 => _0x445642.taskId === _0x23ac35).taskProcess;
          if (_0x1e44db < 1) {
            await wait(300);
            addGameLog("执行分享电池");
            await this.send_message("cs_share_succeed", {});
            await wait(300);
            const _0x27de62 = {
              taskId: _0x23ac35
            };
            await this.send_message("cs_get_daily_task_prize", _0x27de62);
          } else if (_0x1e44db == 1) {
            await wait(300);
            addGameLog("分享电池完成");
            const _0x457b78 = {
              taskId: _0x23ac35
            };
            await this.send_message("cs_get_daily_task_prize", _0x457b78);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "lookBattle" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x13ffd2 = this.switchBtnList[_0x4c9d06].taskId;
          let _0xdb38e = _0x46a40f.dailyTask.find(_0x48d0d0 => _0x48d0d0.taskId === _0x13ffd2).taskProcess;
          if (_0xdb38e < 1) {
            addGameLog("执行观战");
            let _0x29767b = await this.send_message("sc_battle_watch_get_room", {
              type: 1,
              start: 0,
              end: 15,
              battleType: 1
            });
            logger(_0x29767b);
            let _0x59bc3c = "";
            for (let _0x4675df = 0; _0x4675df < _0x29767b.ranking.length; _0x4675df++) {
              if (_0x29767b.ranking[_0x4675df].combatantA.match_permissions == "1") {
                _0x59bc3c = _0x29767b.ranking[_0x4675df].roomId;
              }
            }
            addGameLog("进入对战房间");
            if (_0x59bc3c == "") {
              addGameLog("无符合条件的观战");
            } else {
              await wait(300);
              await this.send_message("cs_battle_watch", {
                watchId: _0x59bc3c,
                type: 1,
                watchUid: _0x59bc3c.split("_")[0]
              });
              await wait(200);
              winLog.onOpenPanel();
              await this.send_message("cs_battle_watch", {
                watchId: _0x59bc3c,
                type: 2,
                watchUid: _0x59bc3c.split("_")[0]
              });
              winLog.txtWatcher.text = "正在执行:" + window.nowTask.nowName;
              await wait(300);
              const _0x25f008 = {
                taskId: _0x13ffd2
              };
              await this.send_message("cs_get_daily_task_prize", _0x25f008);
            }
          } else if (_0xdb38e == 1) {
            await wait(300);
            addGameLog("观战完成");
            const _0x50311c = {
              taskId: _0x13ffd2
            };
            await this.send_message("cs_get_daily_task_prize", _0x50311c);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "sptBattle" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x3fd93c = this.switchBtnList[_0x4c9d06].taskId;
          let _0x3e3c0b = _0x46a40f.dailyTask.find(_0x1567f5 => _0x1567f5.taskId === _0x3fd93c).taskProcess;
          if (_0x3e3c0b < 1) {
            addGameLog("执行spt挑战");
            if (UserManager.getInstance().userInfo.curEnergy < 20) {
              addGameLog("电池不足,取消spt挑战!");
              continue;
            }
            let _0x19cd06 = PetManager.getInstance().getAllPets();
            let _0x5d4eba = "";
            for (let _0x3de254 = 0; _0x3de254 < _0x19cd06.length; _0x3de254++) {
              if (_0x19cd06[_0x3de254].level == 1) {
                _0x5d4eba = _0x19cd06[_0x3de254];
                break;
              }
            }
            if (_0x5d4eba == "") {
              addGameLog("背包没1级精灵");
            } else {
              let _0x1433f6 = _0x5d4eba.skills[0];
              let _0x2727b3 = UserManager.getInstance().userInfo.defaultTeam;
              await this.send_message("cs_new_change_petArray", {
                op: 2,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: []
              });
              const _0x27d16d = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x5d4eba.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x27d16d);
              await wait(300);
              addGameLog("派出: " + _0x5d4eba.nick + " 对战: 里奥斯");
              const _0xc482c8 = {
                levelId: 3,
                getTimeList: [_0x5d4eba.getTime]
              };
              await this.send_message("cs_pve_planet_spt_start_battle", _0xc482c8);
              await this.initBattle();
              let _0x1ccea4 = await this.useSkill(_0x1433f6);
              while (_0x1ccea4.result.result == 0) {
                addGameLog("未被击败，继续攻击");
                _0x1ccea4 = await this.useSkill(_0x1433f6);
              }
              if (_0x1ccea4.result.result === 1) {
                addGameLog("打过boss,按理不会触发");
              } else {
                addGameLog("被Boss击败,完成spt挑战!");
              }
              addGameLog("将阵容切换回来");
              await wait(200);
              const _0x599b7c = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: _0x2727b3
              };
              await this.send_message("cs_new_change_petArray", _0x599b7c);
              await wait(200);
              const _0x1f4cf5 = {
                taskId: _0x3fd93c
              };
              await this.send_message("cs_get_daily_task_prize", _0x1f4cf5);
            }
          } else if (_0x3e3c0b == 1) {
            await wait(300);
            addGameLog("spt完成");
            const _0x4ee4c9 = {
              taskId: _0x3fd93c
            };
            await this.send_message("cs_get_daily_task_prize", _0x4ee4c9);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "normalLevel" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x364ebf = this.switchBtnList[_0x4c9d06].taskId;
          let _0x35b8cd = _0x46a40f.dailyTask.find(_0x48dcb2 => _0x48dcb2.taskId === _0x364ebf).taskProcess;
          if (_0x35b8cd < 5) {
            addGameLog("开始扫荡普通关卡");
            if (UserManager.getInstance().userInfo.curEnergy < 25) {
              addGameLog("电池不足,取消普通副本挑战!");
            } else {
              await this.send_message("cs_sd_pve_battle", {
                levelId: 23,
                loop: 5
              });
              addGameLog("扫荡五次云霄星二层完毕");
              await wait(300);
              const _0x1b83ac = {
                taskId: _0x364ebf
              };
              await this.send_message("cs_get_daily_task_prize", _0x1b83ac);
            }
          } else if (_0x35b8cd == 5) {
            await wait(300);
            addGameLog("普通关卡5次完成");
            const _0x3d3e64 = {
              taskId: _0x364ebf
            };
            await this.send_message("cs_get_daily_task_prize", _0x3d3e64);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "catchPet1" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x274354 = UserManager.getInstance().userInfo.defaultTeam;
          let _0x480e5b = this.switchBtnList[_0x4c9d06].taskId;
          let _0x483145 = _0x46a40f.dailyTask.find(_0x4b572a => _0x4b572a.taskId === _0x480e5b).taskProcess;
          if (_0x483145 < 1) {
            addGameLog("开始捕捉幽浮");
            await wait(200);
            let _0xb046aa = new MapCatch();
            _0xb046aa.capIds = [4001, 4002];
            _0xb046aa.levelIds = [34];
            _0xb046aa.catchCounts = 1;
            _0xb046aa.stopTalent = 31;
            await _0xb046aa.prcessBody();
            addGameLog("将阵容切换回来");
            await wait(200);
            const _0x103dac = {
              op: 1,
              arrayType: "defaultTeam",
              subArray: 0,
              idx: 1,
              teamUp: 0,
              fightType: 0,
              getTimeList: _0x274354
            };
            await this.send_message("cs_new_change_petArray", _0x103dac);
            let _0x5c0118 = await this.send_message("cs_get_daily_task_list", {});
            let _0x508abe = _0x5c0118.dailyTask.find(_0x5e9e2c => _0x5e9e2c.taskId === _0x480e5b).taskProcess;
            if (_0x508abe == 1) {
              await wait(300);
              const _0x3d6344 = {
                taskId: _0x480e5b
              };
              await this.send_message("cs_get_daily_task_prize", _0x3d6344);
            }
          } else if (_0x483145 == 1) {
            await wait(300);
            addGameLog("捕捉达人完成");
            const _0x167420 = {
              taskId: _0x480e5b
            };
            await this.send_message("cs_get_daily_task_prize", _0x167420);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "evolution" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x35e356 = this.switchBtnList[_0x4c9d06].taskId;
          let _0x48da26 = _0x46a40f.dailyTask.find(_0x2c8bbf => _0x2c8bbf.taskId === _0x35e356).taskProcess;
          if (_0x48da26 < 1) {
            addGameLog("开始进化幽浮");
            let _0x10113f = PetManager.getInstance().getAllPets();
            let _0x5b45c1 = "";
            for (let _0x4a42d1 = 0; _0x4a42d1 < _0x10113f.length; _0x4a42d1++) {
              let _0x5e21fe = _0x10113f[_0x4a42d1];
              if (_0x5e21fe.petId == 25) {
                _0x5b45c1 = _0x5e21fe;
                break;
              }
            }
            if (_0x5b45c1 == "") {
              addGameLog("背包中没有幽浮");
              let _0x3f26e0 = UserManager.getInstance().userInfo.defaultTeam;
              addGameLog("开始捕捉幽浮");
              await wait(200);
              let _0x4f4f0d = new MapCatch();
              _0x4f4f0d.capIds = [4001, 4002];
              _0x4f4f0d.levelIds = [34];
              _0x4f4f0d.catchCounts = 1;
              _0x4f4f0d.stopTalent = 31;
              await _0x4f4f0d.prcessBody();
              addGameLog("将阵容切换回来");
              await wait(200);
              const _0x4fca16 = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: _0x3f26e0
              };
              await this.send_message("cs_new_change_petArray", _0x4fca16);
              _0x10113f = PetManager.getInstance().getAllPets();
              let _0x5a91da = "";
              for (let _0x4e40bd = 0; _0x4e40bd < _0x10113f.length; _0x4e40bd++) {
                let _0x28ef85 = _0x10113f[_0x4e40bd];
                if (_0x28ef85.petId == 25) {
                  _0x5a91da = _0x28ef85;
                  break;
                }
              }
              let _0x8aa522 = 0;
              if (getSeerItemNum(30031) < 6) {
                addGameLog("羽之石不足6个,停止进化");
              } else {
                addGameLog("选中幽浮 等级: " + _0x5a91da.level);
                if (_0x5a91da.level >= 20) {
                  addGameLog("等级达到,直接进化!");
                  _0x8aa522 = 1;
                } else {
                  while (1) {
                    let _0x194268 = await this.send_message("cs_query_exp", {
                      flag: 1
                    });
                    if (_0x194268.exp < 300) {
                      addGameLog("经验仓经验不足300,停止进化");
                      break;
                    }
                    const _0xe348b0 = {
                      getTime: _0x5a91da.getTime,
                      addExp: 300
                    };
                    await this.send_message("cs_pet_inject_exp", _0xe348b0);
                    addGameLog("加经验300");
                    let _0x25ab01 = await this.waitEvent("sc_notify_change_pet");
                    let _0x23abcc = JSON.parse(_0x25ab01.gameBody[_0x25ab01.gameBody.length - 1].raw);
                    _0x25ab01.gameBody.splice(0, _0x25ab01.gameBody.length);
                    if (_0x23abcc.pet.level >= 20) {
                      addGameLog("等级达到20级,停止经验注入");
                      _0x8aa522 = 1;
                      break;
                    }
                  }
                }
              }
              if (_0x8aa522 == 1) {
                const _0x4f7f65 = {
                  getTime: _0x5a91da.getTime,
                  id: 21
                };
                await this.send_message("cs_pet_evolve", _0x4f7f65);
                addGameLog("进化成功!");
                await wait(300);
                const _0x4c3a4a = {
                  taskId: _0x35e356
                };
                await this.send_message("cs_get_daily_task_prize", _0x4c3a4a);
              }
            } else {
              let _0x42514a = 0;
              if (getSeerItemNum(30031) < 6) {
                addGameLog("羽之石不足6个,停止进化");
              } else {
                addGameLog("选中幽浮 等级: " + _0x5b45c1.level);
                if (_0x5b45c1.level >= 20) {
                  addGameLog("等级达到,直接进化!");
                  _0x42514a = 1;
                } else {
                  while (1) {
                    let _0x2e8c0c = await this.send_message("cs_query_exp", {
                      flag: 1
                    });
                    if (_0x2e8c0c.exp < 300) {
                      addGameLog("经验仓经验不足300,停止进化");
                      break;
                    }
                    const _0x3f426f = {
                      getTime: _0x5b45c1.getTime,
                      addExp: 300
                    };
                    await this.send_message("cs_pet_inject_exp", _0x3f426f);
                    addGameLog("加经验300");
                    let _0x48ed8b = await this.waitEvent("sc_notify_change_pet");
                    let _0x103713 = JSON.parse(_0x48ed8b.gameBody[_0x48ed8b.gameBody.length - 1].raw);
                    _0x48ed8b.gameBody.splice(0, _0x48ed8b.gameBody.length);
                    if (_0x103713.pet.level >= 20) {
                      addGameLog("等级达到20级,停止经验注入");
                      _0x42514a = 1;
                      break;
                    }
                  }
                }
              }
              if (_0x42514a == 1) {
                const _0x53a37a = {
                  getTime: _0x5b45c1.getTime,
                  id: 21
                };
                await this.send_message("cs_pet_evolve", _0x53a37a);
                addGameLog("进化成功!");
                await wait(300);
                const _0x2067bb = {
                  taskId: _0x35e356
                };
                await this.send_message("cs_get_daily_task_prize", _0x2067bb);
              }
            }
          } else if (_0x48da26 == 1) {
            await wait(300);
            addGameLog("进化幽浮完成");
            const _0xec276c = {
              taskId: _0x35e356
            };
            await this.send_message("cs_get_daily_task_prize", _0xec276c);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "buyCoin" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x1b5335 = this.switchBtnList[_0x4c9d06].taskId;
          let _0x15323c = _0x46a40f.dailyTask.find(_0x34f6e2 => _0x34f6e2.taskId === _0x1b5335).taskProcess;
          if (_0x15323c < 1) {
            await wait(200);
            await this.send_message("cs_buy_coin", {});
            addGameLog("购买赛尔豆成功");
            await wait(300);
            const _0x39f42e = {
              taskId: _0x1b5335
            };
            await this.send_message("cs_get_daily_task_prize", _0x39f42e);
          } else if (_0x15323c == 1) {
            await wait(300);
            addGameLog("购买赛尔豆完成");
            const _0x5a4494 = {
              taskId: _0x1b5335
            };
            await this.send_message("cs_get_daily_task_prize", _0x5a4494);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "superLevel" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x2b184d = this.switchBtnList[_0x4c9d06].taskId;
          let _0x67a4fe = _0x46a40f.dailyTask.find(_0x54b95d => _0x54b95d.taskId === _0x2b184d).taskProcess;
          if (_0x67a4fe < 3) {
            addGameLog("开始扫荡精英关卡");
            if (UserManager.getInstance().userInfo.curEnergy < 45) {
              addGameLog("电池不足,取消精英副本挑战!");
            } else {
              await this.send_message("cs_sd_pve_battle", {
                levelId: 10103,
                loop: 3
              });
              addGameLog("扫荡三次洛克斯星林间完毕");
              await wait(300);
              const _0x5105f5 = {
                taskId: _0x2b184d
              };
              await this.send_message("cs_get_daily_task_prize", _0x5105f5);
            }
          } else if (_0x67a4fe == 3) {
            await wait(300);
            addGameLog("扫荡三次洛克斯星林间精英关卡完毕");
            const _0x51a31a = {
              taskId: _0x2b184d
            };
            await this.send_message("cs_get_daily_task_prize", _0x51a31a);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "TrekBattle" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x5a5177 = this.switchBtnList[_0x4c9d06].taskId;
          let _0x3bfd40 = _0x46a40f.dailyTask.find(_0x57c0a2 => _0x57c0a2.taskId === _0x5a5177).taskProcess;
          if (_0x3bfd40 < 1) {
            addGameLog("开始星际迷航");
            let _0x470897 = new Trek();
            await _0x470897.prcessBody();
            let _0x3e1797 = await this.send_message("cs_get_daily_task_list", {});
            let _0xff352a = _0x3e1797.dailyTask.find(_0xe9a347 => _0xe9a347.taskId === _0x5a5177).taskProcess;
            if (_0xff352a == 1) {
              await wait(300);
              const _0x26d7ae = {
                taskId: _0x5a5177
              };
              await this.send_message("cs_get_daily_task_prize", _0x26d7ae);
            }
          } else if (_0x3bfd40 == 1) {
            await wait(300);
            addGameLog("星际迷航完成");
            const _0x3266b6 = {
              taskId: _0x5a5177
            };
            await this.send_message("cs_get_daily_task_prize", _0x3266b6);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "CoinBattle" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x54eca0 = this.switchBtnList[_0x4c9d06].taskId;
          let _0x565b65 = _0x46a40f.dailyTask.find(_0x1cfdf2 => _0x1cfdf2.taskId === _0x54eca0).taskProcess;
          if (_0x565b65 < 1) {
            addGameLog("开始豆子大作战");
            let _0x5b53c5 = new CoinBigBattle();
            await _0x5b53c5.prcessBody();
            let _0x521431 = await this.send_message("cs_get_daily_task_list", {});
            let _0x48b2e3 = _0x521431.dailyTask.find(_0x54f544 => _0x54f544.taskId === _0x54eca0).taskProcess;
            if (_0x48b2e3 == 1) {
              await wait(300);
              const _0x2e7f42 = {
                taskId: _0x54eca0
              };
              await this.send_message("cs_get_daily_task_prize", _0x2e7f42);
            }
          } else if (_0x565b65 == 1) {
            await wait(300);
            addGameLog("赛尔豆大作战完成");
            const _0x4752df = {
              taskId: _0x54eca0
            };
            await this.send_message("cs_get_daily_task_prize", _0x4752df);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "limitBattle" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x23da4a = this.switchBtnList[_0x4c9d06].taskId;
          let _0x41100d = _0x46a40f.dailyTask.find(_0x180b7c => _0x180b7c.taskId === _0x23da4a).taskProcess;
          if (_0x41100d < 1) {
            addGameLog("开始极限挑战");
            let _0x14e8c0 = new LimitBattle();
            _0x14e8c0.taskId = _0x23da4a;
            await _0x14e8c0.prcessBody();
            await wait(2000);
          } else if (_0x41100d == 1) {
            await wait(300);
            addGameLog("极限挑战完成");
            const _0x419d91 = {
              taskId: _0x23da4a
            };
            await this.send_message("cs_get_daily_task_prize", _0x419d91);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "PVP3" && this.switchBtnList[_0x4c9d06].selected) {
          if (UserManager.getInstance().userInfo.pvp3V3Team.length < 3) {
            addGameLog("检测到3v3并未配置完成,自动进行配置");
            let _0x2b0930 = PetManager.getInstance().getAllPets();
            const _0x5ed905 = {
              op: 1,
              arrayType: "pvp3V3Team",
              subArray: 0,
              idx: 1,
              teamUp: 0,
              fightType: 0,
              getTimeList: [_0x2b0930[0].getTime, _0x2b0930[1].getTime, _0x2b0930[2].getTime]
            };
            this.send_message("cs_new_change_petArray", _0x5ed905);
            await wait(300);
          }
          let _0x39ef87 = this.switchBtnList[_0x4c9d06].taskId;
          let _0x365c01 = _0x46a40f.dailyTask.find(_0x1abb93 => _0x1abb93.taskId === _0x39ef87).taskProcess;
          if (_0x365c01 < 3) {
            addGameLog("开始自由对战3次,注意设置阵容");
            let _0x137798 = new ziyou();
            _0x137798.goalTaskCounts = 3;
            await _0x137798.prcessBody();
            await wait(2000);
            const _0x25685d = {
              taskId: _0x39ef87
            };
            await this.send_message("cs_get_daily_task_prize", _0x25685d);
          } else if (_0x365c01 == 3) {
            await wait(300);
            addGameLog("PVP3次完成");
            const _0x3bcf78 = {
              taskId: _0x39ef87
            };
            await this.send_message("cs_get_daily_task_prize", _0x3bcf78);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "bravery" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x6b7749 = this.switchBtnList[_0x4c9d06].taskId;
          let _0x262136 = _0x46a40f.dailyTask.find(_0x2766d4 => _0x2766d4.taskId === _0x6b7749).taskProcess;
          if (_0x262136 < 5) {
            addGameLog("开始勇者之塔5次");
            let _0x3f4520 = new braveryBattle();
            await _0x3f4520.prcessBody();
            await wait(2000);
            const _0x24fc9d = {
              taskId: _0x6b7749
            };
            await this.send_message("cs_get_daily_task_prize", _0x24fc9d);
          } else if (_0x262136 == 5) {
            await wait(300);
            addGameLog("勇者之塔五次完成");
            const _0x37e9ba = {
              taskId: _0x6b7749
            };
            await this.send_message("cs_get_daily_task_prize", _0x37e9ba);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "nl5" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x52dcd5 = this.switchBtnList[_0x4c9d06].taskId;
          let _0x5a56bc = _0x46a40f.dailyTask.find(_0x1bbd03 => _0x1bbd03.taskId === _0x52dcd5).taskProcess;
          if (_0x5a56bc < 5) {
            addGameLog("5次能量包定时器已经开启");
            let _0x3e52bb = MFC.attr.getAttr(MFC.attrType.dailyFreeNormalLotteryTimes);
            let _0x3a077b = MFC.attr.getAttr(MFC.attrType.dailyNextFreeNormalLotteryTime) * 1000;
            let _0x5a83e1 = // TOLOOK
            setInterval(() => {
              try {
                let _0x5470ee = MFC.attr.getAttr(MFC.attrType.dailyFreeNormalLotteryTimes);
                if (_0x3e52bb >= _0x5470ee) {
                  if (_0x3e52bb < 5) {
                    if (_0x3a077b < MFC.serverTimer.date.getTime() - 30000) {
                      addGameLog("即将进行能量补给第" + (_0x3e52bb + 1) + "次获取");
                      GlobalSocket.PROTOCOL_SOCKET.send(10612, {
                        id: 1
                      });
                      _0x3a077b = MFC.serverTimer.date.getTime() + 330000;
                      _0x3e52bb++;
                    }
                  } else {
                    if (MFC.attr.getAttr(MFC.attrType.dailyTaskProcess2) == 5) {
                      addGameLog("购买5次能量包任务领取");
                      GlobalSocket.PROTOCOL_SOCKET.send(1793, {
                        taskId: 2
                      });
                    }
                    addGameLog("能量补给获取结束");
                    clearInterval(_0x5a83e1);
                  }
                } else if (_0x3e52bb < _0x5470ee) {
                  _0x3a077b = MFC.serverTimer.date.getTime() + 330000;
                  _0x3e52bb++;
                }
              } catch (_0x5aa19d) {}
            }, 300000);
          } else if (_0x5a56bc == 5) {
            await wait(300);
            addGameLog("五次免费能量包,已经完成");
            const _0x30dade = {
              taskId: _0x52dcd5
            };
            await this.send_message("cs_get_daily_task_prize", _0x30dade);
          }
        } else if (this.switchBtnList[_0x4c9d06].taskName == "sd" && this.switchBtnList[_0x4c9d06].selected) {
          let _0x1dbf9f = new Kloswamp();
          await _0x1dbf9f.prcessBody();
          break;
        }
      }
      MFC.moduleManager.openModule(xls.ModuleConst.TASK_PANEL);
      await wait(200);
      while (1) {
        if (taskPanel) {
          await wait(1200);
          break;
        } else {
          await wait(200);
        }
      }
      let _0x32bd69 = [];
      let _0x557148 = taskPanel.DailyTaskService.getActive();
      let _0x25534 = taskPanel.DailyTaskService.getBoxStatus();
      if (_0x557148 >= 750 && _0x25534[4] == 0) {
        _0x32bd69.push(4);
      }
      if (_0x557148 >= 600 && _0x25534[3] == 0) {
        _0x32bd69.push(3);
      }
      if (_0x557148 >= 450 && _0x25534[2] == 0) {
        _0x32bd69.push(2);
      }
      if (_0x557148 >= 300 && _0x25534[1] == 0) {
        _0x32bd69.push(1);
      }
      if (_0x557148 >= 150 && _0x25534[0] == 0) {
        _0x32bd69.push(0);
      }
      for (let _0x3f2214 = 0; _0x3f2214 < _0x32bd69.length; _0x3f2214++) {
        const _0x364bb9 = {
          prizeId: _0x32bd69[_0x3f2214]
        };
        await this.send_message("cs_get_daily_active_prize", _0x364bb9);
        addGameLog("领取第" + (_0x32bd69[_0x3f2214] + 1) + "档日常活跃奖励");
        await wait(200);
      }
      await wait(100);
      MFC.moduleManager.closeModule(xls.ModuleConst.TASK_PANEL);
      addGameLog("日常执行完毕!");
      this.stop();
    } catch (_0x59c2cf) {
      logger(_0x59c2cf);
    }
  }
}
class HireCoin extends SuperTask {
  constructor() {
    super();
    this.nowName = "雇佣刷豆";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_change_default_team"
    }, {
      watchEventName: "sc_notify_item_change"
    }];
    this.uid = "";
  }
  start() {
    super.start();
    let _0x5aae16 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      var _0x3d1463 = SimpleAlertUi({});
      _0x5aae16.alertWin = _0x3d1463;
      const _0x37f0a3 = {
        text: "极限挑战 雇佣20w赛尔豆",
        y: _0x3d1463.height / 11
      };
      const _0x5476dd = {
        label: _0x37f0a3
      };
      const _0x276bf2 = {
        text: "当前账号会租借大号精灵进行对战",
        y: _0x3d1463.height / 5
      };
      const _0x35614e = {
        label: _0x276bf2
      };
      const _0x1b12e3 = {
        text: "大号驻守精灵需1级,方便送死极限挑战",
        y: _0x3d1463.height / 3
      };
      const _0x3e925e = {
        label: _0x1b12e3
      };
      let _0x304ef2 = [_0x5476dd, _0x35614e, _0x3e925e];
      for (let _0x3cf94b = 0; _0x3cf94b < _0x304ef2.length; _0x3cf94b++) {
        let _0x59a87e = createLabel(_0x304ef2[_0x3cf94b].label);
        _0x59a87e.x = _0x3d1463.width / 2 - _0x59a87e.width / 2;
        _0x3d1463.addChild(_0x59a87e);
      }
      const _0x358241 = {
        prompt: "输入大号uid",
        storageKey: "coinId",
        width: 120,
        y: _0x3d1463.height / 2
      };
      var _0x1b3ee8 = createEdit(_0x358241);
      _0x1b3ee8.x = _0x3d1463.width / 2 - _0x1b3ee8.width / 2;
      _0x3d1463.addChild(_0x1b3ee8);
      _0x3d1463.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x5aae16.stop();
      }, function () {
        _0x5aae16.uid = _0x1b3ee8.text;
        if (isNaN(parseInt(_0x5aae16.uid.trim())) || parseInt(_0x5aae16.uid.trim()) < 0) {
          MFC.bubbleAlert.showAlert("输入uid有误,请重新输入!");
          return true;
        }
        if (parseInt(_0x5aae16.uid.trim()) == UserManager.getInstance().userInfo.uid) {
          MFC.bubbleAlert.showAlert("请勿输入当前账号的uid!");
          return true;
        }
        localStorage.setItem("coinId", _0x5aae16.uid);
        _0x5aae16.prcessBody();
      }], null);
      _0x3d1463.showAlert();
    });
  }
  async prcessBody() {
    try {
      while (1) {
        let _0x441910 = await this.send_message("sc_get_campaign_pet_challenge_boss");
        if (_0x441910.times <= 0) {
          MFC.bubbleAlert.showAlert("极限挑战次数已经用完,请更换其他账号");
          this.stop();
          return false;
        }
        let _0x25b4b8 = _0x441910.todayLimitAttr;
        let _0x4bbf64 = await this.send_message("cs_new_get_hire_pet_list", {
          friendPageNo: 1,
          friendPageSize: 1000,
          teamPageNo: 1,
          teamPageSize: 1000
        });
        let _0x2af80c = [];
        let _0x33353a = [];
        let _0x30d1d9 = _0x4bbf64.teamHireList;
        _0x30d1d9.forEach(_0x2d6d7a => {
          if (_0x2d6d7a.userId == parseInt(this.uid)) {
            console.log(_0x2d6d7a);
            _0x2d6d7a.hireType = "team";
            _0x33353a.push(_0x2d6d7a);
            addGameLog("战队精灵: " + PetConfig.getDef(_0x2d6d7a.petId).name + " 雇佣次数: " + _0x2d6d7a.petHireTimes);
            if (_0x2d6d7a.petHireTimes < 10) {
              _0x2af80c.push(_0x2d6d7a);
            }
          }
        });
        let _0x37a7a3 = _0x4bbf64.friendHireList;
        _0x37a7a3.forEach(_0xc13037 => {
          if (_0xc13037.userId == parseInt(this.uid)) {
            console.log(_0xc13037);
            _0x33353a.push(_0xc13037);
            _0xc13037.hireType = "firend";
            addGameLog("好友精灵: " + PetConfig.getDef(_0xc13037.petId).name + " 雇佣次数: " + _0xc13037.petHireTimes);
            if (_0xc13037.petHireTimes < 3 && _0xc13037.petLevel <= 40) {
              _0x2af80c.push(_0xc13037);
            }
          }
        });
        logger(_0x33353a);
        if (_0x33353a.length == 0) {
          addGameLog("好友/战队租借列表均未找到: " + this.uid + "的精灵!");
          MFC.bubbleAlert.showAlert("好友/战队租借列表均未找到: " + this.uid + "的精灵!");
          this.stop();
          return false;
        }
        let _0x2bb7ce = [];
        for (let _0x41f21c = 0; _0x41f21c < _0x2af80c.length; _0x41f21c++) {
          if (_0x25b4b8.indexOf(PetConfig.getDef(_0x2af80c[_0x41f21c].petId).elemType) !== -1) {
            _0x2bb7ce.push(_0x2af80c[_0x41f21c]);
          }
        }
        logger(_0x2bb7ce, "!!!!!!!!!!!!!!!!!!!!!!2");
        if (_0x2bb7ce.length == 0) {
          addGameLog("雇佣完毕!");
          this.stop();
          return false;
        }
        for (let _0x5722ed = 0; _0x5722ed < _0x2bb7ce.length; _0x5722ed++) {
          if (_0x2bb7ce[_0x5722ed].petHireTimes < 10) {
            let _0x21c36a = await this.send_message("cs_new_get_hire_pet_info", {
              type: _0x2bb7ce[_0x5722ed].type,
              pos: _0x2bb7ce[_0x5722ed].pos,
              targetUid: parseInt(this.uid)
            });
            let _0xae6f78 = _0x21c36a.pet;
            await this.send_message("cs_start_campaign_pet_challenge", {
              levelId: 5,
              hirePetList: [this.uid + "_" + _0x2bb7ce[_0x5722ed].type + "_" + _0x2bb7ce[_0x5722ed].pos],
              attachBattleSkill: [{
                petId: _0xae6f78.petId,
                level: _0xae6f78.level,
                skillList: _0xae6f78.skills,
                getTime: _0x2bb7ce[_0x5722ed].getTime,
                otherUid: this.uid,
                type: _0x2bb7ce[_0x5722ed].type
              }]
            });
            let _0xfa81db = await this.waitEvent("sc_battle_notify_load_resource");
            _0xfa81db.gameBody.splice(0, _0xfa81db.gameBody.length);
            await this.send_message("cs_online_load_resource", {
              groupId: "",
              battleType: 0
            });
            await wait(200);
            await this.send_message("cs_online_player_operation", {
              opType: 5,
              data: null,
              groupId: ""
            });
            _0xfa81db = await this.waitEvent("sc_battle_notify_round_result");
            _0xfa81db.gameBody.splice(0, _0xfa81db.gameBody.length);
            await wait(200);
            await this.send_message("cs_online_load_battle_result", {
              groupId: ""
            });
            await wait(200);
            let _0x5be79e = _0xae6f78.skills[0];
            const _0x262303 = {
              skillID: _0x5be79e
            };
            const _0x93c93e = {
              opType: 1,
              data: _0x262303,
              groupId: ""
            };
            await this.send_message("cs_online_player_operation", _0x93c93e);
            _0xfa81db = await this.waitEvent("sc_battle_notify_round_result");
            break;
          }
        }
      }
    } catch (_0x4a2b76) {
      logger(_0x4a2b76);
    }
  }
}
class Trek extends SuperTask {
  constructor() {
    super();
    this.nowName = "迷航";
    this.skillData = {
      绝命火焰: 11022,
      光闪击: 10630,
      光闪击Plus: 100023,
      奥义断水击: 32529
    };
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
  }
  start() {
    super.start();
    let _0x25e876 = this;
    MFC.alert.show(`星际迷航[自动上阵]
迷航每天5点-24点开启
前9关魔焰猩猩绝命火焰+后面采用光闪击瞬杀精灵+水次来通过
[未满足条件会自动进行租借]`, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x259339) {
      _0x25e876.stop();
    }, function (_0x413ae0) {
      _0x25e876.prcessBody();
    }]);
  }
  async prcessBody() {
    try {
      let _0x42f631 = await this.send_message("cs_pve_expedition_query_battle", {
        type: 0
      });
      if (_0x42f631.starMedal == 0) {
        addGameLog("迷航未开启,进行开启迷航");
        let _0xbd8974 = MFC.userInfo.vipLevel;
        if (_0xbd8974 < 8) {
          addGameLog("超能nono没到达8级");
          let _0x22e38d = await this.openTrek();
          if (!_0x22e38d) {
            addGameLog("迷航停止!");
            this.stop();
            return false;
          }
          _0x42f631 = await this.send_message("cs_pve_expedition_query_battle", {
            type: 0
          });
        } else {
          let _0x571b00 = await this.send_message("cs_pve_expedition_query_battle", {
            type: 1
          });
          if (_0x571b00.desc && _0x571b00.desc.indexOf("没有历史存档记录") !== -1) {
            addGameLog("没有历史存档记录");
            let _0x1781cf = await this.openTrek();
            if (!_0x1781cf) {
              addGameLog("迷航停止!");
              this.stop();
              return false;
            }
            _0x42f631 = await this.send_message("cs_pve_expedition_query_battle", {
              type: 0
            });
          } else if (_0x571b00.petList.filter(function (_0x3bd6a4) {
            return _0x3bd6a4 && _0x3bd6a4.useSkills && _0x3bd6a4.useSkills.some(function (_0x4f68d3) {
              return _0x4f68d3.id === 100023 || _0x4f68d3.id === 10630;
            });
          }).length > 0) {
            if (_0x571b00.petList.filter(function (_0x17f48a) {
              return _0x17f48a && _0x17f48a.useSkills && _0x17f48a.useSkills.some(function (_0x5bc5e5) {
                return _0x5bc5e5.id === 100023 || _0x5bc5e5.id === 10630;
              });
            })[0].fightAffects.split("_")[0] == 10002 && _0x571b00.petList.filter(function (_0x163412) {
              return _0x163412 && _0x163412.useSkills && _0x163412.useSkills.some(function (_0xff76ca) {
                return _0xff76ca.id === 11022;
              });
            }).length > 0) {
              let _0x40a217 = [];
              for (let _0x3518ac = 0; _0x3518ac < 12; _0x3518ac++) {
                if (_0x571b00.petList[_0x3518ac]) {
                  _0x40a217[_0x3518ac] = _0x571b00.petList[_0x3518ac].getTime;
                } else {
                  _0x40a217[_0x3518ac] = 0;
                }
              }
              await this.send_message("cs_pve_expedition_save_record", {
                type: 1
              });
              const _0x477d24 = {
                petList: _0x40a217,
                attachBattleSkill: []
              };
              await this.send_message("cs_pve_expedition_set_array", _0x477d24);
              addGameLog("使用保存阵容");
            } else {
              addGameLog("没瞬杀光闪击");
              let _0x1cde97 = await this.openTrek();
              if (!_0x1cde97) {
                addGameLog("迷航停止!");
                this.stop();
                return false;
              }
              _0x42f631 = await this.send_message("cs_pve_expedition_query_battle", {
                type: 0
              });
            }
          } else {
            addGameLog("没光闪击");
            let _0x67c9b3 = await this.openTrek();
            if (!_0x67c9b3) {
              addGameLog("迷航停止!");
              this.stop();
              return false;
            }
            _0x42f631 = await this.send_message("cs_pve_expedition_query_battle", {
              type: 0
            });
          }
        }
        _0x42f631 = await this.send_message("cs_pve_expedition_query_battle", {
          type: 0
        });
        if (JSON.stringify(_0x42f631).indexOf(this.skillData.奥义断水击) !== -1) {
          addGameLog("迷航阵容符合标准，Going迷航");
          await this.actionStarTrek2();
          addGameLog("星际迷航已经完成!");
        } else {
          addGameLog("迷航阵容符合标准，Going迷航");
          await this.actionStarTrek();
          addGameLog("星际迷航已经完成!");
        }
      } else {
        addGameLog("检测迷航开启,继续迷航");
        if (JSON.stringify(_0x42f631).indexOf(this.skillData.绝命火焰) != -1) {
          if (JSON.stringify(_0x42f631).indexOf(this.skillData.光闪击Plus) != -1 || JSON.stringify(_0x42f631).indexOf(this.skillData.光闪击) != -1) {} else {
            addGameLog("迷航目前阵容中没有检测到光闪击，迷航停止");
            await this.stop();
            return false;
          }
        } else {
          addGameLog("迷航目前阵容中没有检测到绝命火焰，迷航停止");
          await this.stop();
          return false;
        }
        if (JSON.stringify(_0x42f631).indexOf(this.skillData.奥义断水击) !== -1) {
          addGameLog("迷航阵容符合水次阵容，Going迷航");
          await this.actionStarTrek2();
          addGameLog("星际迷航已经完成!");
        } else {
          addGameLog("迷航阵容符合标准，Going迷航");
          await this.actionStarTrek();
          addGameLog("星际迷航已经完成!");
        }
      }
    } catch (_0x5e5418) {
      logger(_0x5e5418);
    }
  }
  async openTrek() {
    let _0x21deb1;
    let _0x5039d7;
    let _0x21c7b1;
    let _0x23384e = 0;
    let _0x56c70d = 0;
    const _0x1b232c = {
      skills: [this.skillData.绝命火焰]
    };
    let _0x9b9d70 = getGoalPets([_0x1b232c]);
    if (!_0x9b9d70) {
      addGameLog("精灵背包中没有魔焰猩猩+绝命火焰，请确保有其条件，再来启动脚本");
      return false;
    } else {
      addGameLog("背包中携有 魔焰猩猩 + 绝命火焰:" + _0x9b9d70.nick);
      _0x56c70d = 1;
    }
    _0x5039d7 = _0x9b9d70.getTime;
    let _0xc46c73 = getGoalPets([{
      skills: [10630],
      features: [8, 7, 6, 5]
    }, {
      skills: [100023],
      features: [8, 7, 6, 5]
    }]);
    const _0x2c5bd2 = {
      skills: [this.skillData.奥义断水击]
    };
    let _0x97bb55 = getGoalPets([_0x2c5bd2]);
    if (!_0xc46c73) {
      addGameLog("背包中没有瞬杀先制相关精灵，尝试进行好友/战队雇佣");
    } else {
      addGameLog("背包中携有 瞬杀+光闪击精灵:" + _0xc46c73.nick);
      _0x21deb1 = _0xc46c73.getTime;
      _0x23384e = 1;
    }
    if (_0x56c70d == 1 && _0x23384e == 1) {
      if (!_0x97bb55) {
        addGameLog("背包中没有水次水次奥义断水击，尝试进行好友/战队雇佣");
        _0x23384e = 2;
      } else {
        addGameLog("背包中携有水次奥义断水击:" + _0x97bb55.nick);
        _0x21c7b1 = _0x97bb55.getTime;
        _0x23384e = 3;
      }
    }
    if (_0x56c70d == 1 && _0x23384e == 3) {
      const _0x4cb709 = {
        petList: [_0x5039d7, _0x21deb1, _0x21c7b1, "0", "0", "0"],
        attachBattleSkill: []
      };
      await this.send_message("cs_pve_expedition_set_array", _0x4cb709);
      await wait(200);
      addGameLog("迷航开启成功!");
      return true;
    } else if (_0x56c70d == 1 && _0x23384e == 2) {
      let _0x4e9ff8 = await this.fromHireGetscPet();
      if (!_0x4e9ff8) {
        addGameLog("战队/好友雇佣系统都无水次奥义断水击");
        _0x23384e = 1;
      } else {
        addGameLog("战队/好友雇佣系统有水次奥义断水击");
        addGameLog("雇佣水次迷航开启成功!");
        const _0x280ba2 = {
          petList: [_0x5039d7, _0x21deb1, _0x4e9ff8.userId + "_" + _0x4e9ff8.type + "_" + _0x4e9ff8.pos, "0", "0", "0"],
          attachBattleSkill: [{
            petId: _0x4e9ff8.petId,
            level: _0x4e9ff8.petLevel,
            skillList: _0x4e9ff8.skills,
            getTime: _0x4e9ff8.getTime,
            otherUid: _0x4e9ff8.userId,
            type: _0x4e9ff8.type
          }]
        };
        await this.send_message("cs_pve_expedition_set_array", _0x280ba2);
        return true;
      }
    }
    if (_0x56c70d == 1 && _0x23384e == 1) {
      const _0x215668 = {
        petList: [_0x5039d7, _0x21deb1, "0", "0", "0", "0"],
        attachBattleSkill: []
      };
      await this.send_message("cs_pve_expedition_set_array", _0x215668);
      await wait(200);
      addGameLog("迷航开启成功!");
      return true;
    } else if (_0x56c70d == 1 && _0x23384e == 0) {
      let _0x414348 = await this.fromHireGetGuanPet();
      if (!_0x414348) {
        addGameLog("战队/好友雇佣系统都无瞬杀光闪击精灵，操作结束");
        return false;
      } else {
        addGameLog("战队/好友雇佣系统有瞬杀光闪击精灵");
        addGameLog("雇佣迷航开启成功!");
        const _0x231218 = {
          petList: [_0x5039d7, _0x414348.userId + "_" + _0x414348.type + "_" + _0x414348.pos, "0", "0", "0", "0"],
          attachBattleSkill: [{
            petId: _0x414348.petId,
            level: _0x414348.petLevel,
            skillList: _0x414348.skills,
            getTime: _0x414348.getTime,
            otherUid: _0x414348.userId,
            type: _0x414348.type
          }]
        };
        await this.send_message("cs_pve_expedition_set_array", _0x231218);
        return true;
      }
    }
  }
  async fromHireGetscPet() {
    addGameLog("正在检测中....");
    let _0x46b177 = await this.send_message("cs_new_get_hire_pet_list", {
      friendPageNo: 1,
      friendPageSize: 1000,
      teamPageNo: 1,
      teamPageSize: 1000
    });
    let _0x552ac2 = _0x46b177.friendHireList;
    for (let _0x268a70 = 0; _0x268a70 < _0x552ac2.length; _0x268a70++) {
      let _0x2d7499 = _0x552ac2[_0x268a70];
      if (_0x2d7499.petId == 2135) {
        const _0x1d09e6 = {
          type: _0x2d7499.type,
          pos: _0x2d7499.pos,
          targetUid: _0x2d7499.userId
        };
        let _0xf5217e = await this.send_message("cs_new_get_hire_pet_info", _0x1d09e6);
        let _0x4793ef = _0xf5217e.pet.skills;
        if (_0x4793ef.indexOf(this.skillData.奥义断水击) !== -1) {
          addGameLog("好友雇佣列表存在水次奥义断水击:" + _0xf5217e.pet.nick);
          _0x2d7499.skills = _0xf5217e.pet.skills;
          return _0x2d7499;
        }
      }
    }
    let _0x202040 = _0x46b177.teamHireList;
    for (let _0x1ab9b9 = 0; _0x1ab9b9 < _0x202040.length; _0x1ab9b9++) {
      let _0x4d80a5 = _0x202040[_0x1ab9b9];
      if (_0x4d80a5.petId == 2135) {
        const _0x1ef644 = {
          type: _0x4d80a5.type,
          pos: _0x4d80a5.pos,
          targetUid: _0x4d80a5.userId
        };
        let _0x52159a = await this.send_message("cs_new_get_hire_pet_info", _0x1ef644);
        let _0x59d4a3 = _0x52159a.pet.skills;
        if (_0x59d4a3.indexOf(this.skillData.奥义断水击) !== -1) {
          addGameLog("好友雇佣列表存在水次奥义断水击:" + _0x52159a.pet.nick);
          _0x4d80a5.skills = _0x52159a.pet.skills;
          return _0x4d80a5;
        }
      }
    }
    for (let _0x163cb3 = 0; _0x163cb3 < _0x552ac2.length; _0x163cb3++) {
      let _0x7525b2 = _0x552ac2[_0x163cb3];
      if (_0x7525b2.petId == 2135) {
        const _0x21de55 = {
          type: _0x7525b2.type,
          pos: _0x7525b2.pos,
          targetUid: _0x7525b2.userId
        };
        let _0x35765e = await this.send_message("cs_new_get_hire_pet_info", _0x21de55);
        let _0x573f8c = _0x35765e.pet.skills;
        if (_0x573f8c.indexOf(this.skillData.奥义断水击) !== -1) {
          addGameLog("好友雇佣列表存在水次奥义断水击:" + _0x35765e.pet.nick);
          _0x7525b2.skills = _0x35765e.pet.skills;
          return _0x7525b2;
        }
      }
    }
    for (let _0x2d7c65 = 0; _0x2d7c65 < _0x202040.length; _0x2d7c65++) {
      let _0x3e0436 = _0x202040[_0x2d7c65];
      if (_0x3e0436.petId == 2135) {
        const _0x17b8f3 = {
          type: _0x3e0436.type,
          pos: _0x3e0436.pos,
          targetUid: _0x3e0436.userId
        };
        let _0xd1ff29 = await this.send_message("cs_new_get_hire_pet_info", _0x17b8f3);
        let _0x162a76 = _0xd1ff29.pet.skills;
        if (_0x162a76.indexOf(this.skillData.光闪击Plus) !== -1 || _0x162a76.indexOf(this.skillData.光闪击) !== -1) {
          addGameLog("好友雇佣列表存在水次奥义断水击:" + _0xd1ff29.pet.nick);
          _0x3e0436.skills = _0xd1ff29.pet.skills;
          return _0x3e0436;
        }
      }
    }
  }
  async fromHireGetGuanPet() {
    addGameLog("正在检测中....");
    let _0x28056e = await this.send_message("cs_new_get_hire_pet_list", {
      friendPageNo: 1,
      friendPageSize: 1000,
      teamPageNo: 1,
      teamPageSize: 1000
    });
    let _0x2e9f89 = _0x28056e.friendHireList;
    for (let _0x5550ae = 0; _0x5550ae < _0x2e9f89.length; _0x5550ae++) {
      let _0x4de562 = _0x2e9f89[_0x5550ae];
      if (_0x4de562.petId == 733) {
        const _0x443e83 = {
          type: _0x4de562.type,
          pos: _0x4de562.pos,
          targetUid: _0x4de562.userId
        };
        let _0x2bfaf1 = await this.send_message("cs_new_get_hire_pet_info", _0x443e83);
        let _0x2d44d5 = _0x2bfaf1.pet.skills;
        if (_0x2d44d5.indexOf(this.skillData.光闪击Plus) !== -1 || _0x2d44d5.indexOf(this.skillData.光闪击) !== -1) {
          if (_0x2bfaf1.pet.featureId == 8) {
            addGameLog("好友雇佣列表存在三星瞬杀光闪击精灵:" + _0x2bfaf1.pet.nick);
            _0x4de562.skills = _0x2bfaf1.pet.skills;
            return _0x4de562;
          }
        }
      }
    }
    let _0x2fc7c8 = _0x28056e.teamHireList;
    for (let _0x281021 = 0; _0x281021 < _0x2fc7c8.length; _0x281021++) {
      let _0x402ded = _0x2fc7c8[_0x281021];
      if (_0x402ded.petId == 733) {
        const _0x3bee57 = {
          type: _0x402ded.type,
          pos: _0x402ded.pos,
          targetUid: _0x402ded.userId
        };
        let _0x2c4fe6 = await this.send_message("cs_new_get_hire_pet_info", _0x3bee57);
        let _0x2fa5ad = _0x2c4fe6.pet.skills;
        if (_0x2fa5ad.indexOf(this.skillData.光闪击Plus) !== -1 || _0x2fa5ad.indexOf(this.skillData.光闪击) !== -1) {
          if (_0x2c4fe6.pet.featureId == 8) {
            addGameLog("战队雇佣列表存在三星瞬杀光闪击精灵:" + _0x2c4fe6.pet.nick);
            _0x402ded.skills = _0x2c4fe6.pet.skills;
            return _0x402ded;
          }
        }
      }
    }
    for (let _0x48a7b4 = 0; _0x48a7b4 < _0x2e9f89.length; _0x48a7b4++) {
      let _0x5bc674 = _0x2e9f89[_0x48a7b4];
      if (_0x5bc674.petId == 733) {
        const _0x4a216a = {
          type: _0x5bc674.type,
          pos: _0x5bc674.pos,
          targetUid: _0x5bc674.userId
        };
        let _0x2a36bd = await this.send_message("cs_new_get_hire_pet_info", _0x4a216a);
        let _0x121469 = _0x2a36bd.pet.skills;
        if (_0x121469.indexOf(this.skillData.光闪击Plus) !== -1 || _0x121469.indexOf(this.skillData.光闪击) !== -1) {
          if (_0x2a36bd.pet.featureId == 7 || _0x2a36bd.pet.featureId == 6 || _0x2a36bd.pet.featureId == 5) {
            addGameLog("好友雇佣列表存在瞬杀光闪击精灵:" + _0x2a36bd.pet.nick);
            _0x5bc674.skills = _0x2a36bd.pet.skills;
            return _0x5bc674;
          }
        }
      }
    }
    for (let _0x4db42a = 0; _0x4db42a < _0x2fc7c8.length; _0x4db42a++) {
      let _0x777755 = _0x2fc7c8[_0x4db42a];
      if (_0x777755.petId == 733) {
        const _0x7ebcb3 = {
          type: _0x777755.type,
          pos: _0x777755.pos,
          targetUid: _0x777755.userId
        };
        let _0x1ef72e = await this.send_message("cs_new_get_hire_pet_info", _0x7ebcb3);
        let _0x71f98f = _0x1ef72e.pet.skills;
        if (_0x71f98f.indexOf(this.skillData.光闪击Plus) !== -1 || _0x71f98f.indexOf(this.skillData.光闪击) !== -1) {
          if (_0x1ef72e.pet.featureId == 7 || _0x1ef72e.pet.featureId == 6 || _0x1ef72e.pet.featureId == 5) {
            addGameLog("战队雇佣列表存瞬杀光闪击精灵:" + _0x1ef72e.pet.nick);
            _0x777755.skills = _0x1ef72e.pet.skills;
            return _0x777755;
          }
        }
      }
    }
  }
  moveNumToFirst(_0x4253e2, _0x3ce92f) {
    let _0x630a2f = _0x4253e2.indexOf(_0x3ce92f);
    _0x4253e2.splice(_0x630a2f, 1);
    _0x4253e2.unshift(_0x3ce92f);
    return _0x4253e2;
  }
  async actionStarTrek() {
    let _0x106da7 = await this.send_message("cs_pve_expedition_query_battle", {
      type: 0
    });
    let _0x66e1fa;
    let _0x2db11c;
    let _0x41c2f6 = [];
    logger(_0x106da7);
    for (let _0x28af03 = 0; _0x28af03 < _0x106da7.petList.length; _0x28af03++) {
      if (_0x106da7.petList[_0x28af03] == null) {
        _0x41c2f6.push(0);
      } else {
        _0x41c2f6.push(_0x106da7.petList[_0x28af03].getTime);
        let _0x5f8380 = _0x106da7.petList[_0x28af03].useSkills;
        if (JSON.stringify(_0x5f8380).indexOf(this.skillData.绝命火焰) != -1) {
          _0x66e1fa = _0x106da7.petList[_0x28af03].getTime;
        }
        if (JSON.stringify(_0x5f8380).indexOf(this.skillData.光闪击Plus) != -1 || JSON.stringify(_0x5f8380).indexOf(this.skillData.光闪击) != -1) {
          _0x2db11c = _0x106da7.petList[_0x28af03].getTime;
        }
      }
    }
    await wait(100);
    _0x106da7 = await this.send_message("cs_pve_expedition_query_battle", {
      type: 0
    });
    while (1) {
      if (parseInt(_0x106da7.levelId) + 1 == 16) {
        addGameLog("迷航已经通关");
        this.stop();
        return true;
      }
      addGameLog("迷航进度: 第" + (parseInt(_0x106da7.levelId) + 1) + "关卡");
      if (parseInt(_0x106da7.levelId) + 1 <= 8) {
        var _0x19126d;
        if (_0x106da7.petList[0] == null) {
          _0x19126d = {};
        } else {
          _0x19126d = _0x106da7.petList[0].useSkills;
        }
        if (JSON.stringify(_0x19126d).indexOf(this.skillData.绝命火焰) == -1) {
          addGameLog("前8关卡非魔焰首发，更换首发为魔焰");
          _0x41c2f6 = this.moveNumToFirst(_0x41c2f6, _0x66e1fa);
          const _0x3e3f93 = {
            petList: _0x41c2f6,
            attachBattleSkill: []
          };
          await this.send_message("cs_pve_expedition_set_array", _0x3e3f93);
          _0x106da7 = await this.send_message("cs_pve_expedition_query_battle", {
            type: 0
          });
        }
      } else {
        var _0x19126d;
        if (_0x106da7.petList[0] == null) {
          _0x19126d = {};
        } else {
          _0x19126d = _0x106da7.petList[0].useSkills;
        }
        if (JSON.stringify(_0x19126d).indexOf(this.skillData.光闪击Plus) == -1 && JSON.stringify(_0x19126d).indexOf(this.skillData.光闪击) == -1) {
          addGameLog("9关卡后非光闪击精灵首发，更换为目标精灵");
          logger(_0x41c2f6);
          _0x41c2f6 = this.moveNumToFirst(_0x41c2f6, _0x2db11c);
          const _0x21798a = {
            petList: _0x41c2f6,
            attachBattleSkill: []
          };
          await this.send_message("cs_pve_expedition_set_array", _0x21798a);
          _0x106da7 = await this.send_message("cs_pve_expedition_query_battle", {
            type: 0
          });
        }
      }
      let _0xa1931;
      var _0x19126d = _0x106da7.petList[0].useSkills;
      if (JSON.stringify(_0x19126d).indexOf(this.skillData.光闪击Plus) != -1) {
        _0xa1931 = this.skillData.光闪击Plus;
      }
      if (JSON.stringify(_0x19126d).indexOf(this.skillData.绝命火焰) != -1) {
        _0xa1931 = this.skillData.绝命火焰;
      }
      if (JSON.stringify(_0x19126d).indexOf(this.skillData.光闪击) != -1) {
        _0xa1931 = this.skillData.光闪击;
      }
      while (1) {
        let _0x2c75e2 = await this.send_message("cs_pve_expedition_query_battle", {
          type: 0
        });
        if (JSON.stringify(_0x2c75e2).indexOf("已达最大关卡") != -1) {
          addGameLog("已达最大关卡");
          this.stop();
          return true;
        }
        const _0x44cb3a = {
          getTimeList: _0x41c2f6
        };
        await this.send_message("cs_pve_expedition_start_battle", _0x44cb3a);
        await this.initBattle();
        await this.send_message("cs_online_load_battle_result", {
          groupId: ""
        });
        await wait(200);
        addGameLog("进度: " + (parseInt(_0x106da7.levelId) + 1) + "关");
        let _0x5917ef = await this.useSkill(_0xa1931);
        if (_0x5917ef.result.result == 1) {
          addGameLog("获胜,进入下一层");
          break;
        } else {
          logger("未获胜,重写进入关卡");
        }
      }
      _0x106da7 = await this.send_message("cs_pve_expedition_query_battle", {
        type: 0
      });
      addGameLog("战斗顺利: 星际迷航第" + parseInt(_0x106da7.levelId) + "关卡");
      if (parseInt(_0x106da7.levelId) == 15) {
        addGameLog("完成迷航，进行领取");
        await wait(200);
        await this.send_message("cs_pve_expedition_all_box", {});
        this.stop();
        break;
      }
    }
  }
  async actionStarTrek2() {
    let _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
      type: 0
    });
    let _0x1f54bb;
    let _0x1a43bc;
    let _0x298d7c;
    let _0x1398b2 = [];
    for (let _0x21cdee = 0; _0x21cdee < _0x2e38d0.petList.length; _0x21cdee++) {
      if (_0x2e38d0.petList[_0x21cdee] == null) {
        _0x1398b2.push(0);
      } else {
        _0x1398b2.push(_0x2e38d0.petList[_0x21cdee].getTime);
        let _0x2dc803 = _0x2e38d0.petList[_0x21cdee].useSkills;
        if (JSON.stringify(_0x2dc803).indexOf(this.skillData.绝命火焰) != -1) {
          _0x1f54bb = _0x2e38d0.petList[_0x21cdee].getTime;
        }
        if (JSON.stringify(_0x2dc803).indexOf(this.skillData.光闪击Plus) != -1 || JSON.stringify(_0x2dc803).indexOf(this.skillData.光闪击) != -1) {
          _0x1a43bc = _0x2e38d0.petList[_0x21cdee].getTime;
        }
        if (JSON.stringify(_0x2dc803).indexOf(this.skillData.奥义断水击) != -1) {
          _0x298d7c = _0x2e38d0.petList[_0x21cdee].getTime;
        }
      }
    }
    while (1) {
      _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
        type: 0
      });
      if (parseInt(_0x2e38d0.levelId) + 1 == 16) {
        addGameLog("迷航已经通关");
        await this.send_message("cs_pve_expedition_all_box", {});
        this.stop();
        return true;
      }
      addGameLog("迷航进度: 第" + (parseInt(_0x2e38d0.levelId) + 1) + "关卡");
      if (parseInt(_0x2e38d0.levelId) <= 7) {
        var _0x479c89;
        if (_0x2e38d0.petList[0] == null) {
          _0x479c89 = {};
        } else {
          _0x479c89 = _0x2e38d0.petList[0].useSkills;
        }
        if (JSON.stringify(_0x479c89).indexOf(this.skillData.绝命火焰) == -1) {
          addGameLog("前8关卡非魔焰首发，更换首发为魔焰");
          _0x1398b2 = this.moveNumToFirst(_0x1398b2, _0x1f54bb);
          const _0x3e9d72 = {
            petList: _0x1398b2,
            attachBattleSkill: []
          };
          await this.send_message("cs_pve_expedition_set_array", _0x3e9d72);
          _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
            type: 0
          });
        }
      } else if (parseInt(_0x2e38d0.levelId) > 7 && parseInt(_0x2e38d0.levelId) <= 9) {
        var _0x479c89;
        if (_0x2e38d0.petList[0] == null) {
          _0x479c89 = {};
        } else {
          _0x479c89 = _0x2e38d0.petList[0].useSkills;
        }
        if (JSON.stringify(_0x479c89).indexOf(this.skillData.光闪击Plus) == -1 && JSON.stringify(_0x479c89).indexOf(this.skillData.光闪击) == -1) {
          addGameLog("9关卡后非光闪击精灵首发，更换为目标精灵");
          _0x1398b2 = this.moveNumToFirst(_0x1398b2, _0x1a43bc);
          const _0x1484d8 = {
            petList: _0x1398b2,
            attachBattleSkill: []
          };
          await this.send_message("cs_pve_expedition_set_array", _0x1484d8);
          _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
            type: 0
          });
        }
      } else if (parseInt(_0x2e38d0.levelId) > 9 && parseInt(_0x2e38d0.levelId) <= 12) {
        var _0x479c89;
        if (_0x2e38d0.petList[0] == null) {
          _0x479c89 = {};
        } else {
          _0x479c89 = _0x2e38d0.petList[0].useSkills;
        }
        if (JSON.stringify(_0x479c89).indexOf(this.skillData.奥义断水击) == -1) {
          addGameLog("10关卡后非水次首发，更换为目标精灵");
          _0x1398b2 = this.moveNumToFirst(_0x1398b2, _0x298d7c);
          const _0x213362 = {
            petList: _0x1398b2,
            attachBattleSkill: []
          };
          await this.send_message("cs_pve_expedition_set_array", _0x213362);
          _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
            type: 0
          });
        }
      } else if (parseInt(_0x2e38d0.levelId) == 13) {
        var _0x479c89;
        if (_0x2e38d0.petList[0] == null) {
          _0x479c89 = {};
        } else {
          _0x479c89 = _0x2e38d0.petList[0].useSkills;
        }
        if (_0x2e38d0.petList.filter(function (_0x15395a) {
          return _0x15395a;
        }).filter(function (_0x394828) {
          return _0x394828.petID == 2135;
        })[0].crtHp <= 100) {
          if (JSON.stringify(_0x479c89).indexOf(this.skillData.光闪击Plus) == -1 && JSON.stringify(_0x479c89).indexOf(this.skillData.光闪击) == -1) {
            addGameLog("14关卡非光闪击精灵首发，更换为目标精灵");
            _0x1398b2 = this.moveNumToFirst(_0x1398b2, _0x1a43bc);
            const _0x1f04bd = {
              petList: _0x1398b2,
              attachBattleSkill: []
            };
            await this.send_message("cs_pve_expedition_set_array", _0x1f04bd);
            _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
              type: 0
            });
          }
        } else if (JSON.stringify(_0x479c89).indexOf(this.skillData.奥义断水击) == -1) {
          addGameLog("14关卡非水次首发，更换为目标精灵");
          _0x1398b2 = this.moveNumToFirst(_0x1398b2, _0x298d7c);
          const _0x57619c = {
            petList: _0x1398b2,
            attachBattleSkill: []
          };
          await this.send_message("cs_pve_expedition_set_array", _0x57619c);
          _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
            type: 0
          });
        }
      } else if (parseInt(_0x2e38d0.levelId) == 14) {
        var _0x479c89;
        if (_0x2e38d0.petList[0] == null) {
          _0x479c89 = {};
        } else {
          _0x479c89 = _0x2e38d0.petList[0].useSkills;
        }
        if (JSON.stringify(_0x479c89).indexOf(this.skillData.奥义断水击) == -1) {
          addGameLog("10关卡后非水次首发，更换为目标精灵");
          _0x1398b2 = this.moveNumToFirst(_0x1398b2, _0x298d7c);
          const _0x3b5513 = {
            petList: _0x1398b2,
            attachBattleSkill: []
          };
          await this.send_message("cs_pve_expedition_set_array", _0x3b5513);
          _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
            type: 0
          });
        }
      }
      _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
        type: 0
      });
      let _0x3c76e4;
      var _0x479c89 = _0x2e38d0.petList[0].useSkills;
      if (JSON.stringify(_0x479c89).indexOf(this.skillData.光闪击Plus) != -1) {
        _0x3c76e4 = this.skillData.光闪击Plus;
      }
      if (JSON.stringify(_0x479c89).indexOf(this.skillData.光闪击) != -1) {
        _0x3c76e4 = this.skillData.光闪击;
      }
      if (JSON.stringify(_0x479c89).indexOf(this.skillData.绝命火焰) != -1) {
        _0x3c76e4 = this.skillData.绝命火焰;
      }
      if (JSON.stringify(_0x479c89).indexOf(this.skillData.奥义断水击) != -1) {
        _0x3c76e4 = this.skillData.奥义断水击;
      }
      while (1) {
        let _0x57c972 = await this.send_message("cs_pve_expedition_query_battle", {
          type: 0
        });
        if (JSON.stringify(_0x57c972).indexOf("已达最大关卡") != -1) {
          addGameLog("已达最大关卡");
          this.stop();
          return true;
        }
        const _0x52995b = {
          getTimeList: _0x1398b2
        };
        await this.send_message("cs_pve_expedition_start_battle", _0x52995b);
        await this.initBattle();
        await this.send_message("cs_online_load_battle_result", {
          groupId: ""
        });
        await wait(200);
        addGameLog("进度: " + (parseInt(_0x2e38d0.levelId) + 1) + "关");
        let _0x5ef6fe = await this.useSkill(_0x3c76e4);
        if (_0x5ef6fe.result.result == 1) {
          addGameLog("战斗顺利: 星际迷航第" + (parseInt(_0x2e38d0.levelId) + 1) + "关卡");
          addGameLog("获胜,进入下一层");
          break;
        } else {
          logger("未获胜,重写进入关卡");
        }
      }
      _0x2e38d0 = await this.send_message("cs_pve_expedition_query_battle", {
        type: 0
      });
      if (parseInt(_0x2e38d0.levelId) == 15) {
        addGameLog("完成迷航，进行领取");
        await wait(200);
        await this.send_message("cs_pve_expedition_all_box", {});
        this.stop();
        break;
      }
    }
  }
}
class Pope extends SuperTask {
  constructor() {
    super();
    this.nowName = "教皇";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
    this.popetask = [];
    this.popecanmiss = 0;
    this.pp = false;
  }
  async start() {
    super.start();
    let _0x3b680f = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x22a2af = [];
      var _0x49dfa5 = SimpleAlertUi({
        height: 400,
        width: 450
      });
      _0x3b680f.alertWin = _0x49dfa5;
      const _0x4cfb24 = {
        text: "教皇",
        y: _0x49dfa5.height / 20
      };
      let _0x196756 = createLabel(_0x4cfb24);
      _0x196756.x = _0x49dfa5.applicationWidth / 2 - _0x196756.width / 2;
      _0x22a2af.push(_0x196756);
      const _0xbd6324 = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x196756.y + _0x196756.height + 10
      };
      var _0x1d5cba = createLabel(_0xbd6324);
      _0x22a2af.push(_0x1d5cba);
      const _0x2e7ddc = {
        text: "不是13回合通关需要奥斯卡天邪雷伊会回pp",
        textColor: 16711680,
        x: 40,
        y: _0x1d5cba.y + 10 + _0x1d5cba.height
      };
      var _0x4990ea = createLabel(_0x2e7ddc);
      _0x22a2af.push(_0x4990ea);
      const _0x2bcf75 = {
        text: "奥斯卡永恒加灵光天邪荒芜加万恶雷伊充电加雷神",
        textColor: 16711680,
        x: 40,
        y: _0x4990ea.y + _0x4990ea.height + 10
      };
      var _0x4f30d1 = createLabel(_0x2bcf75);
      _0x22a2af.push(_0x4f30d1);
      const _0x398bf4 = {
        text: "瞬杀光闪击+雷伊",
        x: _0x49dfa5.width / 8,
        y: _0x4f30d1.y + _0x4f30d1.height + 20
      };
      var _0x497701 = createLabel(_0x398bf4);
      _0x22a2af.push(_0x497701);
      const _0x15d48c = {
        x: _0x497701.x + _0x497701.width + 10,
        y: _0x497701.y - 1,
        selected: true,
        storageKey: "popeteam1"
      };
      let _0x575f5f = createRadio(_0x15d48c);
      _0x22a2af.push(_0x575f5f);
      const _0x102b14 = {
        text: "13回合以上打法",
        x: _0x575f5f.x + _0x575f5f.width + 10,
        y: _0x4f30d1.y + _0x4f30d1.height + 20
      };
      var _0x40126c = createLabel(_0x102b14);
      _0x22a2af.push(_0x40126c);
      const _0x151b6c = {
        x: _0x40126c.x + _0x40126c.width + 10,
        y: _0x497701.y - 1,
        selected: false,
        storageKey: "popeteam2"
      };
      let _0x568b8f = createRadio(_0x151b6c);
      _0x22a2af.push(_0x568b8f);
      const _0xff5b52 = {
        text: "蒙奇克",
        x: _0x49dfa5.width / 8,
        y: _0x497701.y + 30
      };
      var _0x32774d = createLabel(_0xff5b52);
      _0x22a2af.push(_0x32774d);
      const _0x467787 = {
        x: _0x32774d.x + _0x32774d.width + 10,
        y: _0x32774d.y - 1,
        selected: false,
        storageKey: "popeteam3"
      };
      let _0x340f3b = createRadio(_0x467787);
      _0x22a2af.push(_0x340f3b);
      const _0x1d6ef2 = {
        text: "是否进行扫荡",
        textColor: 16776960,
        x: _0x49dfa5.width / 8,
        y: _0x497701.y + 60 + 5
      };
      var _0x523bb4 = createLabel(_0x1d6ef2);
      _0x22a2af.push(_0x523bb4);
      const _0x3dd68b = {
        x: _0x523bb4.x + _0x523bb4.width + 5,
        y: _0x523bb4.y,
        selected: false,
        storageKey: "popesdstatus"
      };
      let _0x58c840 = createToggle(_0x3dd68b);
      _0x22a2af.push(_0x58c840);
      const _0x4fa4b4 = {
        x: _0x58c840.x + _0x58c840.width + 20,
        y: _0x523bb4.y - 5,
        width: 100,
        prompt: "请输入次数",
        storageKey: "popesdnum"
      };
      var _0x28c642 = createEdit(_0x4fa4b4);
      _0x22a2af.push(_0x28c642);
      const _0xcb3fd9 = {
        text: "注意:当前教皇门票有",
        textColor: 16776960,
        x: _0x49dfa5.width / 8,
        y: _0x497701.y + 100
      };
      let _0x320dc7 = createLabel(_0xcb3fd9);
      _0x22a2af.push(_0x320dc7);
      let _0x13a4ba = createLabel({
        text: getSeerItemNum("101199") - 1,
        textColor: 16711680,
        x: _0x320dc7.x + _0x320dc7.width,
        y: _0x320dc7.y
      });
      _0x22a2af.push(_0x13a4ba);
      const _0x2afbbb = {
        text: "数量不要输入超过了哦",
        textColor: 16776960,
        x: _0x13a4ba.x + _0x13a4ba.width + 20,
        y: _0x497701.y + 100
      };
      let _0x151de9 = createLabel(_0x2afbbb);
      _0x22a2af.push(_0x151de9);
      const _0x4413ca = {
        text: `不勾扫荡可以不输入次数显示的门票是所拥有的-1
瞬杀光闪击打法会根据12层是否是未命中进行替换
不过四倍暴击的次数还是很长`,
        textColor: 16711808,
        x: _0x49dfa5.width / 8,
        y: _0x497701.y + 100 + 30
      };
      let _0x37c2c7 = createLabel(_0x4413ca);
      _0x22a2af.push(_0x37c2c7);
      _0x3b680f.addAllUis(_0x22a2af);
      _0x49dfa5.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x3b680f.stop();
      }, function () {
        localStorage.setItem("popeteam1", _0x575f5f.selected);
        localStorage.setItem("popeteam2", _0x568b8f.selected);
        localStorage.setItem("popeteam3", _0x340f3b.selected);
        localStorage.setItem("popesdstatus", _0x58c840.selected);
        localStorage.setItem("popesdnum", _0x28c642.text);
        if (_0x575f5f.selected) {
          _0x3b680f.popetask[0] = 1;
        }
        if (_0x568b8f.selected) {
          _0x3b680f.popetask[1] = 1;
        }
        if (_0x340f3b.selected) {
          _0x3b680f.popetask[2] = 1;
        }
        if (_0x58c840.selected) {
          if (!Number.isInteger(parseInt(_0x28c642.text))) {
            addGameLog("请输入正确的次数");
          } else if (getSeerItemNum("101199") < parseInt(_0x28c642.text)) {
            addGameLog("请输入正确的次数");
          } else {
            _0x3b680f.popetask[3] = 1;
          }
        }
        _0x3b680f.prcessBody();
      }], null);
      _0x49dfa5.showAlert();
    });
  }
  async prcessBody() {
    try {
      if (MFC.attr.getAttr(MFC.attrType.dailyPopeLadderCostTicket) == 0) {
        for (let _0xc10eb9 = 0; _0xc10eb9 < 3; _0xc10eb9++) {
          if (this.popetask[_0xc10eb9]) {
            if (_0xc10eb9 == 0) {
              await this.chackpopeteam1();
            } else if (_0xc10eb9 == 1) {
              await this.chackpopeteam2();
            } else if (_0xc10eb9 == 2) {
              await this.chackpopeteam3();
            }
            if (this.popetask[3]) {
              addGameLog("即将进行扫荡");
              if (MFC.userInfo.vipLevel == 0) {
                addGameLog("没有超no无法扫荡");
              } else {
                for (let _0x2c2a69 = 0; _0x2c2a69 < parseInt(localStorage.getItem("popesdnum")); _0x2c2a69++) {
                  addGameLog("教皇扫荡第" + (_0x2c2a69 + 1) + "次");
                  await this.send_message("cs_combat_ladder_pope", {
                    type: 5,
                    petList: [],
                    idList: [],
                    saveType: 0
                  });
                }
              }
            }
          }
        }
      } else if (this.popetask[3]) {
        addGameLog("即将进行扫荡");
        if (MFC.userInfo.vipLevel == 0) {
          addGameLog("没有超no无法扫荡");
        } else {
          for (let _0xc83dee = 0; _0xc83dee < parseInt(localStorage.getItem("popesdnum")) + 1; _0xc83dee++) {
            addGameLog("教皇扫荡第" + (_0xc83dee + 1) + "次");
            await this.send_message("cs_combat_ladder_pope", {
              type: 5,
              petList: [],
              idList: [],
              saveType: 0
            });
          }
        }
      } else {
        for (let _0x525488 = 0; _0x525488 < 3; _0x525488++) {
          if (this.popetask[_0x525488]) {
            if (_0x525488 == 0) {
              await this.chackpopeteam1();
            } else if (_0x525488 == 1) {
              await this.chackpopeteam2();
            } else if (_0x525488 == 2) {
              await this.chackpopeteam3();
            }
          }
        }
      }
      addGameLog("完成教皇关卡");
      this.stop();
    } catch (_0x3a43e4) {}
  }
  async chackpopeteam1() {
    let _0x47bf31 = await this.send_message("cs_combat_ladder_pope", {
      type: 2,
      petList: [],
      idList: [],
      saveType: 0
    });
    if (_0x47bf31.petList.length == 0) {
      if (getSeerItemNum("101199") == 0) {
        addGameLog("教皇挑战券 数量为0,挑战结束");
        this.stop();
      } else {
        let _0x4506ca = PetManager.getInstance().getAllPets().map(_0x4c3cc1 => {
          if ((_0x4c3cc1.skills.indexOf(10630) != -1 || _0x4c3cc1.skills.indexOf(100023) != -1) && _0x4c3cc1.skills.indexOf(11783) != -1 && (_0x4c3cc1.featureId == 5 || _0x4c3cc1.featureId == 6 || _0x4c3cc1.featureId == 7 || _0x4c3cc1.featureId == 8)) {
            return _0x4c3cc1.getTime;
          }
        }).filter(_0x26d301 => _0x26d301 !== undefined).sort((_0x416d10, _0x476baa) => _0x476baa.featureId - _0x416d10.featureId)[0];
        let _0x163055 = PetManager.getInstance().getAllPets().map(_0x3ab6dd => {
          if (_0x3ab6dd.level == 100) {
            if (_0x3ab6dd.skills.indexOf(10825) != -1 || _0x3ab6dd.skills.indexOf(100484) != -1) {
              return _0x3ab6dd.getTime;
            }
          }
        }).filter(_0xc07405 => _0xc07405)[0];
        if (_0x4506ca == undefined) {
          addGameLog("背包没有瞬杀光闪击+光烈突击[威力130的招]");
          this.stop();
        } else if (_0x163055 == undefined) {
          addGameLog("背包没有雷伊或者没有装备雷神天明闪");
          this.stop();
        } else {
          const _0xba7279 = {
            type: 1,
            petList: [_0x4506ca, _0x163055],
            idList: [],
            saveType: 0
          };
          await this.send_message("cs_combat_ladder_pope", _0xba7279);
          await this.popeteam1fight();
        }
      }
    } else if ((_0x47bf31.petList[0].useSkills.find(_0x1a09b1 => _0x1a09b1.id === 10630) || _0x47bf31.petList[0].useSkills.find(_0xa72b97 => _0xa72b97.id === 100023)) && _0x47bf31.petList[0].useSkills.find(_0x27ab08 => _0x27ab08.id === 11783)) {
      if (_0x47bf31.petList[1].useSkills.find(_0x43c354 => _0x43c354.id === 10825) || _0x47bf31.petList[1].useSkills.find(_0x584a80 => _0x584a80.id === 100484)) {
        await this.popeteam1fight();
      } else {
        addGameLog("二号位不是雷伊或技能错误");
        this.stop();
      }
    } else {
      addGameLog("一号位不是瞬杀光闪击+光烈突击[威力130的招]");
      this.stop();
    }
  }
  async popeteam1fight() {
    let _0x537062 = {};
    let _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
      type: 2,
      petList: [],
      idList: [],
      saveType: 0
    });
    let _0x14eac1 = _0x3daf2b.levelId;
    while (_0x14eac1 > 0 && _0x14eac1 <= 11) {
      _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      let _0x41f80e;
      await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      if (_0x3daf2b.petList.find(_0x58c1b0 => _0x58c1b0.useSkills.find(_0x46bf04 => _0x46bf04.id === 10630))) {
        _0x41f80e = 10630;
      }
      if (_0x3daf2b.petList.find(_0x2b8261 => _0x2b8261.useSkills.find(_0x37ffa0 => _0x37ffa0.id === 100023))) {
        _0x41f80e = 100023;
      }
      await this.send_message("cs_combat_ladder_pope", {
        type: 3,
        petList: [],
        idList: [0],
        saveType: 0
      });
      await this.initBattle();
      if (!_0x537062[_0x3daf2b.levelId]) {
        _0x537062[_0x3daf2b.levelId] = 1;
      } else {
        _0x537062[_0x3daf2b.levelId]++;
      }
      addGameLog("目前教皇第" + _0x14eac1 + "层，尝试第" + _0x537062[_0x3daf2b.levelId] + "次瞬杀");
      let _0x359584 = await this.useSkill(_0x41f80e);
      if (_0x359584.result.result === 1) {
        _0x14eac1++;
        if (_0x14eac1 == 12) {
          break;
        }
      }
      await wait(300);
      _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
    }
    while (_0x14eac1 == 12) {
      if (this.popecanmiss == 0) {
        _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        let _0x439378;
        await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        if (_0x3daf2b.petList.find(_0x40a795 => _0x40a795.useSkills.find(_0x4e8638 => _0x4e8638.id === 10825))) {
          _0x439378 = 10825;
        }
        if (_0x3daf2b.petList.find(_0x4b178b => _0x4b178b.useSkills.find(_0x21a499 => _0x21a499.id === 100484))) {
          _0x439378 = 100484;
        }
        _0x439378 = 11783;
        await this.send_message("cs_combat_ladder_pope", {
          type: 3,
          petList: [],
          idList: [1],
          saveType: 0
        });
        let _0x4349b9 = await this.initBattle();
        let _0x54d9f4 = _0x4349b9.result.processQueue.find(_0xe6c014 => _0xe6c014.uid !== MFC.userInfo.uid).affects;
        if (_0x54d9f4.filter(function (_0x259157) {
          if (_0x259157.id == 158 || _0x259157.id == 117) {
            return _0x259157;
          }
        }).length > 0) {
          this.popecanmiss = 1;
        } else if (_0x54d9f4.filter(function (_0x167105) {
          if (_0x167105.id == 119) {
            return _0x167105;
          }
        }).length > 0) {
          this.popecanmiss = 2;
        } else {
          this.popecanmiss = 3;
        }
      } else if (this.popecanmiss == 1) {
        _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        let _0x3d5148;
        await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        if (_0x3daf2b.petList.find(_0x232746 => _0x232746.useSkills.find(_0x1d1e82 => _0x1d1e82.id === 10825))) {
          _0x3d5148 = 10825;
        }
        if (_0x3daf2b.petList.find(_0x32622a => _0x32622a.useSkills.find(_0x4b2061 => _0x4b2061.id === 100484))) {
          _0x3d5148 = 100484;
        }
        await this.send_message("cs_combat_ladder_pope", {
          type: 3,
          petList: [],
          idList: [1],
          saveType: 0
        });
        let _0x4a82ba = await this.initBattle();
        if (!_0x537062[_0x3daf2b.levelId]) {
          _0x537062[_0x3daf2b.levelId] = 1;
        } else {
          _0x537062[_0x3daf2b.levelId]++;
        }
        addGameLog("目前教皇第" + _0x14eac1 + "层，尝试第" + _0x537062[_0x3daf2b.levelId] + "次");
        _0x4a82ba = await this.useSkill(_0x3d5148);
        if (_0x4a82ba.result.result === 1) {
          _0x14eac1++;
          if (_0x14eac1 == 12) {
            break;
          }
        }
        await wait(300);
        _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
      } else if (this.popecanmiss == 2) {
        _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        let _0x147a0c;
        await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        _0x147a0c = 11783;
        await this.send_message("cs_combat_ladder_pope", {
          type: 3,
          petList: [],
          idList: [0],
          saveType: 0
        });
        let _0x174773 = await this.initBattle();
        if (!_0x537062[_0x3daf2b.levelId]) {
          _0x537062[_0x3daf2b.levelId] = 1;
        } else {
          _0x537062[_0x3daf2b.levelId]++;
        }
        addGameLog("目前教皇第" + _0x14eac1 + "层，尝试第" + _0x537062[_0x3daf2b.levelId] + "次瞬杀");
        _0x174773 = await this.useSkill(_0x147a0c);
        if (_0x174773.result.result === 1) {
          _0x14eac1++;
          if (_0x14eac1 == 12) {
            break;
          }
        }
        await wait(300);
        _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
      } else if (this.popecanmiss == 3) {
        _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        let _0x76d722;
        await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        if (_0x3daf2b.petList.find(_0x475c7f => _0x475c7f.useSkills.find(_0x4442b9 => _0x4442b9.id === 10630))) {
          _0x76d722 = 10630;
        }
        if (_0x3daf2b.petList.find(_0x685c05 => _0x685c05.useSkills.find(_0x3ba48d => _0x3ba48d.id === 100023))) {
          _0x76d722 = 100023;
        }
        await this.send_message("cs_combat_ladder_pope", {
          type: 3,
          petList: [],
          idList: [0],
          saveType: 0
        });
        let _0x5b0864 = await this.initBattle();
        if (!_0x537062[_0x3daf2b.levelId]) {
          _0x537062[_0x3daf2b.levelId] = 1;
        } else {
          _0x537062[_0x3daf2b.levelId]++;
        }
        addGameLog("目前教皇第" + _0x14eac1 + "层，尝试第" + _0x537062[_0x3daf2b.levelId] + "次瞬杀");
        _0x5b0864 = await this.useSkill(_0x76d722);
        if (_0x5b0864.result.result === 1) {
          _0x14eac1++;
          if (_0x14eac1 == 12) {
            break;
          }
        }
        await wait(300);
        _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
      }
    }
    while (_0x14eac1 == 13) {
      _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      let _0x3f69f6;
      await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      if (_0x3daf2b.petList.find(_0x55d868 => _0x55d868.useSkills.find(_0x14bd2f => _0x14bd2f.id === 10825))) {
        _0x3f69f6 = 10825;
      }
      if (_0x3daf2b.petList.find(_0x24593c => _0x24593c.useSkills.find(_0x363af9 => _0x363af9.id === 100484))) {
        _0x3f69f6 = 100484;
      }
      await this.send_message("cs_combat_ladder_pope", {
        type: 3,
        petList: [],
        idList: [1],
        saveType: 0
      });
      await this.initBattle();
      if (!_0x537062[_0x3daf2b.levelId]) {
        _0x537062[_0x3daf2b.levelId] = 1;
      } else {
        _0x537062[_0x3daf2b.levelId]++;
      }
      addGameLog("目前教皇第" + _0x14eac1 + "层，尝试第" + _0x537062[_0x3daf2b.levelId] + "次瞬杀");
      let _0x1c4d9e = await this.useSkill(_0x3f69f6);
      if (_0x1c4d9e.result.result === 1) {
        _0x14eac1++;
        if (_0x14eac1 == 12) {
          break;
        }
      }
      await wait(300);
      _0x3daf2b = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
    }
  }
  async chackpopeteam2() {
    let _0x3e3992 = await this.send_message("cs_combat_ladder_pope", {
      type: 2,
      petList: [],
      idList: [],
      saveType: 0
    });
    if (_0x3e3992.petList.length == 0) {
      if (getSeerItemNum("101199") == 0) {
        addGameLog("教皇挑战券 数量为0,挑战结束");
        this.stop();
      } else {
        let _0x5e156f = PetManager.getInstance().getAllPets().map(_0x20e6a6 => {
          if (_0x20e6a6.skills.indexOf(14863) != -1 && _0x20e6a6.skills.indexOf(22639) != -1) {
            return _0x20e6a6.getTime;
          }
        }).filter(_0x4e9eab => _0x4e9eab !== undefined).sort()[0];
        let _0x4ab8 = PetManager.getInstance().getAllPets().map(_0x20b840 => {
          if (_0x20b840.level == 100) {
            if (_0x20b840.skills.indexOf(16891) != -1 && (_0x20b840.skills.indexOf(23798) != -1 || _0x20b840.skills.indexOf(100423) != -1)) {
              return _0x20b840.getTime;
            }
          }
        }).filter(_0x4174a1 => _0x4174a1)[0];
        let _0x5d3653 = PetManager.getInstance().getAllPets().map(_0x182916 => {
          if (_0x182916.level == 100) {
            if (_0x182916.skills.indexOf(100483) != -1 && (_0x182916.skills.indexOf(10825) != -1 || _0x182916.skills.indexOf(100484) != -1)) {
              return _0x182916.getTime;
            }
          }
        }).filter(_0x1efe58 => _0x1efe58)[0];
        if (_0x5e156f == undefined) {
          addGameLog("背包没有奥斯卡或技能错误");
          this.stop();
        } else if (_0x4ab8 == undefined) {
          addGameLog("背包没有天邪或技能错误");
          this.stop();
        } else if (_0x5d3653 == undefined) {
          addGameLog("背包雷伊技能错误");
          this.stop();
        } else {
          const _0x495bac = {
            type: 1,
            petList: [_0x5e156f, _0x4ab8, _0x5d3653],
            idList: [],
            saveType: 0
          };
          await this.send_message("cs_combat_ladder_pope", _0x495bac);
          await this.popeteam2fight();
        }
      }
    } else if (_0x3e3992.petList[0].useSkills.find(_0x275b29 => _0x275b29.id === 14863) && _0x3e3992.petList[0].useSkills.find(_0x1fb0c1 => _0x1fb0c1.id === 22639)) {
      if (_0x3e3992.petList[1].useSkills.find(_0x5e8b1e => _0x5e8b1e.id === 16891) && (_0x3e3992.petList[1].useSkills.find(_0x41a98c => _0x41a98c.id === 23798) || _0x3e3992.petList[1].useSkills.find(_0x324b8d => _0x324b8d.id === 100423))) {
        if (_0x3e3992.petList[2].useSkills.find(_0x4361f1 => _0x4361f1.id === 100483) && (_0x3e3992.petList[2].useSkills.find(_0x185968 => _0x185968.id === 10825) || _0x3e3992.petList[2].useSkills.find(_0x1aef0e => _0x1aef0e.id === 100484))) {
          await this.popeteam2fight();
        } else {
          addGameLog("三号位不是雷伊或技能错误");
          this.stop();
        }
      } else {
        addGameLog("二号位不是天邪或技能错误");
        this.stop();
      }
    } else {
      addGameLog("一号位不是奥斯卡或技能错误");
      this.stop();
    }
  }
  async popeteam2fight() {
    let _0x2a7424 = {};
    let _0x3edae6 = await this.send_message("cs_combat_ladder_pope", {
      type: 2,
      petList: [],
      idList: [],
      saveType: 0
    });
    let _0x539dd4 = _0x3edae6.levelId;
    while (_0x539dd4 > 0 && _0x539dd4 <= 10) {
      _0x3edae6 = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      let _0x1bb9d0 = 22639;
      let _0x171717 = 14863;
      await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      await this.send_message("cs_combat_ladder_pope", {
        type: 3,
        petList: [],
        idList: [0],
        saveType: 0
      });
      await this.initBattle();
      if (!_0x2a7424[_0x3edae6.levelId]) {
        _0x2a7424[_0x3edae6.levelId] = 1;
      } else {
        _0x2a7424[_0x3edae6.levelId]++;
      }
      addGameLog("目前教皇第" + _0x539dd4 + "层，第" + _0x2a7424[_0x3edae6.levelId] + "次");
      let _0x2addb5 = await this.useSkill(_0x1bb9d0);
      while (_0x2addb5.result.result == 0) {
        let _0x476f95;
        if (_0x2addb5.result.playerInfos[0].teamFlag == 1) {
          if (this.pp) {
            _0x476f95 = 5;
            this.pp = false;
          } else {
            _0x476f95 = _0x2addb5.result.playerInfos[0].petInfos[0].useSkills[_0x2addb5.result.playerInfos[0].petInfos[0].useSkills.findIndex(_0x1ada9f => _0x1ada9f.id === 14863)].crtPP;
          }
        } else if (this.pp) {
          _0x476f95 = 5;
          this.pp = false;
        } else {
          _0x476f95 = _0x2addb5.result.playerInfos[1].petInfos[0].useSkills[_0x2addb5.result.playerInfos[1].petInfos[0].useSkills.findIndex(_0x50366b => _0x50366b.id === 14863)].crtPP;
        }
        if (_0x476f95 == 0) {
          if (getSeerItemNum(2001) > 1) {
            addGameLog("回pp");
            this.pp = true;
            _0x2addb5 = await this.useItem(2001);
          } else if (getSeerItemNum(2002) > 1) {
            addGameLog("回pp");
            this.pp = true;
            _0x2addb5 = await this.useItem(2002);
          } else if (getSeerItemNum(2003) > 1) {
            addGameLog("回pp");
            this.pp = true;
            _0x2addb5 = await this.useItem(2003);
          } else {
            addGameLog("pp不足");
            await this.send_message("cs_quit_battle", {});
            break;
          }
        } else {
          _0x2addb5 = await this.useSkill(_0x171717);
        }
      }
      if (getSeerItemNum(2001) > 1) {} else if (getSeerItemNum(2002) > 1) {} else if (getSeerItemNum(2003) > 1) {} else {
        addGameLog("pp不足");
        await this.send_message("cs_quit_battle", {});
        break;
      }
      if (_0x2addb5.result.result === 1) {
        _0x539dd4++;
        if (_0x539dd4 == 11) {
          break;
        }
      }
      await wait(300);
      _0x3edae6 = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
    }
    while (_0x539dd4 > 10 && _0x539dd4 <= 12) {
      _0x3edae6 = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      let _0x2c7e04;
      let _0x5c8dbf = 16891;
      await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      if (_0x3edae6.petList.find(_0x1ba432 => _0x1ba432.useSkills.find(_0x3e0b31 => _0x3e0b31.id === 23798))) {
        _0x2c7e04 = 23798;
      }
      if (_0x3edae6.petList.find(_0x2407f1 => _0x2407f1.useSkills.find(_0x2f3a03 => _0x2f3a03.id === 100423))) {
        _0x2c7e04 = 100423;
      }
      await this.send_message("cs_combat_ladder_pope", {
        type: 3,
        petList: [],
        idList: [1],
        saveType: 0
      });
      await this.initBattle();
      if (!_0x2a7424[_0x3edae6.levelId]) {
        _0x2a7424[_0x3edae6.levelId] = 1;
      } else {
        _0x2a7424[_0x3edae6.levelId]++;
      }
      addGameLog("目前教皇第" + _0x539dd4 + "层，第" + _0x2a7424[_0x3edae6.levelId] + "次");
      let _0x1f2069 = await this.useSkill(_0x2c7e04);
      while (_0x1f2069.result.result == 0) {
        _0x1f2069 = await this.useSkill(_0x5c8dbf);
      }
      if (_0x1f2069.result.result === 1) {
        _0x539dd4++;
        if (_0x539dd4 == 13) {
          break;
        }
      }
      await wait(300);
      _0x3edae6 = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
    }
    while (_0x539dd4 == 13) {
      _0x3edae6 = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      let _0x534e1d = 100483;
      let _0x408a6d;
      await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      if (_0x3edae6.petList.find(_0x5bfa3e => _0x5bfa3e.useSkills.find(_0x5b2864 => _0x5b2864.id === 10825))) {
        _0x408a6d = 10825;
      }
      if (_0x3edae6.petList.find(_0x201553 => _0x201553.useSkills.find(_0xff7fec => _0xff7fec.id === 100484))) {
        _0x408a6d = 100484;
      }
      await this.send_message("cs_combat_ladder_pope", {
        type: 3,
        petList: [],
        idList: [2],
        saveType: 0
      });
      await this.initBattle();
      if (!_0x2a7424[_0x3edae6.levelId]) {
        _0x2a7424[_0x3edae6.levelId] = 1;
      } else {
        _0x2a7424[_0x3edae6.levelId]++;
      }
      addGameLog("目前教皇第" + _0x539dd4 + "层，第" + _0x2a7424[_0x3edae6.levelId] + "次");
      let _0x107d92 = await this.useSkill(_0x534e1d);
      if (_0x107d92.result.result == 0) {
        _0x107d92 = await this.useSkill(_0x408a6d);
      }
      if (_0x107d92.result.result === 1) {
        _0x539dd4++;
        if (_0x539dd4 == 12) {
          break;
        }
      }
      await wait(300);
      _0x3edae6 = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
    }
  }
  async chackpopeteam3() {
    let _0x8846d2 = await this.send_message("cs_combat_ladder_pope", {
      type: 2,
      petList: [],
      idList: [],
      saveType: 0
    });
    if (_0x8846d2.petList.length == 0) {
      if (getSeerItemNum("101199") == 0) {
        addGameLog("教皇挑战券 数量为0,挑战结束");
        this.stop();
      } else {
        let _0x1deee5 = PetManager.getInstance().getAllPets().map(_0x451b61 => {
          if ((_0x451b61.skills.indexOf(10630) != -1 || _0x451b61.skills.indexOf(100023) != -1) && _0x451b61.skills.indexOf(11783) != -1 && (_0x451b61.featureId == 5 || _0x451b61.featureId == 6 || _0x451b61.featureId == 7 || _0x451b61.featureId == 8)) {
            return _0x451b61.getTime;
          }
        }).filter(_0x5aa61f => _0x5aa61f !== undefined).sort((_0x1c82f2, _0x310fcb) => _0x310fcb.featureId - _0x1c82f2.featureId)[0];
        let _0x82428d = PetManager.getInstance().getAllPets().map(_0x5cf382 => {
          if (_0x5cf382.level == 100) {
            if (_0x5cf382.skills.indexOf(10825) != -1 || _0x5cf382.skills.indexOf(100484) != -1) {
              return _0x5cf382.getTime;
            }
          }
        }).filter(_0x105e75 => _0x105e75)[0];
        let _0x21c126 = PetManager.getInstance().getAllPets().map(_0x39b44d => {
          if (_0x39b44d.level == 100) {
            if (_0x39b44d.skills.indexOf(12776) != -1) {
              return _0x39b44d.getTime;
            }
          }
        }).filter(_0x1a8566 => _0x1a8566)[0];
        if (_0x1deee5 == undefined) {
          addGameLog("背包没有瞬杀光闪击+光烈突击[威力130的招]");
          this.stop();
        } else if (_0x82428d == undefined) {
          addGameLog("背包没有雷伊或者没有装备雷神天明闪");
          this.stop();
        } else if (_0x21c126 == undefined) {
          addGameLog("背包没有蒙奇克或者没有装备腾云断空击");
          this.stop();
        } else {
          const _0x191fa0 = {
            type: 1,
            petList: [_0x1deee5, _0x82428d, _0x21c126],
            idList: [],
            saveType: 0
          };
          await this.send_message("cs_combat_ladder_pope", _0x191fa0);
          await this.popeteam3fight();
        }
      }
    } else if ((_0x8846d2.petList[0].useSkills.find(_0x139318 => _0x139318.id === 10630) || _0x8846d2.petList[0].useSkills.find(_0x40bfeb => _0x40bfeb.id === 100023)) && _0x8846d2.petList[0].useSkills.find(_0x3c3748 => _0x3c3748.id === 11783)) {
      if (_0x8846d2.petList[1].useSkills.find(_0x37ba92 => _0x37ba92.id === 10825) || _0x8846d2.petList[1].useSkills.find(_0x229731 => _0x229731.id === 100484)) {
        if (_0x8846d2.petList[1].useSkills.find(_0x63bad2 => _0x63bad2.id === 12776)) {
          await this.popeteam3fight();
        }
      } else {
        addGameLog("二号位不是雷伊或技能错误");
        this.stop();
      }
    } else {
      addGameLog("一号位不是瞬杀光闪击+光烈突击[威力130的招]");
      this.stop();
    }
  }
  async popeteam3fight() {
    let _0x1e0a7f = {};
    let _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
      type: 2,
      petList: [],
      idList: [],
      saveType: 0
    });
    let _0x520cf8 = _0x1d822f.levelId;
    while (_0x520cf8 > 0 && _0x520cf8 <= 11) {
      _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      let _0x47b6b7;
      await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      if (_0x1d822f.petList.find(_0x5c1d37 => _0x5c1d37.useSkills.find(_0x165330 => _0x165330.id === 10630))) {
        _0x47b6b7 = 10630;
      }
      if (_0x1d822f.petList.find(_0x475006 => _0x475006.useSkills.find(_0x246589 => _0x246589.id === 100023))) {
        _0x47b6b7 = 100023;
      }
      await this.send_message("cs_combat_ladder_pope", {
        type: 3,
        petList: [],
        idList: [0],
        saveType: 0
      });
      await this.initBattle();
      if (!_0x1e0a7f[_0x1d822f.levelId]) {
        _0x1e0a7f[_0x1d822f.levelId] = 1;
      } else {
        _0x1e0a7f[_0x1d822f.levelId]++;
      }
      addGameLog("目前教皇第" + _0x520cf8 + "层，尝试第" + _0x1e0a7f[_0x1d822f.levelId] + "次瞬杀");
      let _0x34bb99 = await this.useSkill(_0x47b6b7);
      if (_0x34bb99.result.result === 1) {
        _0x520cf8++;
        if (_0x520cf8 == 12) {
          break;
        }
      }
      await wait(300);
      _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
    }
    while (_0x520cf8 == 12) {
      if (this.popecanmiss == 0) {
        _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        let _0x3d6f1d;
        await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        if (_0x1d822f.petList.find(_0x2e7738 => _0x2e7738.useSkills.find(_0x2efae6 => _0x2efae6.id === 10825))) {
          _0x3d6f1d = 10825;
        }
        if (_0x1d822f.petList.find(_0x4e4aa6 => _0x4e4aa6.useSkills.find(_0x1cb7cb => _0x1cb7cb.id === 100484))) {
          _0x3d6f1d = 100484;
        }
        await this.send_message("cs_combat_ladder_pope", {
          type: 3,
          petList: [],
          idList: [1],
          saveType: 0
        });
        let _0x18854f = await this.initBattle();
        let _0x4be8fe = _0x18854f.result.processQueue.find(_0x274994 => _0x274994.uid !== MFC.userInfo.uid).affects;
        if (_0x4be8fe.filter(function (_0x55c92b) {
          if (_0x55c92b.id == 158 || _0x55c92b.id == 117) {
            return _0x55c92b;
          }
        }).length > 0) {
          this.popecanmiss = 1;
        } else if (_0x4be8fe.filter(function (_0x1252a2) {
          if (_0x1252a2.id == 119) {
            return _0x1252a2;
          }
        }).length > 0) {
          this.popecanmiss = 2;
        } else {
          this.popecanmiss = 3;
        }
      } else if (this.popecanmiss == 1) {
        _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        let _0x14d68f;
        await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        if (_0x1d822f.petList.find(_0x3fba1e => _0x3fba1e.useSkills.find(_0x2e71b2 => _0x2e71b2.id === 10825))) {
          _0x14d68f = 10825;
        }
        if (_0x1d822f.petList.find(_0x1b1228 => _0x1b1228.useSkills.find(_0x5a548f => _0x5a548f.id === 100484))) {
          _0x14d68f = 100484;
        }
        await this.send_message("cs_combat_ladder_pope", {
          type: 3,
          petList: [],
          idList: [1],
          saveType: 0
        });
        let _0x1d1026 = await this.initBattle();
        if (!_0x1e0a7f[_0x1d822f.levelId]) {
          _0x1e0a7f[_0x1d822f.levelId] = 1;
        } else {
          _0x1e0a7f[_0x1d822f.levelId]++;
        }
        addGameLog("目前教皇第" + _0x520cf8 + "层，尝试第" + _0x1e0a7f[_0x1d822f.levelId] + "次四倍暴");
        _0x1d1026 = await this.useSkill(_0x14d68f);
        if (_0x1d1026.result.result === 1) {
          _0x520cf8++;
          if (_0x520cf8 == 12) {
            break;
          }
        }
        await wait(300);
        _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
      } else if (this.popecanmiss == 2) {
        _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        let _0x7401a0;
        await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        _0x7401a0 = 11783;
        await this.send_message("cs_combat_ladder_pope", {
          type: 3,
          petList: [],
          idList: [0],
          saveType: 0
        });
        let _0xbb7368 = await this.initBattle();
        if (!_0x1e0a7f[_0x1d822f.levelId]) {
          _0x1e0a7f[_0x1d822f.levelId] = 1;
        } else {
          _0x1e0a7f[_0x1d822f.levelId]++;
        }
        addGameLog("目前教皇第" + _0x520cf8 + "层，尝试第" + _0x1e0a7f[_0x1d822f.levelId] + "次瞬杀");
        _0xbb7368 = await this.useSkill(_0x7401a0);
        if (_0xbb7368.result.result === 1) {
          _0x520cf8++;
          if (_0x520cf8 == 12) {
            break;
          }
        }
        await wait(300);
        _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
      } else if (this.popecanmiss == 3) {
        _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        let _0x2dc6a0;
        await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
        if (_0x1d822f.petList.find(_0x31adba => _0x31adba.useSkills.find(_0x49b57a => _0x49b57a.id === 10630))) {
          _0x2dc6a0 = 10630;
        }
        if (_0x1d822f.petList.find(_0x59e397 => _0x59e397.useSkills.find(_0x158694 => _0x158694.id === 100023))) {
          _0x2dc6a0 = 100023;
        }
        await this.send_message("cs_combat_ladder_pope", {
          type: 3,
          petList: [],
          idList: [0],
          saveType: 0
        });
        let _0x2043e7 = await this.initBattle();
        if (!_0x1e0a7f[_0x1d822f.levelId]) {
          _0x1e0a7f[_0x1d822f.levelId] = 1;
        } else {
          _0x1e0a7f[_0x1d822f.levelId]++;
        }
        addGameLog("目前教皇第" + _0x520cf8 + "层，尝试第" + _0x1e0a7f[_0x1d822f.levelId] + "次瞬杀");
        _0x2043e7 = await this.useSkill(_0x2dc6a0);
        if (_0x2043e7.result.result === 1) {
          _0x520cf8++;
          if (_0x520cf8 == 12) {
            break;
          }
        }
        await wait(300);
        _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
          type: 2,
          petList: [],
          idList: [],
          saveType: 0
        });
      }
    }
    while (_0x520cf8 == 13) {
      _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      let _0x2c3a00 = 12776;
      await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
      await this.send_message("cs_combat_ladder_pope", {
        type: 3,
        petList: [],
        idList: [2],
        saveType: 0
      });
      await this.initBattle();
      if (!_0x1e0a7f[_0x1d822f.levelId]) {
        _0x1e0a7f[_0x1d822f.levelId] = 1;
      } else {
        _0x1e0a7f[_0x1d822f.levelId]++;
      }
      addGameLog("目前教皇第" + _0x520cf8 + "层，尝试第" + _0x1e0a7f[_0x1d822f.levelId] + "次瞬杀");
      let _0x4d5e87 = await this.useSkill(_0x2c3a00);
      if (_0x4d5e87.result.result === 1) {
        _0x520cf8++;
        if (_0x520cf8 == 12) {
          break;
        }
      }
      await wait(300);
      _0x1d822f = await this.send_message("cs_combat_ladder_pope", {
        type: 2,
        petList: [],
        idList: [],
        saveType: 0
      });
    }
  }
}
class LevelCatch extends SuperTask {
  constructor() {
    super();
    this.nowName = "关卡捕捉";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_change_default_team"
    }, {
      watchEventName: "sc_notify_item_change"
    }];
    this.capsuleNames = [{
      capName: "普通",
      capId: 4001
    }, {
      capName: "中级",
      capId: 4002
    }, {
      capName: "高级",
      capId: 4003
    }, {
      capName: "无敌",
      capId: 4004
    }];
    this.switchBtnList = [];
    this.planetPets = [];
    this.petIds = [];
    this.capIds = [];
    this.catchCounts = 0;
    this.stopTalent = 0;
    this.levelId = null;
    this.CatchPetDatas = null;
    this.addCount = 0;
    this.allCatchPets = [];
    this.catchConfigs = [];
    this.goalCatchs = [];
  }
  start() {
    super.start();
    let _0xeb838a = this;
    if (!window.noLevelCatchPets) {
      MFC.alert.show("当前关卡没有可捕捉的精灵!");
      this.stop();
      return;
    }
    if (UserManager.getInstance().userInfo.curEnergy < 5) {
      MFC.alert.show("电池不足,任务取消!");
      addGameLog("电池不足,任务取消!");
      this.stop();
      return;
    }
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      var _0x34c749 = SimpleAlertUi({
        width: 750,
        height: 450
      });
      _0xeb838a.alertWin = _0x34c749;
      let _0x3a5d89 = _0x34c749.width / 15;
      const _0x4f25d8 = {
        text: "关卡精灵捕捉",
        y: _0x34c749.height / 16
      };
      var _0x1db2d1 = createLabel(_0x4f25d8);
      _0x1db2d1.x = _0x34c749.width / 2 - _0x1db2d1.width / 2;
      _0x34c749.addChild(_0x1db2d1);
      let _0x5ebb93 = _0x1db2d1.y;
      const _0x45968d = {
        text: "注意: 勾选的胶囊会从最低级使用 并且[稀有精灵]会在最后一回合使用选中的最高一档胶囊;",
        x: _0x3a5d89,
        y: _0x5ebb93 + 25
      };
      let _0x2a1dfd = createLabel(_0x45968d);
      _0x34c749.addChild(_0x2a1dfd);
      const _0x1e5739 = {
        text: "捕捉会从精灵背包主动调用出精灵战斗 优先级: 波蒂斯加 > [闪光]波克尔 > 熊猫 > 无名;",
        textColor: 16776960,
        x: _0x3a5d89,
        y: _0x2a1dfd.y + _0x2a1dfd.height + 10
      };
      var _0x1e7113 = createLabel(_0x1e5739);
      _0x34c749.addChild(_0x1e7113);
      const _0x1c1a5d = {
        text: "关卡精灵选择",
        y: _0x1e7113.y + _0x1e7113.height + 10
      };
      var _0x1db2d1 = createLabel(_0x1c1a5d);
      _0x1db2d1.x = _0x34c749.width / 2 - _0x1db2d1.width / 2;
      _0x34c749.addChild(_0x1db2d1);
      let _0x286b70 = window.noLevelCatchPets.bossID.split("|");
      for (let _0x5e30da = 0; _0x5e30da < _0x286b70.length; _0x5e30da++) {
        _0xeb838a.planetPets.push({
          probability: _0x286b70[_0x5e30da].split("_")[1],
          bossId: _0x286b70[_0x5e30da].split("_")[0]
        });
      }
      logger(_0xeb838a.planetPets);
      _0x3a5d89 = _0x34c749.width / 15;
      let _0x472e0 = _0x1db2d1.y + _0x1db2d1.height + 13;
      for (let _0x42c629 = 0; _0x42c629 < _0xeb838a.planetPets.length; _0x42c629++) {
        let _0x294cb3 = xls.pveBoss.getItem(_0xeb838a.planetPets[_0x42c629].bossId).petID.split("_")[0];
        const _0x55e9ef = {
          x: _0x3a5d89,
          y: _0x472e0,
          selected: false,
          petId: _0x294cb3,
          storageKey: "catchGoal" + _0x294cb3
        };
        let _0x176131 = createToggle(_0x55e9ef);
        _0x34c749.addChild(_0x176131);
        const _0x155f07 = {
          petConfBtn: _0x176131
        };
        _0xeb838a.catchConfigs.push(_0x155f07);
        let _0x5c726c = createLabel({
          text: PetConfig.getDef(_0x294cb3).name + " 概率:(" + _0xeb838a.planetPets[_0x42c629].probability + ")",
          x: _0x176131.x + _0x176131.width + 10,
          y: _0x472e0,
          textColor: 16776960
        });
        _0x34c749.addChild(_0x5c726c);
        _0x472e0 = _0x176131.height + _0x176131.y + 20;
        let _0x462de7 = _0x34c749.width / 2.5;
        _0xeb838a.catchConfigs[_0x42c629].capConfBtn = [];
        for (let _0x4a3514 = 0; _0x4a3514 < _0xeb838a.capsuleNames.length; _0x4a3514++) {
          const _0x489f38 = {
            text: _0xeb838a.capsuleNames[_0x4a3514].capName,
            x: _0x462de7,
            y: _0x176131.y
          };
          let _0x482c2c = createLabel(_0x489f38);
          _0x34c749.addChild(_0x482c2c);
          const _0x4044ae = {
            x: _0x482c2c.x + _0x482c2c.width + 10,
            y: _0x176131.y,
            selected: false,
            capId: _0xeb838a.capsuleNames[_0x4a3514].capId,
            textValue: _0xeb838a.capsuleNames[_0x4a3514].capName
          };
          let _0x165b7c = createToggle(_0x4044ae);
          if (localStorage.getItem("catchCaps" + _0x294cb3) != null) {
            let _0x4429db = localStorage.getItem("catchCaps" + _0x294cb3).split(",");
            logger("存储胶囊ids", _0x4429db, "目前胶囊id", _0x165b7c.capId);
            if (_0x4429db.indexOf(_0x165b7c.capId + "") != -1) {
              _0x165b7c.selected = true;
            }
          }
          _0x34c749.addChild(_0x165b7c);
          _0x462de7 = _0x165b7c.x + _0x165b7c.width + 10;
          _0xeb838a.catchConfigs[_0x42c629].capConfBtn.push(_0x165b7c);
        }
      }
      const _0x7bf1c2 = {
        prompt: "捕捉只数",
        width: 100,
        x: 30,
        y: _0x34c749.height / 1.3,
        storageKey: "levelinputCounts"
      };
      var _0x2c2835 = createEdit(_0x7bf1c2);
      const _0x1c88a3 = {
        text: "捕捉只数",
        x: 30,
        y: _0x2c2835.y - _0x2c2835.height + 10
      };
      var _0x1db2d1 = createLabel(_0x1c88a3);
      _0x34c749.addChild(_0x2c2835);
      _0x34c749.addChild(_0x1db2d1);
      const _0x3980b4 = {
        prompt: "停止天赋",
        width: 100,
        x: _0x2c2835.width + 67,
        y: _0x34c749.height / 1.3,
        storageKey: "levelCatchTalent"
      };
      var _0x297902 = createEdit(_0x3980b4);
      _0x34c749.addChild(_0x297902);
      const _0x4203f0 = {
        text: "停止天赋",
        x: _0x2c2835.width + 67,
        y: _0x297902.y - _0x297902.height + 10
      };
      var _0x1db2d1 = createLabel(_0x4203f0);
      _0x34c749.addChild(_0x1db2d1);
      _0x34c749.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0xeb838a.stop();
      }, function () {
        try {
          let _0x4c3b90 = [];
          for (let _0x3570be = 0; _0x3570be < _0xeb838a.catchConfigs.length; _0x3570be++) {
            let _0x55ebd6 = _0xeb838a.catchConfigs[_0x3570be];
            if (_0x55ebd6.petConfBtn.selected) {
              let _0x332633 = [];
              _0x55ebd6.capConfBtn.forEach(_0x10c5ab => {
                if (_0x10c5ab.selected) {
                  _0x332633.push(_0x10c5ab.capId);
                }
              });
              if (!_0x332633.length) {
                MFC.bubbleAlert.showAlert(PetConfig.getDef(_0x55ebd6.petConfBtn.petId).name + "==>至少设置一种胶囊类型!!!");
                return true;
              }
              const _0x414cbd = {
                petId: _0x55ebd6.petConfBtn.petId + "",
                capIds: _0x332633
              };
              _0x4c3b90.push(_0x414cbd);
              localStorage.setItem("catchGoal" + _0x55ebd6.petConfBtn.petId, true);
              localStorage.setItem("catchCaps" + _0x55ebd6.petConfBtn.petId, _0x332633);
            } else {
              localStorage.setItem("catchGoal" + _0x55ebd6.petConfBtn.petId, false);
            }
          }
          logger("goalCatchs", _0x4c3b90);
          if (_0x4c3b90.length == 0) {
            MFC.bubbleAlert.showAlert("至少设置一种精灵");
            return true;
          }
          _0xeb838a.goalCatchs = _0x4c3b90;
          if (isNaN(parseInt(_0x2c2835.text))) {
            MFC.bubbleAlert.showAlert("请输入有效捕捉次数");
            return true;
          }
          if (isNaN(parseInt(_0x297902.text)) || parseInt(_0x297902.text) > 31 || parseInt(_0x297902.text) < 0) {
            MFC.bubbleAlert.showAlert("请输入有效精灵天赋");
            return true;
          }
          localStorage.setItem("levelCatchTalent", parseInt(_0x297902.text));
          localStorage.setItem("levelinputCounts", parseInt(_0x2c2835.text));
          _0xeb838a.catchCounts = parseInt(_0x2c2835.text);
          _0xeb838a.stopTalent = parseInt(_0x297902.text);
          _0xeb838a.levelId = window.noLevelCatchPets.levelId;
          _0xeb838a.prcessBody();
        } catch (_0x2ddeaa) {
          logger(_0x2ddeaa);
        }
      }], null);
      _0x34c749.showAlert();
    });
  }
  async prcessBody() {
    logger("胶囊ids", this.capIds, "精灵ids", this.petIds, "捕捉次数", this.catchCounts, "精灵天赋", this.stopTalent, "关卡", this.levelId);
    try {
      let _0x2838ca = this.checkUseCatchPet();
      if (!_0x2838ca) {
        addGameLog("没有相关满足条件的捕捉精灵，捕捉结束[等级至少60级]");
        this.stop();
        return false;
      }
      await wait(200);
      const _0xb63ddf = {
        op: 1,
        arrayType: "defaultTeam",
        subArray: 0,
        idx: 1,
        teamUp: 0,
        fightType: 0,
        getTimeList: [_0x2838ca.getTime]
      };
      await this.send_message("cs_new_change_petArray", _0xb63ddf);
      addGameLog("设置" + PetConfig.getDef(_0x2838ca.petId).name + "首发成功！");
      while (1) {
        if (UserManager.getInstance().userInfo.curEnergy < 5) {
          this.logAllCatchPets(this.allCatchPets);
          MFC.alert.show("电池不足,任务取消!");
          addGameLog("电池不足,任务取消!");
          this.stop();
          return;
        }
        await this.send_message("cs_pve_planet_start_battle", {
          levelId: this.levelId,
          getTimeList: [_0x2838ca.getTime],
          attachBattleSkill: []
        });
        let _0x5c94db = await this.waitEvent("sc_battle_notify_load_resource");
        let _0x3efae9 = JSON.parse(_0x5c94db.gameBody[_0x5c94db.gameBody.length - 1].raw);
        _0x5c94db.gameBody.splice(0, _0x5c94db.gameBody.length);
        await wait(200);
        let _0x2c88a0 = _0x3efae9.teamB.players[0].petInfos[0].petID;
        addGameLog("对战精灵: " + PetConfig.getDef(_0x2c88a0).name);
        logger("精灵数组", this.petIds, "对战精灵", _0x2c88a0);
        await this.send_message("cs_online_load_resource", {
          groupId: "",
          battleType: 0
        });
        await wait(200);
        if (this.goalCatchs.length) {
          this.petIds = [];
          for (let _0x49f03b = 0; _0x49f03b < this.goalCatchs.length; _0x49f03b++) {
            this.petIds.push(this.goalCatchs[_0x49f03b].petId);
          }
          logger("目标数组", this.petIds);
        }
        if (this.petIds.indexOf(_0x2c88a0.toString()) == -1) {
          addGameLog(PetConfig.getDef(_0x2c88a0).name + " 非目标精灵,逃跑");
          await wait(200);
          await this.send_message("cs_quit_battle", {});
          await wait(200);
          continue;
        } else {
          await this.send_message("cs_online_player_operation", {
            opType: 5,
            data: null,
            groupId: ""
          });
          _0x5c94db = await this.waitEvent("sc_battle_notify_round_result");
          _0x3efae9 = JSON.parse(_0x5c94db.gameBody[_0x5c94db.gameBody.length - 1].raw);
          _0x5c94db.gameBody.splice(0, _0x5c94db.gameBody.length);
          await wait(200);
          if (_0x3efae9.result.result !== 0) {
            addGameLog("怪物已经死亡!!!!");
            continue;
          }
        }
        if (this.goalCatchs.length) {
          this.capIds = [];
          for (let _0x230e74 = 0; _0x230e74 < this.goalCatchs.length; _0x230e74++) {
            if (this.goalCatchs[_0x230e74].petId == _0x2c88a0) {
              let _0x2ef0d7 = PetConfig.getDef(_0x2c88a0).catchRound;
              addGameLog("对战" + PetConfig.getDef(_0x2c88a0).name + "第 " + (_0x3efae9.result.roundNum + 1) + "回合");
              this.capIds = this.goalCatchs[_0x230e74].capIds;
              if (_0x2ef0d7 == _0x3efae9.result.roundNum + 1 && _0x2ef0d7 <= 5) {
                addGameLog("到达稀有精灵捕捉最后一回合\n使用选择最高档胶囊!");
                let _0x495d26 = this.goalCatchs[_0x230e74].capIds;
                this.capIds = [_0x495d26[_0x495d26.length - 1]];
              }
              break;
            }
          }
        }
        var _0xcd34eb = randomCap(this.capIds);
        if (_0xcd34eb == "NoCap") {
          addGameLog("无可用胶囊,捕捉任务结束");
          this.logAllCatchPets(this.allCatchPets);
          await this.send_message("cs_quit_battle", {});
          this.stop();
          return false;
        }
        await this.send_message("cs_online_load_battle_result", {
          groupId: ""
        });
        await wait(200);
        let _0x3b88cf = _0x2838ca.skillID;
        _0x3efae9 = await this.useSkill(_0x3b88cf);
        let _0x4bc6ea = 0;
        while (1) {
          if (_0x3efae9.result.result !== 0) {
            addGameLog("怪物已经死亡!!!!");
            _0x4bc6ea = 1;
            break;
          }
          if (_0x3efae9.result.playerInfos[0].uid !== MFC.userInfo.uid) {
            if (_0x3efae9.result.playerInfos[0].petInfos[0].crtHp <= 1) {
              break;
            }
          } else if (_0x3efae9.result.playerInfos[1].petInfos[0].crtHp <= 1) {
            break;
          }
          await this.send_message("cs_online_load_battle_result", {
            groupId: ""
          });
          await wait(200);
          _0x3efae9 = await this.useSkill(_0x3b88cf);
        }
        if (_0x4bc6ea == 1) {
          continue;
        }
        await wait(200);
        addGameLog("怪物血量已经为1,开始捕捉");
        this.CatchPetDatas = null;
        while (_0x3efae9.result.result == 0) {
          await this.send_message("cs_online_load_battle_result", {
            groupId: ""
          });
          if (this.goalCatchs.length) {
            this.capIds = [];
            for (let _0x10b9ac = 0; _0x10b9ac < this.goalCatchs.length; _0x10b9ac++) {
              if (this.goalCatchs[_0x10b9ac].petId == _0x2c88a0) {
                let _0x5aa600 = PetConfig.getDef(_0x2c88a0).catchRound;
                addGameLog("对战" + PetConfig.getDef(_0x2c88a0).name + "第 " + (_0x3efae9.result.roundNum + 1) + "回合");
                this.capIds = this.goalCatchs[_0x10b9ac].capIds;
                if (_0x5aa600 == _0x3efae9.result.roundNum + 1 && _0x5aa600 <= 5) {
                  addGameLog("到达稀有精灵捕捉最后一回合\n使用选择最高档胶囊!");
                  let _0x2d5e90 = this.goalCatchs[_0x10b9ac].capIds;
                  this.capIds = [_0x2d5e90[_0x2d5e90.length - 1]];
                }
                break;
              }
            }
          }
          var _0xcd34eb = randomCap(this.capIds);
          if (_0xcd34eb == "NoCap") {
            addGameLog("无可用胶囊,捕捉任务结束");
            await this.send_message("cs_quit_battle", {});
            this.logAllCatchPets(this.allCatchPets);
            this.stop();
            return false;
          }
          await wait(400);
          addGameLog("使用:" + _0xcd34eb.name + "胶囊,剩余:" + _0xcd34eb.num);
          _0x3efae9 = await this.useItem(_0xcd34eb.itemId);
          let _0xcf5f8b = await this.waitEvent("sc_notify_item_change");
          _0xcf5f8b.gameBody.splice(0, _0xcf5f8b.gameBody.length);
          if (this.CatchPetDatas || window.nowTask.CatchPetDatas) {
            if (window.nowTask.CatchPetDatas) {
              this.CatchPetDatas = window.nowTask.CatchPetDatas;
            }
            addGameLog("捕捉成功: " + this.CatchPetDatas.pet.nick + " 天赋:" + this.CatchPetDatas.pet.talent);
            MFC.bubbleAlert.showAlert("捕捉成功: " + this.CatchPetDatas.pet.nick + " 天赋:" + this.CatchPetDatas.pet.talent);
            this.allCatchPets.push({
              nick: this.CatchPetDatas.pet.nick,
              talent: this.CatchPetDatas.pet.talent
            });
            this.addCount++;
            if (this.CatchPetDatas.pet.talent >= this.stopTalent) {
              addGameLog("天赋满足:" + this.stopTalent, "停止");
              this.stop();
              return true;
            }
            break;
          }
        }
        if (this.addCount >= this.catchCounts) {
          addGameLog("捕捉执行完毕:" + this.addCount);
          this.logAllCatchPets(this.allCatchPets);
          this.stop();
          return true;
        }
      }
    } catch (_0x35613c) {
      logger(_0x35613c);
      this.logAllCatchPets(this.allCatchPets);
    }
  }
  logAllCatchPets(_0x4176d0) {
    if (_0x4176d0.length > 0) {
      let _0xb949ba = [];
      for (let _0x5140b6 = 0; _0x5140b6 < _0x4176d0.length; _0x5140b6++) {
        _0xb949ba.push("\n精灵: " + _0x4176d0[_0x5140b6].nick + " 天赋: " + _0x4176d0[_0x5140b6].talent);
      }
      addGameLog(_0xb949ba.join(""));
    }
    addGameLog("\n捕捉精灵汇总:");
  }
  checkUseCatchPet() {
    const _0x1b1ee7 = {
      手下留情Plus: 100125,
      手下留情: 10057,
      真抽打: 31993,
      处处留情: 31598,
      天魔裂空闪: 400005
    };
    const _0x36cdee = Object.values(_0x1b1ee7).map(() => false);
    const _0x2dd864 = PetManager.getInstance().getAllPets();
    for (let _0x53dee2 = 0; _0x53dee2 < _0x2dd864.length; _0x53dee2++) {
      const _0x1d1aea = _0x2dd864[_0x53dee2];
      const _0x358495 = _0x1d1aea.skills;
      if (_0x1d1aea.level >= 60) {
        Object.values(_0x1b1ee7).some((_0x5a8355, _0x524306) => {
          if (_0x1d1aea.nick == "皮皮" && _0x1d1aea.skills.indexOf(400005) !== -1) {
            if (_0x1d1aea.petTokenGetTimeList[0] !== 0 && _0x1d1aea.petTokenGetTimeList[1] !== 0 && _0x1d1aea.petTokenGetTimeList[2] !== 0) {
              if (PetTokenManager.getInstance().calcEnchValue(PetTokenManager.getInstance().getTokenInfo(_0x1d1aea.petTokenGetTimeList[0]).ench).enchId == 101 && PetTokenManager.getInstance().calcEnchValue(PetTokenManager.getInstance().getTokenInfo(_0x1d1aea.petTokenGetTimeList[1]).ench).enchId == 101 && PetTokenManager.getInstance().calcEnchValue(PetTokenManager.getInstance().getTokenInfo(_0x1d1aea.petTokenGetTimeList[2]).ench).enchId == 101) {} else {
                return false;
              }
            } else {
              return false;
            }
          }
          if (_0x358495.includes(_0x5a8355)) {
            const _0x18fe01 = {
              getTime: _0x1d1aea.getTime,
              skillID: _0x5a8355,
              petId: _0x1d1aea.petId
            };
            _0x36cdee[_0x524306] = _0x18fe01;
            return true;
          }
          return false;
        });
      }
    }
    return _0x36cdee.find(_0x5a54d1 => _0x5a54d1) || false;
  }
}
class Delegate extends SuperTask {
  constructor() {
    super();
    this.nowName = "一键委派";
    this.attr = 0;
  }
  start() {
    super.start();
    let _0x4fe27c = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x169381 = [];
      var _0x1f690c = SimpleAlertUi({
        height: 450,
        width: 500
      });
      _0x4fe27c.alertWin = _0x1f690c;
      const _0x5c19d1 = {
        text: "一键委派",
        x: _0x1f690c.width / 2 - 32,
        y: _0x1f690c.height / 16
      };
      var _0x5895cf = createLabel(_0x5c19d1);
      _0x169381.push(_0x5895cf);
      const _0x3ae087 = {
        text: "注意: 委派商店勾选会自动购买，不要勾选错了哦!!!",
        x: _0x1f690c.width / 15,
        y: _0x5895cf.y + 25,
        textColor: 16776960
      };
      let _0x5196f9 = createLabel(_0x3ae087);
      _0x169381.push(_0x5196f9);
      const _0x2a4c08 = {
        text: "此功能会自动委派完进行购买~",
        x: _0x1f690c.width / 15 + 47,
        y: _0x5196f9.y + _0x5196f9.height + 10,
        textColor: 16776960
      };
      let _0x320383 = createLabel(_0x2a4c08);
      _0x169381.push(_0x320383);
      xls.activityExchange.load();
      let _0xfbacf5 = [];
      let _0x4723a9 = [];
      let _0x45b1dc = [];
      for (let _0x4ed5af = 0; _0x4ed5af < 5; _0x4ed5af++) {
        _0x45b1dc[_0x4ed5af] = xls.activityExchange.getItem(11427 + _0x4ed5af).name.split("：")[1];
        _0xfbacf5[_0x4ed5af] = createLabel({
          text: _0x45b1dc[_0x4ed5af],
          x: _0x1f690c.width / 9,
          y: _0x320383.y + (_0x4ed5af + 1) * 40
        });
        _0x169381.push(_0xfbacf5[_0x4ed5af]);
        _0x4723a9[_0x4ed5af] = createToggle({
          x: _0xfbacf5[_0x4ed5af].x + 120,
          y: _0xfbacf5[_0x4ed5af].y,
          selected: false,
          storageKey: "waipai" + _0x4ed5af
        });
        _0x169381.push(_0x4723a9[_0x4ed5af]);
      }
      for (let _0x25c314 = 5; _0x25c314 < 10; _0x25c314++) {
        _0x45b1dc[_0x25c314] = xls.activityExchange.getItem(11427 + _0x25c314).name.split("：")[1];
        _0xfbacf5[_0x25c314] = createLabel({
          text: _0x45b1dc[_0x25c314],
          x: _0x4723a9[1].x + 80,
          y: _0x320383.y + (_0x25c314 - 4) * 40
        });
        _0x169381.push(_0xfbacf5[_0x25c314]);
        _0x4723a9[_0x25c314] = createToggle({
          x: _0xfbacf5[_0x25c314].x + 120,
          y: _0xfbacf5[_0x25c314].y,
          selected: false,
          storageKey: "waipai" + _0x25c314
        });
        _0x169381.push(_0x4723a9[_0x25c314]);
      }
      let _0x5b08d2 = createLabel({
        text: xls.activityExchange.getItem(22299).name.split("：")[1],
        x: _0x1f690c.width / 9,
        y: _0x320383.y + 240,
        textColor: 16776960
      });
      _0x169381.push(_0x5b08d2);
      const _0x4631b4 = {
        x: _0x5b08d2.x + 120,
        y: _0x5b08d2.y,
        selected: false,
        storageKey: "waipai" + 10
      };
      _0x4723a9[10] = createToggle(_0x4631b4);
      _0x169381.push(_0x4723a9[10]);
      _0x4fe27c.addAllUis(_0x169381);
      _0x1f690c.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x4fe27c.stop();
      }, function () {
        for (let _0x3aee78 = 0; _0x3aee78 < 11; _0x3aee78++) {
          localStorage.setItem("waipai" + _0x3aee78, _0x4723a9[_0x3aee78].selected);
        }
        _0x4fe27c.prcessBody();
      }], null);
      _0x1f690c.showAlert();
    });
  }
  async prcessBody() {
    try {
      let _0x484da3 = MFC.attr.getAttr(MFC.attrType["foreverNewDispatchEndTime" + 1]) * 1000;
      let _0x483890 = MFC.attr.getAttr(MFC.attrType["foreverNewDispatchEndTime" + 2]) * 1000;
      let _0x1d9019 = MFC.attr.getAttr(MFC.attrType["foreverNewDispatchEndTime" + 3]) * 1000;
      let _0x4b8c2f = MFC.attr.getAttr(MFC.attrType["foreverNewDispatchEndTime" + 4]) * 1000;
      if (_0x484da3 == 0) {
        addGameLog("没有正在进行的任务");
      } else if (MFC.serverTimer.getTime() > _0x484da3) {
        addGameLog("领取第一次派遣奖励");
        await this.send_message("cs_new_dispatch_task", {
          type: 3,
          getTimeList: null,
          taskIdx: 1
        });
        await wait(500);
      } else {
        addGameLog("委派任务还在进行");
      }
      if (_0x483890 == 0) {
        addGameLog("没有正在进行的任务");
      } else if (MFC.serverTimer.getTime() > _0x483890) {
        addGameLog("领取第二次派遣奖励");
        await this.send_message("cs_new_dispatch_task", {
          type: 3,
          getTimeList: null,
          taskIdx: 2
        });
        await wait(500);
      } else {
        addGameLog("委派任务还在进行");
      }
      if (_0x1d9019 == 0) {
        addGameLog("没有正在进行的任务");
      } else if (MFC.serverTimer.getTime() > _0x1d9019) {
        addGameLog("领取第三次派遣奖励");
        await this.send_message("cs_new_dispatch_task", {
          type: 3,
          getTimeList: null,
          taskIdx: 3
        });
        await wait(500);
      } else {
        addGameLog("委派任务还在进行");
      }
      if (_0x4b8c2f == 0) {
        addGameLog("没有正在进行的任务");
      } else if (MFC.serverTimer.getTime() > _0x4b8c2f) {
        addGameLog("领取第四次派遣奖励");
        await this.send_message("cs_new_dispatch_task", {
          type: 3,
          getTimeList: null,
          taskIdx: 4
        });
        await wait(500);
      } else {
        addGameLog("委派任务还在进行");
      }
      if (!xls.entrustTask.hasLoaded) {
        xls.entrustTask.load(() => {});
      }
      let _0x376406 = await this.send_message("cs_new_dispatch_task", {
        type: 1,
        getTimeList: null,
        taskIdx: 0
      });
      timer.change(1 / 5);
      for (let _0x2cbd5d = 0; _0x2cbd5d < 4; _0x2cbd5d++) {
        if (MFC.userInfo.newDispatchTaskGetTimes[_0x2cbd5d].length == 0) {
          if (BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.foreverNewDispatchTaskId), _0x2cbd5d * 7, (_0x2cbd5d + 1) * 7) == 0) {
            addGameLog("任务" + (_0x2cbd5d + 1) + "不存在");
          } else {
            let _0x58ec0b = xls.entrustTask.getItem(BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.foreverNewDispatchTaskId), _0x2cbd5d * 7, (_0x2cbd5d + 1) * 7)).petNeed.split("|").map(Number);
            logger("任务" + (_0x2cbd5d + 1) + "需要" + _0x58ec0b[2] + "只" + _0x58ec0b[1] + "等级");
            logger(_0x376406.needElem[_0x2cbd5d]);
            if (_0x376406.needElem[_0x2cbd5d].indexOf("|") !== -1) {
              let _0xb48283 = _0x376406.needElem[_0x2cbd5d].split("|");
              let _0x17371c = [];
              let _0x4e0256 = [];
              let _0x2aefeb = 0;
              let _0x56db08 = [];
              for (let _0x4d11a5 = 0; _0x4d11a5 < _0xb48283.length; _0x4d11a5++) {
                let _0x43ccd9 = _0xb48283[_0x4d11a5].split("_");
                let _0xdb773b = _0x43ccd9[0];
                let _0x1456c6 = _0x43ccd9[1];
                _0x17371c.push(parseInt(_0xdb773b));
                _0x4e0256.push(parseInt(_0x1456c6));
              }
              for (let _0x143f19 = 0; _0x143f19 < _0x4e0256.length; _0x143f19++) {
                let _0x5c6682 = PetManager.getInstance().getAllPets().map(_0x3fc02e => {
                  if (PetConfig.getDef(_0x3fc02e.petId).elemType == _0x4e0256[_0x143f19] && _0x3fc02e.petStatus == 0 && _0x3fc02e.level >= _0x58ec0b[1] && MFC.userInfo.newDispatchTaskGetTimes[0].indexOf(_0x3fc02e.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[1].indexOf(_0x3fc02e.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[2].indexOf(_0x3fc02e.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[3].indexOf(_0x3fc02e.getTime) == -1) {
                    return _0x3fc02e;
                  }
                }).filter(_0x30fbe6 => _0x30fbe6).sort((_0xe37d87, _0x534815) => _0xe37d87.level - _0x534815.level);
                let _0x28f5c5 = PetManager.getInstance().getAllPets().map(_0x4b3fc9 => {
                  if (PetConfig.getDef(_0x4b3fc9.petId).elemType == _0x4e0256[_0x143f19] && _0x4b3fc9.petStatus == 0 && MFC.userInfo.newDispatchTaskGetTimes[0].indexOf(_0x4b3fc9.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[1].indexOf(_0x4b3fc9.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[2].indexOf(_0x4b3fc9.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[3].indexOf(_0x4b3fc9.getTime) == -1) {
                    return _0x4b3fc9;
                  }
                }).filter(_0x909c3 => _0x909c3).sort((_0x51d3ca, _0x24b0cb) => _0x51d3ca.level - _0x24b0cb.level);
                for (let _0x19220d = 0; _0x19220d < _0x17371c[_0x143f19]; _0x19220d++) {
                  if (_0x58ec0b[2] > _0x2aefeb) {
                    if (_0x5c6682.length > 0) {
                      _0x56db08.push(_0x5c6682.shift().getTime);
                      _0x2aefeb++;
                    } else if (_0x28f5c5.length > 0) {
                      _0x56db08.push(_0x28f5c5.shift().getTime);
                    }
                  } else if (_0x28f5c5.length > 0) {
                    _0x56db08.push(_0x28f5c5.shift().getTime);
                  }
                }
              }
              if (_0x56db08.length == _0x17371c.reduce((_0x5d5815, _0x4401da) => _0x5d5815 + _0x4401da, 0) && _0x2aefeb == _0x58ec0b[2]) {
                const _0x465325 = {
                  type: 2,
                  getTimeList: _0x56db08,
                  taskIdx: _0x2cbd5d + 1
                };
                await this.send_message("cs_new_dispatch_task", _0x465325);
                await wait(500);
                addGameLog("任务" + (_0x2cbd5d + 1) + "委派成功");
              } else {
                addGameLog("任务" + (_0x2cbd5d + 1) + "没有符合条件精灵");
              }
            } else {
              let _0x220220 = _0x376406.needElem[_0x2cbd5d].split("_").map(Number);
              logger("数量" + _0x220220[0] + "属性" + _0x220220[1]);
              let _0x9460a6 = [];
              let _0x5a2b19 = PetManager.getInstance().getAllPets().map(_0x2fb461 => {
                if (PetConfig.getDef(_0x2fb461.petId).elemType == _0x220220[1] && _0x2fb461.petStatus == 0 && MFC.userInfo.newDispatchTaskGetTimes[0].indexOf(_0x2fb461.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[1].indexOf(_0x2fb461.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[2].indexOf(_0x2fb461.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[3].indexOf(_0x2fb461.getTime) == -1) {
                  return _0x2fb461;
                }
              }).filter(_0x2b2c3b => _0x2b2c3b).sort((_0x220613, _0x2f1a45) => _0x220613.level - _0x2f1a45.level);
              let _0x26e162 = PetManager.getInstance().getAllPets().map(_0x43d7eb => {
                if (PetConfig.getDef(_0x43d7eb.petId).elemType == _0x220220[1] && _0x43d7eb.petStatus == 0 && _0x43d7eb.level >= _0x58ec0b[1] && MFC.userInfo.newDispatchTaskGetTimes[0].indexOf(_0x43d7eb.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[1].indexOf(_0x43d7eb.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[2].indexOf(_0x43d7eb.getTime) == -1 && MFC.userInfo.newDispatchTaskGetTimes[3].indexOf(_0x43d7eb.getTime) == -1) {
                  return _0x43d7eb;
                }
              }).filter(_0x38705d => _0x38705d).sort((_0x160ca0, _0x388907) => _0x160ca0.level - _0x388907.level);
              for (let _0x13c022 = 0; _0x13c022 < _0x220220[0] - _0x58ec0b[2]; _0x13c022++) {
                if (_0x5a2b19.length > 0) {
                  _0x9460a6.push(_0x5a2b19.shift().getTime);
                }
              }
              for (let _0x5a54d0 = 0; _0x5a54d0 < _0x58ec0b[2]; _0x5a54d0++) {
                if (_0x26e162.length > 0) {
                  _0x9460a6.push(_0x26e162.shift().getTime);
                }
              }
              if (_0x9460a6.length == _0x220220[0]) {
                const _0x416b69 = {
                  type: 2,
                  getTimeList: _0x9460a6,
                  taskIdx: _0x2cbd5d + 1
                };
                await this.send_message("cs_new_dispatch_task", _0x416b69);
                await wait(500);
                addGameLog("任务" + (_0x2cbd5d + 1) + "委派成功");
              } else {
                addGameLog("任务" + (_0x2cbd5d + 1) + "没有符合条件精灵");
              }
            }
          }
        } else {
          addGameLog("任务" + (_0x2cbd5d + 1) + "不存在或正在进行");
        }
      }
      addGameLog("即将进行商店购买");
      for (let _0x42eda5 = 0; _0x42eda5 < 10; _0x42eda5++) {
        if (localStorage.getItem("waipai" + _0x42eda5).toString() == "true") {
          if (ExchangeUtils.getCurrentExchangeNum(xls.activityExchange.getItem(11427 + _0x42eda5)) == 1) {
            addGameLog(xls.activityExchange.getItem(11427 + _0x42eda5).name.split("：")[1] + "已购买");
          } else if (MFC.attr.getAttr(2010) >= parseInt(xls.activityExchange.getItem(11427 + _0x42eda5).consume.split("_")[1])) {
            const _0x287bae = {
              id: 11427 + _0x42eda5,
              coeff: 1,
              selectIndex: 0,
              subDropIdList: []
            };
            await this.send_message("cs_exchange_activity_reward", _0x287bae);
            await wait(200);
            addGameLog("购买" + xls.activityExchange.getItem(11427 + _0x42eda5).name.split("：")[1]);
          } else {
            addGameLog("委托积分不足以购买" + xls.activityExchange.getItem(11427 + _0x42eda5).name.split("：")[1]);
          }
        }
      }
      if (localStorage.getItem("waipai" + 10).toString() == "true") {
        if (ExchangeUtils.getCurrentExchangeNum(xls.activityExchange.getItem(22299)) == 1) {
          addGameLog(xls.activityExchange.getItem(22299).name.split("：")[1] + "已购买");
        } else if (MFC.attr.getAttr(2010) >= parseInt(xls.activityExchange.getItem(22299).consume.split("_")[1])) {
          await this.send_message("cs_exchange_activity_reward", {
            id: 22299,
            coeff: 1,
            selectIndex: 0,
            subDropIdList: []
          });
          await wait(200);
          addGameLog("购买" + xls.activityExchange.getItem(22299).name.split("：")[1]);
        } else {
          addGameLog("委托积分不足以购买" + xls.activityExchange.getItem(22299).name.split("：")[1]);
        }
      }
      this.stop();
    } catch (_0x45c927) {}
  }
}
class Activity888 extends SuperTask {
  constructor() {
    super();
    this.nowName = "888活动";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_notify_change_pet"
    }, {
      watchEventName: "sc_change_default_team"
    }, {
      watchEventName: "sc_notify_item_change"
    }, {
      watchEventName: "sc_lost_valley_notify"
    }];
    this.task = [];
    this.team = [];
    this.pp = false;
    this.hksbattlestatu = 0;
    this.initfldata1 = [];
    this.initfldata2 = [];
  }
  start() {
    super.start();
    let _0x4aa335 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x1c81d7 = [];
      var _0x2b5ded = SimpleAlertUi({
        height: 400,
        width: 460
      });
      _0x4aa335.alertWin = _0x2b5ded;
      const _0x4a45d5 = {
        text: "888活动",
        x: _0x2b5ded.width / 2 - 28,
        y: _0x2b5ded.height / 16
      };
      var _0x2fb6db = createLabel(_0x4a45d5);
      _0x1c81d7.push(_0x2fb6db);
      const _0x33594b = {
        text: "注意:",
        x: 30,
        y: _0x2fb6db.y + 20,
        textColor: 16776960
      };
      var _0x528899 = createLabel(_0x33594b);
      _0x1c81d7.push(_0x528899);
      var _0xe924fb = ["1.斗皇打法光闪击选择青龙会浪费大量pp", "2.魔神用哈肯撒长老水次蒂朵神秘狗"];
      _0x4aa335.setupTitle = _0x528899;
      _0xe924fb.forEach((_0x5a9d6a, _0x3b3787) => {
        const _0x2faea7 = {
          text: _0x5a9d6a,
          x: 60,
          y: _0x4aa335.setupTitle.y + 26
        };
        var _0x3de992 = createLabel(_0x2faea7);
        _0x4aa335.setupTitle = _0x3de992;
        _0x1c81d7.push(_0x3de992);
      });
      const _0x452fa8 = {
        text: "昆仑",
        storageKey: "douhuang",
        selected: true
      };
      const _0x763d54 = {
        text: "雷锘",
        storageKey: "Renault",
        selected: false
      };
      const _0x5334cd = {
        text: "魔神(亚斯塔禄)",
        storageKey: "Mosheny",
        selected: false
      };
      const _0x479718 = {
        text: "耶里梅斯",
        storageKey: "rebirth",
        selected: false
      };
      const _0x627b4a = {
        text: "奥布雷",
        storageKey: "aobulei",
        selected: false
      };
      const _0x26d93a = {
        text: "哈肯撒",
        storageKey: "hakensa",
        selected: false
      };
      const _0x43ad0b = {
        text: "莫迪西斯",
        storageKey: "modi",
        selected: false
      };
      const _0x32e239 = {
        text: "巨尾狐妖",
        storageKey: "pthl",
        selected: false
      };
      const _0x6f4faa = {
        text: "战皇",
        storageKey: "zh",
        selected: false
      };
      const _0xeff03f = {
        text: "影皇",
        storageKey: "darkKing",
        selected: false
      };
      const _0x271544 = {
        text: "黄金天马",
        storageKey: "skyHorse",
        selected: false
      };
      const _0x3387c4 = {
        text: "战龙(阿瑞波斯)",
        storageKey: "zl",
        selected: false
      };
      const _0x53c0bf = {
        text: "星狩(派瑞希)",
        storageKey: "starDefine",
        selected: false
      };
      const _0x2cabe8 = {
        text: "睡神(赫尔墨斯)",
        storageKey: "hems",
        selected: false
      };
      var _0x3195b5 = [_0x452fa8, _0x763d54, _0x5334cd, _0x479718, _0x627b4a, _0x26d93a, _0x43ad0b, _0x32e239, _0x6f4faa, _0xeff03f, _0x271544, _0x3387c4, _0x53c0bf, _0x2cabe8];
      _0x3195b5.forEach((_0xca88e9, _0x4b20de) => {
        let _0x2d67ac = _0x4b20de % 2 === 0 ? 80 : 250;
        let _0x40ea09 = _0x4aa335.setupTitle.y + 26;
        const _0x239bf5 = {
          x: _0x2d67ac,
          y: _0x40ea09,
          selected: _0xca88e9.selected,
          storageKey: _0xca88e9.storageKey
        };
        let _0x5de19d = createRadio(_0x239bf5);
        _0x1c81d7.push(_0x5de19d);
        _0x3195b5[_0x4b20de].radio = _0x5de19d;
        const _0x191317 = {
          text: _0xca88e9.text,
          x: _0x5de19d.width + _0x5de19d.x + 10,
          y: _0x5de19d.y
        };
        var _0x3aa7ce = createLabel(_0x191317);
        _0x1c81d7.push(_0x3aa7ce);
        if (_0x4b20de % 2 !== 0) {
          _0x4aa335.setupTitle = _0x3aa7ce;
        }
      });
      _0x4aa335.addAllUis(_0x1c81d7);
      _0x2b5ded.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x4aa335.stop();
      }, function () {
        _0x3195b5.forEach((_0x246a8d, _0x242f05) => {
          localStorage.setItem(_0x246a8d.storageKey, _0x246a8d.radio.selected);
          if (_0x246a8d.radio.selected) {
            addGameLog("执行" + _0x246a8d.text);
            _0x4aa335.task[_0x242f05] = 1;
          }
        });
        _0x4aa335.prcessBody();
      }], null);
      _0x2b5ded.showAlert();
    });
  }
  async prcessBody() {
    try {
      if (this.task[0]) {
        let _0x11066b = xls.eventSummary.getItems().filter(_0x436ae8 => _0x436ae8.eventName.includes("昆仑之巅"));
        if (!_0x11066b.length || !canNowTime(_0x11066b[0].deadline)) {
          MFC.alert.show("昆仑未到开放时间");
          this.stop();
          return;
        }
        await this.kunlui();
        return;
      }
      if (this.task[1]) {
        MFC.alert.show("雷诺未到开放时间");
        this.stop();
        return;
        await this.Renaultui();
      }
      let _0x11bb50 = xls.eventSummary.getItems().filter(_0x49a986 => _0x49a986.eventName.includes("超级集结计划"));
      if (!_0x11bb50.length || !canNowTime(_0x11bb50[0].deadline)) {
        MFC.alert.show("超级集结时间未到");
        this.stop();
        return;
      }
      if (MFC.attr.getAttr(MFC.attrType.foreverSpetSelect) == 0) {
        MFC.alert.show("超级集结还未选择");
        this.stop();
        return;
      }
      const _0x2e3f45 = [null, null, this.mosheny, this.rebirthui, this.Auberyui, this.hksui, this.modiui, this.pthl, this.zhanhuang, this.kingshadowui, this.skyHorseui, this.zlui, this.starDefineui, this.hemsui];
      for (let _0x4f798d = 2; _0x4f798d < _0x2e3f45.length; _0x4f798d++) {
        if (this.task[_0x4f798d]) {
          await _0x2e3f45[_0x4f798d].call(this);
        }
      }
    } catch (_0x3f1db0) {
      logger(_0x3f1db0);
    }
  }
  async zlui() {
    super.start();
    let _0x22a7bb = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x1cafc3 = [];
      var _0x591af7 = SimpleAlertUi({
        height: 470,
        width: 440
      });
      _0x22a7bb.alertWin = _0x591af7;
      const _0x445f70 = {
        text: "阿瑞波斯(战龙)",
        y: _0x591af7.height / 20
      };
      let _0x19d046 = createLabel(_0x445f70);
      _0x19d046.x = _0x591af7.applicationWidth / 2 - _0x19d046.width / 2;
      _0x1cafc3.push(_0x19d046);
      const _0x411425 = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x19d046.y + _0x19d046.height + 10
      };
      var _0x599169 = createLabel(_0x411425);
      _0x1cafc3.push(_0x599169);
      const _0x318b38 = {
        text: "不会耗PP药水 对战 答题 礼盒 任务奖励 自动完成~ \n普通小关 优先采用打法2 蒂朵",
        textColor: 16711680,
        x: 40,
        y: _0x599169.y + 10 + _0x599169.height
      };
      var _0x3698a0 = createLabel(_0x318b38);
      _0x1cafc3.push(_0x3698a0);
      const _0x9988e7 = {
        text: "深渊洞穴 配置:",
        textColor: 16776960,
        x: 30,
        y: _0x19d046.y + 100
      };
      let _0x43df1f = createLabel(_0x9988e7);
      _0x1cafc3.push(_0x43df1f);
      const _0x1ebec2 = {
        text: "打法① ",
        textColor: 65408,
        x: _0x591af7.width / 8 - 20,
        y: _0x43df1f.y + 30
      };
      let _0x185360 = createLabel(_0x1ebec2);
      _0x1cafc3.push(_0x185360);
      const _0xb96db5 = {
        text: "必须精灵: 贝特卡恩(贝爷)",
        textColor: 65535,
        x: _0x591af7.width / 8 + 40,
        y: _0x43df1f.y + 30
      };
      let _0x278152 = createLabel(_0xb96db5);
      _0x1cafc3.push(_0x278152);
      const _0x3a569f = {
        text: "狂暴血怒(符文) 嗜血(符文)",
        textColor: 16776960,
        x: _0x278152.x + _0x278152.width - 160,
        y: _0x278152.y + 30
      };
      let _0x40c7ed = createLabel(_0x3a569f);
      _0x1cafc3.push(_0x40c7ed);
      const _0x45af68 = {
        text: "血气之刃(符文) 狂气突(符文)",
        textColor: 16776960,
        x: _0x40c7ed.x,
        y: _0x40c7ed.y + 30
      };
      let _0x305673 = createLabel(_0x45af68);
      _0x1cafc3.push(_0x305673);
      const _0x566b19 = {
        text: "必须精灵: 雷伊",
        textColor: 65535,
        x: _0x591af7.width / 8 + 40,
        y: _0x305673.y + 30
      };
      let _0x179437 = createLabel(_0x566b19);
      _0x1cafc3.push(_0x179437);
      const _0x5ab8d2 = {
        text: "极电千鸟  充电身躯  雷神之怒",
        textColor: 16776960,
        x: _0x40c7ed.x,
        y: _0x179437.y + 30
      };
      let _0x4683cc = createLabel(_0x5ab8d2);
      _0x1cafc3.push(_0x4683cc);
      const _0x345e29 = {
        text: "非必须精灵: 凯西恩(水次)",
        textColor: 65535,
        x: _0x591af7.width / 8 + 40,
        y: _0x4683cc.y + 30
      };
      let _0x136cd0 = createLabel(_0x345e29);
      _0x1cafc3.push(_0x136cd0);
      const _0x38e82b = {
        text: "奥义断水击",
        textColor: 16776960,
        x: _0x136cd0.x + _0x136cd0.width + 10,
        y: _0x136cd0.y
      };
      let _0x3fe981 = createLabel(_0x38e82b);
      _0x1cafc3.push(_0x3fe981);
      const _0x5b44ce = {
        text: "----------------------------------",
        textColor: 16776960,
        y: _0x136cd0.y + 15
      };
      let _0x5c4e9d = createLabel(_0x5b44ce);
      _0x5c4e9d.x = _0x591af7.width / 2 - _0x5c4e9d.width / 2;
      _0x1cafc3.push(_0x5c4e9d);
      const _0x46a507 = {
        text: "打法② ",
        textColor: 65408,
        x: _0x185360.x,
        y: _0x5c4e9d.y + 15
      };
      let _0x5a0a34 = createLabel(_0x46a507);
      _0x1cafc3.push(_0x5a0a34);
      const _0x23d3a7 = {
        text: "必须精灵: 蒂朵",
        textColor: 65535,
        x: _0x591af7.width / 8 + 40,
        y: _0x5c4e9d.y + 30
      };
      let _0x33d7fc = createLabel(_0x23d3a7);
      _0x1cafc3.push(_0x33d7fc);
      const _0x45fce9 = {
        text: "异维守护",
        textColor: 16776960,
        x: _0x33d7fc.x + _0x33d7fc.width + 10,
        y: _0x33d7fc.y
      };
      let _0x179e93 = createLabel(_0x45fce9);
      _0x1cafc3.push(_0x179e93);
      _0x22a7bb.addAllUis(_0x1cafc3);
      _0x591af7.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x22a7bb.stop();
      }, function () {
        _0x22a7bb.zlAct();
      }], null);
      _0x591af7.showAlert();
    });
  }
  async zlAct() {
    let _0x353d0d = await this.dispatchSelfPet("贝特卡恩", [100940, 100943, 100941, 100942]);
    var _0x49ee7b = await this.dispatchSelfPet("凯西恩", [32529]);
    var _0x4596ff = await this.dispatchSelfPet("雷伊", [10175, 23244, 23245]);
    var _0x204878 = await this.dispatchSelfPet("蒂朵", [100604]);
    if (!_0x204878 && !_0x353d0d) {
      MFC.alert.show(`背包没有带有
狂暴血怒   嗜血
血气之刃   狂气突
[技能均需要符文]的精灵`);
      this.stop();
      return;
    }
    if (!_0x204878 && !_0x4596ff) {
      MFC.alert.show(`背包没有带有
极电千鸟  充电身躯 雷神之怒
的精灵`);
      this.stop();
      return;
    }
    if (!_0x204878) {
      this.bei = _0x353d0d;
      if (_0x49ee7b) {
        this.shuici = _0x49ee7b;
      }
      this.leiyi = _0x4596ff;
    } else {
      this.diduo = _0x204878;
    }
    let _0x165524 = ["A", "B", "C", "D", "E", "F", "G"];
    if (!xls.riddle.hasLoaded) {
      xls.riddle.load(() => {});
    }
    await wait(200);
    while (1) {
      let _0x1de143 = await this.send_message("cs_ares_output", {
        type: 1,
        chose: null,
        speed: null,
        petList: null
      });
      let _0x5f1d56 = JSON.parse(_0x1de143.map);
      if (!_0x5f1d56) {
        await this.send_message("cs_ares_output", {
          type: 8,
          chose: null,
          speed: null,
          petList: null
        });
        continue;
      }
      let _0x3035b5 = MFC.attr.getAttr(MFC.attrType.foreverAresIndex);
      let _0x103d65 = _0x5f1d56[_0x3035b5];
      if (_0x103d65 && _0x3035b5 == 30 && _0x103d65[2]) {
        addGameLog("前往下一层");
        await this.send_message("cs_ares_output", {
          type: 8,
          chose: null,
          speed: null,
          petList: null
        });
        continue;
      }
      if (_0x103d65 && _0x103d65[0] == 1) {
        logger(_0x103d65);
        let _0x1df703 = xls.activityCard.getItem(_0x103d65[1]);
        let _0x221f34 = xls.pveBoss.getItem(_0x1df703.bossID);
        addGameLog("当前位置 " + _0x3035b5 + " 事件:对战");
        if (!_0x103d65[2]) {
          addGameLog("对战boss \n" + PetConfig.getDef(parseInt(_0x221f34.petID)).name);
          if (MFC.userInfo.curEnergy < parseInt(_0x1df703.energy)) {
            MFC.alert.show("电池数不足6 深渊洞穴完成!");
            await this.getActPrice("阿瑞波斯任务");
            this.stop();
            return;
          }
          await this.zlBattle(_0x221f34);
          continue;
        } else {
          addGameLog("对战事件已经完成,继续");
        }
      } else if (_0x103d65 && _0x103d65[0] == 2) {
        let _0x548be0 = xls.riddle.getItem(_0x103d65[1]);
        addGameLog("当前位置 " + _0x3035b5 + " 事件:知识问答 ");
        if (!_0x103d65[2]) {
          addGameLog("问题: \n" + _0x548be0.riddle + " \n选择" + _0x548be0.correct + " " + _0x548be0["option" + _0x548be0.correct]);
          await this.send_message("cs_ares_output", {
            type: 4,
            chose: _0x165524.indexOf(_0x548be0.correct) + 1,
            speed: null,
            petList: null
          });
        } else {
          addGameLog("问题事件已经完成,继续");
        }
      } else if (_0x103d65 && _0x103d65[0] == 3) {
        addGameLog("当前位置 " + _0x3035b5 + " 事件:礼盒事件");
        if (!_0x103d65[2]) {
          await this.send_message("cs_ares_output", {
            type: 5,
            chose: null,
            speed: null,
            petList: null
          });
        } else {
          addGameLog("礼盒事件已经完成,继续");
        }
      } else if (_0x103d65 && _0x103d65[0] == 4) {
        if (!_0x103d65[2]) {
          addGameLog("当前位置 " + _0x3035b5 + " 事件:推进格子");
          await this.send_message("cs_ares_output", {
            type: 7,
            chose: null,
            speed: null,
            petList: null
          });
          continue;
        } else {
          addGameLog("推进格子已经完成,继续");
        }
      }
      let _0x31c97e = null;
      await wait(900);
      if (ItemManager.getInstance().getItemNumById(101159) > 0) {} else if (ItemManager.getInstance().getItemNumById(101160) > 0) {
        _0x31c97e = 3;
      } else {
        MFC.alert.show("推进器不足!\n深渊洞穴完成");
        await this.getActPrice("阿瑞波斯任务");
        this.stop();
        return;
      }
      const _0x2a6085 = {
        type: 2,
        chose: null,
        speed: _0x31c97e,
        petList: null
      };
      let _0x1e16fc = await this.send_message("cs_ares_output", _0x2a6085);
      _0x3035b5 = MFC.attr.getAttr(MFC.attrType.foreverAresIndex);
      addGameLog("使用推进器 推进格子:" + _0x1e16fc.move + " 到达位置" + _0x3035b5);
    }
  }
  async zlBattle(_0x5454cc) {
    if (this.bei) {
      this.joinPet = this.bei;
    }
    let _0x195ff5 = _0x5454cc.affects.split("*").find(_0x4a48ba => _0x4a48ba.startsWith("171"));
    if (_0x195ff5) {
      _0x195ff5 = _0x195ff5.split("_")[2];
      addGameLog(_0x5454cc.name + " 免疫威力高于" + _0x195ff5);
    } else if (this.shuici) {
      this.joinPet = this.shuici;
    }
    while (1) {
      if (this.diduo) {
        await this.send_message("cs_ares_output", {
          type: 3,
          chose: 0,
          speed: 0,
          petList: [this.diduo.getTime, PetManager.getInstance().getAllPets()[0].getTime, PetManager.getInstance().getAllPets()[1].getTime]
        });
      } else {
        await this.send_message("cs_ares_output", {
          type: 3,
          chose: 0,
          speed: 0,
          petList: [this.joinPet.getTime, this.leiyi.getTime, PetManager.getInstance().getAllPets()[0].getTime]
        });
      }
      let _0xb32bc4 = await this.initBattle();
      while (_0xb32bc4.result.result == 0) {
        let _0x5cddc1 = _0xb32bc4.result.playerInfos.find(_0x33db17 => _0x33db17.uid == _0xb32bc4.uid__);
        let _0x7853cb = _0xb32bc4.result.playerInfos.find(_0x39cd0d => _0x39cd0d.uid == _0xb32bc4.uid__).nextRoundOP;
        let _0x528518 = _0x5cddc1.crtPetIndex;
        let _0x11cd32 = _0xb32bc4.result.affects;
        let _0x5a30ec = _0xb32bc4.result.playerInfos[0].uid !== MFC.userInfo.uid ? 0 : 1;
        let _0x52861a = _0xb32bc4.result.playerInfos[_0x5a30ec].petInfos[0].crtHp;
        if (this.diduo) {
          if (_0x7853cb == 3 && _0x528518 != 1) {
            _0xb32bc4 = await this.changeIndex(1);
            continue;
          }
          if (_0x7853cb == 3 && _0x528518 == 1) {
            addGameLog("被击败,重进!");
            await this.send_message("cs_quit_battle", {});
            break;
          }
          _0xb32bc4 = await this.useSkill(100604);
          continue;
        }
        if (_0x7853cb == 3 && _0x52861a > 2000) {
          addGameLog("被击败,重进!");
          await this.send_message("cs_quit_battle", {});
          break;
        } else if (_0x7853cb == 3 && _0x52861a <= 2000 && _0x528518 == 1) {
          addGameLog("雷伊被击败,重进!");
          await this.send_message("cs_quit_battle", {});
          break;
        } else if (_0x7853cb == 3 && _0x52861a <= 2000) {
          _0xb32bc4 = await this.changeIndex(1);
          continue;
        }
        if (this.joinPet.petId == 2135) {
          _0xb32bc4 = await this.useSkill(32529);
          continue;
        }
        if (_0x528518 == 1) {
          if (_0xb32bc4.result.roundNum % 2 == 0) {
            if (_0x11cd32 && _0x11cd32.find(_0x2b44b6 => _0x2b44b6.uid == _0xb32bc4.uid__ && _0x2b44b6.id == 87 && _0x2b44b6.args.length > 0)) {
              _0xb32bc4 = await this.useSkill(23245);
            } else {
              addGameLog("释放属性技能保活");
              _0xb32bc4 = await this.useSkill(23244);
            }
          } else {
            _0xb32bc4 = await this.useSkill(10175);
          }
          continue;
        }
        if (_0xb32bc4.result.roundNum % 2 == 0) {
          _0xb32bc4 = await this.useSkill(100940);
        } else if (_0x195ff5) {
          _0xb32bc4 = await this.useSkill(100942);
        } else {
          _0xb32bc4 = await this.useSkill(100941);
        }
        let _0x51b89f = _0xb32bc4.result.processQueue.find(_0x5e77da => _0x5e77da.uid !== _0xb32bc4.uid__).affects;
        _0x51b89f = _0x51b89f.filter(_0x3e7913 => _0x3e7913.args.length && _0x3e7913.args[0] >= 1 && [1, 2, 3, 4, 5].includes(_0x3e7913.id));
        if (_0x51b89f.length) {
          _0xb32bc4 = await this.useSkill(100942);
          continue;
        }
        if (_0xb32bc4.result.roundNum <= 4) {
          addGameLog("回合数小于等于4 嗜血");
          _0xb32bc4 = await this.useSkill(100943);
          continue;
        }
        let _0x5887fd = _0x5cddc1.petInfos[0];
        if (_0x5887fd.crtHp <= 250) {
          addGameLog("HP不足250 嗜血");
          _0xb32bc4 = await this.useSkill(100943);
          continue;
        }
        if (_0xb32bc4.result.roundNum % 2 == 0) {
          _0xb32bc4 = await this.useSkill(100940);
        } else if (_0x195ff5) {
          _0xb32bc4 = await this.useSkill(100942);
        } else {
          _0xb32bc4 = await this.useSkill(100941);
        }
      }
      if (_0xb32bc4.result.result == 1) {
        addGameLog("顺利击败!");
        break;
      }
    }
  }
  async hemsui() {
    super.start();
    let _0x5ea273 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x5aa3ca = [];
      var _0x59357c = SimpleAlertUi({
        height: 250,
        width: 380
      });
      _0x5ea273.alertWin = _0x59357c;
      const _0x42277a = {
        text: "赫尔墨斯",
        x: _0x59357c.width / 2 - 30,
        y: _0x59357c.height / 16
      };
      var _0x309c44 = createLabel(_0x42277a);
      _0x5aa3ca.push(_0x309c44);
      const _0x1c408c = {
        text: "注意:",
        x: 30,
        y: _0x59357c.height / 16 + 20,
        textColor: 16776960
      };
      var _0x35fd73 = createLabel(_0x1c408c);
      _0x5aa3ca.push(_0x35fd73);
      var _0x35fd73 = createLabel({
        text: "贝特卡恩需要狂暴血怒(符文)+嗜血(符文)\n狂气突(符文)+血气之刃(符文)",
        x: _0x59357c.width / 2 - 120,
        y: _0x35fd73.y + 26
      });
      _0x35fd73.textColor = 16776960;
      _0x5aa3ca.push(_0x35fd73);
      const _0x6fcb2d = {
        text: "蒙多光之引导(符文)+极烈光突(符文)\n水次奥义断水击",
        x: _0x59357c.width / 2 - 120,
        y: _0x35fd73.y + 26 + 20
      };
      var _0x1a6ec4 = createLabel(_0x6fcb2d);
      _0x1a6ec4.textColor = 16776960;
      _0x5aa3ca.push(_0x1a6ec4);
      const _0x244520 = {
        x: 40,
        y: _0x1a6ec4.y + 40,
        selected: true,
        storageKey: "hems1"
      };
      let _0x45ccd4 = createRadio(_0x244520);
      _0x5aa3ca.push(_0x45ccd4);
      const _0x5b1172 = {
        text: "贝特+蒙多打法",
        x: _0x45ccd4.width + _0x45ccd4.x + 10,
        y: _0x45ccd4.y
      };
      var _0x1a81df = createLabel(_0x5b1172);
      _0x5aa3ca.push(_0x1a81df);
      const _0x26873b = {
        x: _0x1a81df.x + _0x1a81df.width + 80,
        y: _0x45ccd4.y,
        selected: false,
        storageKey: "hems2"
      };
      let _0x3b11aa = createRadio(_0x26873b);
      _0x5aa3ca.push(_0x3b11aa);
      const _0x54e098 = {
        text: "水次打法",
        x: _0x3b11aa.width + _0x3b11aa.x + 10,
        y: _0x45ccd4.y
      };
      var _0x397dc2 = createLabel(_0x54e098);
      _0x5aa3ca.push(_0x397dc2);
      _0x5ea273.addAllUis(_0x5aa3ca);
      _0x59357c.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x5ea273.stop();
      }, function () {
        localStorage.setItem("hems1", _0x45ccd4.selected);
        localStorage.setItem("hems2", _0x3b11aa.selected);
        if (_0x45ccd4.selected) {
          _0x5ea273.hems();
        }
        if (_0x3b11aa.selected) {
          _0x5ea273.hemssc();
        }
      }], null);
      _0x59357c.showAlert();
    });
  }
  async hems() {
    let _0x18abb1 = await this.send_message("cs_phantasm_field", {
      fun: 8,
      index: 1,
      subId: 8
    });
    if (_0x18abb1.currentState[2] > 1) {
      _0x18abb1 = await this.send_message("cs_phantasm_field", {
        fun: 8,
        index: 2,
        subId: 8
      });
    }
    while (_0x18abb1.currentState[0] > 0) {
      if (_0x18abb1.petInfo.length > 0) {
        let _0x15b892 = await this.checkhemspet(_0x18abb1.petInfo);
        if (_0x15b892) {
          if (_0x18abb1.currentState[2] > 1) {
            await this.hemsba2(_0x15b892[0], _0x15b892[1]);
          } else if (_0x18abb1.currentState[2] == 1) {
            await this.send_message("cs_phantasm_field", {
              fun: 10,
              index: 1,
              subId: 8
            });
          } else {
            await this.hemsba(_0x15b892[0], _0x15b892[1]);
          }
        }
      } else {
        addGameLog("未选择阵容,进行阵容选择");
        let _0xd456b3 = getGoalPets([{
          skills: [100940, 100943, 100941, 100942]
        }]);
        let _0x27ffdb = getGoalPets([{
          skills: [100139, 100136]
        }]);
        if (_0xd456b3 && _0x27ffdb) {
          let _0x205459 = PetManager.getInstance().getAllPets().filter(_0x37e59d => _0x37e59d.getTime != _0xd456b3.getTime && _0x37e59d.getTime != _0x27ffdb.getTime);
          const _0x4d6f01 = {
            fun: 1,
            getTimeList: [_0xd456b3.getTime, _0x27ffdb.getTime, _0x205459[0].getTime, _0x205459[1].getTime, _0x205459[2].getTime, _0x205459[3].getTime]
          };
          await this.send_message("cs_phantasm_field", _0x4d6f01);
          if (_0x18abb1.currentState[2] >= 1) {
            await this.hemsba2(_0xd456b3.getTime, _0x27ffdb.getTime);
          } else {
            await this.hemsba(_0xd456b3.getTime, _0x27ffdb.getTime);
          }
        } else if (!_0xd456b3) {
          addGameLog("贝特卡恩技能不符合狂暴血怒(符文)+嗜血(符文)+狂气突(符文)+血气之刃(符文)");
        } else {
          addGameLog("蒙多技能不符合光之引导(符文)+极烈光突(符文)");
        }
      }
      if (_0x18abb1.currentState[2] >= 1) {
        _0x18abb1 = await this.send_message("cs_phantasm_field", {
          fun: 8,
          index: 2,
          subId: 8
        });
      } else {
        _0x18abb1 = await this.send_message("cs_phantasm_field", {
          fun: 8,
          index: 1,
          subId: 8
        });
      }
    }
    _0x18abb1 = await this.send_message("cs_phantasm_field", {
      fun: 8,
      index: 1,
      subId: 8
    });
    while (_0x18abb1.currentState[0] > 0) {
      if (_0x18abb1.petInfo.length > 0) {
        let _0x1c9b93 = await this.checkhemspet(_0x18abb1.petInfo);
        if (_0x1c9b93) {
          await this.hemsba(_0x1c9b93[0], _0x1c9b93[1]);
        }
      } else {
        addGameLog("未选择阵容,进行阵容选择");
        let _0x52a3fa = getGoalPets([{
          skills: [100940, 100943, 100941, 100942]
        }]);
        let _0x18ff86 = getGoalPets([{
          skills: [100139, 100136]
        }]);
        if (_0x52a3fa && _0x18ff86) {
          let _0x492d02 = PetManager.getInstance().getAllPets().filter(_0x370dda => _0x370dda.getTime != _0x52a3fa.getTime && _0x370dda.getTime != _0x18ff86.getTime);
          const _0x4a3271 = {
            fun: 1,
            getTimeList: [_0x52a3fa.getTime, _0x18ff86.getTime, _0x492d02[0].getTime, _0x492d02[1].getTime, _0x492d02[2].getTime, _0x492d02[3].getTime]
          };
          await this.send_message("cs_phantasm_field", _0x4a3271);
          await this.hemsba(_0x52a3fa.getTime, _0x18ff86.getTime);
        } else if (!_0x52a3fa) {
          addGameLog("贝特卡恩技能不符合狂暴血怒(符文)+嗜血(符文)+狂气突(符文)+血气之刃(符文)");
        } else {
          addGameLog("蒙多技能不符合光之引导(符文)+极烈光突(符文)");
        }
      }
      _0x18abb1 = await this.send_message("cs_phantasm_field", {
        fun: 8,
        index: 1,
        subId: 8
      });
    }
    await this.hemsreward();
    addGameLog("赫尔墨斯结束");
    this.stop();
  }
  async checkhemspet(_0x267d49) {
    let _0x558201;
    let _0x17f4cb;
    if (_0x267d49.find(_0x1cc63e => _0x1cc63e.petId == 149)) {
      _0x558201 = _0x267d49.find(_0x47f37c => _0x47f37c.petId == 149).getTime;
    } else {
      addGameLog("已开启阵容未拥有贝特卡恩");
      this.stop();
      return false;
    }
    if (_0x267d49.find(_0x207ae9 => _0x207ae9.petId == 733)) {
      _0x17f4cb = _0x267d49.find(_0x3d3963 => _0x3d3963.petId == 733).getTime;
    } else {
      addGameLog("已开启阵容未拥有蒙多");
      this.stop();
      return false;
    }
    if (_0x558201 && _0x17f4cb) {
      return [_0x558201, _0x17f4cb];
    }
  }
  async moveNumToFirst(_0x267067, _0x256945) {
    let _0x36ad20 = _0x267067.indexOf(_0x256945);
    _0x267067.splice(_0x36ad20, 1);
    _0x267067.unshift(_0x256945);
    return _0x267067;
  }
  async hemsba(_0x492f3f, _0x5dadc7) {
    let _0xaa32c = await this.send_message("cs_phantasm_field", {
      fun: 8,
      index: 1,
      subId: 8
    });
    let _0x417583 = [81, 82, 84, 87, 91, 96, 100];
    let _0x5a4e4e = _0xaa32c.levelList.includes(_0x417583.find(_0x1ca4f7 => _0x1ca4f7 == _0xaa32c.currentState[4])) ? parseInt(_0x417583[_0x417583.findIndex(_0x2e77ae => _0x2e77ae == _0xaa32c.currentState[4]) + 1]) : parseInt(_0xaa32c.currentState[4]);
    let _0x2c6b4d = _0x5a4e4e !== 100 ? 5 : 10;
    if (MFC.userInfo.curEnergy < _0x2c6b4d) {
      MFC.alert.show("电池不足" + _0x2c6b4d);
      await this.hemsreward();
      this.stop();
      return;
    } else {
      let _0x563369 = _0xaa32c.petInfo.map(_0x41bbb1 => _0x41bbb1.getTime);
      if (_0x5a4e4e !== 100) {
        _0x563369 = await this.moveNumToFirst(_0x563369, _0x492f3f);
      } else {
        _0x563369 = await this.moveNumToFirst(_0x563369, _0x5dadc7);
      }
      const _0x349a15 = {
        fun: 1,
        index: 1,
        subId: 0,
        getTimeList: _0x563369
      };
      await this.send_message("cs_phantasm_field", _0x349a15);
      const _0x2030a0 = {
        fun: 9,
        index: 1,
        subId: _0x5a4e4e
      };
      await this.send_message("cs_phantasm_field", _0x2030a0);
      const _0x53feda = {
        fun: 7,
        index: 1,
        subId: _0x5a4e4e,
        getTimeList: []
      };
      await this.send_message("cs_phantasm_field", _0x53feda);
      let _0x6a3d21 = await this.initBattle();
      let _0x5637fc;
      if (_0x5a4e4e !== 100) {
        _0x5637fc = [100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100941, 100942];
      } else {
        _0x5637fc = [100137, 100137, 100137, 100136];
      }
      let _0x458f84 = 0;
      while (_0x6a3d21.result.result == 0) {
        let _0x86f72e = _0x6a3d21.result.playerInfos.find(_0x4016a0 => _0x4016a0.uid == _0x6a3d21.uid__).nextRoundOP;
        if (_0x86f72e == 3) {
          addGameLog("被击败, 重进");
          await this.send_message("cs_quit_battle", {});
          break;
        }
        _0x6a3d21 = await this.useSkill(_0x5637fc[_0x458f84]);
        if (_0x5a4e4e !== 100) {
          if (_0x458f84 >= 15) {
            _0x458f84 = 11;
          }
        } else if (_0x458f84 >= 3) {
          _0x458f84 = 2;
        }
        _0x458f84++;
      }
      if (_0x6a3d21.result.result == 2) {
        addGameLog("被击败 重新尝试!");
      }
      if (_0x6a3d21.result.result == 1) {
        addGameLog("顺利击败!");
        await this.send_message("cs_phantasm_field", {
          fun: 5,
          index: 1,
          subId: 2
        });
      }
    }
  }
  async hemsba2(_0x30972a, _0x14e6b3) {
    let _0xacdce2 = await this.send_message("cs_phantasm_field", {
      fun: 8,
      index: 2,
      subId: 8
    });
    let _0x1424ed = [101, 102, 104, 107, 111, 116, 120];
    let _0x341ccf = _0xacdce2.levelList.includes(_0x1424ed.find(_0x4c2974 => _0x4c2974 == _0xacdce2.currentState[4])) ? parseInt(_0x1424ed[_0x1424ed.findIndex(_0x44fc2f => _0x44fc2f == _0xacdce2.currentState[4]) + 1]) : parseInt(_0xacdce2.currentState[4]);
    let _0x6282f2 = _0x341ccf !== 120 ? 5 : 10;
    if (MFC.userInfo.curEnergy < _0x6282f2) {
      MFC.alert.show("电池不足" + _0x6282f2);
      await this.hemsreward();
      this.stop();
      return;
    } else {
      let _0x5ee94d = _0xacdce2.petInfo.map(_0xe96d6e => _0xe96d6e.getTime);
      if (_0x341ccf !== 120) {
        _0x5ee94d = await this.moveNumToFirst(_0x5ee94d, _0x30972a);
      } else {
        _0x5ee94d = await this.moveNumToFirst(_0x5ee94d, _0x14e6b3);
      }
      const _0x2e245a = {
        fun: 1,
        index: 2,
        subId: 0,
        getTimeList: _0x5ee94d
      };
      await this.send_message("cs_phantasm_field", _0x2e245a);
      const _0xc684b0 = {
        fun: 9,
        index: 2,
        subId: _0x341ccf
      };
      await this.send_message("cs_phantasm_field", _0xc684b0);
      const _0x177d3a = {
        fun: 7,
        index: 2,
        subId: _0x341ccf,
        getTimeList: []
      };
      await this.send_message("cs_phantasm_field", _0x177d3a);
      let _0x217c4f = await this.initBattle();
      let _0x54cb93;
      if (_0x341ccf !== 120) {
        _0x54cb93 = [100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100941, 100942];
      } else {
        _0x54cb93 = [100139, 100136];
      }
      let _0x502918 = 0;
      while (_0x217c4f.result.result == 0) {
        let _0x329777 = _0x217c4f.result.playerInfos.find(_0x23bc38 => _0x23bc38.uid == _0x217c4f.uid__).nextRoundOP;
        if (_0x329777 == 3) {
          addGameLog("被击败, 重进");
          await this.send_message("cs_quit_battle", {});
          break;
        }
        _0x217c4f = await this.useSkill(_0x54cb93[_0x502918]);
        if (_0x341ccf !== 120) {
          if (_0x502918 >= 15) {
            _0x502918 = 11;
          }
        } else if (_0x502918 >= 1) {
          _0x502918 = -1;
        }
        _0x502918++;
      }
      if (_0x217c4f.result.result == 2) {
        addGameLog("被击败 重新尝试!");
      }
      if (_0x217c4f.result.result == 1) {
        addGameLog("顺利击败!");
        await this.send_message("cs_phantasm_field", {
          fun: 5,
          index: 2,
          subId: 2
        });
      }
    }
  }
  async hemsreward() {
    let _0x5f3c74 = xls.activityTaskReset.getItemsByKeyValue("activityIdentity", 292);
    for (let _0x51c093 = 0; _0x51c093 < _0x5f3c74.length; _0x51c093++) {
      if (TaskUtils.GetRestTaskState(_0x5f3c74[_0x51c093]) == 1) {
        addGameLog("领取" + _0x5f3c74[_0x51c093].task);
        const _0x5853dc = {
          carnivalId: _0x5f3c74[_0x51c093].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x5853dc);
      } else if (TaskUtils.GetRestTaskState(_0x5f3c74[_0x51c093]) == 0) {
        addGameLog(_0x5f3c74[_0x51c093].task + "未完成");
      } else {
        addGameLog(_0x5f3c74[_0x51c093].task + "已完成");
      }
    }
    _0x5f3c74 = xls.activityTaskReset.getItemsByKeyValue("activityIdentity", 293);
    for (let _0x491186 = 0; _0x491186 < _0x5f3c74.length; _0x491186++) {
      if (TaskUtils.GetRestTaskState(_0x5f3c74[_0x491186]) == 1) {
        addGameLog("领取" + _0x5f3c74[_0x491186].task);
        const _0x4d86bf = {
          carnivalId: _0x5f3c74[_0x491186].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x4d86bf);
      } else if (TaskUtils.GetRestTaskState(_0x5f3c74[_0x491186]) == 0) {
        addGameLog(_0x5f3c74[_0x491186].task + "未完成");
      } else {
        addGameLog(_0x5f3c74[_0x491186].task + "已完成");
      }
    }
  }
  async hemssc() {
    let _0x4c86a9 = await this.send_message("cs_phantasm_field", {
      fun: 8,
      index: 1,
      subId: 8
    });
    if (_0x4c86a9.currentState[2] > 1) {
      _0x4c86a9 = await this.send_message("cs_phantasm_field", {
        fun: 8,
        index: 2,
        subId: 8
      });
    }
    while (_0x4c86a9.currentState[0] > 0) {
      if (_0x4c86a9.petInfo.length > 0) {
        let _0x1ce170 = await this.checkhemspetsc(_0x4c86a9.petInfo);
        if (_0x1ce170) {
          if (_0x4c86a9.currentState[2] > 1) {
            await this.hemsba4(_0x1ce170);
          } else if (_0x4c86a9.currentState[2] == 1) {
            await this.send_message("cs_phantasm_field", {
              fun: 10,
              index: 1,
              subId: 8
            });
          } else {
            await this.hemsba3(_0x1ce170);
          }
        }
      } else {
        addGameLog("未选择阵容,进行阵容选择");
        let _0x2ce64e = getGoalPets([{
          skills: [32529]
        }]);
        if (_0x2ce64e) {
          let _0x2d4cd6 = PetManager.getInstance().getAllPets().filter(_0x2e8306 => _0x2e8306.getTime != _0x2ce64e.getTime);
          const _0xc4059e = {
            fun: 1,
            getTimeList: [_0x2ce64e.getTime, _0x2d4cd6[0].getTime, _0x2d4cd6[1].getTime, _0x2d4cd6[2].getTime, _0x2d4cd6[3].getTime, _0x2d4cd6[4].getTime]
          };
          await this.send_message("cs_phantasm_field", _0xc4059e);
          if (_0x4c86a9.currentState[2] >= 1) {
            await this.hemsba4(_0x2ce64e.getTime);
          } else {
            await this.hemsba3(_0x2ce64e.getTime);
          }
        } else {
          addGameLog("水次技能不符合奥义断水击");
        }
      }
      if (_0x4c86a9.currentState[2] >= 1) {
        _0x4c86a9 = await this.send_message("cs_phantasm_field", {
          fun: 8,
          index: 2,
          subId: 8
        });
      } else {
        _0x4c86a9 = await this.send_message("cs_phantasm_field", {
          fun: 8,
          index: 1,
          subId: 8
        });
      }
    }
    _0x4c86a9 = await this.send_message("cs_phantasm_field", {
      fun: 8,
      index: 1,
      subId: 8
    });
    while (_0x4c86a9.currentState[0] > 0) {
      if (_0x4c86a9.petInfo.length > 0) {
        let _0x45d329 = await this.checkhemspetsc(_0x4c86a9.petInfo);
        if (_0x45d329) {
          await this.hemsba3(_0x45d329);
        }
      } else {
        addGameLog("未选择阵容,进行阵容选择");
        let _0x2d9ec0 = getGoalPets([{
          skills: [32529]
        }]);
        if (_0x2d9ec0) {
          let _0x321bf6 = PetManager.getInstance().getAllPets().filter(_0x9a3c98 => _0x9a3c98.getTime != _0x2d9ec0.getTime);
          const _0x251c9e = {
            fun: 1,
            getTimeList: [_0x2d9ec0.getTime, _0x321bf6[0].getTime, _0x321bf6[1].getTime, _0x321bf6[2].getTime, _0x321bf6[3].getTime, _0x321bf6[4].getTime]
          };
          await this.send_message("cs_phantasm_field", _0x251c9e);
          await this.hemsba3(_0x2d9ec0);
        } else {
          addGameLog("水次技能不符合奥义断水击");
        }
      }
      _0x4c86a9 = await this.send_message("cs_phantasm_field", {
        fun: 8,
        index: 1,
        subId: 8
      });
    }
    await this.hemsreward();
    addGameLog("赫尔墨斯结束");
    this.stop();
  }
  async checkhemspetsc(_0x25b332) {
    if (_0x25b332.find(_0x32ae8c => _0x32ae8c.petId == 2135)) {
      return _0x25b332.find(_0x3b7708 => _0x3b7708.petId == 2135).getTime;
    } else {
      addGameLog("已开启阵容未拥有水次");
      this.stop();
      return false;
    }
  }
  async hemsba3(_0x9a638c) {
    let _0x8ea39a = await this.send_message("cs_phantasm_field", {
      fun: 8,
      index: 1,
      subId: 8
    });
    let _0x72912d = [81, 82, 84, 87, 91, 96, 100];
    let _0x50301a = _0x8ea39a.levelList.includes(_0x72912d.find(_0x36a1be => _0x36a1be == _0x8ea39a.currentState[4])) ? parseInt(_0x72912d[_0x72912d.findIndex(_0x1b7703 => _0x1b7703 == _0x8ea39a.currentState[4]) + 1]) : parseInt(_0x8ea39a.currentState[4]);
    let _0x2789a2 = _0x50301a !== 100 ? 5 : 10;
    if (MFC.userInfo.curEnergy < _0x2789a2) {
      MFC.alert.show("电池不足" + _0x2789a2);
      await this.hemsreward();
      this.stop();
      return;
    } else {
      let _0x4735d4 = _0x8ea39a.petInfo.map(_0xb7d6c5 => _0xb7d6c5.getTime);
      _0x4735d4 = await this.moveNumToFirst(_0x4735d4, _0x9a638c);
      const _0x3a6da0 = {
        fun: 1,
        index: 1,
        subId: 0,
        getTimeList: _0x4735d4
      };
      await this.send_message("cs_phantasm_field", _0x3a6da0);
      const _0x580679 = {
        fun: 9,
        index: 1,
        subId: _0x50301a
      };
      await this.send_message("cs_phantasm_field", _0x580679);
      const _0x38d28 = {
        fun: 7,
        index: 1,
        subId: _0x50301a,
        getTimeList: []
      };
      await this.send_message("cs_phantasm_field", _0x38d28);
      let _0x48a1e0 = await this.initBattle();
      let _0x5f286c = 32529;
      if (_0x48a1e0.result.result == 0) {
        let _0xa1037f = _0x48a1e0.result.playerInfos.find(_0x5e13bd => _0x5e13bd.uid == _0x48a1e0.uid__).nextRoundOP;
        if (_0xa1037f == 3) {
          addGameLog("被击败, 重进");
          await this.send_message("cs_quit_battle", {});
        }
        if (_0x50301a == 96) {
          if (getSeerItemNum(2001) > 1) {
            addGameLog("回pp");
            _0x48a1e0 = await this.useItem(2001);
          } else if (getSeerItemNum(2002) > 1) {
            addGameLog("回pp");
            _0x48a1e0 = await this.useItem(2002);
          } else if (getSeerItemNum(2003) > 1) {
            addGameLog("回pp");
            _0x48a1e0 = await this.useItem(2003);
          } else {
            addGameLog("pp药不足");
            await this.send_message("cs_quit_battle", {});
            this.stop();
          }
          if (_0x48a1e0.result.result == 0) {
            _0x48a1e0 = await this.useSkill(_0x5f286c);
          }
        } else {
          _0x48a1e0 = await this.useSkill(_0x5f286c);
        }
      }
      if (_0x48a1e0.result.result == 2) {
        addGameLog("被击败 重新尝试!");
      }
      if (_0x48a1e0.result.result == 1) {
        addGameLog("顺利击败!");
        await this.send_message("cs_phantasm_field", {
          fun: 5,
          index: 1,
          subId: 2
        });
      }
    }
  }
  async hemsba4(_0x9c7bbf) {
    let _0x21242f = await this.send_message("cs_phantasm_field", {
      fun: 8,
      index: 2,
      subId: 8
    });
    let _0x2ab5da = [101, 102, 104, 107, 111, 116, 120];
    let _0x502d0b = _0x21242f.levelList.includes(_0x2ab5da.find(_0x3b2cbc => _0x3b2cbc == _0x21242f.currentState[4])) ? parseInt(_0x2ab5da[_0x2ab5da.findIndex(_0x2c3577 => _0x2c3577 == _0x21242f.currentState[4]) + 1]) : parseInt(_0x21242f.currentState[4]);
    let _0x1609c5 = _0x502d0b !== 120 ? 5 : 10;
    if (MFC.userInfo.curEnergy < _0x1609c5) {
      MFC.alert.show("电池不足" + _0x1609c5);
      await this.hemsreward();
      this.stop();
      return;
    } else {
      let _0x341451 = _0x21242f.petInfo.map(_0x39d00c => _0x39d00c.getTime);
      _0x341451 = await this.moveNumToFirst(_0x341451, _0x9c7bbf);
      const _0x1aa3fe = {
        fun: 1,
        index: 2,
        subId: 0,
        getTimeList: _0x341451
      };
      await this.send_message("cs_phantasm_field", _0x1aa3fe);
      const _0x116683 = {
        fun: 9,
        index: 2,
        subId: _0x502d0b
      };
      await this.send_message("cs_phantasm_field", _0x116683);
      const _0x3d65b3 = {
        fun: 7,
        index: 2,
        subId: _0x502d0b,
        getTimeList: []
      };
      await this.send_message("cs_phantasm_field", _0x3d65b3);
      let _0x3b12a1 = await this.initBattle();
      let _0x5a71b0 = 32529;
      if (_0x3b12a1.result.result == 0) {
        let _0x49fa9c = _0x3b12a1.result.playerInfos.find(_0x383ea5 => _0x383ea5.uid == _0x3b12a1.uid__).nextRoundOP;
        if (_0x49fa9c == 3) {
          addGameLog("被击败, 重进");
          await this.send_message("cs_quit_battle", {});
        }
        if (_0x502d0b == 116) {
          if (getSeerItemNum(2001) > 1) {
            addGameLog("回pp");
            _0x3b12a1 = await this.useItem(2001);
          } else if (getSeerItemNum(2002) > 1) {
            addGameLog("回pp");
            _0x3b12a1 = await this.useItem(2002);
          } else if (getSeerItemNum(2003) > 1) {
            addGameLog("回pp");
            _0x3b12a1 = await this.useItem(2003);
          } else {
            addGameLog("pp药不足");
            await this.send_message("cs_quit_battle", {});
            this.stop();
          }
          if (_0x3b12a1.result.result == 0) {
            _0x3b12a1 = await this.useSkill(_0x5a71b0);
          }
        } else {
          _0x3b12a1 = await this.useSkill(_0x5a71b0);
        }
      }
      if (_0x3b12a1.result.result == 2) {
        addGameLog("被击败 重新尝试!");
      }
      if (_0x3b12a1.result.result == 1) {
        addGameLog("顺利击败!");
        await this.send_message("cs_phantasm_field", {
          fun: 5,
          index: 2,
          subId: 2
        });
      }
    }
  }
  async starDefineui() {
    super.start();
    let _0x103218 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x25e6d5 = [];
      var _0x4d1015 = SimpleAlertUi({
        height: 430,
        width: 380
      });
      _0x103218.alertWin = _0x4d1015;
      const _0x108808 = {
        text: "派瑞希(星狩)",
        y: _0x4d1015.height / 20
      };
      let _0x399a80 = createLabel(_0x108808);
      _0x399a80.x = _0x4d1015.applicationWidth / 2 - _0x399a80.width / 2;
      _0x25e6d5.push(_0x399a80);
      const _0x36625d = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x399a80.y + _0x399a80.height + 10
      };
      var _0x317290 = createLabel(_0x36625d);
      _0x25e6d5.push(_0x317290);
      const _0x5ad409 = {
        text: "不会耗PP药水 低配速推 \n战斗 特效 补给 宝箱 全自动完成~",
        textColor: 65408,
        x: 40,
        y: _0x317290.y + 10 + _0x317290.height
      };
      var _0x562bb2 = createLabel(_0x5ad409);
      _0x25e6d5.push(_0x562bb2);
      const _0x367084 = {
        text: "骇尔之门 配置:",
        textColor: 16776960,
        x: 30,
        y: _0x399a80.y + 100
      };
      let _0x37bf5c = createLabel(_0x367084);
      _0x25e6d5.push(_0x37bf5c);
      const _0x1e1a4e = {
        text: "必须精灵: 贝特卡恩(贝爷)",
        textColor: 65535,
        x: _0x4d1015.width / 8,
        y: _0x37bf5c.y + 30
      };
      let _0x12f700 = createLabel(_0x1e1a4e);
      _0x25e6d5.push(_0x12f700);
      const _0x521eaa = {
        text: "狂暴血怒(符文) 嗜血(符文)",
        textColor: 16776960,
        x: _0x12f700.x + _0x12f700.width - 160,
        y: _0x12f700.y + 30
      };
      let _0x1ba244 = createLabel(_0x521eaa);
      _0x25e6d5.push(_0x1ba244);
      const _0x3dac14 = {
        text: "血气之刃(符文) 狂气突(符文)",
        textColor: 16776960,
        x: _0x1ba244.x,
        y: _0x1ba244.y + 30
      };
      let _0xa4b17a = createLabel(_0x3dac14);
      _0x25e6d5.push(_0xa4b17a);
      const _0x3aee72 = {
        text: "必须精灵: 雷伊",
        textColor: 65535,
        x: _0x4d1015.width / 8,
        y: _0xa4b17a.y + 30
      };
      let _0x45e4d7 = createLabel(_0x3aee72);
      _0x25e6d5.push(_0x45e4d7);
      const _0x5aae50 = {
        text: "雷神天明闪 充电(符文)",
        textColor: 16776960,
        x: _0x12f700.x + _0x12f700.width - 160,
        y: _0x45e4d7.y + 30
      };
      let _0x46ab34 = createLabel(_0x5aae50);
      _0x25e6d5.push(_0x46ab34);
      const _0x394c5e = {
        text: "必须精灵: 哈肯萨",
        textColor: 65535,
        x: _0x4d1015.width / 8,
        y: _0x46ab34.y + 30
      };
      let _0x15acce = createLabel(_0x394c5e);
      _0x25e6d5.push(_0x15acce);
      const _0x304ce9 = {
        text: "堕龙之力 夜幕龙王击",
        textColor: 16776960,
        x: _0x12f700.x + _0x12f700.width - 160,
        y: _0x15acce.y + 30
      };
      let _0x516367 = createLabel(_0x304ce9);
      _0x25e6d5.push(_0x516367);
      _0x103218.addAllUis(_0x25e6d5);
      _0x4d1015.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x103218.stop();
      }, function () {
        _0x103218.starDefineAct();
      }], null);
      _0x4d1015.showAlert();
    });
  }
  async starDefineAct() {
    if (!xls.eventTower.hasLoaded) {
      xls.eventTower.load(() => {});
    }
    let _0x22a722 = await this.dispatchSelfPet("贝特卡恩", [100940, 100943, 100941, 100942]);
    if (!_0x22a722 || _0x22a722.level != 100) {
      MFC.alert.show(`背包没有带有
狂暴血怒   嗜血
血气之刃   狂气突
[技能均需要符文]的100级精灵`);
      this.stop();
      return;
    }
    let _0x4e7d67 = PetManager.getInstance().getAllPets().map(_0x4bc1d4 => {
      if ((_0x4bc1d4.skills.indexOf(10825) != -1 || _0x4bc1d4.skills.indexOf(100484) != -1) && _0x4bc1d4.skills.indexOf(100483) != -1) {
        return _0x4bc1d4;
      }
    }).filter(_0x43f0d9 => _0x43f0d9 !== undefined)[0];
    if (!_0x4e7d67) {
      MFC.alert.show("背包没有带有 雷神天明闪 \n充电(符文) 的精灵");
      this.stop();
      return;
    }
    var _0x3b1ce7 = await this.dispatchSelfPet("哈肯萨", [14816, 22615]);
    if (_0x3b1ce7) {
      this.ha = _0x3b1ce7;
    }
    this.bei = _0x22a722;
    this.leiyi = _0x4e7d67;
    while (1) {
      let _0x2f75ce = await this.send_message("cs_rand_gate_climb_tower", {
        fun: 1,
        activityId: 1
      });
      addGameLog("当前层数:" + _0x2f75ce.floor);
      if (!_0x2f75ce.events.length && _0x2f75ce.floor == 8) {
        MFC.alert.show("骇尔之门 \n今日已经完成");
        this.stop();
        return;
      }
      if (!_0x2f75ce.events.length) {
        addGameLog("前往下一层");
        await this.send_message("cs_rand_gate_climb_tower", {
          fun: 8
        });
        continue;
      }
      let _0x5a01eb = _0x2f75ce.level;
      if (!_0x5a01eb) {
        MFC.alert.show("当前关卡不存在!");
        this.stop();
        return;
      }
      if (!_0x2f75ce.oldIndex) {
        _0x2f75ce.oldIndex = 0;
      }
      let _0x4c2c78 = _0x2f75ce.events.find(_0x81a747 => _0x81a747.row == _0x5a01eb).events;
      logger(_0x4c2c78);
      if (!_0x2f75ce.index) {
        let _0x466e82 = [];
        _0x4c2c78.forEach((_0x3833eb, _0x55de4a) => {
          if (!(Math.abs(_0x55de4a + 1 - _0x2f75ce.oldIndex) >= 2)) {
            _0x4c2c78[_0x55de4a].index = _0x55de4a + 1;
            _0x466e82.push(_0x4c2c78[_0x55de4a]);
          }
        });
        let _0x4f818b = [..._0x466e82].reverse();
        let _0x323306 = _0x4f818b.find(_0xfb9109 => _0xfb9109.type !== 1) || _0x4f818b.find(_0x46236a => _0x46236a.type === 1);
        let _0x136ab3 = xls.eventTower.getItem(_0x323306.eventId);
        addGameLog("\n选择" + _0x136ab3.name);
        if (_0x323306.type == 1) {
          addGameLog("战斗事件");
          const _0x3c0e00 = {
            fun: 9,
            index: _0x323306.index
          };
          await this.send_message("cs_rand_gate_climb_tower", _0x3c0e00);
        } else if (_0x323306.type == 2) {
          addGameLog("战斗特效");
          const _0x3aa373 = {
            fun: 9,
            index: _0x323306.index
          };
          await this.send_message("cs_rand_gate_climb_tower", _0x3aa373);
        } else if (_0x323306.type == 3) {
          const _0x4b69e1 = {
            fun: 9,
            index: _0x323306.index
          };
          await this.send_message("cs_rand_gate_climb_tower", _0x4b69e1);
          await this.send_message("cs_rand_gate_climb_tower", {
            fun: 3
          });
          addGameLog("战斗补给");
        } else if (_0x323306.type == 4) {
          addGameLog("战斗宝箱");
          const _0x7e5565 = {
            fun: 9,
            index: _0x323306.index
          };
          await this.send_message("cs_rand_gate_climb_tower", _0x7e5565);
        }
      } else {
        addGameLog("当前选择第" + _0x2f75ce.index + "事件");
        let _0x4756b2 = _0x4c2c78[_0x2f75ce.index - 1];
        if (_0x4756b2.type == 1) {
          _0x4756b2.reBound = _0x2f75ce.floor == 8 && _0x2f75ce.level == 9;
          _0x4756b2.haBound = _0x2f75ce.floor == 6 && _0x2f75ce.level == 9;
          await this.starDefineBattle(_0x4756b2);
        } else if (_0x4756b2.type == 2) {
          addGameLog("战斗特效2");
          const _0x2dfd0e = {
            fun: 5,
            index: _0x2f75ce.index,
            activityId: 1
          };
          await this.send_message("cs_rand_gate_climb_tower", _0x2dfd0e);
        } else if (_0x4756b2.type == 3) {
          addGameLog("战斗补给2");
          const _0x28aeaa = {
            fun: 5,
            index: _0x2f75ce.index,
            activityId: 1
          };
          await this.send_message("cs_rand_gate_climb_tower", _0x28aeaa);
        } else if (_0x4756b2.type == 4) {
          addGameLog("战斗宝箱2");
          const _0x1d8a12 = {
            fun: 5,
            index: _0x2f75ce.index,
            activityId: 1
          };
          await this.send_message("cs_rand_gate_climb_tower", _0x1d8a12);
        }
      }
    }
  }
  async starDefineBattle(_0x35a31c) {
    let _0x249c1f = _0x35a31c.id.split("_");
    let _0x4a82cb = xls.eventTower.getItem(_0x35a31c.eventId);
    let _0x998acd = CostPackUtils.getItemByCostPackInfo(xls.costPack.getItem(_0x4a82cb.costPack)).itemNum;
    let _0x4857be = _0x249c1f.map(_0x3e1634 => PetConfig.getDef(parseInt(xls.pveBoss.getItem(_0x3e1634).petID)).name).join(",");
    addGameLog("战斗事件 \n消耗电池数" + _0x998acd + ` 
对战boss
` + _0x4857be);
    if (MFC.userInfo.curEnergy < _0x998acd) {
      MFC.alert.show("电池数不足" + _0x998acd + "\n 骇尔之门完成");
      this.stop();
      return;
    }
    let _0xb8cdc8 = PetManager.getInstance().getAllPets().filter(_0x142cd => _0x142cd.getTime != this.bei.getTime && _0x142cd.getTime != this.leiyi.getTime && _0x142cd.level == 100);
    if (_0xb8cdc8.length < 1) {
      MFC.alert.show("背包至少有1只额外的100级精灵");
      this.stop();
      return;
    }
    while (1) {
      if (this.ha && _0x35a31c.haBound) {
        await this.send_message("cs_rand_gate_climb_tower", {
          fun: 5,
          index: 1,
          getTimeList: [this.ha.getTime, this.leiyi.getTime, _0xb8cdc8[0].getTime],
          activityId: 1
        });
      } else {
        await this.send_message("cs_rand_gate_climb_tower", {
          fun: 5,
          index: 1,
          getTimeList: [this.bei.getTime, this.leiyi.getTime, _0xb8cdc8[0].getTime],
          activityId: 1
        });
      }
      this.nextR = 0;
      let _0x4fe124 = await this.initBattle();
      while (_0x4fe124.result.result == 0) {
        let _0x345a93 = _0x4fe124.result.playerInfos.find(_0x13917d => _0x13917d.uid == _0x4fe124.uid__);
        let _0x4f271c = _0x4fe124.result.processQueue.find(_0xa3febd => _0xa3febd.uid !== _0x4fe124.uid__);
        let _0x1ec82d = _0x4fe124.result.playerInfos.find(_0x1c44e8 => _0x1c44e8.uid == _0x4fe124.uid__).nextRoundOP;
        let _0x260e74 = _0x345a93.crtPetIndex;
        let _0x3c05c3 = _0x4fe124.result.affects;
        let _0x5dabf9 = _0x4f271c ? _0x4f271c.affects.filter(_0x19b43b => _0x19b43b.args.length && _0x19b43b.args[0] >= 1 && [1, 2, 3, 4, 5].includes(_0x19b43b.id)) : [];
        if (_0x1ec82d == 2) {
          logger("顺利击杀一只");
          this.nextR = 1;
        }
        if (this.ha && _0x35a31c.haBound) {
          if (_0x1ec82d == 3) {
            addGameLog("被击败, 重进");
            await this.send_message("cs_quit_battle", {});
            break;
          }
          _0x4fe124 = await this.useSkill(14816);
          continue;
        }
        if (_0x1ec82d == 3) {
          if (_0x35a31c.reBound && _0x260e74 != 1 && this.nextR) {
            addGameLog("最后一关,继续切换雷伊进攻!");
            _0x4fe124 = await this.changeIndex(1);
            continue;
          } else {
            addGameLog("被击败, 重进");
            await this.send_message("cs_quit_battle", {});
            break;
          }
        }
        if (_0x1ec82d == 3 && _0x260e74 == 1) {
          addGameLog("被击败, 重进");
          await this.send_message("cs_quit_battle", {});
          break;
        }
        if (_0x260e74 == 1) {
          if (_0x3c05c3 && _0x3c05c3.find(_0x16b0b6 => _0x16b0b6.uid == _0x4fe124.uid__ && _0x16b0b6.id == 299)) {
            let _0x64cd6c = await this.getMaxPowerSkillId(_0x345a93.petInfos[_0x260e74]);
            _0x4fe124 = await this.useSkill(_0x64cd6c);
            continue;
          } else {
            _0x4fe124 = await this.useSkill(100483);
            continue;
          }
        }
        if (_0x5dabf9.length) {
          addGameLog("消强");
          _0x4fe124 = await this.useSkill(100942);
          continue;
        }
        if (_0x4fe124.result.roundNum <= 6) {
          addGameLog("回合数小于等于6 嗜血");
          _0x4fe124 = await this.useSkill(100943);
          continue;
        }
        let _0x5eea70 = _0x345a93.petInfos[0];
        if (_0x5eea70.crtHp <= 300) {
          addGameLog("HP不足300 嗜血");
          _0x4fe124 = await this.useSkill(100943);
          continue;
        }
        const _0x1c3192 = Math.random();
        if (_0x1c3192 < 1 / 2) {
          _0x4fe124 = await this.useSkill(100940);
        } else {
          _0x4fe124 = await this.useSkill(100941);
        }
      }
      if (_0x4fe124.result.result == 2) {
        addGameLog("被击败 重新尝试!");
      }
      if (_0x4fe124.result.result == 1) {
        addGameLog("顺利击败!");
        break;
      }
    }
  }
  async hksui() {
    super.start();
    let _0x2214a6 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x2103ab = [];
      var _0x4a8ceb = SimpleAlertUi({
        height: 300,
        width: 380
      });
      _0x2214a6.alertWin = _0x4a8ceb;
      const _0x21cd03 = {
        text: "哈肯撒",
        x: _0x4a8ceb.width / 2 - 30,
        y: _0x4a8ceb.height / 16
      };
      var _0x21e302 = createLabel(_0x21cd03);
      _0x2103ab.push(_0x21e302);
      const _0x1c397d = {
        text: "注意:",
        x: 30,
        y: _0x4a8ceb.height / 16 + 20,
        textColor: 16776960
      };
      var _0x1a7602 = createLabel(_0x1c397d);
      _0x2103ab.push(_0x1a7602);
      var _0x1a7602 = createLabel({
        text: "首技能打法是用户要求新增具体情况未知",
        x: _0x4a8ceb.width / 2 - 120,
        y: _0x1a7602.y + 26
      });
      _0x1a7602.textColor = 16776960;
      _0x2103ab.push(_0x1a7602);
      const _0x234b99 = {
        text: "首技能需在阵容第一个放上出战精灵",
        x: _0x4a8ceb.width / 2 - 120,
        y: _0x1a7602.y + 26
      };
      var _0x53ca21 = createLabel(_0x234b99);
      _0x53ca21.textColor = 16776960;
      _0x2103ab.push(_0x53ca21);
      const _0x2ed8f9 = {
        x: 40,
        y: _0x53ca21.y + 40,
        selected: true,
        storageKey: "sshks"
      };
      let _0x3160bb = createRadio(_0x2ed8f9);
      _0x2103ab.push(_0x3160bb);
      const _0x178b0d = {
        text: "瞬杀打法",
        x: _0x3160bb.width + _0x3160bb.x + 10,
        y: _0x3160bb.y
      };
      var _0xaf2650 = createLabel(_0x178b0d);
      _0x2103ab.push(_0xaf2650);
      const _0x1a9952 = {
        x: _0xaf2650.x + _0xaf2650.width + 80,
        y: _0x3160bb.y,
        selected: false,
        storageKey: "sjnhks"
      };
      let _0x483559 = createRadio(_0x1a9952);
      _0x2103ab.push(_0x483559);
      const _0x33a50e = {
        text: "首发打法",
        x: _0x483559.width + _0x483559.x + 10,
        y: _0x3160bb.y
      };
      var _0x1dcc13 = createLabel(_0x33a50e);
      _0x2103ab.push(_0x1dcc13);
      const _0x100681 = {
        x: 40,
        y: _0x53ca21.y + 40 + 20 + 20,
        selected: true,
        storageKey: "btkehks"
      };
      let _0x1e2a6a = createRadio(_0x100681);
      _0x2103ab.push(_0x1e2a6a);
      const _0x53ffbf = {
        text: "贝特卡恩打法",
        x: _0x1e2a6a.width + _0x1e2a6a.x + 10,
        y: _0x1e2a6a.y
      };
      var _0x157fa4 = createLabel(_0x53ffbf);
      _0x2103ab.push(_0x157fa4);
      _0x2214a6.addAllUis(_0x2103ab);
      _0x4a8ceb.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x2214a6.stop();
      }, function () {
        localStorage.setItem("sshks", _0x3160bb.selected);
        localStorage.setItem("sjnhks", _0x483559.selected);
        localStorage.setItem("btkehks", _0x1e2a6a.selected);
        if (_0x3160bb.selected) {
          _0x2214a6.hksbattleui();
        }
        if (_0x483559.selected) {
          _0x2214a6.Hakensabattlesjn();
        }
        if (_0x1e2a6a.selected) {
          _0x2214a6.hksui2();
        }
      }], null);
      _0x4a8ceb.showAlert();
    });
  }
  async hksbattleui() {
    super.start();
    let _0x53a6c7 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0xd1bd77 = [];
      var _0x3954cd = SimpleAlertUi({
        height: 200,
        width: 400
      });
      _0x53a6c7.alertWin = _0x3954cd;
      const _0x296077 = {
        text: "哈肯撒",
        x: _0x3954cd.applicationWidth / 2 - 30,
        y: _0x3954cd.height / 15
      };
      let _0x598968 = createLabel(_0x296077);
      _0x598968.size = 20;
      _0xd1bd77.push(_0x598968);
      const _0x884273 = {
        text: "蒙多瞬杀(杀不掉用长老雷伊比德尔)\n需要6块钱比德尔,雷伊有闪电与充电符文",
        x: _0x3954cd.applicationWidth / 6 - 40,
        y: _0x598968.y + 40
      };
      let _0x17f71e = createLabel(_0x884273);
      _0xd1bd77.push(_0x17f71e);
      const _0x5949e4 = {
        text: "不打开就跳过不打",
        x: _0x3954cd.applicationWidth / 6 - 40,
        y: _0x17f71e.y + 40
      };
      let _0x3aa505 = createLabel(_0x5949e4);
      _0xd1bd77.push(_0x3aa505);
      const _0x38c50e = {
        x: _0x3aa505.x + 140,
        y: _0x3aa505.y,
        selected: true,
        storageKey: "hks"
      };
      let _0x138db5 = createToggle(_0x38c50e);
      _0xd1bd77.push(_0x138db5);
      _0x53a6c7.addAllUis(_0xd1bd77);
      _0x3954cd.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x53a6c7.stop();
      }, function () {
        localStorage.setItem("hks", _0x138db5.selected);
        if (_0x138db5.selected) {
          _0x53a6c7.hksbattlestatu = 1;
        }
        _0x53a6c7.Hakensabattle();
      }], null);
      _0x3954cd.showAlert();
    });
  }
  async Hakensabattle() {
    if (!xls.dragonDen.hasLoaded) {
      xls.dragonDen.load(() => {});
    }
    if (!xls.activityCard.hasLoaded) {
      xls.activityCard.load(() => {});
    }
    let _0x15e33a;
    let _0x59d971 = [11, 13, 19, 22, 30];
    let _0x55bfc0 = 0;
    while (true) {
      let _0xff3dcf = PetManager.getInstance().getAllPets().map(_0x43bcd8 => {
        if ((_0x43bcd8.skills.indexOf(10630) != -1 || _0x43bcd8.skills.indexOf(100023) != -1) && (_0x43bcd8.featureId == 5 || _0x43bcd8.featureId == 6 || _0x43bcd8.featureId == 7 || _0x43bcd8.featureId == 8)) {
          return _0x43bcd8;
        }
      }).filter(_0x40c3ea => _0x40c3ea !== undefined).sort((_0x5471d6, _0x5ad090) => _0x5ad090.featureId - _0x5471d6.featureId)[0];
      let _0xbbb5af = PetManager.getInstance().getAllPets()[0];
      if (!_0xff3dcf) {
        addGameLog("背包没有瞬杀光闪击");
        break;
      } else {
        let _0x27088f = [_0xff3dcf.getTime, _0xbbb5af.getTime];
        const _0x26aba1 = {
          effectId: 0,
          itemId: 0,
          mapStep: 0,
          petGetTime: _0x27088f,
          type: 4
        };
        await this.send_message("cs_Hakenza_output_op", _0x26aba1);
      }
      let _0x327845 = [_0xff3dcf.getTime, _0xbbb5af.getTime];
      let _0x562f08 = await this.send_message("cs_Hakenza_output_op", {
        itemId: 0,
        mapStep: 0,
        petGetTime: [],
        type: 1
      });
      if (_0x562f08.map.length == 0) {
        _0x562f08 = await this.send_message("cs_Hakenza_output_op", {
          itemId: 0,
          mapStep: 0,
          petGetTime: [],
          type: 1
        });
      }
      let _0x527988 = _0x562f08.petGetTimes.find(_0x4d24a2 => _0x4d24a2.useSkills.find(_0x15f5af => _0x15f5af.id === 100023))?.useSkills.find(_0x58cdce => _0x58cdce.id === 100023)?.crtPP;
      let _0x1b9b79 = _0x562f08.petGetTimes.find(_0x3a9881 => _0x3a9881.useSkills.find(_0x1dc3be => _0x1dc3be.id === 10630))?.useSkills.find(_0x3aa0fe => _0x3aa0fe.id === 10630)?.crtPP;
      if (_0xff3dcf.skills.indexOf(100023) != -1) {
        _0x15e33a = 100023;
        addGameLog("光闪击pp为" + _0x527988);
        if (_0x527988 == 0) {
          addGameLog("光闪击pp为0");
          break;
        }
      }
      if (_0xff3dcf.skills.indexOf(10630) != -1) {
        _0x15e33a = 10630;
        addGameLog("光闪击pp为" + _0x1b9b79);
        if (_0x1b9b79 == 0) {
          addGameLog("光闪击pp为0");
          break;
        }
      }
      addGameLog("当前第" + _0x562f08.level + "层");
      if (_0x562f08.map[_0x59d971[_0x55bfc0] - 1].passBy == 0 && _0x55bfc0 < 4) {
        if (ItemManager.getInstance().getItemNumById(101081) > 0) {
          if (_0x562f08.map[_0x59d971[_0x55bfc0] - 1].affectList.length > 0) {
            const _0x48fdbe = {
              effectId: undefined,
              itemId: 0,
              mapStep: _0x59d971[_0x55bfc0],
              petGetTime: [],
              type: 7
            };
            await this.send_message("cs_Hakenza_output_op", _0x48fdbe);
            const _0x587717 = {
              effectId: _0x562f08.map[_0x59d971[_0x55bfc0] - 1].affectList[1],
              itemId: 0,
              mapStep: _0x59d971[_0x55bfc0],
              petGetTime: [],
              type: 3
            };
            await this.send_message("cs_Hakenza_output_op", _0x587717);
          }
          if (_0x562f08.map[_0x59d971[_0x55bfc0] - 1].hp == 0) {
            const _0x32a832 = {
              effectId: undefined,
              itemId: 0,
              mapStep: _0x59d971[_0x55bfc0],
              petGetTime: [],
              type: 3
            };
            await this.send_message("cs_Hakenza_output_op", _0x32a832);
          } else {
            const _0x1f96c0 = {
              effectId: undefined,
              itemId: 0,
              mapStep: _0x59d971[_0x55bfc0],
              petGetTime: [],
              type: 7
            };
            await this.send_message("cs_Hakenza_output_op", _0x1f96c0);
          }
        } else {
          addGameLog("慕夜能源不足");
          break;
        }
      } else if (_0x562f08.map[_0x59d971[_0x55bfc0] - 1].passBy == 1 && _0x55bfc0 < 4) {
        if (this.hksbattlestatu == 1) {
          if (xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).id == 1144) {
            let _0x384daf = await this.dispatchSelfPet("赫鲁卡长老", [32127]);
            if (!_0x384daf) {
              break;
            } else {
              let _0x459c5e = [_0x384daf.getTime, _0xff3dcf.getTime];
              const _0x228f74 = {
                effectId: 0,
                itemId: 0,
                mapStep: 0,
                petGetTime: _0x459c5e,
                type: 4
              };
              await this.send_message("cs_Hakenza_output_op", _0x228f74);
              let _0x566e2b = _0x562f08.petGetTimes.find(_0x35a153 => _0x35a153.useSkills.find(_0x21f317 => _0x21f317.id === 32127))?.useSkills.find(_0x1bbfcc => _0x1bbfcc.id === 32127)?.crtPP;
              if (_0x566e2b == 0) {
                addGameLog("pp为0,退出");
                break;
              }
              if (MFC.userInfo.curEnergy > xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).energy.split("_")[0]) {
                addGameLog("进行" + xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).levelID + "对战");
                const _0x12c241 = {
                  effectId: 0,
                  itemId: 0,
                  mapStep: _0x59d971[_0x55bfc0],
                  petGetTime: _0x459c5e,
                  type: 3
                };
                await this.send_message("cs_Hakenza_output_op", _0x12c241);
                await this.initBattle();
                let _0x59f53c = await this.useSkill(32127);
                if (_0x59f53c.result.result === 1) {
                  addGameLog("正在进行哈肯萨第" + _0x562f08.level + "层");
                } else {
                  addGameLog("未击杀哈肯萨第" + _0x562f08.level + "层小怪");
                }
                await this.send_message("cs_quit_battle", {});
              } else {
                addGameLog("电池不足");
                break;
              }
            }
          } else if (xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).id == 1145) {
            let _0x3ef039 = await this.dispatchSelfPet("雷伊", [100531, 15894]);
            if (!_0x3ef039) {
              break;
            } else {
              let _0x15a3db = [_0x3ef039.getTime, _0xff3dcf.getTime];
              const _0x1dcee6 = {
                effectId: 0,
                itemId: 0,
                mapStep: 0,
                petGetTime: _0x15a3db,
                type: 4
              };
              await this.send_message("cs_Hakenza_output_op", _0x1dcee6);
              let _0x316354 = _0x562f08.petGetTimes.find(_0x16fdd2 => _0x16fdd2.useSkills.find(_0x2029f9 => _0x2029f9.id === 100531))?.useSkills.find(_0x59fa2a => _0x59fa2a.id === 100531)?.crtPP;
              let _0x3a8e95 = _0x562f08.petGetTimes.find(_0x581461 => _0x581461.useSkills.find(_0x4c41fd => _0x4c41fd.id === 15894))?.useSkills.find(_0x521b38 => _0x521b38.id === 15894)?.crtPP;
              if (_0x316354 == 0) {
                addGameLog("pp为0,退出");
                break;
              }
              if (_0x3a8e95 == 0) {
                addGameLog("pp为0,退出");
                break;
              }
              if (MFC.userInfo.curEnergy > xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).energy.split("_")[0]) {
                addGameLog("进行" + xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).levelID + "对战");
                const _0x492cd9 = {
                  effectId: 0,
                  itemId: 0,
                  mapStep: _0x59d971[_0x55bfc0],
                  petGetTime: _0x15a3db,
                  type: 3
                };
                await this.send_message("cs_Hakenza_output_op", _0x492cd9);
                await this.initBattle();
                let _0x1d23d1 = await this.useSkill(100531);
                while (_0x1d23d1.result.result == 0) {
                  _0x1d23d1 = await this.useSkill(15894);
                  if (_0x1d23d1.result.playerInfos[0].uid == MFC.userInfo.uid) {
                    if (_0x1d23d1.result.playerInfos[0].nextRoundOP !== 1) {
                      addGameLog("被击败");
                      break;
                    }
                  } else if (_0x1d23d1.result.playerInfos[1].nextRoundOP !== 1) {
                    addGameLog("被击败");
                    break;
                  }
                  _0x1d23d1 = await this.useSkill(100531);
                }
                if (_0x1d23d1.result.result === 1) {
                  addGameLog("正在进行哈肯萨第" + _0x562f08.level + "层");
                } else {
                  addGameLog("未击杀哈肯萨第" + _0x562f08.level + "层小怪");
                }
                await this.send_message("cs_quit_battle", {});
              } else {
                addGameLog("电池不足");
                break;
              }
            }
          } else if (xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).id == 1148) {
            let _0x1a5666 = await this.dispatchSelfPet("比德尔", [42971, 42972, 32346]);
            if (!_0x1a5666) {
              break;
            } else {
              let _0x3da287 = [_0x1a5666.getTime, _0xff3dcf.getTime];
              const _0x4cbdb0 = {
                effectId: 0,
                itemId: 0,
                mapStep: 0,
                petGetTime: _0x3da287,
                type: 4
              };
              await this.send_message("cs_Hakenza_output_op", _0x4cbdb0);
              let _0x533d3d = _0x562f08.petGetTimes.find(_0x246298 => _0x246298.useSkills.find(_0x581ba5 => _0x581ba5.id === 32346))?.useSkills.find(_0x3b36e0 => _0x3b36e0.id === 32346)?.crtPP;
              if (_0x533d3d == 0) {
                addGameLog("pp为0,退出");
                break;
              }
              if (MFC.userInfo.curEnergy > xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).energy.split("_")[0]) {
                addGameLog("进行" + xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).levelID + "对战");
                const _0x1a103e = {
                  effectId: 0,
                  itemId: 0,
                  mapStep: _0x59d971[_0x55bfc0],
                  petGetTime: _0x3da287,
                  type: 3
                };
                await this.send_message("cs_Hakenza_output_op", _0x1a103e);
                let _0x5a7e45 = await this.initBattle();
                let _0x2df05c = 0;
                while (_0x5a7e45.result.result == 0) {
                  _0x2df05c++;
                  _0x5a7e45 = await this.useSkill(42971);
                  if (_0x5a7e45.result.playerInfos[0].uid == MFC.userInfo.uid) {
                    if (_0x5a7e45.result.playerInfos[0].nextRoundOP !== 1) {
                      addGameLog("被击败");
                      break;
                    }
                  } else if (_0x5a7e45.result.playerInfos[1].nextRoundOP !== 1) {
                    addGameLog("被击败");
                    break;
                  }
                  if (_0x2df05c <= 3) {
                    _0x5a7e45 = await this.useSkill(42972);
                    if (_0x5a7e45.result.playerInfos[0].uid == MFC.userInfo.uid) {
                      if (_0x5a7e45.result.playerInfos[0].nextRoundOP !== 1) {
                        addGameLog("被击败");
                        break;
                      }
                    } else if (_0x5a7e45.result.playerInfos[1].nextRoundOP !== 1) {
                      addGameLog("被击败");
                      break;
                    }
                  }
                  if (_0x2df05c > 3) {
                    _0x5a7e45 = await this.useSkill(32346);
                    if (_0x5a7e45.result.playerInfos[0].uid == MFC.userInfo.uid) {
                      if (_0x5a7e45.result.playerInfos[0].nextRoundOP !== 1) {
                        addGameLog("被击败");
                        break;
                      }
                    } else if (_0x5a7e45.result.playerInfos[1].nextRoundOP !== 1) {
                      addGameLog("被击败");
                      break;
                    }
                  }
                }
                if (_0x5a7e45.result.result === 1) {
                  addGameLog("正在进行哈肯萨第" + _0x562f08.level + "层");
                } else {
                  addGameLog("未击杀哈肯萨第" + _0x562f08.level + "层小怪");
                }
                await this.send_message("cs_quit_battle", {});
              } else {
                addGameLog("电池不足");
                break;
              }
            }
          } else if (MFC.userInfo.curEnergy > xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).energy.split("_")[0]) {
            addGameLog("进行" + xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).levelID + "对战");
            const _0x44a293 = {
              effectId: 0,
              itemId: 0,
              mapStep: _0x59d971[_0x55bfc0],
              petGetTime: _0x327845,
              type: 3
            };
            await this.send_message("cs_Hakenza_output_op", _0x44a293);
            await this.initBattle();
            let _0x5d1ea7 = await this.useSkill(_0x15e33a);
            if (_0x5d1ea7.result.result === 1) {
              addGameLog("正在进行哈肯萨第" + _0x562f08.level + "层");
            } else {
              addGameLog("未击杀哈肯萨第" + _0x562f08.level + "层小怪");
            }
            await this.send_message("cs_quit_battle", {});
          } else {
            addGameLog("电池不足");
            break;
          }
        } else if (xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).id == 1144 || xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).id == 1145 || xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).id == 1148) {
          _0x55bfc0++;
        } else if (MFC.userInfo.curEnergy > xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).energy.split("_")[0]) {
          addGameLog("进行" + xls.activityCard.getItem(xls.dragonDen.getItem(_0x562f08.map[_0x59d971[_0x55bfc0] - 1].eventId).parameter).levelID + "对战");
          const _0x189812 = {
            effectId: 0,
            itemId: 0,
            mapStep: _0x59d971[_0x55bfc0],
            petGetTime: _0x327845,
            type: 3
          };
          await this.send_message("cs_Hakenza_output_op", _0x189812);
          await this.initBattle();
          let _0x2296c3 = await this.useSkill(_0x15e33a);
          if (_0x2296c3.result.result === 1) {
            addGameLog("正在进行哈肯萨第" + _0x562f08.level + "层");
          } else {
            addGameLog("未击杀哈肯萨第" + _0x562f08.level + "层小怪");
          }
          await this.send_message("cs_quit_battle", {});
        } else {
          addGameLog("电池不足");
          break;
        }
      } else if (_0x562f08.map[_0x59d971[_0x55bfc0] - 1].passBy == 2 && _0x55bfc0 < 4) {
        _0x55bfc0++;
      } else if (_0x55bfc0 == 4) {
        let _0x421c4;
        if (_0x562f08.level < 11) {
          _0x421c4 = 1131;
        } else if (_0x562f08.level < 21) {
          _0x421c4 = 1137;
        } else if (_0x562f08.level < 31) {
          _0x421c4 = 1143;
        } else {
          _0x421c4 = 1149;
        }
        if (_0x562f08.map[_0x562f08.map.length - 1].passBy == 0) {
          if (MFC.userInfo.curEnergy > xls.activityCard.getItem(_0x421c4).energy.split("_")[0]) {
            addGameLog("进行" + xls.activityCard.getItem(_0x421c4).levelID + "对战");
            const _0x257e68 = {
              effectId: 0,
              itemId: 0,
              mapStep: 36,
              petGetTime: _0x327845,
              type: 6
            };
            await this.send_message("cs_Hakenza_output_op", _0x257e68);
            await this.initBattle();
            let _0x26c67c = await this.useSkill(_0x15e33a);
            if (_0x26c67c.result.result === 1) {
              addGameLog("正在进行哈肯萨第" + _0x562f08.level + "层");
            } else {
              addGameLog("未击杀哈肯萨第" + _0x562f08.level + "层");
            }
            await this.send_message("cs_quit_battle", {});
          } else {
            addGameLog("电池不足");
            break;
          }
        } else {
          await this.send_message("cs_Hakenza_output_op", {
            effectId: 0,
            itemId: 0,
            mapStep: 0,
            petGetTime: [],
            type: 5
          });
          _0x55bfc0 = 0;
          addGameLog("进入下一层");
        }
      }
    }
    await this.Hakensareward();
  }
  async Hakensabattlesjn() {
    if (!xls.dragonDen.hasLoaded) {
      xls.dragonDen.load(() => {});
    }
    if (!xls.activityCard.hasLoaded) {
      xls.activityCard.load(() => {});
    }
    let _0x475ac3;
    let _0x308df3 = [11, 13, 19, 22, 30];
    let _0x5c0b48 = 0;
    while (true) {
      let _0x2e3133 = PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[0]);
      let _0x17a65d = PetManager.getInstance().getAllPets()[0];
      if (!_0x2e3133) {
        addGameLog("背包阵容首发没有设置精灵");
        break;
      } else {
        let _0x4cd658 = [_0x2e3133.getTime, _0x17a65d.getTime];
        const _0x25c162 = {
          effectId: 0,
          itemId: 0,
          mapStep: 0,
          petGetTime: _0x4cd658,
          type: 4
        };
        await this.send_message("cs_Hakenza_output_op", _0x25c162);
      }
      let _0x558786 = [_0x2e3133.getTime, _0x17a65d.getTime];
      let _0x49ce30 = await this.send_message("cs_Hakenza_output_op", {
        itemId: 0,
        mapStep: 0,
        petGetTime: [],
        type: 1
      });
      if (_0x49ce30.map.length == 0) {
        _0x49ce30 = await this.send_message("cs_Hakenza_output_op", {
          itemId: 0,
          mapStep: 0,
          petGetTime: [],
          type: 1
        });
      }
      let _0x38c0ca = _0x49ce30.petGetTimes.find(_0x2d874f => _0x2d874f.useSkills.find(_0x53f9a7 => _0x53f9a7.id === PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[0]).skills[0]))?.useSkills.find(_0x384f66 => _0x384f66.id === PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[0]).skills[0])?.crtPP;
      if (_0x2e3133.skills.indexOf(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[0]).skills[0]) != -1) {
        _0x475ac3 = PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[0]).skills[0];
        addGameLog("pp为" + _0x38c0ca);
        if (_0x38c0ca == 0) {
          addGameLog("首技能pp为0");
          break;
        }
      }
      addGameLog("当前第" + _0x49ce30.level + "层");
      if (_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].passBy == 0 && _0x5c0b48 < 4) {
        if (ItemManager.getInstance().getItemNumById(101081) > 0) {
          if (_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].affectList.length > 0) {
            const _0x19799c = {
              effectId: undefined,
              itemId: 0,
              mapStep: _0x308df3[_0x5c0b48],
              petGetTime: [],
              type: 7
            };
            await this.send_message("cs_Hakenza_output_op", _0x19799c);
            const _0x2a599c = {
              effectId: _0x49ce30.map[_0x308df3[_0x5c0b48] - 1].affectList[1],
              itemId: 0,
              mapStep: _0x308df3[_0x5c0b48],
              petGetTime: [],
              type: 3
            };
            await this.send_message("cs_Hakenza_output_op", _0x2a599c);
          }
          if (_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].hp == 0) {
            const _0x300dd2 = {
              effectId: undefined,
              itemId: 0,
              mapStep: _0x308df3[_0x5c0b48],
              petGetTime: [],
              type: 3
            };
            await this.send_message("cs_Hakenza_output_op", _0x300dd2);
          } else {
            const _0x12b53d = {
              effectId: undefined,
              itemId: 0,
              mapStep: _0x308df3[_0x5c0b48],
              petGetTime: [],
              type: 7
            };
            await this.send_message("cs_Hakenza_output_op", _0x12b53d);
          }
        } else {
          addGameLog("慕夜能源不足");
          break;
        }
      } else if (_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].passBy == 1 && _0x5c0b48 < 4) {
        if (xls.activityCard.getItem(xls.dragonDen.getItem(_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].eventId).parameter).id == 1144 || xls.activityCard.getItem(xls.dragonDen.getItem(_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].eventId).parameter).id == 1145 || xls.activityCard.getItem(xls.dragonDen.getItem(_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].eventId).parameter).id == 1148) {
          addGameLog("存在未命中等buff停止对战");
          break;
        } else if (MFC.userInfo.curEnergy > xls.activityCard.getItem(xls.dragonDen.getItem(_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].eventId).parameter).energy.split("_")[0]) {
          addGameLog("进行" + xls.activityCard.getItem(xls.dragonDen.getItem(_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].eventId).parameter).levelID + "对战");
          const _0x3b7dd2 = {
            effectId: 0,
            itemId: 0,
            mapStep: _0x308df3[_0x5c0b48],
            petGetTime: _0x558786,
            type: 3
          };
          await this.send_message("cs_Hakenza_output_op", _0x3b7dd2);
          await this.initBattle();
          let _0x420975 = await this.useSkill(_0x475ac3);
          if (_0x420975.result.result === 1) {
            addGameLog("正在进行哈肯萨第" + _0x49ce30.level + "层");
          } else {
            addGameLog("未击杀哈肯萨第" + _0x49ce30.level + "层小怪");
          }
          await this.send_message("cs_quit_battle", {});
        } else {
          addGameLog("电池不足");
          break;
        }
      } else if (_0x49ce30.map[_0x308df3[_0x5c0b48] - 1].passBy == 2 && _0x5c0b48 < 4) {
        _0x5c0b48++;
      } else if (_0x5c0b48 == 4) {
        let _0x3c9ae9;
        if (_0x49ce30.level < 11) {
          _0x3c9ae9 = 1131;
        } else if (_0x49ce30.level < 21) {
          _0x3c9ae9 = 1137;
        } else if (_0x49ce30.level < 31) {
          _0x3c9ae9 = 1143;
        } else {
          _0x3c9ae9 = 1149;
        }
        if (_0x49ce30.map[_0x49ce30.map.length - 1].passBy == 0) {
          if (MFC.userInfo.curEnergy > xls.activityCard.getItem(_0x3c9ae9).energy.split("_")[0]) {
            addGameLog("进行" + xls.activityCard.getItem(_0x3c9ae9).levelID + "对战");
            const _0x30b612 = {
              effectId: 0,
              itemId: 0,
              mapStep: 36,
              petGetTime: _0x558786,
              type: 6
            };
            await this.send_message("cs_Hakenza_output_op", _0x30b612);
            await this.initBattle();
            let _0x3d099d = await this.useSkill(_0x475ac3);
            if (_0x3d099d.result.result === 1) {
              addGameLog("正在进行哈肯萨第" + _0x49ce30.level + "层");
            } else {
              addGameLog("未击杀哈肯萨第" + _0x49ce30.level + "层");
            }
            await this.send_message("cs_quit_battle", {});
          } else {
            addGameLog("电池不足");
            break;
          }
        } else {
          await this.send_message("cs_Hakenza_output_op", {
            effectId: 0,
            itemId: 0,
            mapStep: 0,
            petGetTime: [],
            type: 5
          });
          _0x5c0b48 = 0;
          addGameLog("进入下一层");
        }
      }
    }
    await this.Hakensareward();
  }
  async Hakensareward() {
    let _0x3ac5dc = xls.activityTaskReset.getItems().filter(function (_0x30032b) {
      return _0x30032b.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x30032b.endTime >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x30032b.name.indexOf("哈肯萨暮色大厅活动") !== -1;
    });
    for (let _0x36ec36 = 0; _0x36ec36 < _0x3ac5dc.length; _0x36ec36++) {
      if (TaskUtils.GetRestTaskState(_0x3ac5dc[_0x36ec36]) == 1) {
        addGameLog("领取" + _0x3ac5dc[_0x36ec36].task);
        const _0x1410bf = {
          carnivalId: _0x3ac5dc[_0x36ec36].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x1410bf);
      } else if (TaskUtils.GetRestTaskState(_0x3ac5dc[_0x36ec36]) == 0) {
        addGameLog(_0x3ac5dc[_0x36ec36].task + "未完成");
      } else {
        addGameLog(_0x3ac5dc[_0x36ec36].task + "已完成");
      }
    }
    addGameLog("哈肯撒完成");
    this.stop();
  }
  async hksui2() {
    super.start();
    let _0x16b771 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x32c044 = [];
      var _0x422e5a = SimpleAlertUi({
        height: 350,
        width: 380
      });
      _0x16b771.alertWin = _0x422e5a;
      const _0x4c7053 = {
        text: "哈肯萨(暗龙)",
        y: _0x422e5a.height / 20
      };
      let _0x2ff8b3 = createLabel(_0x4c7053);
      _0x2ff8b3.x = _0x422e5a.applicationWidth / 2 - _0x2ff8b3.width / 2;
      _0x32c044.push(_0x2ff8b3);
      const _0x10346d = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x2ff8b3.y + _0x2ff8b3.height + 10
      };
      var _0x4df1d0 = createLabel(_0x10346d);
      _0x32c044.push(_0x4df1d0);
      const _0x16fad1 = {
        text: "不会耗PP药水 低配速推 \n战斗 特效 补给 宝箱 全自动完成~",
        textColor: 65408,
        x: 40,
        y: _0x4df1d0.y + 10 + _0x4df1d0.height
      };
      var _0x2388cc = createLabel(_0x16fad1);
      _0x32c044.push(_0x2388cc);
      const _0x3ea44d = {
        text: "黑龙殿 配置:",
        textColor: 16776960,
        x: 30,
        y: _0x2ff8b3.y + 100
      };
      let _0x2ed850 = createLabel(_0x3ea44d);
      _0x32c044.push(_0x2ed850);
      const _0x9f4e9b = {
        text: "必须精灵: 贝特卡恩(贝爷)",
        textColor: 65535,
        x: _0x422e5a.width / 8,
        y: _0x2ed850.y + 30
      };
      let _0x3db902 = createLabel(_0x9f4e9b);
      _0x32c044.push(_0x3db902);
      const _0x1575c5 = {
        text: "狂暴血怒(符文) 嗜血(符文)",
        textColor: 16776960,
        x: _0x3db902.x + _0x3db902.width - 160,
        y: _0x3db902.y + 30
      };
      let _0x1f64f4 = createLabel(_0x1575c5);
      _0x32c044.push(_0x1f64f4);
      const _0x1a1c83 = {
        text: "血气之刃(符文) 狂气突(符文)",
        textColor: 16776960,
        x: _0x1f64f4.x,
        y: _0x1f64f4.y + 30
      };
      let _0x17ac7e = createLabel(_0x1a1c83);
      _0x32c044.push(_0x17ac7e);
      _0x16b771.addAllUis(_0x32c044);
      _0x422e5a.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x16b771.stop();
      }, function () {
        _0x16b771.hksAct();
      }], null);
      _0x422e5a.showAlert();
    });
  }
  async hksAct() {
    if (!xls.dragonDen.hasLoaded) {
      xls.dragonDen.load(() => {});
    }
    if (!xls.activityCard.hasLoaded) {
      xls.activityCard.load(() => {});
    }
    let _0x14b1f0 = await this.dispatchSelfPet("贝特卡恩", [100940, 100943, 100941, 100942]);
    if (!_0x14b1f0 || _0x14b1f0.level != 100) {
      MFC.alert.show(`背包没有带有
狂暴血怒   嗜血
血气之刃   狂气突
[技能均需要符文]的100级精灵`);
      this.stop();
      return;
    }
    this.bei = _0x14b1f0;
    let _0x188ee = [11, 13, 19, 22, 30];
    let _0x45d944 = 0;
    while (true) {
      let _0x38dff0 = await this.send_message("cs_Hakenza_output_op", {
        itemId: 0,
        mapStep: 0,
        petGetTime: [],
        type: 1
      });
      if (!_0x38dff0.map.length) {
        _0x38dff0 = await this.send_message("cs_Hakenza_output_op", {
          itemId: 0,
          mapStep: 0,
          petGetTime: [],
          type: 1
        });
      }
      addGameLog("当前第" + _0x38dff0.level + "层");
      let _0x1409b5 = ItemManager.getInstance().getItemNumById(101081);
      if (_0x38dff0.map[_0x188ee[_0x45d944] - 1].passBy == 0 && _0x45d944 < 4) {
        if (_0x1409b5 > 0) {
          if (_0x38dff0.map[_0x188ee[_0x45d944] - 1].affectList.length > 0) {
            const _0x47fcf4 = {
              effectId: undefined,
              itemId: 0,
              mapStep: _0x188ee[_0x45d944],
              petGetTime: [],
              type: 7
            };
            await this.send_message("cs_Hakenza_output_op", _0x47fcf4);
            const _0x4fea84 = {
              effectId: _0x38dff0.map[_0x188ee[_0x45d944] - 1].affectList[1],
              itemId: 0,
              mapStep: _0x188ee[_0x45d944],
              petGetTime: [],
              type: 3
            };
            await this.send_message("cs_Hakenza_output_op", _0x4fea84);
          }
          if (_0x38dff0.map[_0x188ee[_0x45d944] - 1].hp == 0) {
            const _0x227f6e = {
              effectId: undefined,
              itemId: 0,
              mapStep: _0x188ee[_0x45d944],
              petGetTime: [],
              type: 3
            };
            await this.send_message("cs_Hakenza_output_op", _0x227f6e);
          } else {
            const _0x5c4842 = {
              effectId: undefined,
              itemId: 0,
              mapStep: _0x188ee[_0x45d944],
              petGetTime: [],
              type: 7
            };
            await this.send_message("cs_Hakenza_output_op", _0x5c4842);
          }
        } else {
          MFC.alert.show("慕夜能源不足\n哈肯萨完成");
          await this.getActPrice("哈肯萨暮色");
          break;
        }
      } else if (_0x38dff0.map[_0x188ee[_0x45d944] - 1].passBy == 1 && _0x45d944 < 4) {
        let _0x24f818 = xls.activityCard.getItem(xls.dragonDen.getItem(_0x38dff0.map[_0x188ee[_0x45d944] - 1].eventId).parameter).id;
        if (_0x24f818 == 1145 || _0x24f818 == 1148) {
          addGameLog("跳过当前");
          _0x45d944++;
        } else {
          let _0x391d15 = xls.activityCard.getItem(xls.dragonDen.getItem(_0x38dff0.map[_0x188ee[_0x45d944] - 1].eventId).parameter).energy.split("_")[0];
          const _0x40d3a3 = {
            seerStep: _0x188ee,
            seerindex: _0x45d944,
            needEn: _0x391d15,
            type: 3
          };
          let _0x4bd1c2 = _0x40d3a3;
          if (_0x24f818 == 1139 || _0x24f818 == 1141) {
            await this.hksBattle2(_0x4bd1c2);
          } else {
            await this.hksBattle(_0x4bd1c2);
          }
        }
      } else if (_0x38dff0.map[_0x188ee[_0x45d944] - 1].passBy == 2 && _0x45d944 < 4) {
        _0x45d944++;
      } else if (_0x45d944 == 4) {
        let _0x13424b;
        if (_0x38dff0.level < 11) {
          _0x13424b = 1131;
        } else if (_0x38dff0.level < 21) {
          _0x13424b = 1137;
        } else if (_0x38dff0.level < 31) {
          _0x13424b = 1143;
        } else {
          _0x13424b = 1149;
        }
        if (_0x38dff0.map[_0x38dff0.map.length - 1].passBy == 0) {
          let _0x41140a = xls.activityCard.getItem(_0x13424b).energy.split("_")[0];
          const _0x45040a = {
            seerStep: _0x188ee,
            seerindex: _0x45d944,
            needEn: _0x41140a,
            type: 6
          };
          let _0x3d76db = _0x45040a;
          await this.hksBattle2(_0x3d76db);
        } else {
          await this.send_message("cs_Hakenza_output_op", {
            effectId: 0,
            itemId: 0,
            mapStep: 0,
            petGetTime: [],
            type: 5
          });
          _0x45d944 = 0;
          addGameLog("进入下一层");
        }
      }
    }
  }
  async hksBattle(_0xa5e4b4) {
    let _0x55ac88 = _0xa5e4b4.seerStep;
    let _0x1d3e2e = _0xa5e4b4.seerindex;
    let _0x4b13c4 = _0xa5e4b4.needEn;
    let _0x41e8cd = PetManager.getInstance().getAllPets().filter(_0x372b50 => _0x372b50.getTime != this.bei.getTime && _0x372b50.level == 100);
    if (_0x41e8cd.length < 1) {
      MFC.alert.show("背包至少有1只额外的100级精灵");
      this.stop();
      return;
    }
    await this.send_message("cs_Hakenza_output_op", {
      effectId: 0,
      itemId: 0,
      mapStep: 0,
      petGetTime: [this.bei.getTime, _0x41e8cd[0].getTime],
      type: 4
    });
    while (1) {
      if (MFC.userInfo.curEnergy < _0x4b13c4) {
        MFC.alert.show("电池不足" + _0x4b13c4 + "\n哈肯萨完成");
        await this.getActPrice("哈肯萨暮色");
        this.stop();
        return;
      }
      await this.send_message("cs_Hakenza_output_op", {
        effectId: 0,
        itemId: 0,
        mapStep: 36,
        petGetTime: [this.bei.getTime, _0x41e8cd[0].getTime],
        type: 6
      });
      if (_0xa5e4b4.type == 3) {
        await this.send_message("cs_Hakenza_output_op", {
          effectId: 0,
          itemId: 0,
          mapStep: _0x55ac88[_0x1d3e2e],
          petGetTime: [this.bei.getTime, _0x41e8cd[0].getTime],
          type: 3
        });
      }
      let _0x397789 = await this.initBattle();
      let _0x438725 = [100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100940, 100943, 100941, 100942];
      let _0xc27071 = 0;
      while (_0x397789.result.result == 0) {
        let _0x55efca = _0x397789.result.playerInfos.find(_0x162639 => _0x162639.uid == _0x397789.uid__).nextRoundOP;
        if (_0x55efca == 3) {
          addGameLog("被击败, 重进");
          await this.send_message("cs_quit_battle", {});
          break;
        }
        _0x397789 = await this.useSkill(_0x438725[_0xc27071]);
        if (_0xc27071 >= 15) {
          _0xc27071 = 11;
        }
        _0xc27071++;
      }
      if (_0x397789.result.result == 2) {
        addGameLog("被击败 重新尝试!");
      }
      if (_0x397789.result.result == 1) {
        addGameLog("顺利击败!");
        break;
      }
    }
  }
  async hksBattle2(_0x529310) {
    let _0x12c26f = _0x529310.seerStep;
    let _0x3fe2c7 = _0x529310.seerindex;
    let _0x24863e = _0x529310.needEn;
    let _0x4c1f4e = PetManager.getInstance().getAllPets().filter(_0x1fe082 => _0x1fe082.getTime != this.bei.getTime && _0x1fe082.level == 100);
    if (_0x4c1f4e.length < 1) {
      MFC.alert.show("背包至少有1只额外的100级精灵");
      this.stop();
      return;
    }
    await this.send_message("cs_Hakenza_output_op", {
      effectId: 0,
      itemId: 0,
      mapStep: 0,
      petGetTime: [this.bei.getTime, _0x4c1f4e[0].getTime],
      type: 4
    });
    while (1) {
      if (MFC.userInfo.curEnergy < _0x24863e) {
        MFC.alert.show("电池不足" + _0x24863e + "\n哈肯萨完成");
        await this.getActPrice("哈肯萨暮色");
        this.stop();
        return;
      }
      await this.send_message("cs_Hakenza_output_op", {
        effectId: 0,
        itemId: 0,
        mapStep: 36,
        petGetTime: [this.bei.getTime, _0x4c1f4e[0].getTime],
        type: 6
      });
      if (_0x529310.type == 3) {
        await this.send_message("cs_Hakenza_output_op", {
          effectId: 0,
          itemId: 0,
          mapStep: _0x12c26f[_0x3fe2c7],
          petGetTime: [this.bei.getTime, _0x4c1f4e[0].getTime],
          type: 3
        });
      }
      let _0x3fc3a5 = await this.initBattle();
      while (_0x3fc3a5.result.result == 0) {
        let _0x53905c = _0x3fc3a5.result.playerInfos.find(_0x5474b8 => _0x5474b8.uid == _0x3fc3a5.uid__);
        let _0x3baaf8 = _0x3fc3a5.result.processQueue.find(_0xcea717 => _0xcea717.uid !== _0x3fc3a5.uid__);
        let _0x5097d5 = _0x3fc3a5.result.playerInfos.find(_0x5ba3e3 => _0x5ba3e3.uid == _0x3fc3a5.uid__).nextRoundOP;
        let _0x47bb52 = _0x3baaf8 ? _0x3baaf8.affects.filter(_0xe1ba93 => _0xe1ba93.args.length && _0xe1ba93.args[0] >= 1 && [1, 2, 3, 4, 5].includes(_0xe1ba93.id)) : [];
        if (_0x5097d5 == 3) {
          addGameLog("被击败, 重进");
          await this.send_message("cs_quit_battle", {});
          break;
        }
        if (_0x47bb52.length) {
          addGameLog("消强");
          _0x3fc3a5 = await this.useSkill(100942);
          continue;
        }
        if (_0x3fc3a5.result.roundNum <= 2) {
          addGameLog("回合数小于等于3 嗜血");
          _0x3fc3a5 = await this.useSkill(100943);
          continue;
        }
        let _0x1e2416 = _0x53905c.petInfos[0];
        if (_0x1e2416.crtHp <= 200) {
          addGameLog("HP不足200 嗜血");
          _0x3fc3a5 = await this.useSkill(100943);
          continue;
        }
        const _0x2fde33 = Math.random();
        if (_0x2fde33 < 1 / 4) {
          _0x3fc3a5 = await this.useSkill(100941);
        } else {
          _0x3fc3a5 = await this.useSkill(100940);
        }
      }
      if (_0x3fc3a5.result.result == 2) {
        addGameLog("被击败 重新尝试!");
      }
      if (_0x3fc3a5.result.result == 1) {
        addGameLog("顺利击败!");
        break;
      }
    }
  }
  async getActPrice(_0x48f189) {
    let _0x2f9589 = xls.activityTaskReset.getItems().filter(_0x2d1901 => _0x2d1901.name.includes(_0x48f189) && canNowTime(_0x2d1901.endTime));
    for (let _0x2ce83d = 0; _0x2ce83d < _0x2f9589.length; _0x2ce83d++) {
      if (TaskUtils.GetRestTaskState(_0x2f9589[_0x2ce83d]) == 1) {
        addGameLog("领取" + _0x2f9589[_0x2ce83d].task);
        const _0x8cdf49 = {
          carnivalId: _0x2f9589[_0x2ce83d].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x8cdf49);
      }
    }
  }
  async skyHorseui() {
    super.start();
    let _0x31d231 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x238b41 = [];
      var _0x2de242 = SimpleAlertUi({
        height: 450,
        width: 440
      });
      _0x31d231.alertWin = _0x2de242;
      const _0x514cba = {
        text: "黄金天马",
        y: _0x2de242.height / 20
      };
      let _0x1d33c6 = createLabel(_0x514cba);
      _0x1d33c6.x = _0x2de242.applicationWidth / 2 - _0x1d33c6.width / 2;
      _0x238b41.push(_0x1d33c6);
      const _0x55e701 = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x1d33c6.y + _0x1d33c6.height + 10
      };
      var _0x327949 = createLabel(_0x55e701);
      _0x238b41.push(_0x327949);
      const _0x2438a6 = {
        text: "河谷每层清理的很干净 *无限恐惧勇气号(会跳过)* ",
        textColor: 16711680,
        x: 40,
        y: _0x327949.y + 10 + _0x327949.height
      };
      var _0x19032b = createLabel(_0x2438a6);
      _0x238b41.push(_0x19032b);
      const _0x15e47e = {
        text: "迷途河谷 配置:",
        textColor: 16776960,
        x: 30,
        y: _0x1d33c6.y + 80
      };
      let _0x1d2770 = createLabel(_0x15e47e);
      _0x238b41.push(_0x1d2770);
      const _0x2d2bb0 = {
        text: "============================",
        textColor: 16776960,
        y: _0x1d2770.y + 20
      };
      let _0x227d96 = createLabel(_0x2d2bb0);
      _0x227d96.x = _0x2de242.applicationWidth / 2 - _0x227d96.width / 2;
      _0x238b41.push(_0x227d96);
      const _0x2a2864 = {
        text: "贝特卡恩: ",
        textColor: 65535,
        x: _0x2de242.width / 8,
        y: _0x227d96.y + 20
      };
      let _0x4dae45 = createLabel(_0x2a2864);
      _0x238b41.push(_0x4dae45);
      const _0xe51108 = {
        text: "狂暴血怒(符文) 嗜血(符文)",
        textColor: 16776960,
        x: _0x4dae45.x + _0x4dae45.width,
        y: _0x4dae45.y + 20
      };
      let _0x3598c8 = createLabel(_0xe51108);
      _0x238b41.push(_0x3598c8);
      const _0x1b4647 = {
        text: "血气之刃(符文) 狂气突(符文)",
        textColor: 16776960,
        x: _0x4dae45.x + _0x4dae45.width,
        y: _0x3598c8.y + 20
      };
      let _0x1db4e7 = createLabel(_0x1b4647);
      _0x238b41.push(_0x1db4e7);
      const _0x303864 = {
        text: "雷伊: ",
        textColor: 65535,
        x: _0x2de242.width / 8,
        y: _0x1db4e7.y + 20
      };
      let _0x1858dd = createLabel(_0x303864);
      _0x238b41.push(_0x1858dd);
      const _0x594591 = {
        text: "雷神天明闪 充电(符文)",
        textColor: 16776960,
        x: _0x4dae45.x + _0x4dae45.width,
        y: _0x1858dd.y + 20
      };
      let _0x2683d1 = createLabel(_0x594591);
      _0x238b41.push(_0x2683d1);
      const _0x146458 = {
        text: "祭坛试炼 配置:",
        textColor: 16776960,
        x: 30,
        y: _0x2683d1.y + 20
      };
      let _0x54bceb = createLabel(_0x146458);
      _0x238b41.push(_0x54bceb);
      const _0x33ca5f = {
        text: "============================",
        textColor: 16776960,
        y: _0x54bceb.y + 20
      };
      let _0x2c93e5 = createLabel(_0x33ca5f);
      _0x2c93e5.x = _0x2de242.applicationWidth / 2 - _0x2c93e5.width / 2;
      _0x238b41.push(_0x2c93e5);
      const _0x54b23b = {
        text: "鲁斯王: ",
        textColor: 65535,
        x: _0x2de242.width / 8,
        y: _0x2c93e5.y + 20
      };
      let _0x4e148d = createLabel(_0x54b23b);
      _0x238b41.push(_0x4e148d);
      const _0x44f9fb = {
        text: "玩水(符文)",
        textColor: 16776960,
        x: _0x4e148d.x + _0x4e148d.width,
        y: _0x4e148d.y + 20
      };
      let _0x1521b1 = createLabel(_0x44f9fb);
      _0x238b41.push(_0x1521b1);
      const _0x408597 = {
        text: "古莫莫: ",
        textColor: 65535,
        x: _0x1521b1.x + _0x1521b1.width + 10,
        y: _0x2c93e5.y + 20
      };
      let _0x25993c = createLabel(_0x408597);
      _0x238b41.push(_0x25993c);
      const _0x12f917 = {
        text: "远古宝石",
        textColor: 16776960,
        x: _0x25993c.x + _0x25993c.width,
        y: _0x4e148d.y + 20
      };
      let _0x30880a = createLabel(_0x12f917);
      _0x238b41.push(_0x30880a);
      const _0x4d25fc = {
        text: "迷途河谷",
        x: 60,
        y: _0x30880a.y + 32
      };
      let _0x3197cb = createLabel(_0x4d25fc);
      _0x238b41.push(_0x3197cb);
      const _0x21ea7d = {
        x: _0x3197cb.width + _0x3197cb.x + 20,
        y: _0x3197cb.y - 1,
        selected: false,
        storageKey: "echolostValley"
      };
      let _0x5c7a36 = createToggle(_0x21ea7d);
      _0x238b41.push(_0x5c7a36);
      const _0xcfc81c = {
        text: "祭坛试炼",
        x: _0x5c7a36.x + _0x5c7a36.width + 40,
        y: _0x30880a.y + 32
      };
      let _0x7e898 = createLabel(_0xcfc81c);
      _0x238b41.push(_0x7e898);
      const _0x566753 = {
        x: _0x7e898.width + _0x7e898.x + 20,
        y: _0x3197cb.y - 1,
        selected: false,
        storageKey: "echoSacrifice"
      };
      let _0x2290db = createToggle(_0x566753);
      _0x238b41.push(_0x2290db);
      _0x31d231.addAllUis(_0x238b41);
      _0x2de242.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x31d231.stop();
      }, function () {
        if (_0x5c7a36.selected) {
          _0x31d231.lost = 1;
          localStorage.setItem("echolostValley", true);
        }
        if (_0x2290db.selected) {
          _0x31d231.sacrifice = 1;
          localStorage.setItem("echoSacrifice", true);
        }
        if (!_0x5c7a36.selected && !_0x2290db.selected) {
          MFC.bubbleAlert.showAlert("至少勾选一项");
          return true;
        }
        _0x31d231.skyHorseAct();
      }], null);
      _0x2de242.showAlert();
    });
  }
  async skyHorseAct() {
    if (this.lost) {
      await this.lostValley();
    }
    if (this.sacrifice) {
      await this.Sacrifice();
    }
    this.stop();
  }
  async Sacrifice() {
    if (MFC.attr.getAttr(MFC.attrType.dailyHorseTrialDamage) == 10000000) {
      addGameLog("祭坛试炼 已经完成!");
      return;
    }
    if (MFC.userInfo.curEnergy < 15) {
      addGameLog("电池数不足15 祭坛试炼完成");
      return;
    }
    let _0x59b26d = await this.dispatchSelfPet("古莫莫", [40893]);
    if (!_0x59b26d) {
      MFC.alert.show("背包没有带有 远古宝石 的精灵");
      this.stop();
      return;
    }
    let _0x1642a8 = await this.dispatchSelfPet("鲁斯王", [100487]);
    if (!_0x1642a8) {
      MFC.alert.show("背包没有带有 玩水(符文) 的精灵");
      this.stop();
      return;
    }
    this.gu = _0x59b26d;
    this.lu = _0x1642a8;
    let _0x2da688 = Object.values(petConfig.SkillConfig.map).filter(_0x24ef9e => _0x24ef9e.intro.includes("命中后100%令对方") && (_0x24ef9e.intro.includes("烧伤") || _0x24ef9e.intro.includes("中毒") || _0x24ef9e.intro.includes("冻伤"))).map(_0x58b04c => _0x58b04c.id);
    this.abnormals = _0x2da688;
    const _0x487e6f = PetManager.getInstance().getAllPets().filter(_0x17d2c2 => _0x17d2c2.getTime != _0x1642a8.getTime && (_0x17d2c2.skills.find(_0x5e5613 => _0x2da688.includes(_0x5e5613)) || _0x17d2c2.totalSkills.find(_0x5a233a => _0x2da688.includes(_0x5a233a))));
    const _0x4c46e9 = _0x487e6f.slice().sort((_0x3e2487, _0x36ec5a) => {
      const _0x3238ac = _0x3e2487.battleValues[0];
      const _0x14a2ce = _0x36ec5a.battleValues[0];
      return _0x14a2ce - _0x3238ac;
    });
    var _0x192a00 = _0x4c46e9.slice(0, 4);
    if (!_0x192a00.length || _0x192a00.length < 2) {
      MFC.alert.show("背包没有2只能挂异常技能的精灵!");
      this.stop();
      return;
    }
    let _0x4b23de = _0x192a00.filter(_0xee1d01 => !_0xee1d01.skills.find(_0x13c196 => _0x2da688.includes(_0x13c196)));
    if (_0x4b23de.length) {
      for (let _0x428794 = 0; _0x428794 < _0x4b23de.length; _0x428794++) {
        let _0x23036e = _0x2da688.find(_0x29ed13 => _0x4b23de[_0x428794].totalSkills.includes(_0x29ed13));
        let _0x10be09 = _0x4b23de[_0x428794].skills[0] == 11022 ? 1 : 0;
        addGameLog("更换技能:" + petConfig.SkillConfig.getDef(_0x23036e).name);
        const _0x550b12 = {
          getTime: _0x4b23de[_0x428794].getTime,
          oldSkillId: _0x4b23de[_0x428794].skills[_0x10be09],
          newSkillId: _0x23036e
        };
        await this.send_message("cs_change_skill", _0x550b12);
        await wait(200);
      }
    }
    let _0x47e2f7 = [_0x59b26d.getTime, _0x1642a8.getTime].concat(_0x192a00.map(_0x5dfb25 => _0x5dfb25.getTime));
    logger(_0x47e2f7);
    this.getTimeList = _0x47e2f7;
    await this.sacrificeBattle();
  }
  async changeIndex(_0x3924b1) {
    await this.send_message("cs_online_load_battle_result", {
      groupId: ""
    });
    addGameLog("切换精灵" + (_0x3924b1 + 1));
    const _0x3a8f2f = {
      petIndex: _0x3924b1
    };
    const _0x286c76 = {
      opType: 2,
      data: _0x3a8f2f,
      groupId: ""
    };
    await this.send_message("cs_online_player_operation", _0x286c76);
    let _0x4df0c1 = await this.waitEvent("sc_battle_notify_round_result");
    let _0x3c1aa3 = JSON.parse(_0x4df0c1.gameBody[_0x4df0c1.gameBody.length - 1].raw);
    _0x4df0c1.gameBody.splice(0, _0x4df0c1.gameBody.length);
    return _0x3c1aa3;
  }
  async sacrificeBattle() {
    await this.send_message("cs_new_change_petArray", {
      op: 1,
      arrayType: "defaultTeam",
      subArray: 0,
      idx: 1,
      teamUp: 0,
      fightType: 0,
      getTimeList: this.getTimeList
    });
    while (1) {
      await this.send_message("cs_horse_trial", {
        type: 2,
        bossID: 1673,
        getTimeList: this.getTimeList
      });
      let _0x513dfb = await this.initBattle();
      let _0xcd8151 = 0;
      while (_0x513dfb.result.result == 0) {
        addGameLog("回合数:" + _0x513dfb.result.roundNum);
        let _0x4a13e2 = _0x513dfb.result.playerInfos.find(_0x2e71df => _0x2e71df.uid == _0x513dfb.uid__);
        let _0x4a44c6 = _0x4a13e2.crtPetIndex;
        if (_0x513dfb.result.roundNum == 0) {
          _0x513dfb = await this.useSkill(40893);
          continue;
        }
        let _0x3c800e = _0x513dfb.result.playerInfos.find(_0x400417 => _0x400417.uid == _0x513dfb.uid__).nextRoundOP;
        if (_0x3c800e == 3 && _0x513dfb.result.roundNum <= 5) {
          addGameLog("被击败, 重进");
          await this.send_message("cs_quit_battle", {});
          break;
        }
        let _0x3b68e5 = _0x513dfb.result.processQueue.find(_0x593082 => _0x593082.uid == _0x513dfb.uid__);
        if (_0x3b68e5) {
          let _0xccbdd2 = _0x513dfb.result.processQueue.find(_0x56cd40 => _0x56cd40.uid == _0x513dfb.uid__).affects;
          let _0x52fa83 = _0xccbdd2.find(_0x340c8c => _0x340c8c.time == "enemyAffects" && _0x340c8c.elemTypeChange == 2);
          if (_0x52fa83 && _0x513dfb.result.roundNum == 1) {
            addGameLog("顺利改变属性为水!");
            _0x513dfb = await this.changeIndex(1);
            continue;
          } else if (_0x513dfb.result.roundNum == 1) {
            addGameLog("随机属性不为水 重进");
            await this.send_message("cs_quit_battle", {});
            break;
          }
          let _0x3f20b3 = _0xccbdd2.find(_0x5d040c => _0x5d040c.time == "enemyAffects" && _0x5d040c.elemTypeChange != 2 && _0x5d040c.elemTypeChange != 0);
          if (_0x3f20b3 && _0x513dfb.result.roundNum == 5) {
            addGameLog("破除免异常成功!");
            _0x513dfb = await this.changeIndex(2);
            continue;
          } else if (_0x513dfb.result.roundNum == 5) {
            addGameLog("破除免异常失败 重进");
            await this.send_message("cs_quit_battle", {});
            break;
          }
        }
        if (_0x513dfb.result.roundNum >= 6 && _0x3c800e == 3) {
          logger("被击败 换4");
          _0xcd8151++;
          if (_0xcd8151 >= 12) {
            addGameLog("失败 重进");
            await this.send_message("cs_quit_battle", {});
            break;
          }
          _0x513dfb = await this.changeIndex(3);
          continue;
        }
        if (_0x513dfb.result.roundNum >= 6) {
          let _0x21df47 = this.abnormals.find(_0x554420 => _0x4a13e2.petInfos[_0x4a44c6].useSkills.map(_0x19f0fa => _0x19f0fa.id).includes(_0x554420));
          _0x513dfb = await this.useSkill(_0x21df47);
          continue;
        }
        if (_0x513dfb.result.roundNum == 2) {
          _0x513dfb = await this.useSkill(100487);
          continue;
        }
        if (_0x513dfb.result.roundNum == 3) {
          _0x513dfb = await this.changeIndex(0);
          continue;
        }
        if (_0x513dfb.result.roundNum == 4) {
          _0x513dfb = await this.useSkill(40893);
          continue;
        }
      }
      if (_0x513dfb.result.result == 2) {
        addGameLog("被击败 重新尝试!");
      }
      if (_0x513dfb.result.result == 1) {
        addGameLog("顺利击败!");
        break;
      }
    }
  }
  async lostValley() {
    let _0x21ba2c = await this.dispatchSelfPet("贝特卡恩", [100940, 100943, 100941, 100942]);
    if (!_0x21ba2c) {
      MFC.alert.show(`背包没有带有
狂暴血怒   嗜血
血气之刃   狂气突
[技能均需要符文]的精灵`);
      this.stop();
      return;
    }
    let _0x5e2aaf = PetManager.getInstance().getAllPets().map(_0x43ca1c => {
      if ((_0x43ca1c.skills.indexOf(10825) != -1 || _0x43ca1c.skills.indexOf(100484) != -1) && _0x43ca1c.skills.indexOf(100483) != -1) {
        return _0x43ca1c;
      }
    }).filter(_0x31d82a => _0x31d82a !== undefined)[0];
    if (!_0x5e2aaf) {
      MFC.alert.show("背包没有带有 雷神天明闪 充电(符文) 的精灵");
      this.stop();
      return;
    }
    this.bei = _0x21ba2c;
    this.leiyi = _0x5e2aaf;
    while (1) {
      await this.send_message("cs_lost_valley", {
        type: 1,
        activity: 1,
        index: 0,
        item: 0,
        petList: []
      });
      let _0x54e1a3 = await this.waitEvent("sc_lost_valley_notify");
      let _0x10ae82 = JSON.parse(_0x54e1a3.gameBody[_0x54e1a3.gameBody.length - 1].raw);
      _0x54e1a3.gameBody.splice(0, _0x54e1a3.gameBody.length);
      let _0x12e9bb = ItemManager.getInstance().getItemNumById(101307);
      addGameLog("当前层数:" + _0x10ae82.curFoor + "行动力:" + _0x12e9bb);
      let _0x3241b1 = _0x10ae82.openList;
      let _0xd3d2de = _0x3241b1.length ? _0x3241b1.find(_0x16b896 => _0x16b896.type == 1) : null;
      if (_0x3241b1.length && _0xd3d2de) {
        addGameLog("存在获取 特殊事件");
        const _0x38526f = {
          type: 4,
          activity: 1,
          index: _0xd3d2de.no,
          item: 0,
          petList: []
        };
        await this.send_message("cs_lost_valley", _0x38526f);
        await wait(200);
        continue;
      }
      let _0x45bd4d = _0x10ae82.enAblePointList;
      if (!_0x45bd4d.length || _0x12e9bb <= 0) {
        addGameLog("暂无可解锁格子,尝试解锁对战");
        let _0x353a9e = _0x3241b1.length ? _0x3241b1.find(_0x29ab3b => _0x29ab3b.type == 2 && _0x29ab3b.value[0] != 1693) : null;
        if (_0x3241b1.length && _0x353a9e) {
          addGameLog("存在对战 特殊事件");
          this.nowOpen = _0x353a9e;
          if (MFC.userInfo.curEnergy < 5) {
            addGameLog("电池数不足5 迷途河谷完成");
            return;
          }
          await this.valleyBattle();
          await wait(200);
          continue;
        } else {
          let _0x3eab80 = _0x3241b1.length ? _0x3241b1.find(_0x47045e => _0x47045e.type == 3) : null;
          if (_0x3eab80) {
            const _0x5d155c = {
              type: 6,
              activity: 1,
              index: _0x3eab80.no,
              item: 0,
              petList: []
            };
            await this.send_message("cs_lost_valley", _0x5d155c);
            await wait(200);
            continue;
          }
          if (_0x12e9bb > 0) {
            addGameLog(`运气不佳
 被无限恐惧勇气号卡住
请手动通关`);
          } else {
            addGameLog("迷途河谷完成");
          }
          return;
        }
      }
      if (_0x12e9bb <= 0) {
        addGameLog("行动力不足!");
        return;
      }
      const _0x47091a = {
        type: 2,
        activity: 1,
        index: _0x45bd4d[0].no,
        item: 0,
        petList: []
      };
      await this.send_message("cs_lost_valley", _0x47091a);
    }
  }
  async getMaxPowerSkillId(_0x5a5ce4) {
    let _0x553e92 = [10057, 30011, 31598, 31993, 32299, 100125];
    let _0x12fdb0 = _0x5a5ce4.useSkills;
    let _0x126368 = [];
    for (var _0x185b4e = 0; _0x185b4e < _0x12fdb0.length; _0x185b4e++) {
      if (_0x553e92.includes(_0x12fdb0[_0x185b4e].id)) {
        continue;
      }
      let _0x52620c = petConfig.SkillConfig.getDef(_0x12fdb0[_0x185b4e].id);
      if (_0x12fdb0[_0x185b4e].crtPP > 0 && _0x52620c.atkType != 5 && _0x52620c.atkType != 6 && _0x52620c.skillPower > 0) {
        _0x126368.push({
          id: _0x52620c.id,
          power: parseInt(_0x52620c.skillPower)
        });
      }
    }
    if (_0x126368.length) {
      let _0x539f5a = _0x126368.reduce((_0x3641df, _0xcc65b5) => {
        if (_0x3641df.power > _0xcc65b5.power) {
          return _0x3641df;
        } else {
          return _0xcc65b5;
        }
      });
      return _0x539f5a.id;
    }
    return 0;
  }
  async changePet(_0x27d181, _0x567c5d) {
    let _0x27332b = this.getPetIndex(_0x27d181, _0x567c5d);
    await this.send_message("cs_online_load_battle_result", {
      groupId: ""
    });
    addGameLog("切换精灵index " + _0x27332b);
    const _0xe35c28 = {
      petIndex: _0x27332b
    };
    const _0x5f37b2 = {
      opType: 2,
      data: _0xe35c28,
      groupId: ""
    };
    await this.send_message("cs_online_player_operation", _0x5f37b2);
    let _0xc4f237 = await this.waitEvent("sc_battle_notify_round_result");
    let _0x9e7a67 = JSON.parse(_0xc4f237.gameBody[_0xc4f237.gameBody.length - 1].raw);
    _0xc4f237.gameBody.splice(0, _0xc4f237.gameBody.length);
    return _0x9e7a67;
  }
  getPetIndex(_0x369699, _0x332cb3) {
    for (var _0x4de0d7 = 0; _0x4de0d7 < _0x369699.length; _0x4de0d7++) {
      var _0x149296 = _0x369699[_0x4de0d7];
      if (_0x149296.crtHp > 0 && _0x4de0d7 != _0x332cb3) {
        return _0x4de0d7;
      }
    }
    return 0;
  }
  async valleyBattle() {
    var _0x37fc61 = xls.activityCard.getItem(this.nowOpen.value[0]);
    var _0x36c371 = xls.pveBoss.getItem(_0x37fc61.bossID);
    let _0x8998f4 = _0x36c371.affects.split("*").filter(_0x1dadc0 => _0x1dadc0.startsWith("61"));
    var _0x31713f = PetConfig.getDef(+_0x36c371.petID.split("_")[0]);
    if (_0x31713f.name == "情报伊米特") {
      _0x8998f4 = ["1689"];
    }
    if (_0x8998f4.length) {
      addGameLog("存在免疫属性技能的buff,随机上阵6只血量最高的精灵");
      const _0x21809f = PetManager.getInstance().getAllPets().filter(_0x5c9780 => _0x5c9780.getTime != this.leiyi.getTime);
      const _0x1a2b2f = _0x21809f.slice().sort((_0x3e01df, _0x449e12) => {
        const _0x224c3c = _0x3e01df.battleValues[0];
        const _0x1413fd = _0x449e12.battleValues[0];
        return _0x1413fd - _0x224c3c;
      });
      var _0x57d14e = _0x1a2b2f.slice(0, 5);
      _0x57d14e.push(this.leiyi);
    }
    addGameLog("对战: " + _0x31713f.name);
    while (1) {
      if (_0x8998f4.length) {
        await this.send_message("cs_lost_valley", {
          type: 5,
          activity: 1,
          index: this.nowOpen.no,
          item: 0,
          petList: _0x57d14e.map(_0x3fc8c0 => _0x3fc8c0.getTime)
        });
      } else {
        await this.send_message("cs_lost_valley", {
          type: 5,
          activity: 1,
          index: this.nowOpen.no,
          item: 0,
          petList: [this.bei.getTime]
        });
      }
      let _0x2f5006 = await this.initBattle();
      let _0x4cbc69 = 0;
      while (_0x2f5006.result.result == 0) {
        let _0x330f4a = _0x2f5006.result.playerInfos.find(_0xd5911d => _0xd5911d.uid == _0x2f5006.uid__);
        let _0x4868fc = _0x330f4a.crtPetIndex;
        if (_0x8998f4.length) {
          let _0x1d8676 = _0x2f5006.result.playerInfos.find(_0x16c465 => _0x16c465.uid == _0x2f5006.uid__).nextRoundOP;
          if (_0x1d8676 == 3) {
            addGameLog("被击败,更换精灵!");
            _0x2f5006 = await this.changePet(_0x330f4a.petInfos, _0x4868fc);
          } else {
            let _0x44804c = await this.getMaxPowerSkillId(_0x330f4a.petInfos[_0x4868fc]);
            if ((_0x44804c == 10825 || _0x44804c == 100484) && _0x31713f.name == "情报伊米特") {
              if (_0x4cbc69 == 0) {
                _0x4cbc69 = 1;
                _0x44804c = 100483;
              } else {
                _0x4cbc69 = 0;
              }
            }
            _0x2f5006 = await this.useSkill(_0x44804c);
          }
          continue;
        }
        let _0x30c9f9 = _0x2f5006.result.processQueue.find(_0x52a40d => _0x52a40d.uid !== _0x2f5006.uid__).affects;
        _0x30c9f9 = _0x30c9f9.filter(_0x34c17f => _0x34c17f.args.length && _0x34c17f.args[0] >= 1 && [1, 2, 3, 4, 5].includes(_0x34c17f.id));
        logger(_0x30c9f9, "emAffects");
        if (_0x30c9f9.length) {
          addGameLog("消强");
          _0x2f5006 = await this.useSkill(100942);
          continue;
        }
        if (_0x2f5006.result.roundNum <= 4) {
          addGameLog("回合数小于等于4 嗜血");
          _0x2f5006 = await this.useSkill(100943);
          continue;
        }
        let _0x5e6eba = _0x330f4a.petInfos[0];
        if (_0x5e6eba.crtHp <= 250) {
          addGameLog("HP不足250 嗜血");
          _0x2f5006 = await this.useSkill(100943);
          continue;
        }
        const _0x21d7d5 = Math.random();
        if (_0x21d7d5 < 1 / 5) {
          _0x2f5006 = await this.useSkill(100940);
        } else {
          _0x2f5006 = await this.useSkill(100941);
        }
      }
      if (_0x2f5006.result.result == 2) {
        addGameLog("被击败 重新尝试!");
      }
      if (_0x2f5006.result.result == 1) {
        addGameLog("顺利击败!");
        break;
      }
    }
  }
  async Auberyui() {
    super.start();
    let _0x279550 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0xa41ba6 = [];
      var _0x6eb9b = SimpleAlertUi({
        height: 200,
        width: 370
      });
      _0x279550.alertWin = _0x6eb9b;
      const _0x2b3de9 = {
        text: "奥布雷",
        x: _0x6eb9b.applicationWidth / 2 - 30,
        y: _0x6eb9b.height / 15
      };
      let _0x4c30c7 = createLabel(_0x2b3de9);
      _0x4c30c7.size = 20;
      _0xa41ba6.push(_0x4c30c7);
      const _0x31a8f7 = {
        text: "奥布雷使用瞬杀光闪击需要有光之引导",
        x: _0x6eb9b.applicationWidth / 6 - 40,
        y: _0x4c30c7.y + 40
      };
      let _0x50a004 = createLabel(_0x31a8f7);
      _0xa41ba6.push(_0x50a004);
      _0x279550.addAllUis(_0xa41ba6);
      _0x6eb9b.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x279550.stop();
      }, function () {
        _0x279550.Auberychallenge();
      }], null);
      _0x6eb9b.showAlert();
    });
  }
  async Auberychallenge() {
    let _0x4d0cdc = PetManager.getInstance().getAllPets().map(_0x1d5f01 => {
      if ((_0x1d5f01.skills.indexOf(10630) != -1 || _0x1d5f01.skills.indexOf(100023) != -1) && _0x1d5f01.skills.indexOf(100139) != -1 && (_0x1d5f01.featureId == 5 || _0x1d5f01.featureId == 6 || _0x1d5f01.featureId == 7 || _0x1d5f01.featureId == 8)) {
        return _0x1d5f01;
      }
    }).filter(_0x21995c => _0x21995c !== undefined).sort((_0x599b1f, _0x3a381a) => _0x3a381a.featureId - _0x599b1f.featureId)[0];
    if (!_0x4d0cdc) {
      addGameLog("背包没有瞬杀光闪击或者没带光之引导");
      this.stop();
    } else {
      timer.change(1 / 15);
      while (true) {
        let _0x3b25a2 = await this.send_message("cs_Aubery_output_op", {
          type: 1,
          itemId: 0,
          eventChoice: 0,
          petGetTime: [],
          giftBagId: 0
        });
        if (_0x3b25a2.eventId.length > 0) {
          await this.auberystories();
        }
        let _0x46a28a = MFC.attr.getAttr(MFC.attrType.dailyAuberyOpLevelId) + 1;
        await this.send_message("cs_Aubery_output_op", {
          type: 4,
          itemId: 0,
          eventChoice: 0,
          petGetTime: [_0x4d0cdc.getTime.toString(), PetManager.getInstance().getAllPets()[0].getTime.toString()],
          giftBagId: 0
        });
        if (MFC.userInfo.curEnergy < xls.activityCard.getItem(1162 + _0x46a28a).energy.split("_")[0]) {
          addGameLog("电池不足");
          break;
        } else if (_0x46a28a > 21) {
          addGameLog("奥布雷已经打完");
          break;
        } else if (_0x46a28a == 17) {
          await this.send_message("cs_Aubery_output_op", {
            eventChoice: 0,
            giftBagId: 0,
            itemId: 0,
            petGetTi: [_0x4d0cdc.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            type: 3
          });
          await this.initBattle();
          let _0x3f0587;
          if (_0x4d0cdc.skills.indexOf(10630) != -1) {
            _0x3f0587 = 10630;
          } else {
            _0x3f0587 = 100023;
          }
          let _0x4d1f14 = await this.useSkill(100139);
          if (_0x4d1f14.result.playerInfos[0].uid == MFC.userInfo.uid) {
            if (_0x4d1f14.result.playerInfos[0].nextRoundOP == 3) {
              addGameLog("瞬杀被击败,逃跑");
              await this.send_message("cs_quit_battle", {});
            } else {
              _0x4d1f14 = await this.useSkill(_0x3f0587);
            }
          } else if (_0x4d1f14.result.playerInfos[0].nextRoundOP == 3) {
            addGameLog("瞬杀被击败,逃跑");
            await this.send_message("cs_quit_battle", {});
          } else {
            _0x4d1f14 = await this.useSkill(_0x3f0587);
          }
          if (_0x4d1f14.result.result === 1) {
            addGameLog("顺利击杀奥布雷第" + _0x46a28a + "层");
            i++;
          } else {
            addGameLog("未击杀奥布雷第" + _0x46a28a + "层");
          }
          await this.send_message("cs_quit_battle", {});
        } else {
          await this.send_message("cs_Aubery_output_op", {
            eventChoice: 0,
            giftBagId: 0,
            itemId: 0,
            petGetTi: [_0x4d0cdc.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            type: 3
          });
          await this.initBattle();
          let _0x5dc41a;
          if (_0x4d0cdc.skills.indexOf(10630) != -1) {
            _0x5dc41a = 10630;
          } else {
            _0x5dc41a = 100023;
          }
          let _0x43759d = await this.useSkill(_0x5dc41a);
          if (_0x43759d.result.result === 1) {
            addGameLog("顺利击杀奥布雷第" + _0x46a28a + "层");
            i++;
          } else {
            addGameLog("未击杀奥布雷第" + _0x46a28a + "层");
          }
          await this.send_message("cs_quit_battle", {});
        }
      }
    }
    await this.auberystoriesreward();
    addGameLog("奥布雷结束");
    this.stop();
  }
  async auberystories() {
    if (!xls.randomEvent.hasLoaded) {
      xls.randomEvent.load(() => {});
    }
    var _0x375efc = [];
    var _0x4804bf = MFC.attr.getAttr(MFC.attrType.dailyAuberyOpMemory);
    for (var _0x32bbf8 = 2; _0x32bbf8 <= 9; _0x32bbf8++) {
      if (BitUtils.getBit(_0x4804bf, _0x32bbf8) > 0) {
        _0x375efc.push(_0x32bbf8 - 1 + 71);
      }
    }
    let _0x59fffd = [72, 75, 77, 73, 76, 74, 78, 79];
    let _0x2cbf15 = await this.send_message("cs_Aubery_output_op", {
      type: 1,
      itemId: 0,
      eventChoice: 0,
      petGetTime: [],
      giftBagId: 0
    });
    let _0x196077 = _0x59fffd.filter(_0x149e37 => _0x375efc.includes(_0x149e37));
    _0x59fffd = _0x59fffd.filter(_0x210675 => !_0x196077.includes(_0x210675));
    if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.foreverAuberyOpStory), 10) > 0) {
      let _0x5e237c = _0x59fffd.filter(_0x32e0d6 => _0x2cbf15.eventId.includes(_0x32e0d6));
      if (_0x5e237c.length > 0) {
        const _0x2ec682 = {
          type: 2,
          itemId: 0,
          eventChoice: _0x5e237c[0],
          petGetTime: [],
          giftBagId: 0
        };
        await this.send_message("cs_Aubery_output_op", _0x2ec682);
      } else {
        const _0x21ac81 = {
          type: 2,
          itemId: 0,
          eventChoice: _0x2cbf15.eventId[0],
          petGetTime: [],
          giftBagId: 0
        };
        await this.send_message("cs_Aubery_output_op", _0x21ac81);
      }
    } else {}
  }
  async auberystoriesreward() {
    await this.send_message("cs_Aubery_output_op", {
      type: 6,
      itemId: 0,
      eventChoice: 0,
      petGetTime: [],
      giftBagId: 0
    });
    for (let _0x30f19d = 0; _0x30f19d < 13; _0x30f19d++) {
      if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.foreverAuberyOpStory), _0x30f19d + 1) > 0) {
        if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.foreverAuberyOpStory), _0x30f19d + 14) < 1) {
          const _0x4ea8a9 = {
            type: 7,
            itemId: 0,
            eventChoice: 0,
            petGetTime: [],
            giftBagId: _0x30f19d + 1
          };
          await this.send_message("cs_Aubery_output_op", _0x4ea8a9);
        }
      }
    }
  }
  async kunlui() {
    super.start();
    let _0x249603 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x2757d3 = [];
      var _0x91ac89 = SimpleAlertUi({
        height: 200,
        width: 300
      });
      _0x249603.alertWin = _0x91ac89;
      const _0x507a79 = {
        x: _0x91ac89.width / 3.75,
        y: _0x91ac89.height / 4.25,
        selected: true,
        storageKey: "kl1"
      };
      let _0x5973d1 = createRadio(_0x507a79);
      _0x2757d3.push(_0x5973d1);
      const _0x39c70f = {
        text: "请在圆点点击选择类型",
        x: 25 + _0x5973d1.width,
        y: _0x91ac89.height / 10
      };
      var _0x5032e5 = createLabel(_0x39c70f);
      _0x2757d3.push(_0x5032e5);
      const _0x23d0bb = {
        text: "经典模式",
        x: _0x5973d1.x + 10 + _0x5973d1.width,
        y: _0x91ac89.height / 4.5
      };
      var _0x43d311 = createLabel(_0x23d0bb);
      _0x2757d3.push(_0x43d311);
      _0x249603.addAllUis(_0x2757d3);
      _0x91ac89.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x249603.stop();
      }, function () {
        localStorage.setItem("kl1", _0x5973d1.selected);
        if (_0x5973d1.selected) {
          _0x249603.kunlunui3();
        }
      }], null);
      _0x91ac89.showAlert();
    });
  }
  async kunlunui3() {
    super.start();
    let _0x4bccea = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      const _0x5a4fff = [];
      const _0xce20a8 = SimpleAlertUi({
        height: 400,
        width: 500
      });
      _0x4bccea.alertWin = _0xce20a8;
      const _0xad0afd = [{
        label: "第一关:",
        options: ["贝特卡恩", "艾夏拉", "长老"],
        group: "group1",
        storagePrefix: "fb1"
      }, {
        label: "第二关:",
        options: ["贝特卡恩", "雷伊", "长老"],
        group: "group2",
        storagePrefix: "fb2"
      }, {
        label: "第三关:",
        options: ["缪斯", "艾夏拉", "长老", "蒂朵"],
        group: "group3",
        storagePrefix: "fb3"
      }, {
        label: "第四关:",
        options: ["贝特卡恩", "艾夏拉", "蒂朵"],
        group: "group4",
        storagePrefix: "fb4"
      }, {
        label: "第五关:",
        options: ["塞维尔", "艾夏拉", "长老", "蒂朵"],
        group: "group5",
        storagePrefix: "fb5"
      }, {
        label: "第六关:",
        options: ["塞维尔", "艾夏拉", "长老", "蒂朵", "雷伊"],
        group: "group6",
        storagePrefix: "fb6"
      }];
      let _0x5ab200 = 20;
      const _0x11f0a0 = {};
      _0xad0afd.forEach((_0x56467f, _0x402a08) => {
        const _0x51eb30 = {
          text: _0x56467f.label,
          x: 25,
          y: _0x5ab200
        };
        const _0x41950e = createLabel(_0x51eb30);
        _0x5a4fff.push(_0x41950e);
        let _0x35305d = _0x41950e.x + _0x41950e.width + 20;
        _0x11f0a0[_0x56467f.group] = [];
        _0x56467f.options.forEach((_0x931f8a, _0x4b1135) => {
          const _0x1e104f = "" + _0x56467f.storagePrefix + (_0x4b1135 + 1);
          const _0x36898d = localStorage.getItem(_0x1e104f) === "true";
          const _0x25c6de = localStorage.getItem(_0x1e104f) !== null ? _0x36898d : _0x4b1135 === 0;
          const _0x236ba0 = {
            x: _0x35305d,
            y: _0x5ab200,
            selected: _0x25c6de,
            storageKey: _0x1e104f,
            groupName: _0x56467f.group,
            optionValue: _0x931f8a
          };
          const _0x521e5f = createRadio(_0x236ba0);
          _0x5a4fff.push(_0x521e5f);
          _0x11f0a0[_0x56467f.group].push(_0x521e5f);
          const _0x184bc0 = {
            text: _0x931f8a,
            x: _0x521e5f.x + 20,
            y: _0x5ab200
          };
          const _0xf1b220 = createLabel(_0x184bc0);
          _0x5a4fff.push(_0xf1b220);
          _0x35305d = _0xf1b220.x + _0xf1b220.width + 20;
        });
        _0x5ab200 += 30;
      });
      let _0x3139ac = createLabel({
        text: `贝特卡恩需要增幅技能狂暴血怒+嗜血+血气之刃+血煞列刃爪
注意第四关用贝特卡恩会久一点
长老带灭世歼星炮   蒂朵带异维守护增幅
缪斯皎月圆舞曲+苍月夜想曲   雷伊充电增幅+电光炽刃
艾夏拉移形换影+虚妄幻境+常.天劫余生`,
        x: 25,
        y: 200,
        textColor: 16776960
      });
      _0x5a4fff.push(_0x3139ac);
      _0x4bccea.addAllUis(_0x5a4fff);
      const _0x354cec = () => {
        Object.keys(_0x11f0a0).forEach(_0x81791d => {
          const _0x38621d = _0x11f0a0[_0x81791d];
          const _0xcafd8b = _0x38621d.find(_0x2504d9 => _0x2504d9.selected);
          _0x38621d.forEach(_0x386ec3 => {
            localStorage.setItem(_0x386ec3.storageKey, _0x386ec3 === _0xcafd8b);
          });
          if (_0xcafd8b) {
            _0x4bccea[_0x81791d] = _0xcafd8b.optionValue;
          }
        });
      };
      _0xce20a8.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [() => {
        _0x4bccea.stop();
      }, () => {
        _0x354cec();
        _0x4bccea.kunlunchoise();
      }], null);
      _0xce20a8.showAlert();
    });
  }
  async kunlunchoise() {
    let _0x26bf1e = [this.group1, this.group2, this.group3, this.group4, this.group5, this.group6];
    for (let _0x15755b = 0; _0x15755b < _0x26bf1e.length; _0x15755b++) {
      if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), _0x15755b * 2 + 1) + BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), _0x15755b * 2 + 2) < 1) {
        let _0x2e2168;
        if (_0x26bf1e[_0x15755b] == "贝特卡恩") {
          _0x2e2168 = await this.klcheckbtke();
        } else if (_0x26bf1e[_0x15755b] == "艾夏拉") {
          _0x2e2168 = await this.klcheckaxl();
        } else if (_0x26bf1e[_0x15755b] == "长老") {
          _0x2e2168 = await this.klcheckzl();
        } else if (_0x26bf1e[_0x15755b] == "蒂朵") {
          _0x2e2168 = await this.klcheckdd();
        } else if (_0x26bf1e[_0x15755b] == "雷伊") {
          _0x2e2168 = await this.klcheckly();
        } else if (_0x26bf1e[_0x15755b] == "缪斯") {
          _0x2e2168 = await this.klcheckms();
        } else if (_0x26bf1e[_0x15755b] == "塞维尔") {
          _0x2e2168 = await this.klcheckswe();
        }
        if (_0x2e2168) {
          let _0x2d5281 = 0;
          while (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), _0x15755b * 2 + 1) + BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), _0x15755b * 2 + 2) < 1 && (_0x15755b === 0 || BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), (_0x15755b - 1) * 2 + 1) + BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), (_0x15755b - 1) * 2 + 2) > 0)) {
            if (MFC.userInfo.curEnergy >= 3) {
              await this.send_message("cs_fight_boss_start_battle", {
                battleType: 36,
                getTimeList: [_0x2e2168.getTime, PetManager.getInstance().getAllPets()[0]],
                subId: 110 + _0x15755b
              });
              let _0x4ad52f = await this.initBattle();
              if (_0x26bf1e[_0x15755b] == "贝特卡恩") {
                _0x4ad52f = await this.klbtkeba();
              } else if (_0x26bf1e[_0x15755b] == "艾夏拉") {
                _0x4ad52f = await this.klaxlba();
              } else if (_0x26bf1e[_0x15755b] == "长老") {
                _0x4ad52f = await this.klzlba();
              } else if (_0x26bf1e[_0x15755b] == "蒂朵") {
                _0x4ad52f = await this.klddba();
              } else if (_0x26bf1e[_0x15755b] == "雷伊") {
                _0x4ad52f = await this.kllyba();
              } else if (_0x26bf1e[_0x15755b] == "缪斯") {
                _0x4ad52f = await this.klmsba();
              } else if (_0x26bf1e[_0x15755b] == "塞维尔") {
                _0x4ad52f = await this.klsweba();
              }
              if (!_0x4ad52f) {
                _0x2d5281++;
              }
              if (_0x2d5281 > 3) {
                addGameLog("超过三次没打死,防止浪费体力退出");
                break;
              }
            } else {
              addGameLog("电池不足");
              break;
            }
          }
        } else {
          break;
        }
      }
    }
    addGameLog("开始扫荡");
    for (let _0xb1bc2b = 5; _0xb1bc2b >= 0; _0xb1bc2b--) {
      while (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), _0xb1bc2b * 2 + 1) + BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), _0xb1bc2b * 2 + 2) < 2 && BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), _0xb1bc2b * 2 + 1) + BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyKunlunChallengeEasyBossStatus), _0xb1bc2b * 2 + 2) > 0) {
        if (MFC.userInfo.curEnergy >= 3) {
          const _0x3aa5dc = {
            battleType: 36,
            subId: 110 + _0xb1bc2b,
            times: 1
          };
          await this.send_message("cs_fight_boss_start_battle_sd", _0x3aa5dc);
        } else {
          addGameLog("电池不足");
          break;
        }
      }
    }
    addGameLog("昆仑结束");
    this.stop();
  }
  async klcheckbtke() {
    let _0x5a6f7c = getGoalPets([{
      skills: [100940, 100943, 100939, 100941]
    }]);
    if (_0x5a6f7c) {
      return _0x5a6f7c;
    } else {
      addGameLog("贝特卡恩技能不符合狂暴血怒+嗜血+血煞列刃爪+血气之刃");
      return false;
    }
  }
  async klcheckaxl() {
    let _0x24870 = getGoalPets([{
      skills: [33068, 43350, 33070]
    }]);
    if (_0x24870) {
      return _0x24870;
    } else {
      addGameLog("艾夏拉技能不符合移形换影+虚妄幻境+常.天劫余生");
      return false;
    }
  }
  async klcheckzl() {
    let _0x36bb46 = getGoalPets([{
      skills: [32127]
    }]);
    if (_0x36bb46) {
      return _0x36bb46;
    } else {
      addGameLog("赫鲁卡长老技能不符合灭世歼星炮");
      return false;
    }
  }
  async klcheckdd() {
    let _0x3a30e7 = getGoalPets([{
      skills: [100604]
    }]);
    if (_0x3a30e7) {
      return _0x3a30e7;
    } else {
      addGameLog("蒂朵技能不符合异维守护");
      return false;
    }
  }
  async klcheckly() {
    let _0x5de918 = getGoalPets([{
      skills: [100483, 15894]
    }]);
    if (_0x5de918) {
      return _0x5de918;
    } else {
      addGameLog("雷伊技能不符合充电+电光炽刃");
      return false;
    }
  }
  async klcheckms() {
    let _0x59173c = getGoalPets([{
      skills: [23505, 23506]
    }]);
    if (_0x59173c) {
      return _0x59173c;
    } else {
      addGameLog("缪斯技能不符合皎月+苍月");
      return false;
    }
  }
  async klcheckswe() {
    let _0xad24c9 = getGoalPets([{
      skills: [100838]
    }]);
    if (_0xad24c9) {
      return _0xad24c9;
    } else {
      addGameLog("塞维尔技能不符合龙腾裂天震增幅");
      return false;
    }
  }
  async klbtkeba() {
    let _0x50d2a0 = [100940, 100943, 100943, 100940, 100943, 100939, 100941, 100941, 100940, 100940, 100941, 100941, 100941, 100941];
    let _0x36b332 = await this.useSkill(_0x50d2a0[0]);
    let _0x430637 = 1;
    let _0x58361c = false;
    while (_0x36b332.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x36b332 = await this.useSkill(_0x50d2a0[_0x430637]);
      if (_0x36b332.result.roundNum > 30 && _0x36b332.result.roundNum < 32) {
        _0x58361c = true;
      }
      if (_0x58361c) {
        _0x430637 = 8;
        _0x58361c = false;
      }
      if (_0x430637 >= 6 && _0x430637 < 8) {
        _0x430637 = 0;
      } else if (_0x430637 >= 12) {
        _0x430637 = 8;
      }
      _0x430637++;
      let _0x367158 = _0x36b332.result.playerInfos.find(_0x1ce181 => _0x1ce181.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x367158 !== 1) {
        addGameLog("首发被击败");
        return false;
      }
    }
    if (_0x36b332.result.result == 2) {
      return false;
    }
  }
  async klaxlba() {
    let _0x65e75c = [33068, 43350, 33070];
    let _0x15240e = await this.useSkill(_0x65e75c[0]);
    let _0x823948 = 1;
    while (_0x15240e.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x15240e = await this.useSkill(_0x65e75c[_0x823948]);
      if (_0x823948 >= 2) {
        _0x823948 = 1;
      }
      _0x823948++;
      let _0x120748 = _0x15240e.result.playerInfos.find(_0x474e52 => _0x474e52.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x120748 !== 1) {
        addGameLog("首发被击败");
        return false;
      }
    }
    if (_0x15240e.result.result == 2) {
      return false;
    }
  }
  async klzlba() {
    let _0x326cbf = [32127, 32127];
    let _0x4d5f46 = await this.useSkill(_0x326cbf[0]);
    let _0x55611f = 1;
    while (_0x4d5f46.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x4d5f46 = await this.useSkill(_0x326cbf[_0x55611f]);
      if (_0x55611f >= 1) {
        _0x55611f = 0;
      }
      _0x55611f++;
      let _0x35580b = _0x4d5f46.result.playerInfos.find(_0x545bc9 => _0x545bc9.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x35580b !== 1) {
        addGameLog("首发被击败");
        return false;
      }
    }
    if (_0x4d5f46.result.result == 2) {
      return false;
    }
  }
  async kllyba() {
    let _0x3021a0 = [100483, 15894];
    let _0x179865 = await this.useSkill(_0x3021a0[0]);
    let _0x5d92b9 = 1;
    while (_0x179865.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x179865 = await this.useSkill(_0x3021a0[_0x5d92b9]);
      if (_0x5d92b9 >= 1) {
        _0x5d92b9 = -1;
      }
      _0x5d92b9++;
      let _0x2264a4 = _0x179865.result.playerInfos.find(_0x9f0937 => _0x9f0937.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x2264a4 !== 1) {
        addGameLog("首发被击败");
        return false;
      }
    }
    if (_0x179865.result.result == 2) {
      return false;
    }
  }
  async klmsba() {
    let _0x2bb97d = [23505, 23505, 23506];
    let _0x405ef6 = await this.useSkill(_0x2bb97d[0]);
    let _0x24c327 = 1;
    while (_0x405ef6.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x405ef6 = await this.useSkill(_0x2bb97d[_0x24c327]);
      if (_0x24c327 >= 2) {
        _0x24c327 = 1;
      }
      _0x24c327++;
      let _0x4fe687 = _0x405ef6.result.playerInfos.find(_0x47a9db => _0x47a9db.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x4fe687 !== 1) {
        addGameLog("首发被击败");
        return false;
      }
    }
    if (_0x405ef6.result.result == 2) {
      return false;
    }
  }
  async klsweba() {
    let _0x3bc915 = 100838;
    let _0x273fd9 = await this.useSkill(_0x3bc915);
    let _0x576163 = 1;
    while (_0x273fd9.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x273fd9 = await this.useSkill(_0x3bc915);
      _0x576163++;
      if (_0x576163 >= 3) {
        return false;
      }
    }
  }
  async klddba() {
    let _0x50960d = 100604;
    let _0x1f8c27 = await this.useSkill(_0x50960d);
    let _0x39d2a1 = 1;
    while (_0x1f8c27.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x1f8c27 = await this.useSkill(_0x50960d);
      _0x39d2a1++;
      if (_0x39d2a1 >= 4) {
        return false;
      }
    }
    if (_0x1f8c27.result.result == 2) {
      return false;
    }
  }
  async kingshadowui() {
    super.start();
    let _0x52fee1 = this;
    MFC.alert.show(`确定进行影皇吗
1.需要雷伊带雷神天命闪 
闪电斗气(带符文)
充电(带符文)
两只精英需要缪斯
2.默认优先打架获取高奖励然后再开箱子拿奖励
3.太空站精英boss需要手打让他自杀即可`, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0xef3a8a) {
      _0x52fee1.stop();
    }, function (_0x46928d) {
      _0x52fee1.kingshadow2();
    }]);
  }
  async kingshadow2() {
    while (true) {
      await wait(500);
      if (MFC.attr.getAttr(18888) < 5000) {
        let _0x1fccb9 = PetManager.getInstance().getAllPets().map(_0x46a8a7 => {
          if ((_0x46a8a7.skills.indexOf(10825) != -1 || _0x46a8a7.skills.indexOf(100484) != -1) && _0x46a8a7.skills.indexOf(100531) != -1 && _0x46a8a7.skills.indexOf(100483) != -1) {
            return _0x46a8a7;
          }
        }).filter(_0x494597 => _0x494597 !== undefined)[0];
        if (_0x1fccb9 == undefined) {
          MFC.alert.show("雷伊需要带 雷神天命闪 闪电斗气(带符文) 充电(带符文)");
          break;
        } else {
          let _0x20b9a8 = await this.send_message("cs_edgeLighting", {});
          let _0x5212c9 = [];
          logger(_0x20b9a8);
          if (_0x20b9a8.eventList.length == 3) {
            logger("不是精英");
            if (_0x20b9a8.eventList.findIndex(_0xc1c1f5 => _0xc1c1f5.state === 1) != -1) {
              logger("已选择第" + (_0x20b9a8.eventList.findIndex(_0x44997a => _0x44997a.state === 1) + 1) + "事件id" + _0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x4fa5b7 => _0x4fa5b7.state === 1)].eventId + "Bossid" + _0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x8e0529 => _0x8e0529.state === 1)].bossId);
              if (_0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x264c98 => _0x264c98.state === 1)].bossId == 5481 || _0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x3a43d0 => _0x3a43d0.state === 1)].bossId == 5498) {
                addGameLog("反弹限制伤害怪请手打");
                break;
              } else if (_0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0xcba9 => _0xcba9.state === 1)].bossId == 5488 || _0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x4589ff => _0x4589ff.state === 1)].bossId == 5490 || _0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x37775b => _0x37775b.state === 1)].bossId == 5492 || _0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x5237fa => _0x5237fa.state === 1)].bossId == 5494) {
                logger("雷伊连续两次大招即可");
                if (MFC.userInfo.curEnergy < 5) {
                  addGameLog("电池不足");
                  break;
                } else {
                  await this.send_message("cs_event_interaction", {
                    eventId: _0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x2ee793 => _0x2ee793.state === 1)].eventId,
                    index: 0
                  });
                  const _0x397445 = {
                    petList: [_0x1fccb9.getTime]
                  };
                  await this.send_message("cs_edge_lighting_start_battle", _0x397445);
                  let _0x2a10cd = await this.waitEvent("sc_battle_notify_load_resource");
                  _0x2a10cd.gameBody.splice(0, _0x2a10cd.gameBody.length);
                  await this.send_message("cs_online_load_resource", {
                    groupId: "",
                    battleType: 0
                  });
                  await wait(300);
                  await this.send_message("cs_online_player_operation", {
                    opType: 5,
                    data: null,
                    groupId: ""
                  });
                  _0x2a10cd = await this.waitEvent("sc_battle_notify_round_result");
                  let _0x537d74 = JSON.parse(_0x2a10cd.gameBody[_0x2a10cd.gameBody.length - 1].raw);
                  _0x2a10cd.gameBody.splice(0, _0x2a10cd.gameBody.length);
                  logger("回合开始");
                  await wait(300);
                  if (_0x1fccb9.skills.indexOf(10825) != -1) {
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(10825).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 10825
                      },
                      groupId: ""
                    });
                  }
                  if (_0x1fccb9.skills.indexOf(100484) != -1) {
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100484).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 100484
                      },
                      groupId: ""
                    });
                  }
                  _0x2a10cd = await this.waitEvent("sc_battle_notify_round_result");
                  _0x537d74 = JSON.parse(_0x2a10cd.gameBody[_0x2a10cd.gameBody.length - 1].raw);
                  _0x2a10cd.gameBody.splice(0, _0x2a10cd.gameBody.length);
                  while (_0x537d74.result.result == 0) {
                    addGameLog("未被击败，继续攻击");
                    if (_0x1fccb9.skills.indexOf(10825) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(10825).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 10825
                        },
                        groupId: ""
                      });
                    }
                    if (_0x1fccb9.skills.indexOf(100484) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100484).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 100484
                        },
                        groupId: ""
                      });
                    }
                    _0x2a10cd = await this.waitEvent("sc_battle_notify_round_result");
                    _0x537d74 = JSON.parse(_0x2a10cd.gameBody[_0x2a10cd.gameBody.length - 1].raw);
                    _0x2a10cd.gameBody.splice(0, _0x2a10cd.gameBody.length);
                    if (_0x537d74.result.roundNum > 5) {
                      break;
                    }
                  }
                }
              } else {
                logger("雷伊充电大招即可");
                if (MFC.userInfo.curEnergy < 5) {
                  addGameLog("电池不足");
                  break;
                } else if (_0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x3c5b76 => _0x3c5b76.state === 1)].bossId == 5479) {
                  await this.send_message("cs_event_interaction", {
                    eventId: _0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x2e9666 => _0x2e9666.state === 1)].eventId,
                    index: 0
                  });
                  await this.send_message("cs_edge_lighting_start_battle", {
                    petList: [_0x1fccb9.getTime, PetManager.getInstance().getAllPets()[0].getTime]
                  });
                  let _0x40d219 = await this.waitEvent("sc_battle_notify_load_resource");
                  _0x40d219.gameBody.splice(0, _0x40d219.gameBody.length);
                  await this.send_message("cs_online_load_resource", {
                    groupId: "",
                    battleType: 0
                  });
                  await wait(300);
                  await this.send_message("cs_online_player_operation", {
                    opType: 5,
                    data: null,
                    groupId: ""
                  });
                  _0x40d219 = await this.waitEvent("sc_battle_notify_round_result");
                  let _0x47b8db = JSON.parse(_0x40d219.gameBody[_0x40d219.gameBody.length - 1].raw);
                  _0x40d219.gameBody.splice(0, _0x40d219.gameBody.length);
                  logger("回合开始");
                  await wait(300);
                  addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100483).name);
                  await this.send_message("cs_online_player_operation", {
                    opType: 1,
                    data: {
                      skillID: 100483
                    },
                    groupId: ""
                  });
                  _0x40d219 = await this.waitEvent("sc_battle_notify_round_result");
                  _0x47b8db = JSON.parse(_0x40d219.gameBody[_0x40d219.gameBody.length - 1].raw);
                  _0x40d219.gameBody.splice(0, _0x40d219.gameBody.length);
                  while (_0x47b8db.result.result == 0) {
                    addGameLog("未被击败，继续攻击");
                    if (_0x1fccb9.skills.indexOf(10825) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(10825).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 10825
                        },
                        groupId: ""
                      });
                    }
                    if (_0x1fccb9.skills.indexOf(100484) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100484).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 100484
                        },
                        groupId: ""
                      });
                    }
                    _0x40d219 = await this.waitEvent("sc_battle_notify_round_result");
                    _0x47b8db = JSON.parse(_0x40d219.gameBody[_0x40d219.gameBody.length - 1].raw);
                    _0x40d219.gameBody.splice(0, _0x40d219.gameBody.length);
                    if (_0x47b8db.result.roundNum > 5) {
                      break;
                    }
                  }
                } else {
                  await this.send_message("cs_event_interaction", {
                    eventId: _0x20b9a8.eventList[_0x20b9a8.eventList.findIndex(_0x2b8304 => _0x2b8304.state === 1)].eventId,
                    index: 0
                  });
                  const _0x1f96d9 = {
                    petList: [_0x1fccb9.getTime]
                  };
                  await this.send_message("cs_edge_lighting_start_battle", _0x1f96d9);
                  let _0x2cd8f9 = await this.waitEvent("sc_battle_notify_load_resource");
                  _0x2cd8f9.gameBody.splice(0, _0x2cd8f9.gameBody.length);
                  await this.send_message("cs_online_load_resource", {
                    groupId: "",
                    battleType: 0
                  });
                  await wait(300);
                  await this.send_message("cs_online_player_operation", {
                    opType: 5,
                    data: null,
                    groupId: ""
                  });
                  _0x2cd8f9 = await this.waitEvent("sc_battle_notify_round_result");
                  let _0x1e6c41 = JSON.parse(_0x2cd8f9.gameBody[_0x2cd8f9.gameBody.length - 1].raw);
                  _0x2cd8f9.gameBody.splice(0, _0x2cd8f9.gameBody.length);
                  logger("回合开始");
                  await wait(300);
                  addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100483).name);
                  await this.send_message("cs_online_player_operation", {
                    opType: 1,
                    data: {
                      skillID: 100483
                    },
                    groupId: ""
                  });
                  _0x2cd8f9 = await this.waitEvent("sc_battle_notify_round_result");
                  _0x1e6c41 = JSON.parse(_0x2cd8f9.gameBody[_0x2cd8f9.gameBody.length - 1].raw);
                  _0x2cd8f9.gameBody.splice(0, _0x2cd8f9.gameBody.length);
                  while (_0x1e6c41.result.result == 0) {
                    addGameLog("未被击败，继续攻击");
                    if (_0x1fccb9.skills.indexOf(10825) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(10825).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 10825
                        },
                        groupId: ""
                      });
                    }
                    if (_0x1fccb9.skills.indexOf(100484) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100484).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 100484
                        },
                        groupId: ""
                      });
                    }
                    _0x2cd8f9 = await this.waitEvent("sc_battle_notify_round_result");
                    _0x1e6c41 = JSON.parse(_0x2cd8f9.gameBody[_0x2cd8f9.gameBody.length - 1].raw);
                    _0x2cd8f9.gameBody.splice(0, _0x2cd8f9.gameBody.length);
                    if (_0x1e6c41.result.roundNum > 5) {
                      break;
                    }
                  }
                }
              }
            } else {
              logger("还未选择");
              for (let _0x293d34 = 0; _0x293d34 < 3; _0x293d34++) {
                if (_0x20b9a8.eventList[_0x293d34].bossId !== 0 && _0x20b9a8.eventList[_0x293d34].bossId !== 5481 && _0x20b9a8.eventList[_0x293d34].bossId !== 5498) {
                  _0x5212c9[_0x293d34] = _0x20b9a8.eventList[_0x293d34];
                }
              }
              if (_0x5212c9.filter(_0x3978d1 => _0x3978d1 !== undefined).length !== 0) {
                logger("判断是否有高奖励");
                logger(_0x5212c9.filter(_0x282f27 => _0x282f27 !== undefined));
                let _0x8c2383 = _0x5212c9.filter(_0x221eea => _0x221eea !== undefined);
                let _0x17fc65 = [];
                for (let _0xf7b8e1 = 0; _0xf7b8e1 < _0x8c2383.length; _0xf7b8e1++) {
                  if (_0x8c2383[_0xf7b8e1].cfgId >= 1717 && _0x8c2383[_0xf7b8e1].cfgId <= 1726) {
                    _0x17fc65[_0xf7b8e1] = _0x8c2383[_0xf7b8e1];
                    logger("高奖励bossid" + _0x17fc65[_0xf7b8e1].bossId);
                  }
                }
                if (_0x17fc65.filter(_0x5a81dd => _0x5a81dd !== undefined).length !== 0) {
                  logger("高奖励" + _0x17fc65.filter(_0x477035 => _0x477035 !== undefined)[0].bossId);
                  await this.send_message("cs_select_event", {
                    eventId: _0x17fc65.filter(_0x39bca7 => _0x39bca7 !== undefined)[0].eventId
                  });
                } else {
                  logger("没有高奖励" + _0x8c2383.filter(_0xeeca80 => _0xeeca80 !== undefined)[0].bossId);
                  await this.send_message("cs_select_event", {
                    eventId: _0x8c2383.filter(_0x2a2ee5 => _0x2a2ee5 !== undefined)[0].eventId
                  });
                }
              } else {
                logger("没有对战选择低级祝福");
                for (let _0x25866a = 0; _0x25866a < _0x20b9a8.eventList.length; _0x25866a++) {
                  if (_0x20b9a8.eventList[_0x25866a].blessingList.length == 1 && _0x20b9a8.eventList[_0x25866a].bossId == 0) {
                    _0x5212c9[_0x25866a] = _0x20b9a8.eventList[_0x25866a];
                  }
                }
                if (_0x5212c9.filter(_0x292057 => _0x292057 !== undefined).length == 0) {
                  for (let _0x188185 = 0; _0x188185 < _0x20b9a8.eventList.length; _0x188185++) {
                    if (_0x20b9a8.eventList[_0x188185].eventId >= 156 && _0x20b9a8.eventList[_0x188185].eventId >= 158 && _0x20b9a8.eventList[_0x188185].blessingList.length !== 3) {
                      _0x5212c9[_0x188185] = _0x20b9a8.eventList[_0x188185];
                    }
                    if (_0x20b9a8.eventList[_0x188185].eventId >= 163 && _0x20b9a8.eventList[_0x188185].eventId >= 165 && _0x20b9a8.eventList[_0x188185].blessingList.length !== 3) {
                      _0x5212c9[_0x188185] = _0x20b9a8.eventList[_0x188185];
                    }
                    if (_0x20b9a8.eventList[_0x188185].eventId >= 170 && _0x20b9a8.eventList[_0x188185].eventId >= 173 && _0x20b9a8.eventList[_0x188185].blessingList.length !== 3) {
                      _0x5212c9[_0x188185] = _0x20b9a8.eventList[_0x188185];
                    }
                  }
                  if (_0x5212c9.filter(_0x4494f0 => _0x4494f0 !== undefined).length == 0) {
                    for (let _0xea35f1 = 0; _0xea35f1 < _0x20b9a8.eventList.length; _0xea35f1++) {
                      if (_0x20b9a8.eventList[_0xea35f1].blessingList.length == 3) {
                        _0x5212c9[_0xea35f1] = _0x20b9a8.eventList[_0xea35f1];
                      }
                    }
                    if (_0x5212c9.filter(_0x342aa0 => _0x342aa0 !== undefined)[0].blessingList.length == 3) {
                      addGameLog("高级祝福");
                      await this.send_message("cs_select_event", {
                        eventId: _0x5212c9.filter(_0x5ab54d => _0x5ab54d !== undefined)[0].eventId
                      });
                      await this.send_message("cs_event_interaction", {
                        eventId: _0x5212c9.filter(_0x4167d0 => _0x4167d0 !== undefined)[0].eventId,
                        index: _0x5212c9.filter(_0x40ca21 => _0x40ca21 !== undefined)[0].blessingList[0].affectId
                      });
                    }
                  } else {
                    await this.send_message("cs_select_event", {
                      eventId: _0x5212c9.filter(_0x468717 => _0x468717 !== undefined)[0].eventId
                    });
                    await this.send_message("cs_event_interaction", {
                      eventId: _0x5212c9.filter(_0x4be0de => _0x4be0de !== undefined)[0].eventId,
                      index: 0
                    });
                  }
                } else {
                  await this.send_message("cs_select_event", {
                    eventId: _0x5212c9.filter(_0x23f0e6 => _0x23f0e6 !== undefined)[0].eventId
                  });
                  await this.send_message("cs_event_interaction", {
                    eventId: _0x5212c9.filter(_0x6858a => _0x6858a !== undefined)[0].eventId,
                    index: _0x5212c9.filter(_0x228daa => _0x228daa !== undefined)[0].blessingList[0].affectId
                  });
                }
              }
            }
          } else {
            addGameLog("遇到精英怪");
            if (MFC.userInfo.curEnergy < 15) {
              addGameLog("电池不足");
              break;
            } else if (_0x20b9a8.eventList[0].bossId !== 5501) {
              logger("精英Bossid" + _0x20b9a8.eventList[0].bossId);
              if (_0x20b9a8.eventList[0].bossId !== 5500 && _0x20b9a8.eventList[0].bossId !== 5503) {
                const _0x274d7e = {
                  eventId: _0x20b9a8.eventList[0].eventId,
                  index: 0
                };
                await this.send_message("cs_event_interaction", _0x274d7e);
                const _0x15c72a = {
                  petList: [_0x1fccb9.getTime]
                };
                await this.send_message("cs_edge_lighting_start_battle", _0x15c72a);
                let _0x4f8160 = await this.waitEvent("sc_battle_notify_load_resource");
                _0x4f8160.gameBody.splice(0, _0x4f8160.gameBody.length);
                await this.send_message("cs_online_load_resource", {
                  groupId: "",
                  battleType: 0
                });
                await wait(300);
                await this.send_message("cs_online_player_operation", {
                  opType: 5,
                  data: null,
                  groupId: ""
                });
                _0x4f8160 = await this.waitEvent("sc_battle_notify_round_result");
                let _0x5c8137 = JSON.parse(_0x4f8160.gameBody[_0x4f8160.gameBody.length - 1].raw);
                _0x4f8160.gameBody.splice(0, _0x4f8160.gameBody.length);
                logger("回合开始");
                await wait(300);
                while (true) {
                  for (let _0x2fd2da = 0; _0x2fd2da < 3; _0x2fd2da++) {
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100531).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 100531
                      },
                      groupId: ""
                    });
                    _0x4f8160 = await this.waitEvent("sc_battle_notify_round_result");
                    _0x5c8137 = JSON.parse(_0x4f8160.gameBody[_0x4f8160.gameBody.length - 1].raw);
                    _0x4f8160.gameBody.splice(0, _0x4f8160.gameBody.length);
                    if (_0x5c8137.result.result !== 0) {
                      break;
                    }
                    addGameLog("未被击败，继续攻击");
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100483).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 100483
                      },
                      groupId: ""
                    });
                    _0x4f8160 = await this.waitEvent("sc_battle_notify_round_result");
                    _0x5c8137 = JSON.parse(_0x4f8160.gameBody[_0x4f8160.gameBody.length - 1].raw);
                    _0x4f8160.gameBody.splice(0, _0x4f8160.gameBody.length);
                    if (_0x5c8137.result.result !== 0) {
                      break;
                    }
                    addGameLog("未被击败，继续攻击");
                    if (_0x1fccb9.skills.indexOf(10825) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(10825).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 10825
                        },
                        groupId: ""
                      });
                    }
                    if (_0x1fccb9.skills.indexOf(100484) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100484).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 100484
                        },
                        groupId: ""
                      });
                    }
                    _0x4f8160 = await this.waitEvent("sc_battle_notify_round_result");
                    _0x5c8137 = JSON.parse(_0x4f8160.gameBody[_0x4f8160.gameBody.length - 1].raw);
                    _0x4f8160.gameBody.splice(0, _0x4f8160.gameBody.length);
                    if (_0x5c8137.result.result !== 0) {
                      break;
                    }
                    addGameLog("未被击败，继续攻击");
                  }
                  if (_0x5c8137.result.result == 0) {
                    if (ItemManager.getInstance().getItemNumById(2001) > 1) {
                      addGameLog("回pp");
                      await this.send_message("cs_online_player_operation", {
                        opType: 3,
                        data: {
                          itemID: 2001
                        },
                        groupId: ""
                      });
                    } else {
                      addGameLog("低级pp不足");
                      await this.send_message("cs_quit_battle", {});
                      break;
                    }
                  }
                  if (_0x5c8137.result.result !== 0) {
                    break;
                  }
                  if (ItemManager.getInstance().getItemNumById(2001) < 1) {
                    break;
                  }
                }
              } else {
                if (_0x20b9a8.eventList[0].bossId !== 5503) {
                  let _0xc6a5e0 = PetManager.getInstance().getAllPets().map(_0x392942 => {
                    if (_0x392942.skills.indexOf(23506) != -1 && _0x392942.skills.indexOf(23505) != -1) {
                      return _0x392942;
                    }
                  }).filter(_0x157ef7 => _0x157ef7 !== undefined)[0];
                  if (_0xc6a5e0 == undefined) {
                    addGameLog("背包缪斯没有苍月或皎月");
                    break;
                  } else {
                    const _0xd10489 = {
                      eventId: _0x20b9a8.eventList[0].eventId,
                      index: 0
                    };
                    await this.send_message("cs_event_interaction", _0xd10489);
                    const _0x2a669d = {
                      petList: [_0xc6a5e0.getTime]
                    };
                    await this.send_message("cs_edge_lighting_start_battle", _0x2a669d);
                    let _0x30b4ee = await this.waitEvent("sc_battle_notify_load_resource");
                    _0x30b4ee.gameBody.splice(0, _0x30b4ee.gameBody.length);
                    await this.send_message("cs_online_load_resource", {
                      groupId: "",
                      battleType: 0
                    });
                    await wait(300);
                    await this.send_message("cs_online_player_operation", {
                      opType: 5,
                      data: null,
                      groupId: ""
                    });
                    _0x30b4ee = await this.waitEvent("sc_battle_notify_round_result");
                    let _0x367f78 = JSON.parse(_0x30b4ee.gameBody[_0x30b4ee.gameBody.length - 1].raw);
                    _0x30b4ee.gameBody.splice(0, _0x30b4ee.gameBody.length);
                    logger("回合开始");
                    await wait(300);
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(23505).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 23505
                      },
                      groupId: ""
                    });
                    _0x30b4ee = await this.waitEvent("sc_battle_notify_round_result");
                    _0x367f78 = JSON.parse(_0x30b4ee.gameBody[_0x30b4ee.gameBody.length - 1].raw);
                    _0x30b4ee.gameBody.splice(0, _0x30b4ee.gameBody.length);
                    while (_0x367f78.result.result == 0) {
                      addGameLog("未被击败，继续攻击");
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(23506).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 23506
                        },
                        groupId: ""
                      });
                      _0x30b4ee = await this.waitEvent("sc_battle_notify_round_result");
                      _0x367f78 = JSON.parse(_0x30b4ee.gameBody[_0x30b4ee.gameBody.length - 1].raw);
                      _0x30b4ee.gameBody.splice(0, _0x30b4ee.gameBody.length);
                      if (_0x367f78.result.roundNum > 5) {
                        break;
                      }
                    }
                  }
                }
                if (_0x20b9a8.eventList[0].bossId !== 5500) {
                  let _0x328eed = PetManager.getInstance().getAllPets().map(_0x331690 => {
                    if (_0x331690.skills.indexOf(23506) != -1 && _0x331690.skills.indexOf(23505) != -1) {
                      return _0x331690;
                    }
                  }).filter(_0x1f79a1 => _0x1f79a1 !== undefined)[0];
                  if (_0x328eed == undefined) {
                    addGameLog("背包缪斯没有苍月或皎月");
                    break;
                  } else {
                    const _0x45806c = {
                      eventId: _0x20b9a8.eventList[0].eventId,
                      index: 0
                    };
                    await this.send_message("cs_event_interaction", _0x45806c);
                    const _0x105566 = {
                      petList: [_0x328eed.getTime]
                    };
                    await this.send_message("cs_edge_lighting_start_battle", _0x105566);
                    let _0x3900b9 = await this.waitEvent("sc_battle_notify_load_resource");
                    _0x3900b9.gameBody.splice(0, _0x3900b9.gameBody.length);
                    await this.send_message("cs_online_load_resource", {
                      groupId: "",
                      battleType: 0
                    });
                    await wait(300);
                    await this.send_message("cs_online_player_operation", {
                      opType: 5,
                      data: null,
                      groupId: ""
                    });
                    _0x3900b9 = await this.waitEvent("sc_battle_notify_round_result");
                    let _0x5c9f0b = JSON.parse(_0x3900b9.gameBody[_0x3900b9.gameBody.length - 1].raw);
                    _0x3900b9.gameBody.splice(0, _0x3900b9.gameBody.length);
                    logger("回合开始");
                    await wait(300);
                    for (let _0xc3754f = 0; _0xc3754f < 3; _0xc3754f++) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(23505).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 23505
                        },
                        groupId: ""
                      });
                      _0x3900b9 = await this.waitEvent("sc_battle_notify_round_result");
                      _0x5c9f0b = JSON.parse(_0x3900b9.gameBody[_0x3900b9.gameBody.length - 1].raw);
                      _0x3900b9.gameBody.splice(0, _0x3900b9.gameBody.length);
                      if (_0x5c9f0b.result.result !== 0) {
                        break;
                      }
                    }
                    if (_0x5c9f0b.result.result == 0) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(23506).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 23506
                        },
                        groupId: ""
                      });
                      _0x3900b9 = await this.waitEvent("sc_battle_notify_round_result");
                      _0x5c9f0b = JSON.parse(_0x3900b9.gameBody[_0x3900b9.gameBody.length - 1].raw);
                      _0x3900b9.gameBody.splice(0, _0x3900b9.gameBody.length);
                    }
                  }
                }
              }
            } else {
              addGameLog("此条件精英关卡请手打");
              break;
            }
          }
        }
      } else {
        break;
      }
    }
    if (MFC.attr.getAttr(18888) == 5000) {
      await this.kingshadowui2();
    } else {
      this.stop();
    }
  }
  async kingshadowui2() {
    super.start();
    let _0x6ce6b0 = this;
    MFC.alert.show(`确定进行影皇本体吗两只是必须
1.需要哈肯带暗龙大或者水次有大招
2.天邪需要强化大招`, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x12a5b5) {
      _0x6ce6b0.stop();
    }, function (_0x5397a2) {
      _0x6ce6b0.kingshadow3();
    }]);
  }
  async kingshadow3() {
    let _0x27bf54;
    var _0x4db1d0 = await this.dispatchSelfPet("凯西恩", [32529]);
    if (_0x4db1d0) {
      this.kingSkillId = 32529;
      _0x27bf54 = _0x4db1d0;
    }
    var _0x4b37af = await this.dispatchSelfPet("哈肯萨", [14816]);
    if (_0x4b37af) {
      this.kingSkillId = 14816;
      _0x27bf54 = _0x4b37af;
    }
    while (true) {
      if (_0x27bf54 == undefined) {
        MFC.alert.show("背包没有夜幕龙王击或者奥义断水击");
        break;
      } else {
        let _0xd9e85c = PetManager.getInstance().getAllPets().map(_0x5dd783 => {
          if ((_0x5dd783.skills.indexOf(23798) != -1 || _0x5dd783.skills.indexOf(100423) != -1) && _0x5dd783.skills.indexOf(16891) != -1) {
            return _0x5dd783;
          }
        }).filter(_0x57744a => _0x57744a !== undefined)[0];
        if (_0xd9e85c == undefined) {
          addGameLog("背包天邪技能不符合");
          break;
        } else {
          let _0x255287 = await this.send_message("cs_edgeLighting", {});
          if (_0x255287.finalBoss == 0) {
            if (MFC.userInfo.curEnergy < 30) {
              addGameLog("电池不足");
              break;
            } else {
              const _0x53ddb1 = {
                eventId: _0x255287.eventList[0].eventId,
                index: 0
              };
              await this.send_message("cs_event_interaction", _0x53ddb1);
              const _0x12291d = {
                petList: [_0x27bf54.getTime, _0xd9e85c.getTime]
              };
              await this.send_message("cs_edge_lighting_start_battle", _0x12291d);
              let _0x27b68c = await this.waitEvent("sc_battle_notify_load_resource");
              _0x27b68c.gameBody.splice(0, _0x27b68c.gameBody.length);
              await this.send_message("cs_online_load_resource", {
                groupId: "",
                battleType: 0
              });
              await wait(300);
              await this.send_message("cs_online_player_operation", {
                opType: 5,
                data: null,
                groupId: ""
              });
              _0x27b68c = await this.waitEvent("sc_battle_notify_round_result");
              let _0x1deb2f = JSON.parse(_0x27b68c.gameBody[_0x27b68c.gameBody.length - 1].raw);
              _0x27b68c.gameBody.splice(0, _0x27b68c.gameBody.length);
              logger("回合开始");
              await wait(300);
              while (_0x1deb2f.result.result == 0) {
                addGameLog("释放技能:" + petConfig.SkillConfig.getDef(this.kingSkillId).name);
                await this.send_message("cs_online_player_operation", {
                  opType: 1,
                  data: {
                    skillID: this.kingSkillId
                  },
                  groupId: ""
                });
                _0x27b68c = await this.waitEvent("sc_battle_notify_round_result");
                _0x1deb2f = JSON.parse(_0x27b68c.gameBody[_0x27b68c.gameBody.length - 1].raw);
                _0x27b68c.gameBody.splice(0, _0x27b68c.gameBody.length);
                if (_0x1deb2f.result.playerInfos[0].uid == MFC.userInfo.uid) {
                  if (_0x1deb2f.result.playerInfos[0].nextRoundOP == 3) {
                    addGameLog("被击败");
                    await this.send_message("cs_online_player_operation", {
                      data: {
                        petIndex: 1
                      },
                      groupId: "",
                      opType: 2
                    });
                    addGameLog("切换精灵");
                    if (_0xd9e85c.skills.indexOf(23798) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(23798).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 23798
                        },
                        groupId: ""
                      });
                    }
                    if (_0xd9e85c.skills.indexOf(100423) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100423).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 100423
                        },
                        groupId: ""
                      });
                    }
                    _0x27b68c = await this.waitEvent("sc_battle_notify_round_result");
                    _0x1deb2f = JSON.parse(_0x27b68c.gameBody[_0x27b68c.gameBody.length - 1].raw);
                    _0x27b68c.gameBody.splice(0, _0x27b68c.gameBody.length);
                    if (_0x1deb2f.result.result !== 0) {
                      break;
                    }
                    addGameLog("未被击败，继续攻击");
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(16891).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 16891
                      },
                      groupId: ""
                    });
                    _0x27b68c = await this.waitEvent("sc_battle_notify_round_result");
                    _0x1deb2f = JSON.parse(_0x27b68c.gameBody[_0x27b68c.gameBody.length - 1].raw);
                    _0x27b68c.gameBody.splice(0, _0x27b68c.gameBody.length);
                    if (_0x1deb2f.result.result !== 0) {
                      break;
                    }
                    addGameLog("未被击败，继续攻击");
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(16891).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 16891
                      },
                      groupId: ""
                    });
                    _0x27b68c = await this.waitEvent("sc_battle_notify_round_result");
                    _0x1deb2f = JSON.parse(_0x27b68c.gameBody[_0x27b68c.gameBody.length - 1].raw);
                    _0x27b68c.gameBody.splice(0, _0x27b68c.gameBody.length);
                    if (_0x1deb2f.result.result !== 0) {
                      break;
                    }
                    break;
                  }
                } else if (_0x1deb2f.result.playerInfos[1].nextRoundOP == 3) {
                  addGameLog("被击败");
                  await this.send_message("cs_online_player_operation", {
                    data: {
                      petIndex: 1
                    },
                    groupId: "",
                    opType: 2
                  });
                  addGameLog("切换天邪");
                  if (_0xd9e85c.skills.indexOf(23798) != -1) {
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(23798).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 23798
                      },
                      groupId: ""
                    });
                  }
                  if (_0xd9e85c.skills.indexOf(100423) != -1) {
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100423).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 100423
                      },
                      groupId: ""
                    });
                  }
                  _0x27b68c = await this.waitEvent("sc_battle_notify_round_result");
                  _0x1deb2f = JSON.parse(_0x27b68c.gameBody[_0x27b68c.gameBody.length - 1].raw);
                  _0x27b68c.gameBody.splice(0, _0x27b68c.gameBody.length);
                  if (_0x1deb2f.result.result !== 0) {
                    break;
                  }
                  addGameLog("未被击败，继续攻击");
                  addGameLog("释放技能:" + petConfig.SkillConfig.getDef(16891).name);
                  await this.send_message("cs_online_player_operation", {
                    opType: 1,
                    data: {
                      skillID: 16891
                    },
                    groupId: ""
                  });
                  _0x27b68c = await this.waitEvent("sc_battle_notify_round_result");
                  _0x1deb2f = JSON.parse(_0x27b68c.gameBody[_0x27b68c.gameBody.length - 1].raw);
                  _0x27b68c.gameBody.splice(0, _0x27b68c.gameBody.length);
                  if (_0x1deb2f.result.result !== 0) {
                    break;
                  }
                  addGameLog("未被击败，继续攻击");
                  addGameLog("释放技能:" + petConfig.SkillConfig.getDef(16891).name);
                  await this.send_message("cs_online_player_operation", {
                    opType: 1,
                    data: {
                      skillID: 16891
                    },
                    groupId: ""
                  });
                  _0x27b68c = await this.waitEvent("sc_battle_notify_round_result");
                  _0x1deb2f = JSON.parse(_0x27b68c.gameBody[_0x27b68c.gameBody.length - 1].raw);
                  _0x27b68c.gameBody.splice(0, _0x27b68c.gameBody.length);
                  if (_0x1deb2f.result.result !== 0) {
                    break;
                  }
                  break;
                }
              }
            }
          } else {
            break;
          }
        }
      }
    }
    addGameLog("影皇结束");
    this.stop();
  }
  async rebirthui() {
    super.start();
    let _0x3aeb9d = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x5c283d = [];
      var _0x3ca7bf = SimpleAlertUi({
        height: 200,
        width: 370
      });
      _0x3aeb9d.alertWin = _0x3ca7bf;
      const _0x3ac782 = {
        text: "耶里梅斯",
        x: _0x3ca7bf.applicationWidth / 2 - 40,
        y: _0x3ca7bf.height / 15
      };
      let _0x11064b = createLabel(_0x3ac782);
      _0x11064b.size = 20;
      _0x5c283d.push(_0x11064b);
      var _0xf9bd5a = createLabel({
        text: "背包精灵",
        x: 25,
        y: 50
      });
      _0x5c283d.push(_0xf9bd5a);
      const _0x458740 = {
        x: _0xf9bd5a.x + _0xf9bd5a.width,
        y: _0xf9bd5a.y,
        selected: true,
        storageKey: "ylms1"
      };
      let _0x50f1d7 = createRadio(_0x458740);
      _0x5c283d.push(_0x50f1d7);
      const _0x3a63dd = {
        text: "艾夏拉",
        x: _0x50f1d7.x + 40,
        y: _0x50f1d7.y
      };
      var _0x57fe8f = createLabel(_0x3a63dd);
      _0x5c283d.push(_0x57fe8f);
      const _0x5e3d3d = {
        x: _0x57fe8f.x + _0x57fe8f.width,
        y: _0xf9bd5a.y,
        selected: false,
        storageKey: "ylms2"
      };
      let _0x135532 = createRadio(_0x5e3d3d);
      _0x5c283d.push(_0x135532);
      _0x3aeb9d.addAllUis(_0x5c283d);
      _0x3ca7bf.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x3aeb9d.stop();
      }, function () {
        localStorage.setItem("ylms1", _0x50f1d7.selected);
        localStorage.setItem("ylms2", _0x135532.selected);
        if (_0x50f1d7.selected) {
          _0x3aeb9d.rebirthui1();
        }
        if (_0x135532.selected) {
          _0x3aeb9d.rebirthui2();
        }
      }], null);
      _0x3ca7bf.showAlert();
    });
  }
  async rebirthui1() {
    super.start();
    let _0x59204f = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x5c8483 = [];
      var _0x20171a = SimpleAlertUi({
        height: 200,
        width: 370
      });
      _0x59204f.alertWin = _0x20171a;
      const _0xa990a8 = {
        text: "耶里梅斯",
        x: _0x20171a.applicationWidth / 2 - 40,
        y: _0x20171a.height / 15
      };
      let _0x9231fb = createLabel(_0xa990a8);
      _0x9231fb.size = 20;
      _0x5c8483.push(_0x9231fb);
      const _0x46043f = {
        text: `记得在背包设置6只精灵(优先特攻)
确保可以通过首技能打过一关
6只精灵首技能放大招`,
        x: _0x20171a.applicationWidth / 6 - 40,
        y: _0x9231fb.y + 40
      };
      let _0x5a5eb0 = createLabel(_0x46043f);
      _0x5c8483.push(_0x5a5eb0);
      _0x59204f.addAllUis(_0x5c8483);
      _0x20171a.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x59204f.stop();
      }, function () {
        _0x59204f.Rebirth();
      }], null);
      _0x20171a.showAlert();
    });
  }
  async rebirthui2() {
    super.start();
    let _0x5c0328 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x45d6c4 = [];
      var _0x577a79 = SimpleAlertUi({
        height: 200,
        width: 370
      });
      _0x5c0328.alertWin = _0x577a79;
      const _0x1226f2 = {
        text: "耶里梅斯",
        x: _0x577a79.applicationWidth / 2 - 40,
        y: _0x577a79.height / 15
      };
      let _0x56283c = createLabel(_0x1226f2);
      _0x56283c.size = 20;
      _0x45d6c4.push(_0x56283c);
      const _0x342cb3 = {
        text: "艾夏拉移形换影+虚妄幻境+常.天劫余生",
        x: _0x577a79.applicationWidth / 6 - 40,
        y: _0x56283c.y + 40
      };
      let _0x164723 = createLabel(_0x342cb3);
      _0x45d6c4.push(_0x164723);
      _0x5c0328.addAllUis(_0x45d6c4);
      _0x577a79.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x5c0328.stop();
      }, function () {
        _0x5c0328.Rebirth2();
      }], null);
      _0x577a79.showAlert();
    });
  }
  async Rebirth() {
    if (MFC.userInfo.defaultTeam.length !== 6) {
      addGameLog("背包精灵不够6个");
    } else {
      let _0x523c5f = await this.send_message("cs_broken_wing_reborn", {
        affectId: 0,
        getTimeList: [],
        level: 1,
        type: 1,
        wannaGetAward: 0
      });
      if (_0x523c5f.maxlevel > 1) {
        await this.send_message("cs_broken_wing_reborn", {
          affectId: 0,
          getTimeList: [],
          level: 1,
          type: 7,
          wannaGetAward: 0
        });
        if (_0x523c5f.maxlevel == 2) {
          for (let _0x40f73e = 0; _0x40f73e < 2; _0x40f73e++) {
            await this.send_message("cs_broken_wing_reborn", {
              affectId: 93,
              getTimeList: [],
              level: 1,
              type: 3,
              wannaGetAward: 0
            });
          }
        } else {
          for (let _0x115be5 = 0; _0x115be5 < 3; _0x115be5++) {
            await this.send_message("cs_broken_wing_reborn", {
              affectId: 93,
              getTimeList: [],
              level: 1,
              type: 3,
              wannaGetAward: 0
            });
          }
        }
        while (1) {
          _0x523c5f = await this.send_message("cs_broken_wing_reborn", {
            affectId: 0,
            getTimeList: [],
            level: 1,
            type: 1,
            wannaGetAward: 0
          });
          if (_0x523c5f.rewardTimes >= 10 && _0x523c5f.maxlevel == 10) {
            for (let _0x23bd36 = 0; _0x23bd36 < 30 - _0x523c5f.rewardTimes; _0x23bd36++) {
              if (MFC.userInfo.curEnergy < 5) {
                addGameLog("电池不足");
                break;
              } else {
                await this.send_message("cs_broken_wing_reborn", {
                  type: 8,
                  level: 10,
                  getTimeList: [],
                  affectId: 0,
                  wannaGetAward: 0
                });
              }
            }
            break;
          }
          const _0x216946 = {
            affectId: 0,
            getTimeList: MFC.userInfo.defaultTeam,
            level: _0x523c5f.maxlevel,
            type: 4,
            wannaGetAward: 0
          };
          await this.send_message("cs_broken_wing_reborn", _0x216946);
          await this.initBattle();
          let _0x537d98 = 0;
          while (true) {
            if (_0x537d98 == 5) {
              addGameLog("打不过需更换下阵容");
              await this.send_message("cs_quit_battle", {});
              break;
            }
            let _0x4c1b16 = await this.useSkill(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x537d98]).skills[0]);
            if (_0x4c1b16.result.result == 0) {
              if (_0x4c1b16.result.playerInfos[0].uid == MFC.userInfo.uid) {
                if (_0x4c1b16.result.playerInfos[0].nextRoundOP == 3) {
                  addGameLog("被击败");
                  const _0x19a5e8 = {
                    petIndex: _0x537d98 + 1
                  };
                  const _0xcbda6d = {
                    data: _0x19a5e8,
                    groupId: "",
                    opType: 2
                  };
                  await this.send_message("cs_online_player_operation", _0xcbda6d);
                  addGameLog("切换精灵");
                  _0x537d98++;
                }
              } else if (_0x4c1b16.result.playerInfos[1].nextRoundOP == 3) {
                addGameLog("被击败");
                const _0x518e69 = {
                  petIndex: _0x537d98 + 1
                };
                const _0x26d408 = {
                  data: _0x518e69,
                  groupId: "",
                  opType: 2
                };
                await this.send_message("cs_online_player_operation", _0x26d408);
                addGameLog("切换精灵");
                _0x537d98++;
              }
            } else if (_0x4c1b16.result.result == 1) {
              addGameLog("成功击败");
              break;
            }
            if (_0x4c1b16.result.roundNum > 50) {
              addGameLog("回合数过多");
              break;
            }
          }
        }
      } else {
        while (1) {
          _0x523c5f = await this.send_message("cs_broken_wing_reborn", {
            affectId: 0,
            getTimeList: [],
            level: 1,
            type: 1,
            wannaGetAward: 0
          });
          if (_0x523c5f.maxlevel == 2) {
            for (let _0x4c4919 = 0; _0x4c4919 < 2; _0x4c4919++) {
              await this.send_message("cs_broken_wing_reborn", {
                affectId: 93,
                getTimeList: [],
                level: 1,
                type: 3,
                wannaGetAward: 0
              });
            }
          }
          if (_0x523c5f.rewardTimes >= 10 && _0x523c5f.maxlevel == 10) {
            for (let _0x5381 = 0; _0x5381 < 30 - _0x523c5f.rewardTimes; _0x5381++) {
              if (MFC.userInfo.curEnergy < 5) {
                addGameLog("电池不足");
                break;
              } else {
                await this.send_message("cs_broken_wing_reborn", {
                  type: 8,
                  level: 10,
                  getTimeList: [],
                  affectId: 0,
                  wannaGetAward: 0
                });
              }
            }
            break;
          }
          const _0x1f3dc0 = {
            affectId: 0,
            getTimeList: MFC.userInfo.defaultTeam,
            level: _0x523c5f.maxlevel,
            type: 4,
            wannaGetAward: 0
          };
          await this.send_message("cs_broken_wing_reborn", _0x1f3dc0);
          await this.initBattle();
          let _0x2f873f = 0;
          while (true) {
            if (_0x2f873f == 5) {
              addGameLog("打不过需更换下阵容");
              await this.send_message("cs_quit_battle", {});
              break;
            }
            let _0x4057d0 = await this.useSkill(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x2f873f]).skills[0]);
            if (_0x4057d0.result.result == 0) {
              if (_0x4057d0.result.playerInfos[0].uid == MFC.userInfo.uid) {
                if (_0x4057d0.result.playerInfos[0].nextRoundOP == 3) {
                  addGameLog("被击败");
                  const _0x25a258 = {
                    petIndex: _0x2f873f + 1
                  };
                  const _0x8423f5 = {
                    data: _0x25a258,
                    groupId: "",
                    opType: 2
                  };
                  await this.send_message("cs_online_player_operation", _0x8423f5);
                  addGameLog("切换精灵");
                  _0x2f873f++;
                }
              } else if (_0x4057d0.result.playerInfos[1].nextRoundOP == 3) {
                addGameLog("被击败");
                const _0x256767 = {
                  petIndex: _0x2f873f + 1
                };
                const _0x407cc9 = {
                  data: _0x256767,
                  groupId: "",
                  opType: 2
                };
                await this.send_message("cs_online_player_operation", _0x407cc9);
                addGameLog("切换精灵");
                _0x2f873f++;
              }
            } else if (_0x4057d0.result.result == 1) {
              addGameLog("成功击败");
              break;
            }
            if (_0x4057d0.result.roundNum > 50) {
              addGameLog("回合数过多");
              break;
            }
          }
        }
      }
    }
    if (!xls.activityExchange.hasLoaded) {
      xls.activityExchange.load();
    }
    let _0x39d36c = xls.activityExchange.getItems().filter(function (_0xc029da) {
      return _0xc029da.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0xc029da.endTime >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0xc029da.name.indexOf("重生之战") !== -1;
    });
    for (let _0x37f2ca = 0; _0x37f2ca < _0x39d36c.length; _0x37f2ca++) {
      if (ExchangeUtils.GetExchangeState(_0x39d36c[_0x37f2ca]) == 1) {
        const _0x3c317a = {
          id: _0x39d36c[_0x37f2ca].id,
          selectIndex: 0,
          subDropIdList: []
        };
        await this.send_message("cs_exchange_activity_reward", _0x3c317a);
      } else if (ExchangeUtils.GetExchangeState(_0x39d36c[_0x37f2ca]) == -1) {
        addGameLog(_0x39d36c[_0x37f2ca].name + "已领取");
      } else if (ExchangeUtils.GetExchangeState(_0x39d36c[_0x37f2ca]) == 0) {
        addGameLog(_0x39d36c[_0x37f2ca].name + "未完成");
      }
    }
    addGameLog("耶里梅斯结束");
    this.stop();
  }
  async Rebirth2() {
    let _0x2e90a0 = await this.klcheckaxl();
    if (_0x2e90a0) {
      await this.send_message("cs_new_change_petArray", {
        op: 1,
        arrayType: "defaultTeam",
        subArray: 0,
        idx: 1,
        teamUp: 0,
        fightType: 0,
        getTimeList: [_0x2e90a0.getTime, PetManager.getInstance().getAllPets()[0].getTime]
      });
      let _0xc951c0 = await this.send_message("cs_broken_wing_reborn", {
        affectId: 0,
        getTimeList: [],
        level: 1,
        type: 1,
        wannaGetAward: 0
      });
      if (_0xc951c0.maxlevel > 1) {
        await this.send_message("cs_broken_wing_reborn", {
          affectId: 0,
          getTimeList: [],
          level: 1,
          type: 7,
          wannaGetAward: 0
        });
        if (_0xc951c0.maxlevel == 2) {
          for (let _0x5d20da = 0; _0x5d20da < 2; _0x5d20da++) {
            await this.send_message("cs_broken_wing_reborn", {
              affectId: 93,
              getTimeList: [],
              level: 1,
              type: 3,
              wannaGetAward: 0
            });
          }
        } else {
          for (let _0x4e173f = 0; _0x4e173f < 3; _0x4e173f++) {
            await this.send_message("cs_broken_wing_reborn", {
              affectId: 93,
              getTimeList: [],
              level: 1,
              type: 3,
              wannaGetAward: 0
            });
          }
        }
        while (1) {
          _0xc951c0 = await this.send_message("cs_broken_wing_reborn", {
            affectId: 0,
            getTimeList: [],
            level: 1,
            type: 1,
            wannaGetAward: 0
          });
          if (_0xc951c0.rewardTimes >= 10 && _0xc951c0.maxlevel == 10) {
            for (let _0x21125b = 0; _0x21125b < 30 - _0xc951c0.rewardTimes; _0x21125b++) {
              if (MFC.userInfo.curEnergy < 5) {
                addGameLog("电池不足");
                break;
              } else {
                await this.send_message("cs_broken_wing_reborn", {
                  type: 8,
                  level: 10,
                  getTimeList: [],
                  affectId: 0,
                  wannaGetAward: 0
                });
              }
            }
            break;
          }
          await this.send_message("cs_broken_wing_reborn", {
            affectId: 0,
            getTimeList: [_0x2e90a0.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            level: _0xc951c0.maxlevel,
            type: 4,
            wannaGetAward: 0
          });
          await this.initBattle();
          await this.klaxlba();
        }
      } else {
        while (1) {
          _0xc951c0 = await this.send_message("cs_broken_wing_reborn", {
            affectId: 0,
            getTimeList: [],
            level: 1,
            type: 1,
            wannaGetAward: 0
          });
          if (_0xc951c0.maxlevel == 2) {
            for (let _0x4b0826 = 0; _0x4b0826 < 2; _0x4b0826++) {
              await this.send_message("cs_broken_wing_reborn", {
                affectId: 93,
                getTimeList: [],
                level: 1,
                type: 3,
                wannaGetAward: 0
              });
            }
          }
          if (_0xc951c0.rewardTimes >= 10 && _0xc951c0.maxlevel == 10) {
            for (let _0x499219 = 0; _0x499219 < 30 - _0xc951c0.rewardTimes; _0x499219++) {
              if (MFC.userInfo.curEnergy < 5) {
                addGameLog("电池不足");
                break;
              } else {
                await this.send_message("cs_broken_wing_reborn", {
                  type: 8,
                  level: 10,
                  getTimeList: [],
                  affectId: 0,
                  wannaGetAward: 0
                });
              }
            }
            break;
          }
          await this.send_message("cs_broken_wing_reborn", {
            affectId: 0,
            getTimeList: [_0x2e90a0.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            level: _0xc951c0.maxlevel,
            type: 4,
            wannaGetAward: 0
          });
          await this.initBattle();
          await this.klaxlba();
        }
      }
    }
    if (!xls.activityExchange.hasLoaded) {
      xls.activityExchange.load();
    }
    let _0xcfa16e = xls.activityExchange.getItems().filter(function (_0xfca2db) {
      return _0xfca2db.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0xfca2db.endTime >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0xfca2db.name.indexOf("重生之战") !== -1;
    });
    for (let _0x26672c = 0; _0x26672c < _0xcfa16e.length; _0x26672c++) {
      if (ExchangeUtils.GetExchangeState(_0xcfa16e[_0x26672c]) == 1) {
        const _0x450d1c = {
          id: _0xcfa16e[_0x26672c].id,
          selectIndex: 0,
          subDropIdList: []
        };
        await this.send_message("cs_exchange_activity_reward", _0x450d1c);
      } else if (ExchangeUtils.GetExchangeState(_0xcfa16e[_0x26672c]) == -1) {
        addGameLog(_0xcfa16e[_0x26672c].name + "已领取");
      } else if (ExchangeUtils.GetExchangeState(_0xcfa16e[_0x26672c]) == 0) {
        addGameLog(_0xcfa16e[_0x26672c].name + "未完成");
      }
    }
    addGameLog("耶里梅斯结束");
    this.stop();
  }
  async mosheny() {
    if (typeof fiendContract == "undefined") {
      MFC.moduleManager.openModule(826);
    }
    if (!xls.risisContractTask.hasLoaded) {
      xls.risisContractTask.load(() => {});
    }
    if (!xls.activityAffect.hasLoaded) {
      xls.activityAffect.load(() => {});
    }
    await wait(200);
    let _0x4ce825 = await this.msyBattle();
    if (!_0x4ce825) {
      this.stop();
      return;
    }
    while (true) {
      await this.send_message("cs_risis_contract_activity", {
        type: 2,
        activityAffect: 0,
        fightAffectList: [],
        getTimeList: [_0x4ce825.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
        taskId: 0,
        start: 0
      });
      await this.initBattle();
      let _0x1df44e = await this.useSkill(_0x4ce825.skillsName[0]);
      while (_0x1df44e.result.result == 0) {
        if (_0x1df44e.result.playerInfos[0].uid == MFC.userInfo.uid) {
          if (_0x1df44e.result.playerInfos[0].nextRoundOP !== 1) {
            addGameLog("首发被击败");
            break;
          }
        } else if (_0x1df44e.result.playerInfos[1].nextRoundOP !== 1) {
          addGameLog("首发被击败");
          break;
        }
        _0x1df44e = await this.useSkill(_0x4ce825.skillsName[1]);
      }
      if (_0x1df44e.result.result == 1) {
        addGameLog("对战胜利！");
        break;
      }
    }
    if (fiendContract.FiendContractManager.getInstance().checkTaskRewardIsGet(10000) == 1) {
      await this.send_message("cs_risis_contract_activity", {
        type: 3,
        activityAffect: 0,
        fightAffectList: [],
        getTimeList: [],
        taskId: 10000,
        start: 0
      });
    }
    let _0x34977c = xls.risisContractTask.getItems().filter(function (_0x17b222) {
      return _0x17b222.activityType == 1 && _0x17b222.task.indexOf("解锁1个新的风险契约") !== -1 && MFC.serverTimer.getTime() >= MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0x17b222.startTime.replace(/-/g, "/").replace(/_/g, "/"))) && MFC.serverTimer.getTime() <= MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0x17b222.endTime.replace(/-/g, "/").replace(/_/g, "/")));
    })[0];
    if (fiendContract.FiendContractManager.getInstance().checkTaskRewardIsGet(_0x34977c.id) == 1) {
      const _0x48f1bd = {
        type: 3,
        activityAffect: 0,
        fightAffectList: [],
        getTimeList: [],
        taskId: _0x34977c.id,
        start: 0
      };
      await this.send_message("cs_risis_contract_activity", _0x48f1bd);
    } else if (fiendContract.FiendContractManager.getInstance().checkTaskRewardIsGet(_0x34977c.id) == 0) {
      let _0x567050 = xls.activityAffect.getItems().filter(function (_0x3ffe2b) {
        return _0x3ffe2b.activityType == 1 && fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos().indexOf(_0x3ffe2b) == -1 && _0x3ffe2b.id <= 70 && _0x3ffe2b.bufflevel == 1;
      });
      var _0x98cbe4 = ItemManager.getInstance().getItemNumById(100751);
      if (!_0x98cbe4) {
        _0x98cbe4 = 0;
      }
      addGameLog("风险钥匙数量:" + _0x98cbe4);
      if (_0x567050.length > 0 && _0x98cbe4 >= 1) {
        logger("解锁1级特效1");
        const _0xfc3108 = {
          type: 1,
          activityAffect: _0x567050[0].id,
          fightAffectList: [],
          getTimeList: [],
          taskId: 0,
          start: 0
        };
        await this.send_message("cs_risis_contract_activity", _0xfc3108);
        const _0x1c0f3f = {
          type: 3,
          activityAffect: 0,
          fightAffectList: [],
          getTimeList: [],
          taskId: _0x34977c.id,
          start: 0
        };
        await this.send_message("cs_risis_contract_activity", _0x1c0f3f);
      } else {
        let _0x170fb1 = xls.activityAffect.getItems().filter(function (_0x1b55be) {
          return _0x1b55be.activityType == 1 && fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos().indexOf(_0x1b55be) == -1 && _0x1b55be.id <= 70 && _0x1b55be.bufflevel == 2;
        });
        if (_0x170fb1.length > 0 && _0x98cbe4 >= 30) {
          logger("解锁2级特效1");
          const _0x527a27 = {
            type: 1,
            activityAffect: _0x170fb1[0].id,
            fightAffectList: [],
            getTimeList: [],
            taskId: 0,
            start: 0
          };
          await this.send_message("cs_risis_contract_activity", _0x527a27);
          const _0x56be73 = {
            type: 3,
            activityAffect: 0,
            fightAffectList: [],
            getTimeList: [],
            taskId: _0x34977c.id,
            start: 0
          };
          await this.send_message("cs_risis_contract_activity", _0x56be73);
        } else {
          let _0xa41a4 = xls.activityAffect.getItems().filter(function (_0x1b0823) {
            return _0x1b0823.activityType == 1 && fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos().indexOf(_0x1b0823) == -1 && _0x1b0823.id <= 70 && _0x1b0823.bufflevel == 3;
          });
          if (_0xa41a4.length > 0 && _0x98cbe4 >= 50) {
            logger("解锁2级特效1");
            const _0x1f8f81 = {
              type: 1,
              activityAffect: _0xa41a4[0].id,
              fightAffectList: [],
              getTimeList: [],
              taskId: 0,
              start: 0
            };
            await this.send_message("cs_risis_contract_activity", _0x1f8f81);
            const _0x16c589 = {
              type: 3,
              activityAffect: 0,
              fightAffectList: [],
              getTimeList: [],
              taskId: _0x34977c.id,
              start: 0
            };
            await this.send_message("cs_risis_contract_activity", _0x16c589);
          }
        }
      }
    }
    let _0x27f32b = xls.risisContractTask.getItems().filter(function (_0x3d8630) {
      return _0x3d8630.activityType == 1;
    }).filter(function (_0x7f479e) {
      return _0x7f479e.task.indexOf("使用指定风险契约") !== -1 && _0x7f479e.id < 20000;
    });
    let _0x65abf = [];
    for (let _0x373afe = 0; _0x373afe < _0x27f32b.length; _0x373afe++) {
      let _0x2d8442 = xls.risisContractTask.getItems().filter(function (_0x5be84f) {
        return _0x5be84f.activityType == 1;
      }).filter(function (_0x3a0fff) {
        return _0x3a0fff.task.indexOf("使用指定风险契约") !== -1 && _0x3a0fff.id < 20000;
      })[_0x373afe].subTypeNum.split("*");
      for (let _0x4b598a = 0; _0x4b598a < _0x2d8442.length; _0x4b598a++) {
        if (!_0x65abf.includes(parseInt(_0x2d8442[_0x4b598a]))) {
          _0x65abf.push(parseInt(_0x2d8442[_0x4b598a]));
        }
      }
    }
    var _0x98cbe4 = ItemManager.getInstance().getItemNumById(100751);
    if (!_0x98cbe4) {
      _0x98cbe4 = 0;
    }
    addGameLog("风险钥匙数量:" + _0x98cbe4);
    for (let _0x31e8fb = 0; _0x31e8fb < _0x65abf.length; _0x31e8fb++) {
      if (!fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos().find(_0x5150e0 => _0x5150e0.id === _0x65abf[_0x31e8fb])) {
        logger("假设解锁一级1");
        let _0x525e02 = xls.activityAffect.getItem(_0x65abf[_0x31e8fb]).bufflevel;
        if (_0x525e02 === 1 && _0x98cbe4 >= 1 || _0x525e02 === 2 && _0x98cbe4 >= 30 || _0x525e02 === 3 && _0x98cbe4 >= 50) {
          const _0x486e61 = {
            type: 1,
            activityAffect: _0x65abf[_0x31e8fb],
            fightAffectList: [],
            getTimeList: [],
            taskId: 0,
            start: 0
          };
          await this.send_message("cs_risis_contract_activity", _0x486e61);
        }
      }
    }
    for (let _0x1c1d08 = 0; _0x1c1d08 < 3; _0x1c1d08++) {
      let _0x10f585 = 100;
      if (MFC.attr.getAttr(MFC.attrType.dailyRisisContractPassLevel) == 4) {
        _0x10f585 = 0;
      }
      if (_0x10f585 && _0x10f585 > UserManager.getInstance().userInfo.curEnergy) {
        MFC.alert.show("电池不足100");
        this.stop();
        return;
      } else {
        while (true) {
          _0x65abf = this.moshenyGetHighestIdsByName(_0x65abf);
          await this.send_message("cs_risis_contract_activity", {
            type: 2,
            activityAffect: 0,
            fightAffectList: _0x65abf,
            getTimeList: [_0x4ce825.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            taskId: 0,
            start: 0
          });
          await this.initBattle();
          let _0x5bc8de = await this.useSkill(_0x4ce825.skillsName[0]);
          while (_0x5bc8de.result.result == 0) {
            if (_0x5bc8de.result.playerInfos[0].uid == MFC.userInfo.uid) {
              if (_0x5bc8de.result.playerInfos[0].nextRoundOP !== 1) {
                addGameLog("首发被击败");
                break;
              }
            } else if (_0x5bc8de.result.playerInfos[1].nextRoundOP !== 1) {
              addGameLog("首发被击败");
              break;
            }
            _0x5bc8de = await this.useSkill(_0x4ce825.skillsName[1]);
          }
          if (_0x5bc8de.result.result == 1) {
            break;
          }
        }
      }
    }
    let _0x24c9ab = xls.risisContractTask.getItems().filter(function (_0x5ccd05) {
      return _0x5ccd05.activityType == 1;
    }).filter(function (_0x471629) {
      return _0x471629.task.indexOf("解锁3个新的风险契约") !== -1 && MFC.serverTimer.getTime() >= MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0x471629.startTime.replace(/-/g, "/").replace(/_/g, "/"))) && MFC.serverTimer.getTime() <= MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0x471629.endTime.replace(/-/g, "/").replace(/_/g, "/")));
    })[0];
    if (fiendContract.FiendContractManager.getInstance().checkTaskRewardIsGet(_0x24c9ab.id) == 1) {
      const _0x56c7e4 = {
        type: 3,
        activityAffect: 0,
        fightAffectList: [],
        getTimeList: [],
        taskId: _0x24c9ab.id,
        start: 0
      };
      await this.send_message("cs_risis_contract_activity", _0x56c7e4);
    } else if (fiendContract.FiendContractManager.getInstance().checkTaskRewardIsGet(_0x24c9ab.id) == 0) {
      let _0x3776f9 = xls.activityAffect.getItems().filter(function (_0x568d4e) {
        return _0x568d4e.activityType == 1 && fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos().indexOf(_0x568d4e) == -1 && _0x568d4e.id <= 70 && _0x568d4e.bufflevel == 1;
      });
      let _0x4ad637 = xls.activityAffect.getItems().filter(function (_0x40bb61) {
        return _0x40bb61.activityType == 1 && fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos().indexOf(_0x40bb61) == -1 && _0x40bb61.id <= 70 && _0x40bb61.bufflevel == 2;
      });
      let _0xcc6958 = xls.activityAffect.getItems().filter(function (_0x3b8db8) {
        return _0x3b8db8.activityType == 1 && fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos().indexOf(_0x3b8db8) == -1 && _0x3b8db8.id <= 70 && _0x3b8db8.bufflevel == 3;
      });
      var _0x98cbe4 = ItemManager.getInstance().getItemNumById(100751);
      if (!_0x98cbe4) {
        _0x98cbe4 = 0;
      }
      addGameLog("风险钥匙数量:" + _0x98cbe4);
      for (let _0x505e7b = 0; _0x505e7b < 3; _0x505e7b++) {
        if (_0x3776f9.length > 0 && _0x98cbe4 >= 1) {
          logger("解锁1级特效2");
          const _0x135480 = {
            type: 1,
            activityAffect: _0x3776f9[0].id,
            fightAffectList: [],
            getTimeList: [],
            taskId: 0,
            start: 0
          };
          await this.send_message("cs_risis_contract_activity", _0x135480);
          _0x3776f9.shift();
        } else if (_0x4ad637.length > 0 && _0x98cbe4 >= 30) {
          logger("解锁2级特效2");
          const _0x3e53be = {
            type: 1,
            activityAffect: _0x4ad637[0].id,
            fightAffectList: [],
            getTimeList: [],
            taskId: 0,
            start: 0
          };
          await this.send_message("cs_risis_contract_activity", _0x3e53be);
          _0x4ad637.shift();
        } else if (_0xcc6958.length > 0 && _0x98cbe4 >= 50) {
          logger("解锁3级特效2");
          const _0x51246c = {
            type: 1,
            activityAffect: _0xcc6958[0].id,
            fightAffectList: [],
            getTimeList: [],
            taskId: 0,
            start: 0
          };
          await this.send_message("cs_risis_contract_activity", _0x51246c);
          _0xcc6958.shift();
        }
      }
      if (fiendContract.FiendContractManager.getInstance().checkTaskRewardIsGet(_0x24c9ab.id) == 1) {
        const _0x142189 = {
          type: 3,
          activityAffect: 0,
          fightAffectList: [],
          getTimeList: [],
          taskId: _0x24c9ab.id,
          start: 0
        };
        await this.send_message("cs_risis_contract_activity", _0x142189);
      }
    }
    let _0x12b946 = xls.risisContractTask.getItems().filter(function (_0x315099) {
      return _0x315099.activityType == 1;
    }).filter(function (_0x3076f3) {
      return _0x3076f3.activityCardId == fiendContract.FiendContractManager.getInstance().getCurrCardId();
    }).filter(function (_0xd1cb68) {
      return _0xd1cb68.task.indexOf("使用指定风险契约") !== -1 && MFC.serverTimer.getTime() >= MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0xd1cb68.startTime.replace(/-/g, "/").replace(/_/g, "/"))) && MFC.serverTimer.getTime() <= MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0xd1cb68.endTime.replace(/-/g, "/").replace(/_/g, "/")));
    });
    let _0x5618e7 = [];
    for (let _0x53707d = 0; _0x53707d < _0x12b946.length; _0x53707d++) {
      let _0xa0f7d9 = _0x12b946[_0x53707d].subTypeNum.split("*");
      for (let _0xf775c0 = 0; _0xf775c0 < _0xa0f7d9.length; _0xf775c0++) {
        if (!_0x5618e7.includes(parseInt(_0xa0f7d9[_0xf775c0]))) {
          _0x5618e7.push(parseInt(_0xa0f7d9[_0xf775c0]));
        }
      }
    }
    var _0x98cbe4 = ItemManager.getInstance().getItemNumById(100751);
    if (!_0x98cbe4) {
      _0x98cbe4 = 0;
    }
    addGameLog("风险钥匙数量:" + _0x98cbe4);
    for (let _0x8a2416 = 0; _0x8a2416 < _0x5618e7.length; _0x8a2416++) {
      if (!fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos().find(_0x20bca4 => _0x20bca4.id === _0x5618e7[_0x8a2416])) {
        logger("假设解锁一级2");
        let _0x31fdba = xls.activityAffect.getItem(_0x5618e7[_0x8a2416]).bufflevel;
        if (_0x31fdba === 1 && _0x98cbe4 >= 1 || _0x31fdba === 2 && _0x98cbe4 >= 30 || _0x31fdba === 3 && _0x98cbe4 >= 50) {
          const _0x48326b = {
            type: 1,
            activityAffect: _0x5618e7[_0x8a2416],
            fightAffectList: [],
            getTimeList: [],
            taskId: 0,
            start: 0
          };
          await this.send_message("cs_risis_contract_activity", _0x48326b);
        }
      }
    }
    while (true) {
      _0x5618e7 = this.moshenyGetHighestIdsByName(_0x5618e7);
      await this.send_message("cs_risis_contract_activity", {
        type: 2,
        activityAffect: 0,
        fightAffectList: _0x5618e7,
        getTimeList: [_0x4ce825.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
        taskId: 0,
        start: 0
      });
      await this.initBattle();
      let _0x12e995 = await this.useSkill(_0x4ce825.skillsName[0]);
      while (_0x12e995.result.result == 0) {
        if (_0x12e995.result.playerInfos[0].uid == MFC.userInfo.uid) {
          if (_0x12e995.result.playerInfos[0].nextRoundOP !== 1) {
            addGameLog("首发被击败");
            break;
          }
        } else if (_0x12e995.result.playerInfos[1].nextRoundOP !== 1) {
          addGameLog("首发被击败");
          break;
        }
        _0x12e995 = await this.useSkill(_0x4ce825.skillsName[1]);
      }
      if (_0x12e995.result.result == 1) {
        break;
      }
    }
    for (let _0x5a999d = 0; _0x5a999d < _0x65abf.length; _0x5a999d++) {
      if (!_0x5618e7.includes(_0x65abf[_0x5a999d] + 1) && !_0x5618e7.includes(_0x65abf[_0x5a999d]) && !_0x5618e7.includes(_0x65abf[_0x5a999d] + 2)) {
        _0x5618e7.push(_0x65abf[_0x5a999d] + 1);
      }
    }
    for (let _0x40f746 = 0; _0x40f746 < _0x5618e7.length; _0x40f746++) {
      if (!fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos().find(_0x4ff1cb => _0x4ff1cb.id === _0x5618e7[_0x40f746])) {
        logger("假设解锁一级3");
        let _0x359b85 = xls.activityAffect.getItem(_0x5618e7[_0x40f746]).bufflevel;
        if (_0x359b85 === 1 && _0x98cbe4 >= 1 || _0x359b85 === 2 && _0x98cbe4 >= 30 || _0x359b85 === 3 && _0x98cbe4 >= 50) {
          const _0x5d06ee = {
            type: 1,
            activityAffect: _0x5618e7[_0x40f746],
            fightAffectList: [],
            getTimeList: [],
            taskId: 0,
            start: 0
          };
          await this.send_message("cs_risis_contract_activity", _0x5d06ee);
        }
      }
    }
    while (true) {
      _0x5618e7 = this.moshenyGetHighestIdsByName(_0x5618e7);
      await this.send_message("cs_risis_contract_activity", {
        type: 2,
        activityAffect: 0,
        fightAffectList: _0x5618e7,
        getTimeList: [_0x4ce825.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
        taskId: 0,
        start: 0
      });
      await this.initBattle();
      let _0xb5a98c = await this.useSkill(_0x4ce825.skillsName[0]);
      while (_0xb5a98c.result.result == 0) {
        if (_0xb5a98c.result.playerInfos[0].uid == MFC.userInfo.uid) {
          if (_0xb5a98c.result.playerInfos[0].nextRoundOP !== 1) {
            addGameLog("首发被击败");
            break;
          }
        } else if (_0xb5a98c.result.playerInfos[1].nextRoundOP !== 1) {
          addGameLog("首发被击败");
          break;
        }
        _0xb5a98c = await this.useSkill(_0x4ce825.skillsName[1]);
      }
      if (_0xb5a98c.result.result == 1) {
        break;
      }
    }
    let _0x1e8d56 = xls.risisContractTask.getItems().filter(function (_0x34ad36) {
      return _0x34ad36.activityType == 1;
    });
    for (let _0x2e13a5 = 0; _0x2e13a5 < _0x1e8d56.length; _0x2e13a5++) {
      if (fiendContract.FiendContractManager.getInstance().checkTaskRewardIsGet(_0x1e8d56[_0x2e13a5].id) == 1) {
        const _0x9733df = {
          type: 3,
          activityAffect: 0,
          fightAffectList: [],
          getTimeList: [],
          taskId: _0x1e8d56[_0x2e13a5].id,
          start: 0
        };
        await this.send_message("cs_risis_contract_activity", _0x9733df);
      }
    }
    addGameLog("契约作战结束");
    this.stop();
  }
  async msyBattle() {
    let _0x40dee6 = await this.dispatchSelfPet("哈肯萨", [22615, 14816]);
    if (_0x40dee6) {
      return {
        pet: _0x40dee6,
        skillsName: [22615, 14816]
      };
    }
    let _0x4d8183 = await this.dispatchSelfPet("赫尔卡长老", [20592, 32127]);
    if (_0x4d8183) {
      return {
        pet: _0x4d8183,
        skillsName: [20592, 32127]
      };
    }
    let _0x538dca = await this.dispatchSelfPet("水次", [32529, 32529]);
    if (_0x538dca) {
      return {
        pet: _0x538dca,
        skillsName: [32529, 32529]
      };
    }
    let _0x5044ad = await this.dispatchSelfPet("蒂朵", [100604, 100608]);
    if (_0x5044ad) {
      return {
        pet: _0x5044ad,
        skillsName: [100604, 100608]
      };
    }
    let _0x35b299 = await this.dispatchSelfPet("神秘狗", [40958, 40957]);
    if (_0x35b299) {
      return {
        pet: _0x35b299,
        skillsName: [40958, 40957]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  moshenyGetHighestIdsByName(_0xddede) {
    let _0x284fdf = [];
    let _0x3268be = fiendContract.FiendContractManager.getInstance().queryAllUnlockedAffectInfos();
    for (let _0x530640 = 0; _0x530640 < _0xddede.length; _0x530640++) {
      let _0x5e2262 = _0x3268be.find(_0x1468d5 => _0x1468d5.id == _0xddede[_0x530640]);
      if (!_0x5e2262) {
        continue;
      }
      _0x284fdf.push({
        name: xls.activityAffect.getItem(_0xddede[_0x530640]).name,
        id: _0xddede[_0x530640]
      });
    }
    const _0x312da1 = _0x284fdf.reduce((_0x2d5feb, _0x335c9f) => {
      if (_0x2d5feb[_0x335c9f.name] && _0x2d5feb[_0x335c9f.name] < _0x335c9f.id) {
        _0x2d5feb[_0x335c9f.name] = _0x335c9f.id;
      } else if (!_0x2d5feb[_0x335c9f.name]) {
        _0x2d5feb[_0x335c9f.name] = _0x335c9f.id;
      }
      return _0x2d5feb;
    }, {});
    return Object.values(_0x312da1);
  }
  async flbigui() {
    super.start();
    let _0x21bcb4 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x1a21de = [];
      var _0x2e3eb0 = SimpleAlertUi({
        height: 350,
        width: 400
      });
      _0x21bcb4.alertWin = _0x2e3eb0;
      const _0x368f44 = {
        x: _0x2e3eb0.width / 3.75,
        y: _0x2e3eb0.height / 10 + 150,
        selected: true,
        storageKey: "fl1"
      };
      let _0x1a7617 = createRadio(_0x368f44);
      _0x1a21de.push(_0x1a7617);
      const _0x45368c = {
        x: _0x2e3eb0.width / 3.75,
        y: _0x2e3eb0.height / 10 + 150 + 50,
        selected: false,
        storageKey: "fl2"
      };
      let _0x5d7b8c = createRadio(_0x45368c);
      _0x1a21de.push(_0x5d7b8c);
      const _0x57ca58 = {
        text: `不是15关换技能是第七天那个boss换
贝特卡恩飞廉最后一关技能跟前面不太一样
需要固伤技能前面是先手
目前是嗜血狂暴血怒血煞狂气突
最后一关需更换为嗜血狂暴血怒血煞血气之刃`,
        x: 25 + _0x1a7617.width,
        y: _0x2e3eb0.height / 10
      };
      var _0x3f7ba1 = createLabel(_0x57ca58);
      _0x1a21de.push(_0x3f7ba1);
      const _0x98323 = {
        text: "青龙",
        x: _0x1a7617.x + 10 + _0x1a7617.width,
        y: _0x1a7617.y
      };
      var _0x9ea9f5 = createLabel(_0x98323);
      _0x1a21de.push(_0x9ea9f5);
      const _0xa3a818 = {
        text: "贝特卡恩",
        x: _0x1a7617.x + 10 + _0x1a7617.width,
        y: _0x5d7b8c.y
      };
      var _0x164c1f = createLabel(_0xa3a818);
      _0x1a21de.push(_0x164c1f);
      _0x21bcb4.addAllUis(_0x1a21de);
      _0x2e3eb0.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x21bcb4.stop();
      }, function () {
        localStorage.setItem("fl1", _0x1a7617.selected);
        localStorage.setItem("fl2", _0x5d7b8c.selected);
        if (_0x1a7617.selected) {
          _0x21bcb4.flui();
        }
        if (_0x5d7b8c.selected) {
          _0x21bcb4.flui2();
        }
      }], null);
      _0x2e3eb0.showAlert();
    });
  }
  async flui() {
    super.start();
    let _0x318d8a = this;
    MFC.alert.show("确定进行888飞廉吗需要增幅水龙盾敌我青龙", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x36805a) {
      _0x318d8a.stop();
    }, function (_0x5a9836) {
      _0x318d8a.fl();
    }]);
  }
  async fl() {
    await this.initfldata();
    await this.initfldata22();
    await this.flyScythefirst();
    await this.flsd();
    await this.flyScythe2();
    await this.flsd1();
    await this.flyScythereward();
    addGameLog("飞廉结束");
    this.stop();
  }
  async flui2() {
    super.start();
    let _0x44a412 = this;
    MFC.alert.show("确定进行888飞廉吗需要增幅贝特卡恩属性嗜血+狂爆攻击血气+血煞", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x561e9b) {
      _0x44a412.stop();
    }, function (_0x3a82cd) {
      _0x44a412.fl2();
    }]);
  }
  async fl2() {
    await this.initfldata();
    await this.initfldata22();
    await this.flyScythefirst();
    await this.flsd();
    await this.flbtke();
    await this.flbtke2();
    await this.flsd2();
    await this.flyScythereward();
    addGameLog("飞廉结束");
    this.stop();
  }
  async initfldata() {
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_25 05:00:00") {
      this.initfldata1.push(2401);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_26 05:00:00") {
      this.initfldata1.push(2402);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_27 05:00:00") {
      this.initfldata1.push(2403);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_28 05:00:00") {
      this.initfldata1.push(2404);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_29 05:00:00") {
      this.initfldata1.push(2405);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_30 05:00:00") {
      this.initfldata1.push(2406);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_31 05:00:00") {
      this.initfldata1.push(2407);
    }
  }
  async initfldata22() {
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_25 05:00:00") {
      this.initfldata2.push(2349);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_26 05:00:00") {
      this.initfldata2.push(2350);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_27 05:00:00") {
      this.initfldata2.push(2351);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_28 05:00:00") {
      this.initfldata2.push(2352);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_29 05:00:00") {
      this.initfldata2.push(2353);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_30 05:00:00") {
      this.initfldata2.push(2354);
    }
    if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") >= "2024_12_31 05:00:00") {
      this.initfldata2.push(2355);
    }
  }
  async flyScythereward() {
    let _0x5b0ed0 = xls.activityTaskReset.getItems().filter(function (_0x2d3364) {
      return _0x2d3364.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x2d3364.endTime >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x2d3364.activityIdentity == 473;
    });
    for (let _0x4b6ff7 = 0; _0x4b6ff7 < _0x5b0ed0.length; _0x4b6ff7++) {
      if (NewTaskUtils.getTaskResetStateByIndex(_0x5b0ed0[_0x4b6ff7]) == 1) {
        const _0x4964cf = {
          carnivalId: _0x5b0ed0[_0x4b6ff7].id,
          recvIndex: 0
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x4964cf);
      } else if (NewTaskUtils.getTaskResetStateByIndex(_0x5b0ed0[_0x4b6ff7]) == 0) {
        addGameLog(_0x5b0ed0[_0x4b6ff7].name + _0x5b0ed0[_0x4b6ff7].task + "未完成");
      }
    }
  }
  async flyScythefirst() {
    for (let _0x3979ff = 0; _0x3979ff < this.initfldata1.length; _0x3979ff++) {
      if (!mongoAttr.getFeiLianAttrFeiLian().btlPass.includes(this.initfldata1[_0x3979ff])) {
        while (!mongoAttr.getFeiLianAttrFeiLian().btlPass.includes(this.initfldata1[_0x3979ff])) {
          if (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
            await this.send_message("cs_feilian_activity", {
              action: 5,
              levelId: 0,
              gameplay: 0,
              petList: [],
              skillId: 0,
              skillIndexs: []
            });
            addGameLog("重新开始");
          }
          const _0x3fc355 = {
            action: 1,
            levelId: 15 + _0x3979ff,
            gameplay: 1,
            petList: [],
            skillId: 0,
            skillIndexs: []
          };
          await this.send_message("cs_feilian_activity", _0x3fc355);
          this.id = this.initfldata1[_0x3979ff];
          await this.fl1battle();
        }
      }
    }
  }
  async fl1battle() {
    let _0xe17e71 = mongoAttr.getFeiLianAttrFeiLian().btlPetGetTimeList;
    let _0x3f8bd5 = 0;
    while (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
      if (mongoAttr.getFeiLianAttrFeiLian().progress >= 12 && mongoAttr.getFeiLianAttrFeiLian().progress < 14) {
        await this.send_message("cs_feilian_activity", {
          action: 3,
          levelId: 0,
          gameplay: 0,
          petList: [],
          skillId: 1,
          skillIndexs: []
        });
      } else if (mongoAttr.getFeiLianAttrFeiLian().progress >= 14) {
        addGameLog("终点");
        if (this.id == 2406) {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [this.id],
            petList: [_0xe17e71[5], _0xe17e71[4], _0xe17e71[3], _0xe17e71[2], _0xe17e71[1], _0xe17e71[0]],
            times: 0,
            train: 0
          });
          await this.endbattle1();
        } else if (this.id == 2407) {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [this.id],
            petList: [_0xe17e71[5], _0xe17e71[0], _0xe17e71[1], _0xe17e71[2], _0xe17e71[3], _0xe17e71[4]],
            times: 0,
            train: 0
          });
          await this.endbattle2();
        } else {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [this.id],
            petList: [_0xe17e71[5], _0xe17e71[4], _0xe17e71[3], _0xe17e71[2], _0xe17e71[1], _0xe17e71[0]],
            times: 0,
            train: 0
          });
          await this.endbattle();
        }
      } else if (mongoAttr.getFeiLianAttrFeiLian().progress <= 12) {
        if (mongoAttr.getFeiLianAttrFeiLian().progress >= 9 && _0x3f8bd5 < 3) {
          await this.send_message("cs_feilian_activity", {
            action: 3,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 2,
            skillIndexs: []
          });
          _0x3f8bd5++;
        }
        if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 1) {
          await this.send_message("cs_feilian_activity", {
            action: 2,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
        } else if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 2) {
          if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2356 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2361) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[4], _0xe17e71[0], _0xe17e71[1], _0xe17e71[2], _0xe17e71[3], _0xe17e71[5]],
              times: 0,
              train: 0
            });
            await this.firstbattle(4, 0);
          } else if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2357 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2364) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[3], _0xe17e71[0], _0xe17e71[1], _0xe17e71[2], _0xe17e71[4], _0xe17e71[5]],
              times: 0,
              train: 0
            });
            await this.firstbattle(3, 0);
          } else if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2358 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2366 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2367 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2368 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2369 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2370) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[5], _0xe17e71[0], _0xe17e71[1], _0xe17e71[2], _0xe17e71[4], _0xe17e71[3]],
              times: 0,
              train: 0
            });
            await this.firstbattle(5, 0);
          } else if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2359 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2365) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[0], _0xe17e71[1], _0xe17e71[2], _0xe17e71[4], _0xe17e71[3], _0xe17e71[5]],
              times: 0,
              train: 0
            });
            await this.firstbattle(0, 0);
          } else if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2360) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[2], _0xe17e71[1], _0xe17e71[0], _0xe17e71[4], _0xe17e71[3], _0xe17e71[5]],
              times: 0,
              train: 0
            });
            await this.firstbattle(2, 0);
          } else if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2362 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2363) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[1], _0xe17e71[2], _0xe17e71[0], _0xe17e71[4], _0xe17e71[3], _0xe17e71[5]],
              times: 0,
              train: 0
            });
            await this.firstbattle(1, 0);
          } else if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2379 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2375 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2371 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2373) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[5], _0xe17e71[0], _0xe17e71[1], _0xe17e71[2], _0xe17e71[4], _0xe17e71[3]],
              times: 0,
              train: 0
            });
            await this.firstbattle(5, 0);
          } else if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2377 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2376 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2372) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[3], _0xe17e71[0], _0xe17e71[1], _0xe17e71[2], _0xe17e71[4], _0xe17e71[5]],
              times: 0,
              train: 0
            });
            await this.firstbattle(3, 0);
          } else if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2374) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[1], _0xe17e71[0], _0xe17e71[5], _0xe17e71[2], _0xe17e71[4], _0xe17e71[3]],
              times: 0,
              train: 0
            });
            await this.kptfirstbattle(1, 0);
          } else if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2378 || mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs == 2380) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0xe17e71[0], _0xe17e71[5], _0xe17e71[1], _0xe17e71[2], _0xe17e71[4], _0xe17e71[3]],
              times: 0,
              train: 0
            });
            await this.firstbattle(0, 0);
          } else {
            break;
          }
        }
      }
      if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 0) {
        break;
      }
    }
  }
  async firstbattle(_0x155203, _0x4c58f5) {
    await this.initBattle();
    let _0x4526b6 = xls.pveBoss.getItems().filter(_0x47b17f => _0x47b17f.name.indexOf("ylfx玩家阵容") !== -1)[_0x155203].skills?.split("|")[_0x4c58f5];
    let _0x5d2061 = await this.useSkill(_0x4526b6);
    while (_0x5d2061.result.result === 0) {
      let _0x4e5292 = _0x5d2061.result.playerInfos.find(_0x4689ef => _0x4689ef.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x4e5292 !== 1) {
        addGameLog("首发被击败");
        await this.send_message("cs_feilian_activity", {
          action: 5,
          levelId: 0,
          gameplay: 0,
          petList: [],
          skillId: 0,
          skillIndexs: []
        });
        break;
      }
      addGameLog("未击败，继续攻击");
      _0x5d2061 = await this.useSkill(_0x4526b6);
      if (_0x5d2061.result.result == 0 && _0x5d2061.result.playerInfos.find(_0x3d77d2 => _0x3d77d2.uid == MFC.userInfo.uid) && _0x5d2061.result.playerInfos.find(_0x4f432d => _0x4f432d.uid == MFC.userInfo.uid).petInfos[0].useSkills.find(_0x280c3f => _0x280c3f.id == _0x4526b6)?.crtPP == 0) {
        if (getSeerItemNum(2001) > 1) {
          _0x5d2061 = await this.useItem(2001);
        } else if (getSeerItemNum(2002) > 1) {
          _0x5d2061 = await this.useItem(2002);
        } else if (getSeerItemNum(2003) > 1) {
          _0x5d2061 = await this.useItem(2003);
        } else {
          addGameLog("pp不足");
          this.stop();
        }
      }
    }
  }
  async kptfirstbattle(_0x5bc20c, _0x5c4382) {
    await this.initBattle();
    let _0x5e0a76 = [xls.pveBoss.getItems().filter(_0x183091 => _0x183091.name.indexOf("ylfx玩家阵容") !== -1)[_0x5bc20c].skills?.split("|")[1], xls.pveBoss.getItems().filter(_0x3efac1 => _0x3efac1.name.indexOf("ylfx玩家阵容") !== -1)[_0x5bc20c].skills?.split("|")[0]];
    let _0x2c7d0e = await this.useSkill(_0x5e0a76[0]);
    while (_0x2c7d0e.result.result === 0) {
      _0x5c4382++;
      let _0x3d32d2 = _0x2c7d0e.result.playerInfos.find(_0x35b1fd => _0x35b1fd.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x3d32d2 !== 1) {
        addGameLog("首发被击败");
        break;
      }
      addGameLog("未击败，继续攻击");
      _0x2c7d0e = await this.useSkill(_0x5e0a76[_0x5c4382]);
      if (_0x5c4382 == 1) {
        _0x5c4382 = 0;
      }
    }
  }
  async endbattle() {
    let _0xf17441 = 5;
    let _0x1d62b9 = await this.initBattle();
    while (_0x1d62b9.result.result === 0) {
      let _0x3f53ed = xls.pveBoss.getItems().filter(_0x54ffe3 => _0x54ffe3.name.indexOf("ylfx玩家阵容") !== -1)[_0xf17441].skills?.split("|")[0];
      let _0x7fa699 = _0x1d62b9.result.playerInfos.find(_0x3a6a6c => _0x3a6a6c.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x7fa699 !== 1) {
        addGameLog("被击败,切换");
        _0xf17441--;
        if (_0xf17441 < 0) {
          await this.send_message("cs_feilian_activity", {
            action: 5,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
          break;
        }
        const _0x263043 = {
          petIndex: 5 - _0xf17441
        };
        const _0x14527a = {
          opType: 2,
          data: _0x263043,
          groupId: ""
        };
        await this.send_message("cs_online_player_operation", _0x14527a);
      }
      addGameLog("继续攻击");
      _0x1d62b9 = await this.useSkill(_0x3f53ed);
      if (_0x1d62b9.result.result == 0 && _0x1d62b9.result.playerInfos.find(_0x24083e => _0x24083e.uid == MFC.userInfo.uid) && _0x1d62b9.result.playerInfos.find(_0x108577 => _0x108577.uid == MFC.userInfo.uid).petInfos[5 - _0xf17441].useSkills.find(_0x582795 => _0x582795.id == _0x3f53ed)?.crtPP == 0) {
        if (getSeerItemNum(2001) > 1) {
          _0x1d62b9 = await this.useItem(2001);
        } else if (getSeerItemNum(2002) > 1) {
          _0x1d62b9 = await this.useItem(2002);
        } else if (getSeerItemNum(2003) > 1) {
          _0x1d62b9 = await this.useItem(2003);
        } else {
          addGameLog("pp不足");
          this.stop();
        }
      }
    }
    if (_0x1d62b9.result.result == 2) {
      await this.send_message("cs_feilian_activity", {
        action: 5,
        levelId: 0,
        gameplay: 0,
        petList: [],
        skillId: 0,
        skillIndexs: []
      });
    }
  }
  async endbattle1() {
    let _0x5bf713 = 5;
    let _0x43476e = await this.initBattle();
    _0x43476e = await this.useSkill(22746);
    while (_0x43476e.result.result === 0) {
      let _0x4081a4 = xls.pveBoss.getItems().filter(_0x114f45 => _0x114f45.name.indexOf("ylfx玩家阵容") !== -1)[_0x5bf713].skills?.split("|")[0];
      let _0x4955f2 = _0x43476e.result.playerInfos.find(_0x27c84a => _0x27c84a.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x4955f2 !== 1) {
        addGameLog("被击败,切换");
        _0x5bf713--;
        if (_0x5bf713 < 0) {
          await this.send_message("cs_feilian_activity", {
            action: 5,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
          break;
        }
        const _0x4917b9 = {
          petIndex: 5 - _0x5bf713
        };
        const _0x5467d3 = {
          opType: 2,
          data: _0x4917b9,
          groupId: ""
        };
        await this.send_message("cs_online_player_operation", _0x5467d3);
      }
      addGameLog("继续攻击");
      _0x43476e = await this.useSkill(_0x4081a4);
      if (_0x43476e.result.result == 0 && _0x43476e.result.playerInfos.find(_0x1d5ce4 => _0x1d5ce4.uid == MFC.userInfo.uid) && _0x43476e.result.playerInfos.find(_0x42615a => _0x42615a.uid == MFC.userInfo.uid).petInfos[5 - _0x5bf713].useSkills.find(_0x388059 => _0x388059.id == _0x4081a4)?.crtPP == 0) {
        if (getSeerItemNum(2001) > 1) {
          _0x43476e = await this.useItem(2001);
        } else if (getSeerItemNum(2002) > 1) {
          _0x43476e = await this.useItem(2002);
        } else if (getSeerItemNum(2003) > 1) {
          _0x43476e = await this.useItem(2003);
        } else {
          addGameLog("pp不足");
          this.stop();
        }
      }
    }
    if (_0x43476e.result.result == 2) {
      await this.send_message("cs_feilian_activity", {
        action: 5,
        levelId: 0,
        gameplay: 0,
        petList: [],
        skillId: 0,
        skillIndexs: []
      });
    }
  }
  async endbattle2() {
    let _0x70ce37 = 0;
    let _0x4dfdfb = await this.initBattle();
    _0x4dfdfb = await this.useSkill(22746);
    while (_0x4dfdfb.result.result === 0) {
      let _0x4677e7;
      if (_0x70ce37 == 0) {
        _0x4677e7 = xls.pveBoss.getItems().filter(_0x42b037 => _0x42b037.name.indexOf("ylfx玩家阵容") !== -1)[5].skills?.split("|")[0];
      } else {
        _0x4677e7 = xls.pveBoss.getItems().filter(_0x544d92 => _0x544d92.name.indexOf("ylfx玩家阵容") !== -1)[_0x70ce37 - 1].skills?.split("|")[0];
      }
      let _0x3392e3 = _0x4dfdfb.result.playerInfos.find(_0x397891 => _0x397891.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x3392e3 !== 1) {
        addGameLog("被击败,切换");
        _0x70ce37++;
        if (_0x70ce37 > 4) {
          await this.send_message("cs_feilian_activity", {
            action: 5,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
          break;
        }
        const _0x1bbb08 = {
          petIndex: _0x70ce37
        };
        const _0x5a2f9d = {
          opType: 2,
          data: _0x1bbb08,
          groupId: ""
        };
        await this.send_message("cs_online_player_operation", _0x5a2f9d);
      }
      addGameLog("继续攻击");
      _0x4dfdfb = await this.useSkill(_0x4677e7);
      if (_0x4dfdfb.result.result == 0) {
        if (_0x70ce37 == 0) {
          if (_0x4dfdfb.result.playerInfos.find(_0x5e6f47 => _0x5e6f47.uid == MFC.userInfo.uid) && _0x4dfdfb.result.playerInfos.find(_0x2dd9a3 => _0x2dd9a3.uid == MFC.userInfo.uid).petInfos[5].useSkills.find(_0x31b52a => _0x31b52a.id == _0x4677e7)?.crtPP == 0) {
            if (getSeerItemNum(2001) > 1) {
              _0x4dfdfb = await this.useItem(2001);
            } else if (getSeerItemNum(2002) > 1) {
              _0x4dfdfb = await this.useItem(2002);
            } else if (getSeerItemNum(2003) > 1) {
              _0x4dfdfb = await this.useItem(2003);
            } else {
              addGameLog("pp不足");
              this.stop();
            }
          }
        } else if (_0x4dfdfb.result.playerInfos.find(_0x284591 => _0x284591.uid == MFC.userInfo.uid) && _0x4dfdfb.result.playerInfos.find(_0x4305df => _0x4305df.uid == MFC.userInfo.uid).petInfos[_0x70ce37].useSkills.find(_0x2c2a98 => _0x2c2a98.id == _0x4677e7)?.crtPP == 0) {
          if (getSeerItemNum(2001) > 1) {
            _0x4dfdfb = await this.useItem(2001);
          } else if (getSeerItemNum(2002) > 1) {
            _0x4dfdfb = await this.useItem(2002);
          } else if (getSeerItemNum(2003) > 1) {
            _0x4dfdfb = await this.useItem(2003);
          } else {
            addGameLog("pp不足");
            this.stop();
          }
        }
      }
    }
    if (_0x4dfdfb.result.result == 2) {
      await this.send_message("cs_feilian_activity", {
        action: 5,
        levelId: 0,
        gameplay: 0,
        petList: [],
        skillId: 0,
        skillIndexs: []
      });
    }
  }
  async flyScythe2() {
    for (let _0x1b7963 = 0; _0x1b7963 < this.initfldata2.length; _0x1b7963++) {
      if (!mongoAttr.getFeiLianAttrFeiLian().btlPass.includes(this.initfldata2[_0x1b7963])) {
        while (!mongoAttr.getFeiLianAttrFeiLian().btlPass.includes(this.initfldata2[_0x1b7963])) {
          let _0x24c7a6 = getGoalPets([{
            skills: [100444, 100446]
          }]);
          if (!_0x24c7a6) {
            break;
          }
          if (MFC.userInfo.curEnergy < 15) {
            break;
          }
          if (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
            await this.send_message("cs_feilian_activity", {
              action: 5,
              levelId: 0,
              gameplay: 0,
              petList: [],
              skillId: 0,
              skillIndexs: []
            });
            addGameLog("重新开始");
          }
          this.levelId = 15 + _0x1b7963;
          this.id = this.initfldata2[_0x1b7963];
          await this.fl2battle();
        }
      }
    }
  }
  async fl2battle() {
    let _0x3e38cc = getGoalPets([{
      skills: [100444, 100446]
    }]);
    if (!_0x3e38cc) {
      addGameLog("背包没有敌我符文+水龙盾符文青龙");
    } else if (MFC.userInfo.curEnergy >= 15) {
      await this.send_message("cs_feilian_activity", {
        action: 1,
        levelId: this.levelId,
        gameplay: 2,
        petList: [_0x3e38cc.getTime],
        skillId: 0,
        skillIndexs: []
      });
      while (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
        if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 1) {
          await this.send_message("cs_feilian_activity", {
            action: 2,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
        } else if (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 1) {
          if (mongoAttr.getFeiLianAttrFeiLian().progress >= 14) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [this.id],
              petList: [_0x3e38cc.getTime],
              times: 0,
              train: 0
            });
          } else {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0x3e38cc.getTime],
              times: 0,
              train: 0
            });
          }
          await this.initBattle();
          let _0xe231de = [100446, 100446, 100446, 100444, 100444];
          let _0x4037d5;
          if (getSeerItemNum(2001) > 1) {
            _0x4037d5 = await this.useItem(2001);
          } else if (getSeerItemNum(2002) > 1) {
            _0x4037d5 = await this.useItem(2002);
          } else if (getSeerItemNum(2003) > 1) {
            _0x4037d5 = await this.useItem(2003);
          } else {
            addGameLog("pp不足");
            this.stop();
          }
          let _0x4beae8 = 0;
          while (_0x4037d5.result.result === 0) {
            let _0x1e0dd9 = _0x4037d5.result.playerInfos.find(_0x5af4f6 => _0x5af4f6.uid === MFC.userInfo.uid).nextRoundOP;
            if (_0x1e0dd9 !== 1) {
              addGameLog("首发被击败");
              await this.send_message("cs_feilian_activity", {
                action: 5,
                levelId: 0,
                gameplay: 0,
                petList: [],
                skillId: 0,
                skillIndexs: []
              });
              break;
            }
            addGameLog("未击败，继续攻击");
            _0x4037d5 = await this.useSkill(_0xe231de[_0x4beae8]);
            _0x4beae8++;
            if (_0x4beae8 >= 4 && _0x4037d5.result.result === 0) {
              if (getSeerItemNum(2001) > 1) {
                _0x4037d5 = await this.useItem(2001);
                _0x4beae8 = 0;
              } else if (getSeerItemNum(2002) > 1) {
                _0x4037d5 = await this.useItem(2002);
                _0x4beae8 = 0;
              } else if (getSeerItemNum(2003) > 1) {
                _0x4037d5 = await this.useItem(2003);
                _0x4beae8 = 0;
              } else {
                addGameLog("pp不足");
                this.stop();
              }
            }
          }
          if (_0x4037d5.result.result == 2) {
            await this.send_message("cs_feilian_activity", {
              action: 5,
              levelId: 0,
              gameplay: 0,
              petList: [],
              skillId: 0,
              skillIndexs: []
            });
          }
          if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 0) {
            break;
          }
        }
      }
    } else {
      addGameLog("电池不足");
      this.stop();
    }
  }
  async flbtke() {
    let _0x298208 = getGoalPets([{
      skills: [100940, 100943, 100939, 100942]
    }]);
    let _0x525f76 = getGoalPets([{
      skills: [11007]
    }, {
      skills: [100008]
    }]);
    if (_0x298208 && _0x525f76) {
      for (let _0x31f238 = 0; _0x31f238 < this.initfldata2.length; _0x31f238++) {
        if (!mongoAttr.getFeiLianAttrFeiLian().btlPass.includes(this.initfldata2[_0x31f238]) && this.initfldata2[_0x31f238] !== 2355) {
          while (!mongoAttr.getFeiLianAttrFeiLian().btlPass.includes(this.initfldata2[_0x31f238])) {
            if (MFC.userInfo.curEnergy < 15) {
              addGameLog("电池不足");
              break;
            }
            if (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
              await this.send_message("cs_feilian_activity", {
                action: 5,
                levelId: 0,
                gameplay: 0,
                petList: [],
                skillId: 0,
                skillIndexs: []
              });
              addGameLog("重新开始");
            }
            this.levelId = 15 + _0x31f238;
            this.id = this.initfldata2[_0x31f238];
            await this.flbtkebattle(_0x298208, _0x525f76);
          }
        }
      }
    } else {
      addGameLog("背包没有技能增幅的贝特卡恩或者没带对技能金光绿叶的丽莎步步");
    }
  }
  async flbtke2() {
    let _0x54dbae = getGoalPets([{
      skills: [100940, 100943, 100939, 100941]
    }]);
    if (!mongoAttr.getFeiLianAttrFeiLian().btlPass.includes(2355) && this.initfldata2.includes(2355)) {
      if (_0x54dbae) {
        if (!mongoAttr.getFeiLianAttrFeiLian().btlPass.includes(2355) && this.initfldata2.includes(2355)) {
          while (!mongoAttr.getFeiLianAttrFeiLian().btlPass.includes(2355)) {
            if (MFC.userInfo.curEnergy < 15) {
              addGameLog("电池不足");
              break;
            }
            if (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
              await this.send_message("cs_feilian_activity", {
                action: 5,
                levelId: 0,
                gameplay: 0,
                petList: [],
                skillId: 0,
                skillIndexs: []
              });
              addGameLog("重新开始");
            }
            this.levelId = 21;
            this.id = 2355;
            await this.flbtkebattle2(_0x54dbae);
          }
        }
      } else {
        addGameLog("背包没有技能增幅的贝特卡恩或者没带对技能");
      }
    }
  }
  async flbtkebattle(_0x457b8a, _0x175e68) {
    if (MFC.userInfo.curEnergy >= 15) {
      await this.send_message("cs_feilian_activity", {
        action: 1,
        levelId: this.levelId,
        gameplay: 2,
        petList: [_0x457b8a.getTime, _0x175e68.getTime, PetManager.getInstance().getAllPets().filter(_0x381d76 => _0x381d76.level == 1)[0].getTime, PetManager.getInstance().getAllPets().filter(_0x2937a1 => _0x2937a1.level == 1)[1].getTime, PetManager.getInstance().getAllPets().filter(_0x383cd7 => _0x383cd7.level == 1)[2].getTime, PetManager.getInstance().getAllPets().filter(_0x4b0578 => _0x4b0578.level == 1)[3].getTime],
        skillId: 0,
        skillIndexs: []
      });
      let _0x476b91 = 0;
      while (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
        if (mongoAttr.getFeiLianAttrFeiLian().progress >= 14) {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [this.id],
            petList: [_0x457b8a.getTime, _0x175e68.getTime, PetManager.getInstance().getAllPets().filter(_0x25ef5c => _0x25ef5c.level == 1)[0].getTime, PetManager.getInstance().getAllPets().filter(_0x5f442d => _0x5f442d.level == 1)[1].getTime, PetManager.getInstance().getAllPets().filter(_0x12d161 => _0x12d161.level == 1)[2].getTime, PetManager.getInstance().getAllPets().filter(_0x397ed6 => _0x397ed6.level == 1)[3].getTime],
            times: 0,
            train: 0
          });
          if (this.id == 2353) {
            let _0x50f783;
            if (_0x175e68.skills.find(_0x2721ab => _0x2721ab == 100008)) {
              _0x50f783 = 100008;
            } else {
              _0x50f783 = 11007;
            }
            await this.btkebattle3(_0x50f783);
          } else if (this.id == 2354) {
            await this.btkebattle4();
          } else {
            await this.btkebattle();
          }
        } else if (mongoAttr.getFeiLianAttrFeiLian().progress >= 9 && _0x476b91 < 3) {
          await this.send_message("cs_feilian_activity", {
            action: 3,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 2,
            skillIndexs: []
          });
          _0x476b91++;
          if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 1) {
            await this.send_message("cs_feilian_activity", {
              action: 2,
              levelId: 0,
              gameplay: 0,
              petList: [],
              skillId: 0,
              skillIndexs: []
            });
          } else if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 2) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0x457b8a.getTime, _0x175e68.getTime, PetManager.getInstance().getAllPets().filter(_0x5a259e => _0x5a259e.level == 1)[0].getTime, PetManager.getInstance().getAllPets().filter(_0x4da5d5 => _0x4da5d5.level == 1)[1].getTime, PetManager.getInstance().getAllPets().filter(_0x924a8c => _0x924a8c.level == 1)[2].getTime, PetManager.getInstance().getAllPets().filter(_0x22f888 => _0x22f888.level == 1)[3].getTime],
              times: 0,
              train: 0
            });
            await this.btkebattle();
          }
        } else if (mongoAttr.getFeiLianAttrFeiLian().progress >= 12 && mongoAttr.getFeiLianAttrFeiLian().progress < 14) {
          await this.send_message("cs_feilian_activity", {
            action: 3,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 1,
            skillIndexs: []
          });
        } else if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 1) {
          await this.send_message("cs_feilian_activity", {
            action: 2,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
        } else if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 2) {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
            petList: [_0x457b8a.getTime, _0x175e68.getTime, PetManager.getInstance().getAllPets().filter(_0x4be10a => _0x4be10a.level == 1)[0].getTime, PetManager.getInstance().getAllPets().filter(_0x25309d => _0x25309d.level == 1)[1].getTime, PetManager.getInstance().getAllPets().filter(_0x38d19d => _0x38d19d.level == 1)[2].getTime, PetManager.getInstance().getAllPets().filter(_0x14962f => _0x14962f.level == 1)[3].getTime],
            times: 0,
            train: 0
          });
          if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0] == 2364) {
            console.log(mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0], "cs_pve_fight_start");
            await this.btkebattle2();
          } else {
            await this.btkebattle();
          }
        }
      }
    } else {
      addGameLog("电池不足");
      this.stop();
    }
  }
  async flbtkebattle2(_0x4d63cb) {
    if (MFC.userInfo.curEnergy >= 15) {
      await this.send_message("cs_feilian_activity", {
        action: 1,
        levelId: this.levelId,
        gameplay: 2,
        petList: [_0x4d63cb.getTime, PetManager.getInstance().getAllPets().filter(_0x31180c => _0x31180c.level == 1)[3].getTime],
        skillId: 0,
        skillIndexs: []
      });
      let _0x3aa288 = 0;
      while (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
        if (mongoAttr.getFeiLianAttrFeiLian().progress >= 14) {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [this.id],
            petList: [_0x4d63cb.getTime, PetManager.getInstance().getAllPets().filter(_0x3d3b8a => _0x3d3b8a.level == 1)[3].getTime],
            times: 0,
            train: 0
          });
          if (this.id == 2353) {
            let _0x3bc26a;
            if (pet2.skills.find(_0x374bb1 => _0x374bb1 == 100008)) {
              _0x3bc26a = 100008;
            } else {
              _0x3bc26a = 11007;
            }
            await this.btkebattle3(_0x3bc26a);
          } else if (this.id == 2354) {
            await this.btkebattle4();
          } else if (this.id == 2355) {
            await this.btkebattle5();
          } else {
            await this.btkebattle();
          }
        } else if (mongoAttr.getFeiLianAttrFeiLian().progress >= 9 && _0x3aa288 < 3) {
          await this.send_message("cs_feilian_activity", {
            action: 3,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 2,
            skillIndexs: []
          });
          _0x3aa288++;
          if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 1) {
            await this.send_message("cs_feilian_activity", {
              action: 2,
              levelId: 0,
              gameplay: 0,
              petList: [],
              skillId: 0,
              skillIndexs: []
            });
          } else if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 2) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
              petList: [_0x4d63cb.getTime, PetManager.getInstance().getAllPets().filter(_0x2adc21 => _0x2adc21.level == 1)[3].getTime],
              times: 0,
              train: 0
            });
            await this.btkebattle();
          }
        } else if (mongoAttr.getFeiLianAttrFeiLian().progress >= 12 && mongoAttr.getFeiLianAttrFeiLian().progress < 14) {
          await this.send_message("cs_feilian_activity", {
            action: 3,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 1,
            skillIndexs: []
          });
        } else if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 1) {
          await this.send_message("cs_feilian_activity", {
            action: 2,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
        } else if (mongoAttr.getFeiLianAttrFeiLian().curStatus == 2) {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0]],
            petList: [_0x4d63cb.getTime, PetManager.getInstance().getAllPets().filter(_0x2afb84 => _0x2afb84.level == 1)[3].getTime],
            times: 0,
            train: 0
          });
          if (mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0] == 2364) {
            console.log(mongoAttr.getFeiLianAttrFeiLian().lastEvent.eventArgs[0], "cs_pve_fight_start");
            await this.btkebattle2();
          } else {
            await this.btkebattle();
          }
        }
      }
    } else {
      addGameLog("电池不足");
      this.stop();
    }
  }
  async btkebattle() {
    await this.initBattle();
    let _0x34fc25 = [100940, 100940, 100940, 100940, 100940, 100940, 100943, 100943, 100943, 100943, 100943, 100939, 100939, 100939, 100939, 100939, 100940];
    let _0x4fa42a = await this.useSkill(_0x34fc25[0]);
    let _0x45ea7c = 1;
    while (_0x4fa42a.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x4fa42a = await this.useSkill(_0x34fc25[_0x45ea7c]);
      _0x45ea7c++;
      if (_0x45ea7c >= 17) {
        _0x45ea7c = 11;
      }
      let _0x389cc3 = _0x4fa42a.result.playerInfos.find(_0x57a0c4 => _0x57a0c4.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x389cc3 !== 1) {
        addGameLog("首发被击败");
        await this.send_message("cs_feilian_activity", {
          action: 5,
          levelId: 0,
          gameplay: 0,
          petList: [],
          skillId: 0,
          skillIndexs: []
        });
        break;
      }
    }
    if (_0x4fa42a.result.result == 2) {
      await this.send_message("cs_feilian_activity", {
        action: 5,
        levelId: 0,
        gameplay: 0,
        petList: [],
        skillId: 0,
        skillIndexs: []
      });
    }
  }
  async btkebattle2() {
    await this.initBattle();
    let _0x65ed83 = [100940, 100939];
    let _0x501878 = await this.useSkill(_0x65ed83[0]);
    let _0x6daff1 = 1;
    while (_0x501878.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x501878 = await this.useSkill(_0x65ed83[_0x6daff1]);
      _0x6daff1++;
      if (_0x6daff1 >= 2) {
        _0x6daff1 = 0;
      }
      let _0x53d941 = _0x501878.result.playerInfos.find(_0x519611 => _0x519611.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x53d941 !== 1) {
        addGameLog("首发被击败");
        await this.send_message("cs_feilian_activity", {
          action: 5,
          levelId: 0,
          gameplay: 0,
          petList: [],
          skillId: 0,
          skillIndexs: []
        });
        break;
      }
    }
    if (_0x501878.result.result == 2) {
      await this.send_message("cs_feilian_activity", {
        action: 5,
        levelId: 0,
        gameplay: 0,
        petList: [],
        skillId: 0,
        skillIndexs: []
      });
    }
  }
  async btkebattle3(_0x28d446) {
    await this.initBattle();
    let _0x993c91 = await this.useSkill(100939);
    let _0x2a0e78 = [100942, 100939];
    let _0x3fa889 = 1;
    let _0x217a09 = 0;
    let _0x24f98f = 0;
    let _0x9db7dc = 0;
    while (_0x993c91.result.result === 0) {
      addGameLog("未击败，继续攻击");
      if (_0x3fa889 < 3) {
        _0x993c91 = await this.useSkill(100939);
      } else if (_0x217a09 == 0) {
        await this.send_message("cs_online_player_operation", {
          opType: 2,
          data: {
            petIndex: 2
          },
          groupId: ""
        });
        _0x993c91 = await this.useSkill(PetManager.getInstance().getAllPets().filter(_0x2ce8f3 => _0x2ce8f3.level == 1)[0].skills[0]);
        let _0x1e143b = _0x993c91.result.playerInfos.find(_0x25599d => _0x25599d.uid === MFC.userInfo.uid).nextRoundOP;
        if (_0x1e143b !== 1) {
          await this.send_message("cs_online_player_operation", {
            opType: 2,
            data: {
              petIndex: 1
            },
            groupId: ""
          });
          _0x217a09++;
        }
      } else if (_0x217a09 == 1) {
        await this.send_message("cs_online_player_operation", {
          opType: 2,
          data: {
            petIndex: 1
          },
          groupId: ""
        });
        _0x993c91 = await this.useSkill(_0x28d446);
        let _0x38a993 = _0x993c91.result.playerInfos.find(_0x49f09a => _0x49f09a.uid === MFC.userInfo.uid).nextRoundOP;
        if (_0x38a993 !== 1) {
          await this.send_message("cs_online_player_operation", {
            opType: 2,
            data: {
              petIndex: 0
            },
            groupId: ""
          });
          _0x217a09++;
        }
      } else if (_0x217a09 == 2) {
        _0x993c91 = await this.useSkill(_0x2a0e78[_0x24f98f]);
        _0x24f98f++;
        if (_0x24f98f >= 2) {
          _0x24f98f = 0;
          _0x9db7dc++;
        }
        if (_0x993c91.result.result === 0) {
          if (getSeerItemNum(2001) > 1) {
            _0x993c91 = await this.useItem(2001);
            _0x3fa889 = 0;
          } else if (getSeerItemNum(2002) > 1) {
            _0x993c91 = await this.useItem(2002);
            _0x3fa889 = 0;
          } else if (getSeerItemNum(2003) > 1) {
            _0x993c91 = await this.useItem(2003);
            _0x3fa889 = 0;
          } else {
            addGameLog("pp不足");
            this.stop();
          }
        }
        let _0xef5b5c = _0x993c91.result.playerInfos.find(_0x529e18 => _0x529e18.uid === MFC.userInfo.uid).nextRoundOP;
        if (_0xef5b5c !== 1) {
          addGameLog("首发被击败");
          break;
        }
        if (_0x9db7dc == 2) {
          _0x217a09++;
        }
      } else if (_0x217a09 == 3) {
        await this.send_message("cs_online_player_operation", {
          opType: 2,
          data: {
            petIndex: 3
          },
          groupId: ""
        });
        _0x993c91 = await this.useSkill(PetManager.getInstance().getAllPets().filter(_0x1a3690 => _0x1a3690.level == 1)[1].skills[0]);
        let _0x4e7b80 = _0x993c91.result.playerInfos.find(_0x3b5d4c => _0x3b5d4c.uid === MFC.userInfo.uid).nextRoundOP;
        if (_0x4e7b80 !== 1) {
          await this.send_message("cs_online_player_operation", {
            opType: 2,
            data: {
              petIndex: 0
            },
            groupId: ""
          });
          _0x217a09++;
        }
      } else if (_0x217a09 == 4) {
        _0x993c91 = await this.useSkill(_0x2a0e78[_0x24f98f]);
        _0x24f98f++;
        if (_0x24f98f >= 2) {
          _0x24f98f = 0;
          _0x9db7dc++;
        }
        if (_0x993c91.result.result === 0) {
          if (getSeerItemNum(2001) > 1) {
            _0x993c91 = await this.useItem(2001);
            _0x3fa889 = 0;
          } else if (getSeerItemNum(2002) > 1) {
            _0x993c91 = await this.useItem(2002);
            _0x3fa889 = 0;
          } else if (getSeerItemNum(2003) > 1) {
            _0x993c91 = await this.useItem(2003);
            _0x3fa889 = 0;
          } else {
            addGameLog("pp不足");
            this.stop();
          }
        }
        let _0x2392e0 = _0x993c91.result.playerInfos.find(_0x1326d8 => _0x1326d8.uid === MFC.userInfo.uid).nextRoundOP;
        if (_0x2392e0 !== 1) {
          addGameLog("首发被击败");
          await this.send_message("cs_feilian_activity", {
            action: 5,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
          break;
        }
        if (_0x9db7dc == 2) {
          _0x217a09++;
        }
      } else if (_0x217a09 == 5) {
        await this.send_message("cs_online_player_operation", {
          opType: 2,
          data: {
            petIndex: 4
          },
          groupId: ""
        });
        _0x993c91 = await this.useSkill(PetManager.getInstance().getAllPets().filter(_0xbcb1c6 => _0xbcb1c6.level == 1)[2].skills[0]);
        let _0x1ebf29 = _0x993c91.result.playerInfos.find(_0x9fd495 => _0x9fd495.uid === MFC.userInfo.uid).nextRoundOP;
        if (_0x1ebf29 !== 1) {
          await this.send_message("cs_online_player_operation", {
            opType: 2,
            data: {
              petIndex: 0
            },
            groupId: ""
          });
          _0x217a09++;
        }
      } else if (_0x217a09 == 6) {
        _0x993c91 = await this.useSkill(_0x2a0e78[_0x24f98f]);
        _0x24f98f++;
        if (_0x24f98f >= 2) {
          _0x24f98f = 0;
          _0x9db7dc++;
        }
        if (_0x993c91.result.result === 0) {
          if (getSeerItemNum(2001) > 1) {
            _0x993c91 = await this.useItem(2001);
            _0x3fa889 = 0;
          } else if (getSeerItemNum(2002) > 1) {
            _0x993c91 = await this.useItem(2002);
            _0x3fa889 = 0;
          } else if (getSeerItemNum(2003) > 1) {
            _0x993c91 = await this.useItem(2003);
            _0x3fa889 = 0;
          } else {
            addGameLog("pp不足");
            this.stop();
          }
        }
        let _0x1c03bb = _0x993c91.result.playerInfos.find(_0xfe8a1c => _0xfe8a1c.uid === MFC.userInfo.uid).nextRoundOP;
        if (_0x1c03bb !== 1) {
          addGameLog("首发被击败");
          await this.send_message("cs_feilian_activity", {
            action: 5,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
          break;
        }
        if (_0x9db7dc == 2) {
          _0x217a09++;
        }
      } else if (_0x217a09 == 7) {
        await this.send_message("cs_online_player_operation", {
          opType: 2,
          data: {
            petIndex: 5
          },
          groupId: ""
        });
        _0x993c91 = await this.useSkill(PetManager.getInstance().getAllPets().filter(_0x2dd777 => _0x2dd777.level == 1)[3].skills[0]);
        let _0xd7aeb5 = _0x993c91.result.playerInfos.find(_0x6b75e5 => _0x6b75e5.uid === MFC.userInfo.uid).nextRoundOP;
        if (_0xd7aeb5 !== 1) {
          await this.send_message("cs_online_player_operation", {
            opType: 2,
            data: {
              petIndex: 0
            },
            groupId: ""
          });
          _0x217a09++;
        }
      } else if (_0x217a09 == 8) {
        _0x993c91 = await this.useSkill(_0x2a0e78[_0x24f98f]);
        _0x24f98f++;
        if (_0x24f98f >= 2) {
          _0x24f98f = 0;
          _0x9db7dc++;
        }
        if (_0x993c91.result.result === 0) {
          if (getSeerItemNum(2001) > 1) {
            _0x993c91 = await this.useItem(2001);
            _0x3fa889 = 0;
          } else if (getSeerItemNum(2002) > 1) {
            _0x993c91 = await this.useItem(2002);
            _0x3fa889 = 0;
          } else if (getSeerItemNum(2003) > 1) {
            _0x993c91 = await this.useItem(2003);
            _0x3fa889 = 0;
          } else {
            addGameLog("pp不足");
            this.stop();
          }
        }
        let _0x5b5979 = _0x993c91.result.playerInfos.find(_0x3c8974 => _0x3c8974.uid === MFC.userInfo.uid).nextRoundOP;
        if (_0x5b5979 !== 1) {
          addGameLog("首发被击败");
          await this.send_message("cs_feilian_activity", {
            action: 5,
            levelId: 0,
            gameplay: 0,
            petList: [],
            skillId: 0,
            skillIndexs: []
          });
          break;
        }
        if (_0x9db7dc == 2) {
          _0x217a09++;
        }
      }
      _0x3fa889++;
    }
    if (_0x993c91.result.result == 2) {
      await this.send_message("cs_feilian_activity", {
        action: 5,
        levelId: 0,
        gameplay: 0,
        petList: [],
        skillId: 0,
        skillIndexs: []
      });
    }
  }
  async btkebattle4() {
    await this.initBattle();
    let _0x134905 = [100942, 100939];
    let _0x2e88da = await this.useSkill(_0x134905[0]);
    let _0x23df0f = 1;
    let _0x32e171 = 0;
    while (_0x2e88da.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x2e88da = await this.useSkill(_0x134905[_0x23df0f]);
      _0x23df0f++;
      if (_0x23df0f >= 2) {
        _0x32e171++;
        _0x23df0f = 0;
      }
      if (_0x2e88da.result.playerInfos.find(_0x13f6a2 => _0x13f6a2.uid === MFC.userInfo.uid).petInfos[0].hp < 5000) {
        addGameLog("血量叠不够");
        await this.send_message("cs_feilian_activity", {
          action: 5,
          levelId: 0,
          gameplay: 0,
          petList: [],
          skillId: 0,
          skillIndexs: []
        });
        break;
      }
      if (_0x32e171 > 4 && _0x2e88da.result.result === 0) {
        if (getSeerItemNum(2001) > 1) {
          _0x2e88da = await this.useItem(2001);
          _0x32e171 = 0;
        } else if (getSeerItemNum(2002) > 1) {
          _0x2e88da = await this.useItem(2002);
          _0x32e171 = 0;
        } else if (getSeerItemNum(2003) > 1) {
          _0x2e88da = await this.useItem(2003);
          _0x32e171 = 0;
        } else {
          addGameLog("pp不足");
          this.stop();
        }
      }
      let _0x18fc9e = _0x2e88da.result.playerInfos.find(_0x7cc3af => _0x7cc3af.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x18fc9e !== 1) {
        addGameLog("首发被击败");
        break;
      }
    }
    if (_0x2e88da.result.result == 2) {
      await this.send_message("cs_feilian_activity", {
        action: 5,
        levelId: 0,
        gameplay: 0,
        petList: [],
        skillId: 0,
        skillIndexs: []
      });
    }
  }
  async btkebattle5() {
    await this.initBattle();
    let _0x259ee2 = [100939, 100941, 100943, 100940];
    let _0x5d332f = await this.useSkill(_0x259ee2[0]);
    let _0x36c83d = 1;
    while (_0x5d332f.result.result === 0) {
      addGameLog("未击败，继续攻击");
      _0x5d332f = await this.useSkill(_0x259ee2[_0x36c83d]);
      _0x36c83d++;
      if (_0x36c83d >= 4) {
        _0x36c83d = 0;
      }
      if (_0x5d332f.result.playerInfos.find(_0x2d74c8 => _0x2d74c8.uid === MFC.userInfo.uid).petInfos[0].hp < 5000) {
        addGameLog("血量叠不够");
        await this.send_message("cs_feilian_activity", {
          action: 5,
          levelId: 0,
          gameplay: 0,
          petList: [],
          skillId: 0,
          skillIndexs: []
        });
        break;
      }
      let _0x33c436 = _0x5d332f.result.playerInfos.find(_0x5c8215 => _0x5c8215.uid === MFC.userInfo.uid).nextRoundOP;
      if (_0x33c436 !== 1) {
        addGameLog("首发被击败");
        break;
      }
    }
    if (_0x5d332f.result.result == 2) {
      await this.send_message("cs_feilian_activity", {
        action: 5,
        levelId: 0,
        gameplay: 0,
        petList: [],
        skillId: 0,
        skillIndexs: []
      });
    }
  }
  async flsd() {
    for (let _0x2a5c0b = 0; _0x2a5c0b < this.initfldata2.length; _0x2a5c0b++) {
      if (MFC.userInfo.curEnergy >= 15 && this.initfldata2[_0x2a5c0b] !== 2355) {
        if (pveUtils.GetNewActivityCardOneData(this.initfldata2[_0x2a5c0b]) && pveUtils.GetNewActivityCardOneData(this.initfldata2[_0x2a5c0b]).dailyWin !== 1 && pveUtils.GetNewActivityCardOneData(this.initfldata2[_0x2a5c0b]).firstWin == 1) {}
        await this.send_message("cs_pve_fight_start", {
          type: 3,
          cardId: [this.initfldata2[_0x2a5c0b]],
          petList: [PetManager.getInstance().getAllPets()[0].getTime],
          times: 1,
          train: 0
        });
      } else if (MFC.userInfo.curEnergy >= 15) {
        addGameLog("电池不足无法扫荡");
      }
    }
  }
  async flsd1() {
    if (MFC.userInfo.curEnergy >= 15) {
      if (pveUtils.GetNewActivityCardOneData(2355) && pveUtils.GetNewActivityCardOneData(2355).dailyWin !== 1 && pveUtils.GetNewActivityCardOneData(2355).firstWin == 1) {
        while (pveUtils.GetNewActivityCardOneData(2355).dailyWin !== 1) {
          let _0x28371d = getGoalPets([{
            skills: [100444, 100446]
          }]);
          if (!_0x28371d) {
            break;
          }
          if (MFC.userInfo.curEnergy < 15) {
            break;
          }
          if (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
            await this.send_message("cs_feilian_activity", {
              action: 5,
              levelId: 0,
              gameplay: 0,
              petList: [],
              skillId: 0,
              skillIndexs: []
            });
            addGameLog("重新开始");
          }
          this.levelId = 21;
          this.id = 2355;
          await this.fl2battle();
        }
      }
    } else {
      addGameLog("电池不足无法对战");
    }
  }
  async flsd2() {
    if (MFC.userInfo.curEnergy >= 15) {
      if (pveUtils.GetNewActivityCardOneData(2355) && pveUtils.GetNewActivityCardOneData(2355).dailyWin !== 1 && pveUtils.GetNewActivityCardOneData(2355).firstWin == 1) {
        while (pveUtils.GetNewActivityCardOneData(2355).dailyWin !== 1) {
          let _0x1ef3b8 = getGoalPets([{
            skills: [100940, 100943, 100939, 100941]
          }]);
          if (!_0x1ef3b8) {
            addGameLog("背包没有技能增幅的贝特卡恩或者没带对技能");
            break;
          }
          if (MFC.userInfo.curEnergy < 15) {
            break;
          }
          if (mongoAttr.getFeiLianAttrFeiLian().curStatus !== 0) {
            await this.send_message("cs_feilian_activity", {
              action: 5,
              levelId: 0,
              gameplay: 0,
              petList: [],
              skillId: 0,
              skillIndexs: []
            });
            addGameLog("重新开始");
          }
          this.levelId = 21;
          this.id = 2355;
          await this.flbtkebattle2(_0x1ef3b8);
        }
      }
    } else {
      addGameLog("电池不足无法对战");
    }
  }
  async zhanhuang() {
    let _0x26af0b = 14816;
    const _0x22d0d1 = {
      skills: [_0x26af0b]
    };
    let _0x5bb5c9 = getGoalPets([_0x22d0d1]);
    if (!_0x5bb5c9) {
      _0x26af0b = 32529;
      const _0x4ca318 = {
        skills: [_0x26af0b]
      };
      _0x5bb5c9 = getGoalPets([_0x4ca318]);
    }
    if (!_0x5bb5c9) {
      _0x26af0b = 32127;
      const _0x12d177 = {
        skills: [_0x26af0b]
      };
      _0x5bb5c9 = getGoalPets([_0x12d177]);
    }
    if (!_0x5bb5c9) {
      this.stop();
      MFC.alert.show(`背包中没有 精灵拥有 
奥义断水击 技能 或者 
幕夜龙王击 技能 或者 
灭世歼星炮 技能`);
      return;
    } else {
      while (1) {
        let _0x2e97a7 = await this.send_message("cs_zhanhuang_op", {
          op: 1,
          pos: 0,
          type: 0
        });
        if ((_0x2e97a7.status == 1 || _0x2e97a7.status == 3) && _0x2e97a7.randomAffects.length > 0) {
          addGameLog("选择增益!");
          await this.send_message("cs_zhanhuang_op", {
            op: 3,
            pos: 1,
            type: 0
          });
        } else if (_0x2e97a7.status == 1 && _0x2e97a7.randomAffects.length == 0) {
          addGameLog("选择对战boss!");
          await this.send_message("cs_zhanhuang_op", {
            op: 4,
            pos: 1,
            type: 0
          });
        } else if (_0x2e97a7.status == 2) {
          addGameLog("遇到商店 跳过继续 !");
          await this.send_message("cs_zhanhuang_op", {
            op: 9,
            pos: 0,
            type: 0
          });
        } else if (_0x2e97a7.status == 3) {
          addGameLog("激活战意!继续前进");
          await wait(200);
          await this.send_message("cs_zhanhuang_op", {
            op: 10,
            pos: 0,
            type: 0
          });
        } else if (_0x2e97a7.status == 4) {
          addGameLog("进入对战!");
          for (let _0x4de6ec = 0; _0x4de6ec < 25; _0x4de6ec++) {
            addGameLog("尝试 对战第" + (_0x4de6ec + 1) + "次");
            const _0x8d4643 = {
              type: 1,
              cardId: [_0x2e97a7.cardId],
              petList: [_0x5bb5c9.getTime],
              times: 0,
              train: 0
            };
            let _0x192de5 = await this.send_message("cs_pve_fight_start", _0x8d4643);
            if (JSON.stringify(_0x192de5).includes("体力不足")) {
              addGameLog("电池不足,战皇结束");
              this.stop();
              return;
            }
            await this.initBattle();
            let _0x35d18f = await this.useSkill(_0x26af0b);
            while (_0x35d18f.result.result == 0) {
              _0x35d18f = await this.useSkill(_0x26af0b);
              if (_0x35d18f.result.roundNum >= 2) {
                addGameLog("回合数过多,逃跑!");
                await this.send_message("cs_quit_battle", {});
                break;
              }
            }
            if (_0x35d18f.result.result === 1) {
              addGameLog("顺利击杀boss");
              break;
            } else {
              addGameLog("未击败Boss");
            }
            if (_0x4de6ec == 13) {
              addGameLog("技能对boss失效 请手动通过");
              MFC.alert.show("技能对本关卡boss失效 请手动通过");
              this.stop();
              return;
            }
          }
        } else if (_0x2e97a7.status == 11) {
          addGameLog("到底顶层!挑战胜利");
          await wait(200);
          this.stop();
          return;
        } else {
          addGameLog("特殊情况");
          logger("特殊情况", _0x2e97a7);
          break;
        }
        await wait(800);
        addGameLog("进行下一轮操作!");
      }
      this.stop();
      return;
    }
  }
  async Renaultui() {
    super.start();
    let _0x468538 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0xff79b2 = [];
      var _0x3778da = SimpleAlertUi({
        height: 400,
        width: 500
      });
      _0x468538.alertWin = _0x3778da;
      const _0x5cc5d7 = {
        text: "雷锘",
        x: _0x3778da.width / 2 - 20,
        y: _0x3778da.height / 16
      };
      var _0x38bd0b = createLabel(_0x5cc5d7);
      _0x38bd0b.size = 20;
      _0xff79b2.push(_0x38bd0b);
      const _0x449111 = {
        text: "注意:",
        x: 30,
        y: _0x3778da.height / 16 + 20,
        textColor: 16776960
      };
      var _0x46973e = createLabel(_0x449111);
      _0xff79b2.push(_0x46973e);
      var _0x46973e = createLabel({
        text: "1.一星二星稳定打法需要比德尔大招冰箱真空与阳电子",
        x: _0x3778da.width / 2 - 150,
        y: _0x46973e.y + 26
      });
      _0xff79b2.push(_0x46973e);
      const _0x4d4f03 = {
        text: "2.强推与轮询最好设置特攻物攻交替放",
        x: _0x3778da.width / 2 - 150,
        y: _0x46973e.y + 26
      };
      var _0x3a1d92 = createLabel(_0x4d4f03);
      _0xff79b2.push(_0x3a1d92);
      const _0x5520f2 = {
        text: "3.推荐冰箱雷伊6块钱青龙轮询,有高头衔乱杀",
        x: _0x3778da.width / 2 - 150,
        y: _0x3a1d92.y + 26
      };
      var _0x1a1046 = createLabel(_0x5520f2);
      _0xff79b2.push(_0x1a1046);
      const _0x28d332 = {
        text: "4.除强推与轮询外阵容需要冰箱与雷伊",
        x: _0x3778da.width / 2 - 150,
        y: _0x1a1046.y + 26
      };
      var _0x4072f3 = createLabel(_0x28d332);
      _0xff79b2.push(_0x4072f3);
      const _0x2d55f9 = {
        text: "三星需要雷伊彼得尔閃雷",
        x: _0x3778da.width / 2 - 150,
        y: _0x4072f3.y + 26
      };
      var _0x47d1bc = createLabel(_0x2d55f9);
      _0xff79b2.push(_0x47d1bc);
      var _0x47d1bc = createLabel({
        text: "雷伊配招:雷怒,闪电斗气,充电,电光炽刃",
        x: _0x3778da.width / 2 - 150,
        y: _0x47d1bc.y + 26
      });
      _0xff79b2.push(_0x47d1bc);
      const _0x273ef5 = {
        x: 40,
        y: _0x47d1bc.y + 26,
        selected: true,
        storageKey: "RenaultBattle1"
      };
      let _0x1c50a8 = createRadio(_0x273ef5);
      _0xff79b2.push(_0x1c50a8);
      const _0x4ca686 = {
        text: "首技能强推",
        x: _0x1c50a8.width + _0x1c50a8.x + 10,
        y: _0x1c50a8.y
      };
      var _0x28e8ba = createLabel(_0x4ca686);
      _0xff79b2.push(_0x28e8ba);
      const _0xb1af56 = {
        x: _0x28e8ba.x + _0x28e8ba.width + 50,
        y: _0x1c50a8.y,
        selected: false,
        storageKey: "RenaultBattle2"
      };
      let _0x385c40 = createRadio(_0xb1af56);
      _0xff79b2.push(_0x385c40);
      const _0x1ccd03 = {
        text: "技能轮询",
        x: _0x385c40.width + _0x385c40.x + 10,
        y: _0x1c50a8.y
      };
      var _0x4ff45e = createLabel(_0x1ccd03);
      _0xff79b2.push(_0x4ff45e);
      const _0x41c647 = {
        x: 40,
        y: _0x47d1bc.y + 78,
        selected: false,
        storageKey: "RenaultBattle3"
      };
      let _0x47c812 = createRadio(_0x41c647);
      _0xff79b2.push(_0x47c812);
      const _0x541f5c = {
        text: "只打一星二星",
        x: _0x47c812.width + _0x47c812.x + 10,
        y: _0x47c812.y
      };
      var _0x213251 = createLabel(_0x541f5c);
      _0xff79b2.push(_0x213251);
      const _0x33b949 = {
        x: _0x28e8ba.x + _0x28e8ba.width + 50,
        y: _0x47c812.y,
        selected: false,
        storageKey: "RenaultBattle4"
      };
      let _0x8c8e77 = createRadio(_0x33b949);
      _0xff79b2.push(_0x8c8e77);
      const _0x5d70f2 = {
        text: "模拟对战",
        x: _0x8c8e77.width + _0x8c8e77.x + 10,
        y: _0x47c812.y
      };
      var _0x3bb50a = createLabel(_0x5d70f2);
      _0xff79b2.push(_0x3bb50a);
      const _0x205461 = {
        x: _0x3bb50a.x + _0x3bb50a.width + 20,
        y: _0x47c812.y,
        selected: false,
        storageKey: "RenaultBattle5"
      };
      let _0x1d96b5 = createRadio(_0x205461);
      _0xff79b2.push(_0x1d96b5);
      const _0x5a9b24 = {
        text: "一星二星稳定打法",
        x: _0x1d96b5.width + _0x1d96b5.x + 10,
        y: _0x47c812.y
      };
      var _0x33e0cf = createLabel(_0x5a9b24);
      _0xff79b2.push(_0x33e0cf);
      const _0x476578 = {
        x: _0x3bb50a.x + _0x3bb50a.width + 20,
        y: _0x1c50a8.y,
        selected: false,
        storageKey: "RenaultBattle6"
      };
      let _0x450309 = createRadio(_0x476578);
      _0xff79b2.push(_0x450309);
      const _0x1a716a = {
        text: "三星稳定打法",
        x: _0x1d96b5.width + _0x1d96b5.x + 10,
        y: _0x1c50a8.y
      };
      var _0x176bd4 = createLabel(_0x1a716a);
      _0xff79b2.push(_0x176bd4);
      _0x468538.addAllUis(_0xff79b2);
      _0x3778da.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x468538.stop();
      }, function () {
        localStorage.setItem("RenaultBattle1", _0x1c50a8.selected);
        localStorage.setItem("RenaultBattle2", _0x385c40.selected);
        localStorage.setItem("RenaultBattle3", _0x47c812.selected);
        localStorage.setItem("RenaultBattle4", _0x8c8e77.selected);
        localStorage.setItem("RenaultBattle5", _0x1d96b5.selected);
        localStorage.setItem("RenaultBattle6", _0x450309.selected);
        if (_0x1c50a8.selected) {
          _0x468538.RenaultBattle1();
        }
        if (_0x385c40.selected) {
          _0x468538.RenaultBattle2();
        }
        if (_0x47c812.selected) {
          _0x468538.RenaultBattle3();
        }
        if (_0x8c8e77.selected) {
          _0x468538.moni();
        }
        if (_0x1d96b5.selected) {
          _0x468538.Renaultonlyonestar();
        }
        if (_0x450309.selected) {
          _0x468538.Renault3sui();
        }
      }], null);
      _0x3778da.showAlert();
    });
  }
  async Renaultonlyonestar() {
    let _0x420b56 = await this.dispatchSelfPet("比德尔", [32346]);
    let _0xfcf7f0 = await this.dispatchSelfPet("闪光雷吉欧斯", [41938, 32298]);
    if (!_0x420b56 || !_0xfcf7f0) {
      addGameLog("背包没有超动灵破闪比德尔或者冰箱没有闪雷真空与阳电子炮");
      this.stop();
    } else {
      while (true) {
        let _0x416a43 = await this.send_message("cs_renault_out", {
          index: 0,
          petList: [],
          type: 1
        });
        if (ItemManager.getInstance().getItemNumById(101210) > 0) {
          if (MFC.userInfo.curEnergy > 5) {
            let _0x4c01bb = _0x416a43.bossList.find(_0x32d24d => _0x32d24d.startsWith("2")) || _0x416a43.bossList.find(_0x2b0dbe => _0x2b0dbe.startsWith("1"));
            if (!_0x4c01bb) {
              addGameLog("都是三星关卡");
              break;
            } else {
              let _0x512afc = _0x416a43.bossList.indexOf(_0x4c01bb);
              let _0x18af5c = BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyRenaultOutStartFlag), 1 + _0x512afc);
              if (_0x18af5c == 0) {
                const _0x586542 = {
                  index: _0x512afc,
                  petList: [],
                  type: 5
                };
                await this.send_message("cs_renault_out", _0x586542);
              }
              if (_0x4c01bb.split("_")[0].indexOf(1) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 800) {
                const _0x1a565f = {
                  index: _0x512afc,
                  petList: [_0x420b56.getTime, _0xfcf7f0.getTime],
                  type: 6
                };
                await this.send_message("cs_renault_out", _0x1a565f);
                addGameLog("扫荡第" + (_0x512afc + 1) + "关");
              } else if (_0x4c01bb.split("_")[0].indexOf(2) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 4800) {
                const _0xfa5829 = {
                  index: _0x512afc,
                  petList: [_0x420b56.getTime, _0xfcf7f0.getTime],
                  type: 6
                };
                await this.send_message("cs_renault_out", _0xfa5829);
                addGameLog("扫荡第" + (_0x512afc + 1) + "关");
              } else {
                const _0x2de30f = {
                  index: _0x512afc,
                  petList: [_0x420b56.getTime, _0xfcf7f0.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x2de30f);
                let _0x27bb71 = 0;
                let _0x1c4ea0;
                let _0x329390 = 0;
                let _0x5e85b2 = await this.initBattle();
                while (_0x5e85b2.result.result == 0) {
                  if (_0x27bb71 == 0) {
                    _0x1c4ea0 = 32346;
                  }
                  if (_0x27bb71 > 0) {
                    if (_0x329390 == 0) {
                      _0x1c4ea0 = 41938;
                      _0x329390++;
                    } else {
                      _0x1c4ea0 = 32298;
                    }
                  }
                  _0x5e85b2 = await this.useSkill(_0x1c4ea0);
                  if (_0x5e85b2.result.result == 0) {
                    let _0x217bcc = _0x5e85b2.result.playerInfos.find(_0x20d955 => _0x20d955.uid == _0x5e85b2.uid__).nextRoundOP;
                    if (_0x217bcc == 3) {
                      addGameLog("被击败");
                      await this.send_message("cs_online_player_operation", {
                        data: {
                          petIndex: 1
                        },
                        groupId: "",
                        opType: 2
                      });
                      addGameLog("切换精灵");
                      _0x27bb71++;
                    }
                  }
                }
              }
            }
          } else {
            addGameLog("电池数量不够");
            break;
          }
        } else {
          addGameLog("信号破解器数量不够");
          break;
        }
      }
      await this.moni();
    }
  }
  async Renault3sui() {
    super.start();
    let _0x408cbc = this;
    MFC.alert.show("需要比德尔无限+柔弱+会心一击+超动,雷伊雷怒+增幅闪电斗气+增幅充电+电光大招,闪雷真空+驱动+霰射+电子炮", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x416dad) {
      _0x408cbc.stop();
    }, function (_0x3f92a2) {
      _0x408cbc.Renault3s();
    }]);
  }
  async Renault3s() {
    let _0x220568 = await this.dispatchSelfPet("比德尔", [42972, 42971, 12186, 32346]);
    let _0x1222e9 = await this.dispatchSelfPet("闪光雷吉欧斯", [41938, 32298, 32296, 32297]);
    let _0x52bbc6 = await this.dispatchSelfPet("雷伊", [23245, 100531, 100483, 15894]);
    if (!_0x220568 || !_0x1222e9 || !_0x52bbc6) {
      if (!_0x220568) {
        addGameLog("背包没有无限愤怒柔弱身躯会心之击超动灵破闪比德尔");
      }
      if (!_0x1222e9) {
        addGameLog("背包没有闪雷真空力场驱动冲击霰射闪光阳电子炮");
      }
      if (!_0x52bbc6) {
        addGameLog("背包没有雷伊雷神之怒增幅闪电斗气增幅充电电光大招");
      }
      this.stop();
    } else {
      while (true) {
        let _0x59a9e5 = await this.send_message("cs_renault_out", {
          index: 0,
          petList: [],
          type: 1
        });
        if (ItemManager.getInstance().getItemNumById(101210) > 0) {
          if (MFC.userInfo.curEnergy > 5) {
            let _0x17e313 = _0x59a9e5.bossList.find(_0x39b5b8 => _0x39b5b8.startsWith("3"));
            if (_0x17e313) {
              let _0x9ad9a4 = _0x59a9e5.bossList.indexOf(_0x17e313);
              let _0x23024d = BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyRenaultOutStartFlag), 1 + _0x9ad9a4);
              if (_0x23024d == 0) {
                const _0x2a3330 = {
                  index: _0x9ad9a4,
                  petList: [],
                  type: 5
                };
                await this.send_message("cs_renault_out", _0x2a3330);
              }
              if (_0x17e313.split("_")[1] == 2285 || _0x17e313.split("_")[1] == 1310) {
                const _0x39a631 = {
                  index: _0x9ad9a4,
                  petList: [_0x220568.getTime, _0x52bbc6.getTime, _0x1222e9.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x39a631);
                let _0x4a2baf = await this.initBattle();
                let _0x1ea6b9 = 0;
                while (_0x4a2baf.result.result == 0) {
                  if (_0x1ea6b9 == 0) {
                    _0x4a2baf = await this.useSkill(32346);
                  }
                  if (_0x1ea6b9 == 1) {
                    _0x4a2baf = await this.useSkill(32346);
                  }
                  if (_0x1ea6b9 == 2) {
                    _0x4a2baf = await this.useSkill(42971);
                  }
                  if (_0x1ea6b9 == 3) {
                    _0x4a2baf = await this.useSkill(42972);
                  }
                  if (_0x1ea6b9 == 4) {
                    _0x4a2baf = await this.useSkill(32346);
                  }
                  if (_0x1ea6b9 == 5) {
                    _0x4a2baf = await this.useSkill(32346);
                  }
                  if (_0x1ea6b9 == 6) {
                    await this.send_message("cs_online_player_operation", {
                      data: {
                        petIndex: 1
                      },
                      groupId: "",
                      opType: 2
                    });
                  }
                  if (_0x1ea6b9 == 7) {
                    _0x4a2baf = await this.useSkill(100531);
                  }
                  if (_0x1ea6b9 == 8) {
                    _0x4a2baf = await this.useSkill(23245);
                  }
                  if (_0x1ea6b9 == 9) {
                    _0x4a2baf = await this.useSkill(23245);
                  }
                  if (_0x1ea6b9 == 10) {
                    _0x4a2baf = await this.useSkill(100531);
                  }
                  if (_0x1ea6b9 == 11) {
                    _0x4a2baf = await this.useSkill(100483);
                  }
                  if (_0x1ea6b9 == 12) {
                    _0x4a2baf = await this.useSkill(15894);
                  }
                  if (_0x1ea6b9 == 13) {
                    _0x4a2baf = await this.useSkill(100531);
                  }
                  if (_0x1ea6b9 == 14) {
                    _0x4a2baf = await this.useSkill(100483);
                  }
                  if (_0x1ea6b9 == 15) {
                    _0x4a2baf = await this.useSkill(15894);
                  }
                  if (_0x1ea6b9 == 16) {
                    break;
                  }
                  if (_0x4a2baf.result.result == 0) {
                    let _0x44ef55 = _0x4a2baf.result.playerInfos.find(_0x297901 => _0x297901.uid == _0x4a2baf.uid__).nextRoundOP;
                    if (_0x44ef55 == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0x37c742 = _0x4a2baf.result.playerInfos.find(_0x4b8706 => _0x4b8706.uid !== _0x4a2baf.uid__).nextRoundOP;
                    if (_0x37c742 == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x1ea6b9++;
                }
              } else if (_0x17e313.split("_")[1] == 2286 || _0x17e313.split("_")[1] == 1311) {
                const _0x40709d = {
                  index: _0x9ad9a4,
                  petList: [_0x220568.getTime, _0x52bbc6.getTime, _0x1222e9.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x40709d);
                let _0x41d8c1 = await this.initBattle();
                let _0x7aa023 = 0;
                while (_0x41d8c1.result.result == 0) {
                  if (_0x7aa023 == 0) {
                    _0x41d8c1 = await this.useSkill(32346);
                  }
                  if (_0x7aa023 == 1) {
                    _0x41d8c1 = await this.useSkill(32346);
                  }
                  if (_0x7aa023 == 2) {
                    _0x41d8c1 = await this.useSkill(42971);
                  }
                  if (_0x7aa023 == 3) {
                    _0x41d8c1 = await this.useSkill(42972);
                  }
                  if (_0x7aa023 == 4) {
                    _0x41d8c1 = await this.useSkill(42972);
                  }
                  if (_0x7aa023 == 5) {
                    let _0x2d5ae8 = 2001;
                    for (let _0x55c635 = _0x2d5ae8; _0x55c635 < 2004; _0x55c635++) {
                      if (MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 5600) {
                        break;
                      } else if (ItemManager.getInstance().getItemNumById(_0x55c635) > 0) {
                        const _0x458413 = {
                          itemID: _0x55c635
                        };
                        const _0x499839 = {
                          opType: 3,
                          data: _0x458413,
                          groupId: ""
                        };
                        await this.send_message("cs_online_player_operation", _0x499839);
                        break;
                      }
                    }
                    ;
                  }
                  if (_0x7aa023 == 6) {
                    _0x41d8c1 = await this.useSkill(42971);
                  }
                  if (_0x7aa023 == 7) {
                    _0x41d8c1 = await this.useSkill(32346);
                  }
                  if (_0x7aa023 == 8) {
                    _0x41d8c1 = await this.useSkill(32346);
                  }
                  if (_0x7aa023 == 9) {
                    _0x41d8c1 = await this.useSkill(32346);
                  }
                  if (_0x7aa023 == 10) {
                    _0x41d8c1 = await this.useSkill(32346);
                  }
                  if (_0x7aa023 == 11) {
                    break;
                  }
                  if (_0x41d8c1.result.result == 0) {
                    let _0x4e26de = _0x41d8c1.result.playerInfos.find(_0x41279a => _0x41279a.uid == _0x41d8c1.uid__).nextRoundOP;
                    if (_0x4e26de == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0x302d8c = _0x41d8c1.result.playerInfos.find(_0x1c3c8b => _0x1c3c8b.uid !== _0x41d8c1.uid__).nextRoundOP;
                    if (_0x302d8c == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x7aa023++;
                }
              } else if (_0x17e313.split("_")[1] == 2287 || _0x17e313.split("_")[1] == 1312) {
                const _0xaaf284 = {
                  index: _0x9ad9a4,
                  petList: [_0x220568.getTime, _0x52bbc6.getTime, _0x1222e9.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0xaaf284);
                let _0x2e19aa = await this.initBattle();
                let _0x210e1d = 0;
                while (_0x2e19aa.result.result == 0) {
                  if (_0x210e1d == 0) {
                    _0x2e19aa = await this.useSkill(32346);
                  }
                  if (_0x210e1d == 1) {
                    _0x2e19aa = await this.useSkill(32346);
                  }
                  if (_0x210e1d == 2) {
                    _0x2e19aa = await this.useSkill(42971);
                  }
                  if (_0x210e1d == 3) {
                    _0x2e19aa = await this.useSkill(42972);
                  }
                  if (_0x210e1d == 4) {
                    _0x2e19aa = await this.useSkill(42971);
                  }
                  if (_0x210e1d == 5) {
                    _0x2e19aa = await this.useSkill(32346);
                  }
                  if (_0x210e1d == 6) {
                    _0x2e19aa = await this.useSkill(32346);
                  }
                  if (_0x210e1d == 7) {
                    await this.send_message("cs_online_player_operation", {
                      data: {
                        petIndex: 1
                      },
                      groupId: "",
                      opType: 2
                    });
                  }
                  if (_0x210e1d == 8) {
                    _0x2e19aa = await this.useSkill(100531);
                  }
                  if (_0x210e1d == 9) {
                    _0x2e19aa = await this.useSkill(23245);
                  }
                  if (_0x210e1d == 10) {
                    _0x2e19aa = await this.useSkill(100483);
                  }
                  if (_0x210e1d == 11) {
                    _0x2e19aa = await this.useSkill(15894);
                  }
                  if (_0x210e1d == 12) {
                    _0x2e19aa = await this.useSkill(100531);
                  }
                  if (_0x210e1d == 13) {
                    _0x2e19aa = await this.useSkill(100483);
                  }
                  if (_0x210e1d == 14) {
                    _0x2e19aa = await this.useSkill(15894);
                  }
                  if (_0x210e1d == 15) {
                    _0x2e19aa = await this.useSkill(100531);
                  }
                  if (_0x210e1d == 16) {
                    _0x2e19aa = await this.useSkill(100483);
                  }
                  if (_0x210e1d == 17) {
                    _0x2e19aa = await this.useSkill(15894);
                  }
                  if (_0x210e1d == 18) {
                    break;
                  }
                  if (_0x2e19aa.result.result == 0) {
                    let _0x681d3c = _0x2e19aa.result.playerInfos.find(_0x1224dd => _0x1224dd.uid == _0x2e19aa.uid__).nextRoundOP;
                    if (_0x681d3c == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0x71ae02 = _0x2e19aa.result.playerInfos.find(_0x23bb6e => _0x23bb6e.uid !== _0x2e19aa.uid__).nextRoundOP;
                    if (_0x71ae02 == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x210e1d++;
                }
              } else if (_0x17e313.split("_")[1] == 2288 || _0x17e313.split("_")[1] == 1313) {
                const _0x395beb = {
                  index: _0x9ad9a4,
                  petList: [_0x1222e9.getTime, _0x52bbc6.getTime, _0x220568.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x395beb);
                let _0x81b5f5 = await this.initBattle();
                let _0x1be481 = 0;
                while (_0x81b5f5.result.result == 0) {
                  if (_0x1be481 == 0) {
                    _0x81b5f5 = await this.useSkill(41938);
                  }
                  if (_0x1be481 == 1) {
                    _0x81b5f5 = await this.useSkill(32296);
                  }
                  if (_0x1be481 == 2) {
                    _0x81b5f5 = await this.useSkill(32296);
                  }
                  if (_0x1be481 == 3) {
                    _0x81b5f5 = await this.useSkill(32296);
                  }
                  if (_0x1be481 == 4) {
                    await this.send_message("cs_online_player_operation", {
                      data: {
                        petIndex: 2
                      },
                      groupId: "",
                      opType: 2
                    });
                  }
                  if (_0x1be481 == 5) {
                    _0x81b5f5 = await this.useSkill(42971);
                  }
                  if (_0x1be481 == 6) {
                    _0x81b5f5 = await this.useSkill(42972);
                  }
                  if (_0x1be481 == 7) {
                    _0x81b5f5 = await this.useSkill(42972);
                  }
                  if (_0x1be481 == 8) {
                    _0x81b5f5 = await this.useSkill(42971);
                  }
                  if (_0x1be481 == 9) {
                    _0x81b5f5 = await this.useSkill(12186);
                  }
                  if (_0x1be481 == 10) {
                    _0x81b5f5 = await this.useSkill(12186);
                  }
                  if (_0x1be481 == 11) {
                    _0x81b5f5 = await this.useSkill(12186);
                  }
                  if (_0x1be481 == 12) {
                    _0x81b5f5 = await this.useSkill(12186);
                  }
                  if (_0x1be481 == 13) {
                    _0x81b5f5 = await this.useSkill(32346);
                  }
                  if (_0x1be481 == 14) {
                    _0x81b5f5 = await this.useSkill(42971);
                  }
                  if (_0x1be481 == 15) {
                    _0x81b5f5 = await this.useSkill(32346);
                  }
                  if (_0x1be481 == 16) {
                    _0x81b5f5 = await this.useSkill(32346);
                  }
                  if (_0x1be481 == 17) {
                    _0x81b5f5 = await this.useSkill(32346);
                  }
                  if (_0x1be481 == 18) {
                    _0x81b5f5 = await this.useSkill(32346);
                  }
                  if (_0x1be481 == 19) {
                    break;
                  }
                  if (_0x81b5f5.result.result == 0) {
                    let _0x2bbc34 = _0x81b5f5.result.playerInfos.find(_0x3ae2de => _0x3ae2de.uid == _0x81b5f5.uid__).nextRoundOP;
                    if (_0x2bbc34 == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0xa60160 = _0x81b5f5.result.playerInfos.find(_0x92cee => _0x92cee.uid !== _0x81b5f5.uid__).nextRoundOP;
                    if (_0xa60160 == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x1be481++;
                }
              } else if (_0x17e313.split("_")[1] == 2289 || _0x17e313.split("_")[1] == 1314) {
                const _0x155b4d = {
                  index: _0x9ad9a4,
                  petList: [_0x220568.getTime, _0x52bbc6.getTime, _0x1222e9.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x155b4d);
                let _0x2bd68d = await this.initBattle();
                let _0x150c78 = 0;
                while (_0x2bd68d.result.result == 0) {
                  if (_0x150c78 == 0) {
                    _0x2bd68d = await this.useSkill(42972);
                  }
                  if (_0x150c78 == 1) {
                    _0x2bd68d = await this.useSkill(42971);
                  }
                  if (_0x150c78 == 2) {
                    _0x2bd68d = await this.useSkill(32346);
                  }
                  if (_0x150c78 == 3) {
                    _0x2bd68d = await this.useSkill(32346);
                  }
                  if (_0x150c78 == 4) {
                    await this.send_message("cs_online_player_operation", {
                      data: {
                        petIndex: 1
                      },
                      groupId: "",
                      opType: 2
                    });
                  }
                  if (_0x150c78 == 5) {
                    _0x2bd68d = await this.useSkill(100531);
                  }
                  if (_0x150c78 == 6) {
                    _0x2bd68d = await this.useSkill(23245);
                  }
                  if (_0x150c78 == 7) {
                    _0x2bd68d = await this.useSkill(100483);
                  }
                  if (_0x150c78 == 8) {
                    _0x2bd68d = await this.useSkill(15894);
                  }
                  if (_0x150c78 == 9) {
                    _0x2bd68d = await this.useSkill(100531);
                  }
                  if (_0x150c78 == 10) {
                    _0x2bd68d = await this.useSkill(23245);
                  }
                  if (_0x150c78 == 11) {
                    _0x2bd68d = await this.useSkill(100483);
                  }
                  if (_0x150c78 == 12) {
                    _0x2bd68d = await this.useSkill(15894);
                  }
                  if (_0x150c78 == 13) {
                    _0x2bd68d = await this.useSkill(100531);
                  }
                  if (_0x150c78 == 14) {
                    _0x2bd68d = await this.useSkill(23245);
                  }
                  if (_0x150c78 == 15) {
                    _0x2bd68d = await this.useSkill(100483);
                  }
                  if (_0x150c78 == 16) {
                    _0x2bd68d = await this.useSkill(15894);
                  }
                  if (_0x150c78 == 17) {
                    let _0x9fe1a7 = 2001;
                    for (let _0x4cba0b = _0x9fe1a7; _0x4cba0b < 2004; _0x4cba0b++) {
                      if (MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 5600) {
                        break;
                      } else if (ItemManager.getInstance().getItemNumById(_0x4cba0b) > 0) {
                        const _0x36e98b = {
                          itemID: _0x4cba0b
                        };
                        const _0x4e97fa = {
                          opType: 3,
                          data: _0x36e98b,
                          groupId: ""
                        };
                        await this.send_message("cs_online_player_operation", _0x4e97fa);
                        break;
                      }
                    }
                    ;
                  }
                  if (_0x150c78 == 18) {
                    _0x150c78 = 5;
                  }
                  if (_0x2bd68d.result.result == 0) {
                    let _0x5ae039 = _0x2bd68d.result.playerInfos.find(_0x1f4033 => _0x1f4033.uid == _0x2bd68d.uid__).nextRoundOP;
                    if (_0x5ae039 == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0x54fc00 = _0x2bd68d.result.playerInfos.find(_0x2143c1 => _0x2143c1.uid !== _0x2bd68d.uid__).nextRoundOP;
                    if (_0x54fc00 == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x150c78++;
                }
              } else if (_0x17e313.split("_")[1] == 2290 || _0x17e313.split("_")[1] == 1315) {
                const _0x490fb2 = {
                  index: _0x9ad9a4,
                  petList: [_0x220568.getTime, _0x52bbc6.getTime, _0x1222e9.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x490fb2);
                let _0x16f6f9 = await this.initBattle();
                let _0x36e5af = 0;
                while (_0x16f6f9.result.result == 0) {
                  if (_0x36e5af == 0) {
                    _0x16f6f9 = await this.useSkill(32346);
                  }
                  if (_0x36e5af == 1) {
                    _0x16f6f9 = await this.useSkill(32346);
                  }
                  if (_0x36e5af == 2) {
                    _0x16f6f9 = await this.useSkill(42971);
                  }
                  if (_0x36e5af == 3) {
                    _0x16f6f9 = await this.useSkill(32346);
                  }
                  if (_0x36e5af == 4) {
                    _0x16f6f9 = await this.useSkill(32346);
                  }
                  if (_0x36e5af == 5) {
                    _0x16f6f9 = await this.useSkill(42971);
                  }
                  if (_0x36e5af == 6) {
                    _0x16f6f9 = await this.useSkill(42972);
                  }
                  if (_0x36e5af == 7) {
                    let _0x11858d = 2001;
                    for (let _0x34ee84 = _0x11858d; _0x34ee84 < 2004; _0x34ee84++) {
                      if (MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 5600) {
                        break;
                      } else if (ItemManager.getInstance().getItemNumById(_0x34ee84) > 0) {
                        const _0x46492c = {
                          itemID: _0x34ee84
                        };
                        const _0x608579 = {
                          opType: 3,
                          data: _0x46492c,
                          groupId: ""
                        };
                        await this.send_message("cs_online_player_operation", _0x608579);
                        break;
                      }
                    }
                    ;
                  }
                  if (_0x36e5af == 8) {
                    _0x16f6f9 = await this.useSkill(32346);
                  }
                  if (_0x36e5af == 9) {
                    _0x16f6f9 = await this.useSkill(32346);
                  }
                  if (_0x36e5af == 10) {
                    _0x16f6f9 = await this.useSkill(32346);
                  }
                  if (_0x36e5af == 11) {
                    _0x16f6f9 = await this.useSkill(32346);
                  }
                  if (_0x36e5af == 12) {
                    _0x16f6f9 = await this.useSkill(32346);
                  }
                  if (_0x36e5af == 13) {
                    break;
                  }
                  if (_0x16f6f9.result.result == 0) {
                    let _0x9005a9 = _0x16f6f9.result.playerInfos.find(_0x2c02fd => _0x2c02fd.uid == _0x16f6f9.uid__).nextRoundOP;
                    if (_0x9005a9 == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0x53ade9 = _0x16f6f9.result.playerInfos.find(_0x2ba3c9 => _0x2ba3c9.uid !== _0x16f6f9.uid__).nextRoundOP;
                    if (_0x53ade9 == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x36e5af++;
                }
              } else if (_0x17e313.split("_")[1] == 2291 || _0x17e313.split("_")[1] == 1316) {
                const _0x17de91 = {
                  index: _0x9ad9a4,
                  petList: [_0x220568.getTime, _0x52bbc6.getTime, _0x1222e9.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x17de91);
                let _0x2eb804 = await this.initBattle();
                let _0x115c72 = 0;
                while (_0x2eb804.result.result == 0) {
                  if (_0x115c72 == 0) {
                    _0x2eb804 = await this.useSkill(32346);
                  }
                  if (_0x115c72 == 1) {
                    _0x2eb804 = await this.useSkill(32346);
                  }
                  if (_0x115c72 == 2) {
                    _0x2eb804 = await this.useSkill(42971);
                  }
                  if (_0x115c72 == 3) {
                    _0x2eb804 = await this.useSkill(42971);
                  }
                  if (_0x115c72 == 4) {
                    _0x2eb804 = await this.useSkill(42971);
                  }
                  if (_0x115c72 == 5) {
                    _0x2eb804 = await this.useSkill(42972);
                  }
                  if (_0x115c72 == 6) {
                    _0x2eb804 = await this.useSkill(42971);
                  }
                  if (_0x115c72 == 7) {
                    _0x2eb804 = await this.useSkill(42972);
                  }
                  if (_0x115c72 == 8) {
                    _0x2eb804 = await this.useSkill(42971);
                  }
                  if (_0x115c72 == 9) {
                    _0x2eb804 = await this.useSkill(42972);
                  }
                  if (_0x115c72 == 10) {
                    _0x2eb804 = await this.useSkill(32346);
                  }
                  if (_0x115c72 == 11) {
                    _0x2eb804 = await this.useSkill(12186);
                  }
                  if (_0x115c72 == 12) {
                    _0x2eb804 = await this.useSkill(12186);
                  }
                  if (_0x115c72 == 13) {
                    _0x2eb804 = await this.useSkill(12186);
                  }
                  if (_0x115c72 == 14) {
                    await this.send_message("cs_online_player_operation", {
                      data: {
                        petIndex: 1
                      },
                      groupId: "",
                      opType: 2
                    });
                  }
                  if (_0x115c72 == 15) {
                    _0x2eb804 = await this.useSkill(100531);
                  }
                  if (_0x115c72 == 16) {
                    _0x2eb804 = await this.useSkill(23245);
                  }
                  if (_0x115c72 == 17) {
                    _0x2eb804 = await this.useSkill(100483);
                  }
                  if (_0x115c72 == 18) {
                    _0x2eb804 = await this.useSkill(15894);
                  }
                  if (_0x115c72 == 19) {
                    _0x2eb804 = await this.useSkill(100531);
                  }
                  if (_0x115c72 == 20) {
                    _0x2eb804 = await this.useSkill(23245);
                  }
                  if (_0x115c72 == 21) {
                    _0x2eb804 = await this.useSkill(100483);
                  }
                  if (_0x115c72 == 22) {
                    _0x2eb804 = await this.useSkill(15894);
                  }
                  if (_0x115c72 == 23) {
                    break;
                  }
                  if (_0x2eb804.result.result == 0) {
                    let _0x4d1f31 = _0x2eb804.result.playerInfos.find(_0x4948b6 => _0x4948b6.uid == _0x2eb804.uid__).nextRoundOP;
                    if (_0x4d1f31 == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0x343ce6 = _0x2eb804.result.playerInfos.find(_0x3b84d0 => _0x3b84d0.uid !== _0x2eb804.uid__).nextRoundOP;
                    if (_0x343ce6 == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x115c72++;
                }
              } else if (_0x17e313.split("_")[1] == 2292 || _0x17e313.split("_")[1] == 1317) {
                const _0x1589aa = {
                  index: _0x9ad9a4,
                  petList: [_0x220568.getTime, _0x52bbc6.getTime, _0x1222e9.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x1589aa);
                let _0x124890 = await this.initBattle();
                let _0x29126e = 0;
                while (_0x124890.result.result == 0) {
                  if (_0x29126e == 0) {
                    _0x124890 = await this.useSkill(42971);
                  }
                  if (_0x29126e == 1) {
                    _0x124890 = await this.useSkill(42971);
                  }
                  if (_0x29126e == 2) {
                    _0x124890 = await this.useSkill(42971);
                  }
                  if (_0x29126e == 3) {
                    _0x124890 = await this.useSkill(42972);
                  }
                  if (_0x29126e == 4) {
                    _0x124890 = await this.useSkill(42971);
                  }
                  if (_0x29126e == 5) {
                    _0x124890 = await this.useSkill(42972);
                  }
                  if (_0x29126e == 6) {
                    _0x124890 = await this.useSkill(42971);
                  }
                  if (_0x29126e == 7) {
                    _0x124890 = await this.useSkill(42972);
                  }
                  if (_0x29126e == 8) {
                    _0x124890 = await this.useSkill(42971);
                  }
                  if (_0x29126e == 9) {
                    _0x124890 = await this.useSkill(32346);
                  }
                  if (_0x29126e == 10) {
                    _0x124890 = await this.useSkill(12186);
                  }
                  if (_0x29126e == 11) {
                    _0x124890 = await this.useSkill(32346);
                  }
                  if (_0x29126e == 12) {
                    _0x124890 = await this.useSkill(32346);
                  }
                  if (_0x29126e == 13) {
                    _0x124890 = await this.useSkill(32346);
                  }
                  if (_0x29126e == 14) {
                    break;
                  }
                  if (_0x124890.result.result == 0) {
                    let _0x3093b5 = _0x124890.result.playerInfos.find(_0x5652fe => _0x5652fe.uid == _0x124890.uid__).nextRoundOP;
                    if (_0x3093b5 == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0x5ef514 = _0x124890.result.playerInfos.find(_0x5c3fe7 => _0x5c3fe7.uid !== _0x124890.uid__).nextRoundOP;
                    if (_0x5ef514 == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x29126e++;
                }
              } else if (_0x17e313.split("_")[1] == 2293 || _0x17e313.split("_")[1] == 1318) {
                const _0x4ab65f = {
                  index: _0x9ad9a4,
                  petList: [_0x220568.getTime, _0x52bbc6.getTime, _0x1222e9.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x4ab65f);
                let _0x4d1936 = await this.initBattle();
                let _0x37bef8 = 0;
                while (_0x4d1936.result.result == 0) {
                  if (_0x37bef8 == 0) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 1) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 2) {
                    _0x4d1936 = await this.useSkill(42971);
                  }
                  if (_0x37bef8 == 3) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 4) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 5) {
                    _0x4d1936 = await this.useSkill(42971);
                  }
                  if (_0x37bef8 == 6) {
                    let _0x3e5d57 = 2001;
                    for (let _0x3f78b0 = _0x3e5d57; _0x3f78b0 < 2004; _0x3f78b0++) {
                      if (MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 5600) {
                        break;
                      } else if (ItemManager.getInstance().getItemNumById(_0x3f78b0) > 0) {
                        const _0x47f208 = {
                          itemID: _0x3f78b0
                        };
                        const _0x14ff45 = {
                          opType: 3,
                          data: _0x47f208,
                          groupId: ""
                        };
                        await this.send_message("cs_online_player_operation", _0x14ff45);
                        break;
                      }
                    }
                    ;
                  }
                  if (_0x37bef8 == 7) {
                    _0x4d1936 = await this.useSkill(42971);
                  }
                  if (_0x37bef8 == 8) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 9) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 5) {
                    _0x4d1936 = await this.useSkill(42971);
                  }
                  if (_0x37bef8 == 6) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 7) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 8) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 9) {
                    let _0x5b8554 = 2001;
                    for (let _0x339e97 = _0x5b8554; _0x339e97 < 2004; _0x339e97++) {
                      if (MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 5600) {
                        break;
                      } else if (ItemManager.getInstance().getItemNumById(_0x339e97) > 0) {
                        const _0x2146f6 = {
                          itemID: _0x339e97
                        };
                        const _0x556f9e = {
                          opType: 3,
                          data: _0x2146f6,
                          groupId: ""
                        };
                        await this.send_message("cs_online_player_operation", _0x556f9e);
                        break;
                      }
                    }
                    ;
                  }
                  if (_0x37bef8 == 10) {
                    _0x4d1936 = await this.useSkill(32346);
                  }
                  if (_0x37bef8 == 11) {
                    break;
                  }
                  if (_0x4d1936.result.result == 0) {
                    let _0x2e56f0 = _0x4d1936.result.playerInfos.find(_0x4ec7c0 => _0x4ec7c0.uid == _0x4d1936.uid__).nextRoundOP;
                    if (_0x2e56f0 == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0x56f5d2 = _0x4d1936.result.playerInfos.find(_0xd16d35 => _0xd16d35.uid !== _0x4d1936.uid__).nextRoundOP;
                    if (_0x56f5d2 == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x37bef8++;
                }
              } else if (_0x17e313.split("_")[1] == 2294 || _0x17e313.split("_")[1] == 1319) {
                const _0x6a4703 = {
                  index: _0x9ad9a4,
                  petList: [_0x52bbc6.getTime, _0x220568.getTime, _0x1222e9.getTime],
                  type: 3
                };
                await this.send_message("cs_renault_out", _0x6a4703);
                let _0x2657a1 = await this.initBattle();
                let _0x5a8460 = 0;
                while (_0x2657a1.result.result == 0) {
                  if (_0x5a8460 == 0) {
                    _0x2657a1 = await this.useSkill(23245);
                  }
                  if (_0x5a8460 == 1) {
                    _0x2657a1 = await this.useSkill(100531);
                  }
                  if (_0x5a8460 == 2) {
                    _0x2657a1 = await this.useSkill(100483);
                  }
                  if (_0x5a8460 == 3) {
                    _0x2657a1 = await this.useSkill(15894);
                  }
                  if (_0x5a8460 == 4) {
                    _0x2657a1 = await this.useSkill(23245);
                  }
                  if (_0x5a8460 == 5) {
                    _0x2657a1 = await this.useSkill(100531);
                  }
                  if (_0x5a8460 == 6) {
                    _0x2657a1 = await this.useSkill(100483);
                  }
                  if (_0x5a8460 == 7) {
                    _0x2657a1 = await this.useSkill(15894);
                  }
                  if (_0x5a8460 == 8) {
                    await this.send_message("cs_online_player_operation", {
                      data: {
                        petIndex: 1
                      },
                      groupId: "",
                      opType: 2
                    });
                  }
                  if (_0x5a8460 == 9) {
                    _0x2657a1 = await this.useSkill(42971);
                  }
                  if (_0x5a8460 == 10) {
                    _0x2657a1 = await this.useSkill(32346);
                  }
                  if (_0x5a8460 == 11) {
                    _0x2657a1 = await this.useSkill(32346);
                  }
                  if (_0x5a8460 == 12) {
                    _0x2657a1 = await this.useSkill(32346);
                  }
                  if (_0x5a8460 == 13) {
                    _0x2657a1 = await this.useSkill(32346);
                  }
                  if (_0x5a8460 == 14) {
                    _0x2657a1 = await this.useSkill(32346);
                  }
                  if (_0x5a8460 == 15) {
                    await this.send_message("cs_online_player_operation", {
                      data: {
                        petIndex: 0
                      },
                      groupId: "",
                      opType: 2
                    });
                  }
                  if (_0x5a8460 == 16) {
                    _0x2657a1 = await this.useSkill(100531);
                  }
                  if (_0x5a8460 == 17) {
                    _0x2657a1 = await this.useSkill(23245);
                  }
                  if (_0x5a8460 == 18) {
                    _0x2657a1 = await this.useSkill(100483);
                  }
                  if (_0x5a8460 == 19) {
                    _0x2657a1 = await this.useSkill(15894);
                  }
                  if (_0x5a8460 == 20) {
                    break;
                  }
                  if (_0x2657a1.result.result == 0) {
                    let _0x290d95 = _0x2657a1.result.playerInfos.find(_0x4af4e5 => _0x4af4e5.uid == _0x2657a1.uid__).nextRoundOP;
                    if (_0x290d95 == 3) {
                      addGameLog("被击败");
                      break;
                    }
                    let _0x269e49 = _0x2657a1.result.playerInfos.find(_0x12dcf9 => _0x12dcf9.uid !== _0x2657a1.uid__).nextRoundOP;
                    if (_0x269e49 == 3) {
                      await this.send_message("cs_online_player_operation", {
                        opType: 4,
                        data: {},
                        groupId: ""
                      });
                    }
                  }
                  _0x5a8460++;
                }
              }
            } else {
              _0x17e313 = _0x59a9e5.bossList.find(_0x417fd9 => _0x417fd9.startsWith("2"));
              if (_0x17e313) {
                let _0x454bbd = _0x59a9e5.bossList.indexOf(_0x17e313);
                let _0x3f8593 = BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyRenaultOutStartFlag), 1 + _0x454bbd);
                if (_0x3f8593 == 0) {
                  const _0x44260f = {
                    index: _0x454bbd,
                    petList: [],
                    type: 5
                  };
                  await this.send_message("cs_renault_out", _0x44260f);
                }
                if (_0x17e313.split("_")[0].indexOf(1) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 800) {
                  const _0x463d8c = {
                    index: _0x454bbd,
                    petList: [_0x220568.getTime, _0x1222e9.getTime],
                    type: 6
                  };
                  await this.send_message("cs_renault_out", _0x463d8c);
                  addGameLog("扫荡第" + (_0x454bbd + 1) + "关");
                } else if (_0x17e313.split("_")[0].indexOf(2) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 4800) {
                  const _0x2ffc5a = {
                    index: _0x454bbd,
                    petList: [_0x220568.getTime, _0x1222e9.getTime],
                    type: 6
                  };
                  await this.send_message("cs_renault_out", _0x2ffc5a);
                  addGameLog("扫荡第" + (_0x454bbd + 1) + "关");
                } else {
                  const _0x1fb221 = {
                    index: _0x454bbd,
                    petList: [_0x220568.getTime, _0x1222e9.getTime],
                    type: 3
                  };
                  await this.send_message("cs_renault_out", _0x1fb221);
                  let _0xd2555a = 0;
                  let _0x28b7a9;
                  let _0x3d199b = 0;
                  let _0x4d3cc5 = await this.initBattle();
                  while (_0x4d3cc5.result.result == 0) {
                    if (_0xd2555a == 0) {
                      _0x28b7a9 = 32346;
                    }
                    if (_0xd2555a > 0) {
                      if (_0x3d199b == 0) {
                        _0x28b7a9 = 41938;
                        _0x3d199b++;
                      } else {
                        _0x28b7a9 = 32298;
                      }
                    }
                    _0x4d3cc5 = await this.useSkill(_0x28b7a9);
                    if (_0x4d3cc5.result.result == 0) {
                      let _0x8f40e9 = _0x4d3cc5.result.playerInfos.find(_0x425f3e => _0x425f3e.uid == _0x4d3cc5.uid__).nextRoundOP;
                      if (_0x8f40e9 == 3) {
                        addGameLog("被击败");
                        await this.send_message("cs_online_player_operation", {
                          data: {
                            petIndex: 1
                          },
                          groupId: "",
                          opType: 2
                        });
                        addGameLog("切换精灵");
                        _0xd2555a++;
                      }
                    }
                  }
                }
              } else {
                _0x17e313 = _0x59a9e5.bossList.find(_0x1030c9 => _0x1030c9.startsWith("1"));
                let _0x73f6b3 = _0x59a9e5.bossList.indexOf(_0x17e313);
                let _0x56c8a6 = BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyRenaultOutStartFlag), 1 + _0x73f6b3);
                if (_0x56c8a6 == 0) {
                  const _0xa5eeb7 = {
                    index: _0x73f6b3,
                    petList: [],
                    type: 5
                  };
                  await this.send_message("cs_renault_out", _0xa5eeb7);
                }
                if (_0x17e313.split("_")[0].indexOf(1) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 800) {
                  const _0x25f932 = {
                    index: _0x73f6b3,
                    petList: [_0x220568.getTime, _0x1222e9.getTime],
                    type: 6
                  };
                  await this.send_message("cs_renault_out", _0x25f932);
                  addGameLog("扫荡第" + (_0x73f6b3 + 1) + "关");
                } else if (_0x17e313.split("_")[0].indexOf(2) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 4800) {
                  const _0x39181a = {
                    index: _0x73f6b3,
                    petList: [_0x220568.getTime, _0x1222e9.getTime],
                    type: 6
                  };
                  await this.send_message("cs_renault_out", _0x39181a);
                  addGameLog("扫荡第" + (_0x73f6b3 + 1) + "关");
                } else {
                  const _0xf157e0 = {
                    index: _0x73f6b3,
                    petList: [_0x220568.getTime, _0x1222e9.getTime],
                    type: 3
                  };
                  await this.send_message("cs_renault_out", _0xf157e0);
                  let _0x192a37 = 0;
                  let _0x5a3428;
                  let _0x2de0d5 = 0;
                  let _0x2c068e = await this.initBattle();
                  while (_0x2c068e.result.result == 0) {
                    if (_0x192a37 == 0) {
                      _0x5a3428 = 32346;
                    }
                    if (_0x192a37 > 0) {
                      if (_0x2de0d5 == 0) {
                        _0x5a3428 = 41938;
                        _0x2de0d5++;
                      } else {
                        _0x5a3428 = 32298;
                      }
                    }
                    _0x2c068e = await this.useSkill(_0x5a3428);
                    if (_0x2c068e.result.result == 0) {
                      let _0x344470 = _0x2c068e.result.playerInfos.find(_0x5c5a19 => _0x5c5a19.uid == _0x2c068e.uid__).nextRoundOP;
                      if (_0x344470 == 3) {
                        addGameLog("被击败");
                        await this.send_message("cs_online_player_operation", {
                          data: {
                            petIndex: 1
                          },
                          groupId: "",
                          opType: 2
                        });
                        addGameLog("切换精灵");
                        _0x192a37++;
                      }
                    }
                  }
                }
              }
            }
          } else {
            addGameLog("电池数量不够");
            break;
          }
        } else {
          addGameLog("信号破解器数量不够");
          break;
        }
      }
      await this.moni();
    }
  }
  async RenaultBattle1() {
    let _0x3ee6d3 = MFC.userInfo.defaultTeam;
    while (true) {
      let _0x218e34 = await this.send_message("cs_renault_out", {
        index: 0,
        petList: [],
        type: 1
      });
      if (ItemManager.getInstance().getItemNumById(101210) > 0) {
        if (MFC.userInfo.curEnergy > 5) {
          let _0x47d312 = _0x218e34.bossList.find(_0x332982 => _0x332982.startsWith("3")) || _0x218e34.bossList.find(_0x5e2c12 => _0x5e2c12.startsWith("2")) || _0x218e34.bossList.find(_0x1e70aa => _0x1e70aa.startsWith("1"));
          let _0x4c56e6 = _0x218e34.bossList.indexOf(_0x47d312);
          let _0x2665ba = BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyRenaultOutStartFlag), 1 + _0x4c56e6);
          if (_0x2665ba == 0) {
            const _0x4aced4 = {
              index: _0x4c56e6,
              petList: [],
              type: 5
            };
            await this.send_message("cs_renault_out", _0x4aced4);
          }
          if (_0x47d312.split("_")[0].indexOf(1) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 800) {
            const _0x2523d9 = {
              index: _0x4c56e6,
              petList: _0x3ee6d3,
              type: 6
            };
            await this.send_message("cs_renault_out", _0x2523d9);
            addGameLog("扫荡第" + (_0x4c56e6 + 1) + "关");
          } else if (_0x47d312.split("_")[0].indexOf(2) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 4800) {
            const _0x51ca1c = {
              index: _0x4c56e6,
              petList: _0x3ee6d3,
              type: 6
            };
            await this.send_message("cs_renault_out", _0x51ca1c);
            addGameLog("扫荡第" + (_0x4c56e6 + 1) + "关");
          } else {
            const _0x3246ec = {
              index: _0x4c56e6,
              petList: _0x3ee6d3,
              type: 3
            };
            await this.send_message("cs_renault_out", _0x3246ec);
            await this.initBattle();
            let _0x288790 = 0;
            while (true) {
              if (_0x288790 == 5) {
                addGameLog("打不过需更换下阵容");
                await this.send_message("cs_quit_battle", {});
                break;
              }
              let _0x9d1945 = await this.useSkill(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x288790]).skills[0]);
              if (_0x9d1945.result.result == 0) {
                if (_0x9d1945.result.playerInfos[0].uid == MFC.userInfo.uid) {
                  if (_0x9d1945.result.playerInfos[0].nextRoundOP == 3) {
                    addGameLog("被击败");
                    const _0x3615cd = {
                      petIndex: _0x288790 + 1
                    };
                    const _0x2c390e = {
                      data: _0x3615cd,
                      groupId: "",
                      opType: 2
                    };
                    await this.send_message("cs_online_player_operation", _0x2c390e);
                    addGameLog("切换精灵");
                    _0x288790++;
                  } else if (JSON.stringify(_0x9d1945.result.playerInfos[0].petInfos[_0x288790].useSkills).indexOf(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x288790]).skills[0]) != -1) {
                    let _0x271ed2 = _0x9d1945.result.playerInfos[0].petInfos[_0x288790].useSkills[_0x9d1945.result.playerInfos[0].petInfos[_0x288790].useSkills.findIndex(_0x1eb4e5 => _0x1eb4e5.id === PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x288790]).skills[0])].crtPP;
                    if (_0x271ed2 == 0) {
                      addGameLog("技能:" + petConfig.SkillConfig.getDef(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x288790]).skills[0]).name + "PP不足,补PP");
                      let _0x4aebfd = 2001;
                      for (let _0x8de6df = _0x4aebfd; _0x8de6df < 2004; _0x8de6df++) {
                        if (ItemManager.getInstance().getItemNumById(_0x8de6df) > 0) {
                          const _0xcc87f3 = {
                            itemID: _0x8de6df
                          };
                          const _0x5d6ca5 = {
                            opType: 3,
                            data: _0xcc87f3,
                            groupId: ""
                          };
                          _0x9d1945 = await this.send_message("cs_online_player_operation", _0x5d6ca5);
                          break;
                        }
                      }
                    }
                  }
                } else if (_0x9d1945.result.playerInfos[1].nextRoundOP == 3) {
                  addGameLog("被击败");
                  const _0x2e1262 = {
                    petIndex: _0x288790 + 1
                  };
                  const _0x4b6c2b = {
                    data: _0x2e1262,
                    groupId: "",
                    opType: 2
                  };
                  await this.send_message("cs_online_player_operation", _0x4b6c2b);
                  addGameLog("切换精灵");
                  _0x288790++;
                } else if (JSON.stringify(_0x9d1945.result.playerInfos[1].petInfos[_0x288790].useSkills).indexOf(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x288790]).skills[0]) != -1) {
                  let _0x15a26d = _0x9d1945.result.playerInfos[1].petInfos[_0x288790].useSkills[_0x9d1945.result.playerInfos[1].petInfos[_0x288790].useSkills.findIndex(_0x160ae5 => _0x160ae5.id === PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x288790]).skills[0])].crtPP;
                  if (_0x15a26d == 0) {
                    addGameLog("技能:" + petConfig.SkillConfig.getDef(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x288790]).skills[0]).name + "PP不足,补PP");
                    let _0x339935 = 2001;
                    for (let _0x4dba54 = _0x339935; _0x4dba54 < 2004; _0x4dba54++) {
                      if (ItemManager.getInstance().getItemNumById(_0x4dba54) > 0) {
                        const _0x312825 = {
                          itemID: _0x4dba54
                        };
                        const _0xc55636 = {
                          opType: 3,
                          data: _0x312825,
                          groupId: ""
                        };
                        _0x9d1945 = await this.send_message("cs_online_player_operation", _0xc55636);
                        break;
                      }
                    }
                  }
                }
              } else if (_0x9d1945.result.result == 1) {
                addGameLog("成功击败");
                break;
              } else if (_0x9d1945.result.result == 2) {
                break;
              }
              if (_0x9d1945.result && _0x9d1945.result.roundNum !== undefined) {
                if (_0x9d1945.result.roundNum > 150) {
                  addGameLog("150回合未击败");
                  break;
                }
              }
            }
          }
        } else {
          addGameLog("电池数量不够");
          break;
        }
      } else {
        addGameLog("信号破解器数量不够");
        break;
      }
    }
    await this.moni();
  }
  async RenaultBattle2() {
    let _0x5a1f58 = MFC.userInfo.defaultTeam;
    while (true) {
      let _0x5bfd11 = await this.send_message("cs_renault_out", {
        index: 0,
        petList: [],
        type: 1
      });
      if (ItemManager.getInstance().getItemNumById(101210) > 0) {
        if (MFC.userInfo.curEnergy > 5) {
          let _0x33f8e0 = _0x5bfd11.bossList.find(_0x280864 => _0x280864.startsWith("3")) || _0x5bfd11.bossList.find(_0xdf28e2 => _0xdf28e2.startsWith("2")) || _0x5bfd11.bossList.find(_0x41ce76 => _0x41ce76.startsWith("1"));
          let _0x113eae = _0x5bfd11.bossList.indexOf(_0x33f8e0);
          let _0x119d53 = BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyRenaultOutStartFlag), 1 + _0x113eae);
          if (_0x119d53 == 0) {
            const _0x3069aa = {
              index: _0x113eae,
              petList: [],
              type: 5
            };
            await this.send_message("cs_renault_out", _0x3069aa);
          }
          if (_0x33f8e0.split("_")[0].indexOf(1) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 800) {
            const _0xff733e = {
              index: _0x113eae,
              petList: _0x5a1f58,
              type: 6
            };
            await this.send_message("cs_renault_out", _0xff733e);
            addGameLog("扫荡第" + (_0x113eae + 1) + "关");
          } else if (_0x33f8e0.split("_")[0].indexOf(2) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 4800) {
            const _0x2dcf15 = {
              index: _0x113eae,
              petList: _0x5a1f58,
              type: 6
            };
            await this.send_message("cs_renault_out", _0x2dcf15);
            addGameLog("扫荡第" + (_0x113eae + 1) + "关");
          } else {
            const _0x94baac = {
              index: _0x113eae,
              petList: _0x5a1f58,
              type: 3
            };
            await this.send_message("cs_renault_out", _0x94baac);
            await this.initBattle();
            let _0x349326 = 0;
            let _0x4e0aae = 0;
            while (true) {
              if (_0x349326 == 5) {
                addGameLog("打不过需更换下阵容");
                await this.send_message("cs_quit_battle", {});
                break;
              }
              let _0x29c165 = await this.useSkill(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x349326]).skills[_0x4e0aae]);
              if (_0x29c165.result.result == 0) {
                if (_0x29c165.result.playerInfos[0].uid == MFC.userInfo.uid) {
                  if (_0x29c165.result.playerInfos[0].nextRoundOP == 3) {
                    addGameLog("被击败");
                    const _0x1310ec = {
                      petIndex: _0x349326 + 1
                    };
                    const _0xc794d5 = {
                      data: _0x1310ec,
                      groupId: "",
                      opType: 2
                    };
                    await this.send_message("cs_online_player_operation", _0xc794d5);
                    addGameLog("切换精灵");
                    _0x349326++;
                    _0x4e0aae = 0;
                  } else {
                    _0x4e0aae++;
                    if (_0x4e0aae == 4) {
                      if (JSON.stringify(_0x29c165.result.playerInfos[0].petInfos[_0x349326].useSkills).indexOf(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x349326]).skills[_0x4e0aae - 1]) != -1) {
                        let _0x401102 = _0x29c165.result.playerInfos[0].petInfos[_0x349326].useSkills[_0x29c165.result.playerInfos[0].petInfos[_0x349326].useSkills.findIndex(_0x3b4a70 => _0x3b4a70.id === PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x349326]).skills[_0x4e0aae - 1])].crtPP;
                        if (_0x401102 == 0) {
                          addGameLog("技能:" + petConfig.SkillConfig.getDef(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x349326]).skills[_0x4e0aae - 1]).name + "PP不足,补PP");
                          let _0x4a9152 = 2001;
                          for (let _0x26875c = _0x4a9152; _0x26875c < 2004; _0x26875c++) {
                            if (ItemManager.getInstance().getItemNumById(_0x26875c) > 0) {
                              const _0x4a9004 = {
                                itemID: _0x26875c
                              };
                              const _0x7b0185 = {
                                opType: 3,
                                data: _0x4a9004,
                                groupId: ""
                              };
                              _0x29c165 = await this.send_message("cs_online_player_operation", _0x7b0185);
                              break;
                            }
                          }
                        }
                      }
                      _0x4e0aae = 0;
                    }
                  }
                } else if (_0x29c165.result.playerInfos[1].nextRoundOP == 3) {
                  addGameLog("被击败");
                  const _0x269c9d = {
                    petIndex: _0x349326 + 1
                  };
                  const _0x4f6409 = {
                    data: _0x269c9d,
                    groupId: "",
                    opType: 2
                  };
                  await this.send_message("cs_online_player_operation", _0x4f6409);
                  addGameLog("切换精灵");
                  _0x349326++;
                  _0x4e0aae = 0;
                } else {
                  _0x4e0aae++;
                  if (_0x4e0aae == 4) {
                    if (JSON.stringify(_0x29c165.result.playerInfos[1].petInfos[_0x349326].useSkills).indexOf(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x349326]).skills[_0x4e0aae - 1]) != -1) {
                      let _0x5ab423 = _0x29c165.result.playerInfos[1].petInfos[_0x349326].useSkills[_0x29c165.result.playerInfos[1].petInfos[_0x349326].useSkills.findIndex(_0x276b47 => _0x276b47.id === PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x349326]).skills[_0x4e0aae - 1])].crtPP;
                      if (_0x5ab423 == 0) {
                        addGameLog("技能:" + petConfig.SkillConfig.getDef(PetManager.getInstance().getPetInfoByGetTime(MFC.userInfo.defaultTeam[_0x349326]).skills[_0x4e0aae - 1]).name + "PP不足,补PP");
                        let _0x3ff7e8 = 2001;
                        for (let _0x487a5f = _0x3ff7e8; _0x487a5f < 2004; _0x487a5f++) {
                          if (ItemManager.getInstance().getItemNumById(_0x487a5f) > 0) {
                            const _0x190985 = {
                              itemID: _0x487a5f
                            };
                            const _0x744ebd = {
                              opType: 3,
                              data: _0x190985,
                              groupId: ""
                            };
                            _0x29c165 = await this.send_message("cs_online_player_operation", _0x744ebd);
                            break;
                          }
                        }
                      }
                    }
                    _0x4e0aae = 0;
                  }
                }
              } else if (_0x29c165.result.result == 1) {
                addGameLog("成功击败");
                break;
              } else if (_0x29c165.result.result == 2) {
                break;
              }
              if (_0x29c165.result && _0x29c165.result.roundNum !== undefined) {
                if (_0x29c165.result.roundNum > 150) {
                  addGameLog("150回合未击败");
                  break;
                }
              }
            }
          }
        } else {
          addGameLog("电池数量不够");
          break;
        }
      } else {
        addGameLog("信号破解器数量不够");
        break;
      }
    }
    await this.moni();
  }
  async RenaultBattle3() {
    let _0x7ad817 = await this.RenaultpetBattle();
    if (!_0x7ad817) {
      this.stop();
      return;
    }
    while (true) {
      let _0x2f5098 = await this.send_message("cs_renault_out", {
        index: 0,
        petList: [],
        type: 1
      });
      if (ItemManager.getInstance().getItemNumById(101210) > 0) {
        if (MFC.userInfo.curEnergy > 5) {
          let _0x124420 = _0x2f5098.bossList.find(_0x4c56c1 => _0x4c56c1.startsWith("2")) || _0x2f5098.bossList.find(_0x40ae02 => _0x40ae02.startsWith("1"));
          if (!_0x124420) {
            addGameLog("都是三星关卡");
            break;
          } else {
            let _0x32671e = _0x2f5098.bossList.indexOf(_0x124420);
            let _0x5e4b3c = BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyRenaultOutStartFlag), 1 + _0x32671e);
            if (_0x5e4b3c == 0) {
              const _0xa56ec6 = {
                index: _0x32671e,
                petList: [],
                type: 5
              };
              await this.send_message("cs_renault_out", _0xa56ec6);
            }
            if (_0x124420.split("_")[0].indexOf(1) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 800) {
              await this.send_message("cs_renault_out", {
                index: _0x32671e,
                petList: [_0x7ad817.pet[0].getTime, _0x7ad817.pet[1].getTime, PetManager.getInstance().getAllPets()[0].getTime],
                type: 6
              });
              addGameLog("扫荡第" + (_0x32671e + 1) + "关");
            } else if (_0x124420.split("_")[0].indexOf(2) != -1 && MFC.attr.getAttr(MFC.attrType.foreverRenaultOutIntegral) >= 4800) {
              await this.send_message("cs_renault_out", {
                index: _0x32671e,
                petList: [_0x7ad817.pet[0].getTime, _0x7ad817.pet[1].getTime, PetManager.getInstance().getAllPets()[0].getTime],
                type: 6
              });
              addGameLog("扫荡第" + (_0x32671e + 1) + "关");
            } else {
              await this.send_message("cs_renault_out", {
                index: _0x32671e,
                petList: [_0x7ad817.pet[0].getTime, _0x7ad817.pet[1].getTime, PetManager.getInstance().getAllPets()[0].getTime],
                type: 3
              });
              await this.initBattle();
              let _0x8c4ff6 = 0;
              let _0x29a40a = 0;
              while (true) {
                if (_0x8c4ff6 == 2) {
                  addGameLog("打不过需更换下阵容");
                  await this.send_message("cs_quit_battle", {});
                  break;
                }
                let _0x652aed = await this.useSkill(_0x7ad817.skillsName[_0x8c4ff6][_0x29a40a]);
                if (_0x652aed.result.result == 0) {
                  if (_0x652aed.result.playerInfos[0].uid == MFC.userInfo.uid) {
                    if (_0x652aed.result.playerInfos[0].nextRoundOP == 3) {
                      addGameLog("被击败");
                      const _0x38480d = {
                        petIndex: _0x8c4ff6 + 1
                      };
                      const _0x5480f0 = {
                        data: _0x38480d,
                        groupId: "",
                        opType: 2
                      };
                      await this.send_message("cs_online_player_operation", _0x5480f0);
                      addGameLog("切换精灵");
                      _0x8c4ff6++;
                      _0x29a40a = 0;
                    } else {
                      _0x29a40a++;
                      if (_0x29a40a == 4) {
                        _0x29a40a = 0;
                      }
                    }
                  } else if (_0x652aed.result.playerInfos[1].nextRoundOP == 3) {
                    addGameLog("被击败");
                    const _0x3fda5b = {
                      petIndex: _0x8c4ff6 + 1
                    };
                    const _0x404572 = {
                      data: _0x3fda5b,
                      groupId: "",
                      opType: 2
                    };
                    await this.send_message("cs_online_player_operation", _0x404572);
                    addGameLog("切换精灵");
                    _0x8c4ff6++;
                    _0x29a40a = 0;
                  } else {
                    _0x29a40a++;
                    if (_0x29a40a == 4) {
                      _0x29a40a = 0;
                    }
                  }
                } else if (_0x652aed.result.result == 1) {
                  addGameLog("成功击败");
                  break;
                } else if (_0x652aed.result.result == 2) {
                  break;
                }
                if (_0x652aed.result.roundNum > 150) {
                  addGameLog("150回合未击败");
                  break;
                }
              }
            }
          }
        } else {
          addGameLog("电池数量不够");
          break;
        }
      } else {
        addGameLog("信号破解器数量不够");
        break;
      }
    }
    await this.moni();
  }
  async RenaultpetBattle() {
    let _0x3977ff = await this.dispatchSelfPet("闪光雷吉欧斯", [41938, 32298, 32297, 21112]);
    let _0x52237d = await this.dispatchSelfPet("雷伊", [23245, 100531, 100483, 15894]);
    if (_0x3977ff && _0x52237d) {
      return {
        pet: [_0x3977ff, _0x52237d],
        skillsName: [[41938, 32298, 32297, 21112], [23245, 100531, 100483, 15894]]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async moni() {
    await this.send_message("cs_renault_out", {
      type: 1,
      index: 0,
      petList: []
    });
    let _0x1a4c36 = await pveUtils.ConvertNewActivityCardDataToOld([2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303]);
    logger(_0x1a4c36);
    let _0x4e43cb = [2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303];
    let _0x44b265 = [4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682];
    while (true) {
      if (ItemManager.getInstance().getItemNumById(101211) > 0) {
        if (_0x1a4c36.every(_0x55a474 => _0x55a474.status == 1)) {
          const _0x13a2f6 = {
            type: 1,
            cardId: [_0x4e43cb[1]],
            petList: [_0x44b265[1]],
            times: 0
          };
          await this.send_message("cs_pve_fight_start", _0x13a2f6);
          await this.initBattle();
          let _0x2687f4 = await this.useSkill(32076);
          while (_0x2687f4.result.result == 0) {
            _0x2687f4 = await this.useSkill(32071);
          }
          if (_0x2687f4.result.result == 1) {
            addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[1]));
          }
        } else {
          if (_0x4e43cb[_0x1a4c36.findIndex(_0x2a9683 => _0x2a9683.status !== 1)] == 2295) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x4e43cb[_0x1a4c36.findIndex(_0xcabc0d => _0xcabc0d.status !== 1)]],
              petList: [_0x44b265[_0x1a4c36.findIndex(_0x2eb8a0 => _0x2eb8a0.status !== 1)]],
              times: 0
            });
            await this.initBattle();
            let _0x2104c1 = await this.useSkill(41077);
            if (_0x2104c1.result.result == 0) {
              _0x2104c1 = await this.useSkill(41078);
            }
            if (_0x2104c1.result.result == 0) {
              _0x2104c1 = await this.useSkill(41805);
            }
            if (_0x2104c1.result.result == 1) {
              addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[_0x1a4c36.findIndex(_0x192765 => _0x192765.status !== 1)]));
            }
          }
          if (_0x4e43cb[_0x1a4c36.findIndex(_0x207c58 => _0x207c58.status !== 1)] == 2296) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x4e43cb[_0x1a4c36.findIndex(_0x3b3c13 => _0x3b3c13.status !== 1)]],
              petList: [_0x44b265[_0x1a4c36.findIndex(_0x7b88ee => _0x7b88ee.status !== 1)]],
              times: 0
            });
            await this.initBattle();
            let _0x53a3aa = await this.useSkill(32076);
            while (_0x53a3aa.result.result == 0) {
              _0x53a3aa = await this.useSkill(32071);
            }
            if (_0x53a3aa.result.result == 1) {
              addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[1]));
            }
          }
          if (_0x4e43cb[_0x1a4c36.findIndex(_0x1303ab => _0x1303ab.status !== 1)] == 2297) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x4e43cb[_0x1a4c36.findIndex(_0x46796c => _0x46796c.status !== 1)]],
              petList: [_0x44b265[_0x1a4c36.findIndex(_0x5dab40 => _0x5dab40.status !== 1)]],
              times: 0
            });
            await this.initBattle();
            let _0x5b9ee3 = await this.useSkill(41077);
            if (_0x5b9ee3.result.result == 0) {
              _0x5b9ee3 = await this.useItem(1003);
            }
            if (_0x5b9ee3.result.result == 0) {
              _0x5b9ee3 = await this.useSkill(32071);
            }
            if (_0x5b9ee3.result.result == 1) {
              addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[_0x1a4c36.findIndex(_0x15c3c4 => _0x15c3c4.status !== 1)]));
            }
          }
          if (_0x4e43cb[_0x1a4c36.findIndex(_0x4f4985 => _0x4f4985.status !== 1)] == 2298) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x4e43cb[_0x1a4c36.findIndex(_0x42958a => _0x42958a.status !== 1)]],
              petList: [_0x44b265[_0x1a4c36.findIndex(_0x464dc8 => _0x464dc8.status !== 1)]],
              times: 0
            });
            await this.initBattle();
            let _0x49a3e7 = await this.useSkill(32076);
            while (_0x49a3e7.result.result == 0) {
              _0x49a3e7 = await this.useSkill(41805);
            }
            if (_0x49a3e7.result.result == 1) {
              addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[_0x1a4c36.findIndex(_0x428b85 => _0x428b85.status !== 1)]));
            }
          }
          if (_0x4e43cb[_0x1a4c36.findIndex(_0x43e94d => _0x43e94d.status !== 1)] == 2299) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x4e43cb[_0x1a4c36.findIndex(_0x59b284 => _0x59b284.status !== 1)]],
              petList: [_0x44b265[_0x1a4c36.findIndex(_0x280a35 => _0x280a35.status !== 1)]],
              times: 0
            });
            await this.initBattle();
            let _0x22acd0 = await this.useSkill(41077);
            while (_0x22acd0.result.result == 0) {
              _0x22acd0 = await this.useSkill(32076);
            }
            if (_0x22acd0.result.result == 1) {
              addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[_0x1a4c36.findIndex(_0x13f247 => _0x13f247.status !== 1)]));
            }
          }
          if (_0x4e43cb[_0x1a4c36.findIndex(_0x270e99 => _0x270e99.status !== 1)] == 2300) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x4e43cb[_0x1a4c36.findIndex(_0x4fbde3 => _0x4fbde3.status !== 1)]],
              petList: [_0x44b265[_0x1a4c36.findIndex(_0x3ed7aa => _0x3ed7aa.status !== 1)]],
              times: 0
            });
            await this.initBattle();
            let _0x153079 = await this.useSkill(41078);
            if (_0x153079.result.result == 0) {
              _0x153079 = await this.useSkill(32076);
            }
            if (_0x153079.result.result == 0) {
              _0x153079 = await this.useSkill(41805);
            }
            if (_0x153079.result.result == 1) {
              addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[_0x1a4c36.findIndex(_0x45ade7 => _0x45ade7.status !== 1)]));
            }
          }
          if (_0x4e43cb[_0x1a4c36.findIndex(_0x3c5c29 => _0x3c5c29.status !== 1)] == 2301) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x4e43cb[_0x1a4c36.findIndex(_0x2ecbdf => _0x2ecbdf.status !== 1)]],
              petList: [_0x44b265[_0x1a4c36.findIndex(_0x5135ab => _0x5135ab.status !== 1)]],
              times: 0
            });
            await this.initBattle();
            let _0x5a0aa3 = await this.useSkill(41077);
            if (_0x5a0aa3.result.result == 0) {
              _0x5a0aa3 = await this.useSkill(41077);
            }
            if (_0x5a0aa3.result.result == 0) {
              _0x5a0aa3 = await this.useSkill(32075);
            }
            if (_0x5a0aa3.result.result == 1) {
              addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[_0x1a4c36.findIndex(_0xef3996 => _0xef3996.status !== 1)]));
            }
          }
          if (_0x4e43cb[_0x1a4c36.findIndex(_0x40bbce => _0x40bbce.status !== 1)] == 2302) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x4e43cb[_0x1a4c36.findIndex(_0xe0c724 => _0xe0c724.status !== 1)]],
              petList: [_0x44b265[_0x1a4c36.findIndex(_0x616f36 => _0x616f36.status !== 1)]],
              times: 0
            });
            await this.initBattle();
            let _0x44116a = await this.useSkill(41078);
            for (let _0x406901 = 0; _0x406901 < 5; _0x406901++) {
              if (_0x44116a.result.result == 0) {
                _0x44116a = await this.useSkill(41076);
              }
              if (_0x44116a.result.result == 0) {
                _0x44116a = await this.useSkill(41078);
              }
            }
            if (_0x44116a.result.result == 0) {
              _0x44116a = await this.useSkill(32076);
            }
            if (_0x44116a.result.result == 0) {
              _0x44116a = await this.useSkill(32075);
            }
            if (_0x44116a.result.result == 1) {
              addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[_0x1a4c36.findIndex(_0x116139 => _0x116139.status !== 1)]));
            }
          }
          if (_0x4e43cb[_0x1a4c36.findIndex(_0x3b9daa => _0x3b9daa.status !== 1)] == 2303) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x4e43cb[_0x1a4c36.findIndex(_0x4e4462 => _0x4e4462.status !== 1)]],
              petList: [_0x44b265[_0x1a4c36.findIndex(_0x3c2ef3 => _0x3c2ef3.status !== 1)]],
              times: 0
            });
            await this.initBattle();
            let _0x4c9932 = await this.useSkill(41078);
            for (let _0x2fff7c = 0; _0x2fff7c < 2; _0x2fff7c++) {
              if (_0x4c9932.result.result == 0) {
                _0x4c9932 = await this.useSkill(41078);
              }
            }
            if (_0x4c9932.result.result == 0) {
              _0x4c9932 = await this.useSkill(32075);
            }
            if (_0x4c9932.result.result == 0) {
              _0x4c9932 = await this.useSkill(32071);
            }
            if (_0x4c9932.result.result == 1) {
              addGameLog("顺利通过" + xls.activityCard.getItem(_0x4e43cb[_0x1a4c36.findIndex(_0x1f44d0 => _0x1f44d0.status !== 1)]));
            }
          }
        }
      } else {
        addGameLog("雷诺模拟试炼结束");
        break;
      }
    }
    if (!xls.activityExchange.hasLoaded) {
      xls.activityExchange.load();
    }
    if (!xls.activityTaskReset.hasLoaded) {
      xls.activityTaskReset.load(function () {});
    }
    let _0x52c187 = xls.activityExchange.getItems().filter(function (_0x460444) {
      return _0x460444.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x460444.endTime >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x460444.name.indexOf("雷锘活动头衔奖励") !== -1;
    });
    for (let _0x37f23c = 0; _0x37f23c < _0x52c187.length; _0x37f23c++) {
      if (ExchangeUtils.GetExchangeState(_0x52c187[_0x37f23c]) == 1) {
        const _0xd0a8b3 = {
          id: _0x52c187[_0x37f23c].id,
          selectIndex: 0,
          subDropIdList: []
        };
        await this.send_message("cs_exchange_activity_reward", _0xd0a8b3);
      } else if (ExchangeUtils.GetExchangeState(_0x52c187[_0x37f23c]) == -1) {
        addGameLog(_0x52c187[_0x37f23c].name + "已领取");
      } else if (ExchangeUtils.GetExchangeState(_0x52c187[_0x37f23c]) == 0) {
        addGameLog(_0x52c187[_0x37f23c].name + "未完成");
      }
    }
    let _0x1bbdec = xls.activityTaskReset.getItems().filter(function (_0x10889a) {
      return _0x10889a.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x10889a.endTime >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x10889a.name.indexOf("雷锘产出活动") !== -1;
    });
    for (let _0x5d3ef2 = 0; _0x5d3ef2 < _0x1bbdec.length; _0x5d3ef2++) {
      if (TaskUtils.GetRestTaskState(_0x1bbdec[_0x5d3ef2]) == 1) {
        addGameLog("领取" + _0x1bbdec[_0x5d3ef2].task);
        const _0x183f90 = {
          carnivalId: _0x1bbdec[_0x5d3ef2].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x183f90);
      } else if (TaskUtils.GetRestTaskState(_0x1bbdec[_0x5d3ef2]) == 0) {
        addGameLog(_0x1bbdec[_0x5d3ef2].task + "未完成");
      } else {
        addGameLog(_0x1bbdec[_0x5d3ef2].task + "已完成");
      }
    }
    addGameLog("雷锘副本完成");
    this.stop();
  }
  async dispatchSelfPet(_0x2dff99, _0x1d6bff, _0x2349f5) {
    let _0x96180c = [];
    let _0x530841 = [];
    for (let _0x1e5161 = 0; _0x1e5161 < _0x1d6bff.length; _0x1e5161++) {
      _0x96180c.push(_0x1d6bff[_0x1e5161]);
      _0x530841.push(petConfig.SkillConfig.getDef(_0x1d6bff[_0x1e5161]).name);
    }
    const _0x360721 = {
      skills: _0x96180c,
      features: _0x2349f5
    };
    let _0x91a6dc = await getGoalPets([_0x360721]);
    if (_0x91a6dc) {
      addGameLog("精灵背包中携有" + _0x2dff99 + "+" + _0x530841.join("+"));
      return _0x91a6dc;
    } else {
      addGameLog("背包 没有" + _0x2dff99 + "+" + _0x530841.join("+"));
      return false;
    }
  }
  async darkwarbattleui() {
    const _0x2cd593 = {
      zZjvp: "width",
      mYNOa: function (_0xea37e4, _0x1545f3) {
        return _0xea37e4 + _0x1545f3;
      },
      lJylO: "nick",
      SXJwc: "talent",
      WPnDD: "pet",
      CjOMJ: function (_0xce6dfb, _0x33c9fa) {
        return _0xce6dfb === _0x33c9fa;
      },
      IOfKe: function (_0x40eb92, _0x29ce44) {
        return _0x40eb92 < _0x29ce44;
      },
      FfpfN: function (_0xc6fa4, _0xb9a1c4) {
        return _0xc6fa4 + _0xb9a1c4;
      },
      ZBbDc: function (_0xfb742f, _0x9a3ec7) {
        return _0xfb742f * _0x9a3ec7;
      },
      IOpqh: "center"
    };
    let _0x454d1f = function (_0x21d2ca) {
      const _0x3abf5e = {
        XUykM: "source",
        RvIQz: "_Image1",
        GQGRm: _0x2cd593.zZjvp,
        DJldq: "height"
      };
      function _0x583b80() {
        _0x21d2ca.call(this);
        this.skinParts = [];
        this.elementsContent = [this._Image1_i()];
        this.states = [new eui.State("up", [new eui.SetProperty("_Image1", _0x3abf5e.XUykM, "personal_center_setup_checkbox_up_png"), new eui.SetProperty(_0x3abf5e.RvIQz, "x", 0), new eui.SetProperty("_Image1", "y", 0), new eui.SetProperty("_Image1", "width", 20), new eui.SetProperty(_0x3abf5e.RvIQz, "height", 21)]), new eui.State("down", [new eui.SetProperty("_Image1", _0x3abf5e.XUykM, "personal_center_setup_checkbox_down_png"), new eui.SetProperty("_Image1", "x", 0), new eui.SetProperty("_Image1", "y", 1), new eui.SetProperty("_Image1", _0x3abf5e.GQGRm, 20), new eui.SetProperty("_Image1", _0x3abf5e.DJldq, 20)]), new eui.State("disabled", [])];
      }
      __extends(_0x583b80, _0x21d2ca);
      var _0x2c5dcf = _0x583b80.prototype;
      _0x2c5dcf._Image1_i = function () {
        var _0x7c61cb = new eui.Image();
        this._Image1 = _0x7c61cb;
        return _0x7c61cb;
      };
      return _0x583b80;
    }(eui.Skin);
    super.start();
    let _0x4372c4 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x102dbd = new alert.SimpleAlert();
      _0x102dbd.initialize(alert.ALERT_ROOT);
      _0x102dbd.effectTrigger.showEffect = alert.SHOW_EFFECT;
      _0x102dbd.effectTrigger.hideEffect = alert.HIDE_EFFECT;
      _0x4372c4.alertWin = _0x102dbd;
      _0x102dbd._minHeight = 400;
      _0x102dbd.height = 400;
      _0x102dbd.applicationWidth = 460;
      var _0x438d7a = new eui.Label();
      _0x438d7a.lineSpacing = 3;
      _0x438d7a.size = 16;
      _0x438d7a.text = "暗卡";
      _0x438d7a.textColor = 16777215;
      _0x438d7a.touchEnabled = false;
      _0x438d7a.x = _0x102dbd.width / 2 - _0x438d7a.width / 2;
      _0x438d7a.y = _0x102dbd.height / 16;
      _0x102dbd.addChild(_0x438d7a);
      var _0x4f5250 = new eui.Label();
      _0x4f5250.lineSpacing = 3;
      _0x4f5250.size = 16;
      _0x4f5250.text = "注意:";
      _0x4f5250.textColor = 16776960;
      _0x4f5250.touchEnabled = false;
      _0x4f5250.x = 30;
      _0x4f5250.y = _0x102dbd.height / 20;
      _0x102dbd.addChild(_0x4f5250);
      let _0x58b8e1 = new eui.Label();
      _0x58b8e1.lineSpacing = 3;
      _0x58b8e1.size = 16;
      _0x58b8e1.text = "1.哈肯撒需要堕落龙力跟幕夜龙王击";
      _0x58b8e1.textColor = 16777215;
      _0x58b8e1.touchEnabled = false;
      _0x58b8e1.x = _0x102dbd.width / 2 - _0x58b8e1.width / 2;
      _0x58b8e1.y = _0x4f5250.y + 10 + _0x4f5250.height;
      _0x102dbd.addChild(_0x58b8e1);
      let _0x104412 = new eui.Label();
      _0x104412.lineSpacing = 3;
      _0x104412.size = 16;
      _0x104412.text = "2.长老需要引爆大招";
      _0x104412.textColor = 16777215;
      _0x104412.touchEnabled = false;
      _0x104412.x = _0x102dbd.width / 2 - _0x58b8e1.width / 2;
      _0x104412.y = _0x58b8e1.y + 10 + _0x58b8e1.height;
      _0x102dbd.addChild(_0x104412);
      let _0x14183f = new eui.Label();
      _0x14183f.lineSpacing = 3;
      _0x14183f.size = 16;
      _0x14183f.text = "3.神秘狗需要灵神归寂和万象归元";
      _0x14183f.textColor = 16777215;
      _0x14183f.touchEnabled = false;
      _0x14183f.x = _0x102dbd.width / 2 - _0x58b8e1.width / 2;
      _0x14183f.y = _0x104412.y + 10 + _0x104412.height;
      _0x102dbd.addChild(_0x14183f);
      let _0x4ce3af = new eui.Label();
      _0x4ce3af.lineSpacing = 3;
      _0x4ce3af.size = 16;
      _0x4ce3af.text = "4.水次没有致命一击遇到5星布鲁克克打不过";
      _0x4ce3af.textColor = 16777215;
      _0x4ce3af.touchEnabled = false;
      _0x4ce3af.x = _0x102dbd.width / 2 - _0x58b8e1.width / 2;
      _0x4ce3af.y = _0x14183f.y + 10 + _0x14183f.height;
      _0x102dbd.addChild(_0x4ce3af);
      let _0x1182f5 = new eui.Label();
      _0x1182f5.lineSpacing = 3;
      _0x1182f5.size = 16;
      _0x1182f5.text = "5.蒂朵遇到5星布鲁克克会停止";
      _0x1182f5.textColor = 16777215;
      _0x1182f5.touchEnabled = false;
      _0x1182f5.x = _0x102dbd.width / 2 - _0x58b8e1.width / 2;
      _0x1182f5.y = _0x4ce3af.y + 10 + _0x4ce3af.height;
      _0x102dbd.addChild(_0x1182f5);
      let _0x4abdb3 = new eui.RadioButton();
      _0x4abdb3.skinName = _0x454d1f;
      _0x4abdb3.x = 40;
      _0x4abdb3.y = _0x1182f5.y + _0x1182f5.height + 10;
      _0x4abdb3.selected = true;
      if (localStorage.getItem("1") != null) {
        _0x4abdb3.selected = JSON.parse(localStorage.getItem("1"));
      }
      _0x4abdb3.index = 0;
      _0x102dbd.addChild(_0x4abdb3);
      let _0x495c0c = new eui.Label();
      _0x495c0c.lineSpacing = 3;
      _0x495c0c.size = 20;
      _0x495c0c.text = "哈肯萨";
      _0x495c0c.textColor = 16777215;
      _0x495c0c.touchEnabled = false;
      _0x495c0c.x = _0x4abdb3.width + _0x4abdb3.x + 10;
      _0x495c0c.y = _0x4abdb3.y;
      _0x102dbd.addChild(_0x495c0c);
      let _0x36c8d7 = new eui.RadioButton();
      _0x36c8d7.skinName = _0x454d1f;
      _0x36c8d7.x = _0x495c0c.x + _0x495c0c.width + 80;
      _0x36c8d7.y = _0x4abdb3.y;
      _0x36c8d7.selected = false;
      if (localStorage.getItem("2") != null) {
        _0x36c8d7.selected = JSON.parse(localStorage.getItem("2"));
      }
      _0x36c8d7.index = 0;
      _0x102dbd.addChild(_0x36c8d7);
      let _0x2eb056 = new eui.Label();
      _0x2eb056.lineSpacing = 3;
      _0x2eb056.size = 20;
      _0x2eb056.text = "长老";
      _0x2eb056.textColor = 16777215;
      _0x2eb056.touchEnabled = false;
      _0x2eb056.x = _0x36c8d7.width + _0x36c8d7.x + 10;
      _0x2eb056.y = _0x4abdb3.y;
      _0x102dbd.addChild(_0x2eb056);
      let _0x5f409f = new eui.RadioButton();
      _0x5f409f.skinName = _0x454d1f;
      _0x5f409f.x = 40;
      _0x5f409f.y = _0x1182f5.y + _0x1182f5.height + 50;
      _0x5f409f.selected = false;
      if (localStorage.getItem("3") != null) {
        _0x5f409f.selected = JSON.parse(localStorage.getItem("3"));
      }
      _0x5f409f.index = 0;
      _0x102dbd.addChild(_0x5f409f);
      let _0x342194 = new eui.Label();
      _0x342194.lineSpacing = 3;
      _0x342194.size = 20;
      _0x342194.text = "神秘狗";
      _0x342194.textColor = 16777215;
      _0x342194.touchEnabled = false;
      _0x342194.x = _0x4abdb3.width + _0x4abdb3.x + 10;
      _0x342194.y = _0x1182f5.y + _0x1182f5.height + 50;
      _0x102dbd.addChild(_0x342194);
      let _0x85fcf3 = new eui.RadioButton();
      _0x85fcf3.skinName = _0x454d1f;
      _0x85fcf3.x = _0x495c0c.x + _0x495c0c.width + 80;
      _0x85fcf3.y = _0x1182f5.y + _0x1182f5.height + 50;
      _0x85fcf3.selected = false;
      if (localStorage.getItem("4") != null) {
        _0x85fcf3.selected = JSON.parse(localStorage.getItem("4"));
      }
      _0x85fcf3.index = 0;
      _0x102dbd.addChild(_0x85fcf3);
      let _0xfb7e47 = new eui.Label();
      _0xfb7e47.lineSpacing = 3;
      _0xfb7e47.size = 20;
      _0xfb7e47.text = "水次";
      _0xfb7e47.textColor = 16777215;
      _0xfb7e47.touchEnabled = false;
      _0xfb7e47.x = _0x85fcf3.width + _0x85fcf3.x + 10;
      _0xfb7e47.y = _0x1182f5.y + _0x1182f5.height + 50;
      _0x102dbd.addChild(_0xfb7e47);
      let _0x488450 = new eui.RadioButton();
      _0x488450.skinName = _0x454d1f;
      _0x488450.x = 40;
      _0x488450.y = _0x1182f5.y + _0x1182f5.height + 90;
      _0x488450.selected = false;
      if (localStorage.getItem("5") != null) {
        _0x488450.selected = JSON.parse(localStorage.getItem("5"));
      }
      _0x488450.index = 0;
      _0x102dbd.addChild(_0x488450);
      let _0x3a4434 = new eui.Label();
      _0x3a4434.lineSpacing = 3;
      _0x3a4434.size = 20;
      _0x3a4434.text = "蒂朵";
      _0x3a4434.textColor = 16777215;
      _0x3a4434.touchEnabled = false;
      _0x3a4434.x = _0x4abdb3.width + _0x4abdb3.x + 10;
      _0x3a4434.y = _0x1182f5.y + _0x1182f5.height + 90;
      _0x102dbd.addChild(_0x3a4434);
      _0x102dbd.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x4372c4.stop();
      }, function () {
        localStorage.setItem("1", _0x4abdb3.selected);
        localStorage.setItem("2", _0x36c8d7.selected);
        localStorage.setItem("3", _0x5f409f.selected);
        localStorage.setItem("4", _0x85fcf3.selected);
        localStorage.setItem("5", _0x488450.selected);
        if (_0x4abdb3.selected) {
          _0x4372c4.darkwarbattle1();
        }
        if (_0x36c8d7.selected) {
          _0x4372c4.darkwarbattle2();
        }
        if (_0x5f409f.selected) {
          _0x4372c4.darkwarbattle3();
        }
        if (_0x85fcf3.selected) {
          _0x4372c4.darkwarbattle4();
        }
        if (_0x488450.selected) {
          _0x4372c4.darkwarbattle5();
        }
      }], null);
      _0x102dbd.showAlert();
    });
  }
  async darkwarbattle1() {
    while (true) {
      let _0x2a86ea = await this.send_message("cs_super_boss", {
        fun: 1,
        isSuper: 0,
        getTime: [],
        activityCard: 0,
        activityType: 2,
        friendUid: 0,
        bossLevel: 0
      });
      if (MFC.userInfo.curEnergy < 5) {
        addGameLog("电池不足进行对战");
        break;
      } else {
        await wait(500);
        logger("获取当前boss列表" + _0x2a86ea.bossInfo);
        if (_0x2a86ea.bossInfo.length == 0) {
          logger("当前未发现boss");
          if (ItemManager.getInstance().getItemNumById(100893) < 2) {
            addGameLog("光明远征不足2");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 2,
              isSuper: 0,
              getTime: [],
              activityCard: 0,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
          }
        } else {
          logger("当前发现boss,数量为" + _0x2a86ea.bossInfo.length);
          logger("当前发现boss" + _0x2a86ea.bossInfo[0].activityCard);
          let _0x502c44 = PetManager.getInstance().getAllPets().map(_0x4194ca => {
            if (_0x4194ca.skills.indexOf(14816) != -1 && _0x4194ca.skills.indexOf(22615) != -1) {
              return _0x4194ca;
            }
          }).filter(_0x1bf882 => _0x1bf882 !== undefined)[0];
          if (_0x502c44 == undefined) {
            addGameLog("背包哈肯技能不符合");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 3,
              isSuper: 0,
              getTime: [_0x502c44.getTime, PetManager.getInstance().getAllPets()[0].getTime],
              activityCard: _0x2a86ea.bossInfo[0].activityCard,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
            let _0x2cb701 = await this.waitEvent("sc_battle_notify_load_resource");
            _0x2cb701.gameBody.splice(0, _0x2cb701.gameBody.length);
            await this.send_message("cs_online_load_resource", {
              groupId: "",
              battleType: 0
            });
            await wait(300);
            await this.send_message("cs_online_player_operation", {
              opType: 5,
              data: null,
              groupId: ""
            });
            _0x2cb701 = await this.waitEvent("sc_battle_notify_round_result");
            let _0x549cdc = JSON.parse(_0x2cb701.gameBody[_0x2cb701.gameBody.length - 1].raw);
            _0x2cb701.gameBody.splice(0, _0x2cb701.gameBody.length);
            logger("回合开始");
            await wait(300);
            addGameLog("释放技能:" + petConfig.SkillConfig.getDef(22615).name);
            await this.send_message("cs_online_player_operation", {
              opType: 1,
              data: {
                skillID: 22615
              },
              groupId: ""
            });
            _0x2cb701 = await this.waitEvent("sc_battle_notify_round_result");
            _0x549cdc = JSON.parse(_0x2cb701.gameBody[_0x2cb701.gameBody.length - 1].raw);
            _0x2cb701.gameBody.splice(0, _0x2cb701.gameBody.length);
            if (_0x549cdc.result.result == 0) {
              addGameLog("释放技能:" + petConfig.SkillConfig.getDef(14816).name);
              await this.send_message("cs_online_player_operation", {
                opType: 1,
                data: {
                  skillID: 14816
                },
                groupId: ""
              });
              _0x2cb701 = await this.waitEvent("sc_battle_notify_round_result");
              _0x549cdc = JSON.parse(_0x2cb701.gameBody[_0x2cb701.gameBody.length - 1].raw);
              _0x2cb701.gameBody.splice(0, _0x2cb701.gameBody.length);
            }
            await this.send_message("cs_quit_battle", {});
          }
        }
      }
    }
    addGameLog("暗卡结束");
    this.stop();
  }
  async darkwarbattle2() {
    while (true) {
      let _0x24822a = await this.send_message("cs_super_boss", {
        fun: 1,
        isSuper: 0,
        getTime: [],
        activityCard: 0,
        activityType: 2,
        friendUid: 0,
        bossLevel: 0
      });
      if (MFC.userInfo.curEnergy < 5) {
        addGameLog("电池不足进行对战");
        break;
      } else {
        await wait(500);
        logger("获取当前boss列表" + _0x24822a.bossInfo);
        if (_0x24822a.bossInfo.length == 0) {
          logger("当前未发现boss");
          if (ItemManager.getInstance().getItemNumById(100893) < 2) {
            addGameLog("光明远征不足2");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 2,
              isSuper: 0,
              getTime: [],
              activityCard: 0,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
          }
        } else {
          logger("当前发现boss,数量为" + _0x24822a.bossInfo.length);
          logger("当前发现boss" + _0x24822a.bossInfo[0].activityCard);
          let _0x38cfed = PetManager.getInstance().getAllPets().map(_0x47969d => {
            if (_0x47969d.skills.indexOf(32127) != -1 && _0x47969d.skills.indexOf(20592) != -1) {
              return _0x47969d;
            }
          }).filter(_0x5bcd93 => _0x5bcd93 !== undefined)[0];
          if (_0x38cfed == undefined) {
            addGameLog("背包长老技能不符合");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 3,
              isSuper: 0,
              getTime: [_0x38cfed.getTime, PetManager.getInstance().getAllPets()[0].getTime],
              activityCard: _0x24822a.bossInfo[0].activityCard,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
            let _0x59123e = await this.waitEvent("sc_battle_notify_load_resource");
            _0x59123e.gameBody.splice(0, _0x59123e.gameBody.length);
            await this.send_message("cs_online_load_resource", {
              groupId: "",
              battleType: 0
            });
            await wait(300);
            await this.send_message("cs_online_player_operation", {
              opType: 5,
              data: null,
              groupId: ""
            });
            _0x59123e = await this.waitEvent("sc_battle_notify_round_result");
            let _0x1b3ba9 = JSON.parse(_0x59123e.gameBody[_0x59123e.gameBody.length - 1].raw);
            _0x59123e.gameBody.splice(0, _0x59123e.gameBody.length);
            logger("回合开始");
            await wait(300);
            addGameLog("释放技能:" + petConfig.SkillConfig.getDef(20592).name);
            await this.send_message("cs_online_player_operation", {
              opType: 1,
              data: {
                skillID: 20592
              },
              groupId: ""
            });
            _0x59123e = await this.waitEvent("sc_battle_notify_round_result");
            _0x1b3ba9 = JSON.parse(_0x59123e.gameBody[_0x59123e.gameBody.length - 1].raw);
            _0x59123e.gameBody.splice(0, _0x59123e.gameBody.length);
            if (_0x1b3ba9.result.result == 0) {
              addGameLog("释放技能:" + petConfig.SkillConfig.getDef(32127).name);
              await this.send_message("cs_online_player_operation", {
                opType: 1,
                data: {
                  skillID: 32127
                },
                groupId: ""
              });
              _0x59123e = await this.waitEvent("sc_battle_notify_round_result");
              _0x1b3ba9 = JSON.parse(_0x59123e.gameBody[_0x59123e.gameBody.length - 1].raw);
              _0x59123e.gameBody.splice(0, _0x59123e.gameBody.length);
            }
            await this.send_message("cs_quit_battle", {});
          }
        }
      }
    }
    addGameLog("暗卡结束");
    this.stop();
  }
  async darkwarbattle3() {
    while (true) {
      let _0xe968 = await this.send_message("cs_super_boss", {
        fun: 1,
        isSuper: 0,
        getTime: [],
        activityCard: 0,
        activityType: 2,
        friendUid: 0,
        bossLevel: 0
      });
      if (MFC.userInfo.curEnergy < 5) {
        addGameLog("电池不足进行对战");
        break;
      } else {
        await wait(500);
        logger("获取当前boss列表" + _0xe968.bossInfo);
        if (_0xe968.bossInfo.length == 0) {
          logger("当前未发现boss");
          if (ItemManager.getInstance().getItemNumById(100893) < 2) {
            addGameLog("光明远征不足2");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 2,
              isSuper: 0,
              getTime: [],
              activityCard: 0,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
          }
        } else {
          logger("当前发现boss,数量为" + _0xe968.bossInfo.length);
          logger("当前发现boss" + _0xe968.bossInfo[0].activityCard);
          let _0x49a061 = PetManager.getInstance().getAllPets().map(_0x4769bd => {
            if (_0x4769bd.skills.indexOf(40958) != -1 && _0x4769bd.skills.indexOf(40957) != -1) {
              return _0x4769bd;
            }
          }).filter(_0x11f48f => _0x11f48f !== undefined)[0];
          if (_0x49a061 == undefined) {
            addGameLog("背包神秘狗技能不符合");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 3,
              isSuper: 0,
              getTime: [_0x49a061.getTime, PetManager.getInstance().getAllPets()[0].getTime],
              activityCard: _0xe968.bossInfo[0].activityCard,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
            let _0x3e02fc = await this.waitEvent("sc_battle_notify_load_resource");
            _0x3e02fc.gameBody.splice(0, _0x3e02fc.gameBody.length);
            await this.send_message("cs_online_load_resource", {
              groupId: "",
              battleType: 0
            });
            await wait(300);
            await this.send_message("cs_online_player_operation", {
              opType: 5,
              data: null,
              groupId: ""
            });
            _0x3e02fc = await this.waitEvent("sc_battle_notify_round_result");
            let _0x4046a8 = JSON.parse(_0x3e02fc.gameBody[_0x3e02fc.gameBody.length - 1].raw);
            _0x3e02fc.gameBody.splice(0, _0x3e02fc.gameBody.length);
            logger("回合开始");
            await wait(300);
            addGameLog("释放技能:" + petConfig.SkillConfig.getDef(40958).name);
            await this.send_message("cs_online_player_operation", {
              opType: 1,
              data: {
                skillID: 40958
              },
              groupId: ""
            });
            _0x3e02fc = await this.waitEvent("sc_battle_notify_round_result");
            _0x4046a8 = JSON.parse(_0x3e02fc.gameBody[_0x3e02fc.gameBody.length - 1].raw);
            _0x3e02fc.gameBody.splice(0, _0x3e02fc.gameBody.length);
            while (_0x4046a8.result.result == 0) {
              addGameLog("释放技能:" + petConfig.SkillConfig.getDef(40957).name);
              await this.send_message("cs_online_player_operation", {
                opType: 1,
                data: {
                  skillID: 40957
                },
                groupId: ""
              });
              _0x3e02fc = await this.waitEvent("sc_battle_notify_round_result");
              _0x4046a8 = JSON.parse(_0x3e02fc.gameBody[_0x3e02fc.gameBody.length - 1].raw);
              _0x3e02fc.gameBody.splice(0, _0x3e02fc.gameBody.length);
              if (_0x4046a8.result.roundNum > 6) {
                break;
              }
            }
          }
        }
      }
    }
    addGameLog("暗卡结束");
    this.stop();
  }
  async darkwarbattle4() {
    while (true) {
      let _0x5702ba = await this.send_message("cs_super_boss", {
        fun: 1,
        isSuper: 0,
        getTime: [],
        activityCard: 0,
        activityType: 2,
        friendUid: 0,
        bossLevel: 0
      });
      if (MFC.userInfo.curEnergy < 5) {
        addGameLog("电池不足进行对战");
        break;
      } else {
        await wait(500);
        logger("获取当前boss列表" + _0x5702ba.bossInfo);
        if (_0x5702ba.bossInfo.length == 0) {
          logger("当前未发现boss");
          if (ItemManager.getInstance().getItemNumById(100893) < 2) {
            addGameLog("光明远征不足2");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 2,
              isSuper: 0,
              getTime: [],
              activityCard: 0,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
          }
        } else {
          logger("当前发现boss,数量为" + _0x5702ba.bossInfo.length);
          if (xls.activityCard.getItem(_0x5702ba.bossInfo[0].activityCard).bossID == 2750) {
            addGameLog("此关卡需要致命一击，水次没有引爆");
            break;
          } else {
            let _0x4251ab = PetManager.getInstance().getAllPets().map(_0x2069d2 => {
              if (_0x2069d2.skills.indexOf(32529) != -1) {
                return _0x2069d2;
              }
            }).filter(_0x4e7cde => _0x4e7cde !== undefined)[0];
            if (_0x4251ab == undefined) {
              addGameLog("背包水次技能不符合");
              break;
            } else {
              await this.send_message("cs_super_boss", {
                fun: 3,
                isSuper: 0,
                getTime: [_0x4251ab.getTime, PetManager.getInstance().getAllPets()[0].getTime],
                activityCard: _0x5702ba.bossInfo[0].activityCard,
                activityType: 2,
                friendUid: 0,
                bossLevel: 0
              });
              let _0xe0b203 = await this.waitEvent("sc_battle_notify_load_resource");
              _0xe0b203.gameBody.splice(0, _0xe0b203.gameBody.length);
              await this.send_message("cs_online_load_resource", {
                groupId: "",
                battleType: 0
              });
              await wait(300);
              await this.send_message("cs_online_player_operation", {
                opType: 5,
                data: null,
                groupId: ""
              });
              _0xe0b203 = await this.waitEvent("sc_battle_notify_round_result");
              let _0x5b7ced = JSON.parse(_0xe0b203.gameBody[_0xe0b203.gameBody.length - 1].raw);
              _0xe0b203.gameBody.splice(0, _0xe0b203.gameBody.length);
              logger("回合开始");
              await wait(300);
              while (_0x5b7ced.result.result == 0) {
                addGameLog("释放技能:" + petConfig.SkillConfig.getDef(32529).name);
                await this.send_message("cs_online_player_operation", {
                  opType: 1,
                  data: {
                    skillID: 32529
                  },
                  groupId: ""
                });
                _0xe0b203 = await this.waitEvent("sc_battle_notify_round_result");
                _0x5b7ced = JSON.parse(_0xe0b203.gameBody[_0xe0b203.gameBody.length - 1].raw);
                _0xe0b203.gameBody.splice(0, _0xe0b203.gameBody.length);
              }
              await this.send_message("cs_quit_battle", {});
            }
          }
        }
      }
    }
    addGameLog("暗卡结束");
    this.stop();
  }
  async darkwarbattle5() {
    while (true) {
      let _0x221d9b = await this.send_message("cs_super_boss", {
        fun: 1,
        isSuper: 0,
        getTime: [],
        activityCard: 0,
        activityType: 2,
        friendUid: 0,
        bossLevel: 0
      });
      if (MFC.userInfo.curEnergy < 5) {
        addGameLog("电池不足进行对战");
        break;
      } else {
        await wait(500);
        logger("获取当前boss列表" + _0x221d9b.bossInfo);
        if (_0x221d9b.bossInfo.length == 0) {
          logger("当前未发现boss");
          if (ItemManager.getInstance().getItemNumById(100893) < 2) {
            addGameLog("光明远征不足2");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 2,
              isSuper: 0,
              getTime: [],
              activityCard: 0,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
          }
        } else {
          logger("当前发现boss,数量为" + _0x221d9b.bossInfo.length);
          let _0x549946 = PetManager.getInstance().getAllPets().map(_0x4ef266 => {
            if (_0x4ef266.skills.indexOf(100604) != -1) {
              return _0x4ef266;
            }
          }).filter(_0x30e563 => _0x30e563 !== undefined)[0];
          if (_0x549946 == undefined) {
            addGameLog("背包蒂朵技能不符合");
            break;
          } else {
            let _0x2b3d91 = PetManager.getInstance().getAllPets().map(_0x19548e => {
              if (_0x19548e.skills.indexOf(10630) != -1 || _0x19548e.skills.indexOf(100023) != -1) {
                return _0x19548e;
              }
            }).filter(_0x1961f7 => _0x1961f7 !== undefined).sort((_0x284b4a, _0x53ea98) => _0x53ea98.featureId - _0x284b4a.featureId)[0];
            if (_0x2b3d91 == undefined) {} else if (xls.activityCard.getItem(_0x221d9b.bossInfo[0].activityCard).bossID == 2750) {
              addGameLog("此关卡需要致命一击");
              break;
            } else {
              await this.send_message("cs_super_boss", {
                fun: 3,
                isSuper: 0,
                getTime: [_0x549946.getTime, _0x2b3d91.getTime, PetManager.getInstance().getAllPets()[0].getTime],
                activityCard: _0x221d9b.bossInfo[0].activityCard,
                activityType: 2,
                friendUid: 0,
                bossLevel: 0
              });
              let _0x20c8da = await this.waitEvent("sc_battle_notify_load_resource");
              _0x20c8da.gameBody.splice(0, _0x20c8da.gameBody.length);
              await this.send_message("cs_online_load_resource", {
                groupId: "",
                battleType: 0
              });
              await wait(300);
              await this.send_message("cs_online_player_operation", {
                opType: 5,
                data: null,
                groupId: ""
              });
              _0x20c8da = await this.waitEvent("sc_battle_notify_round_result");
              let _0x21ac04 = JSON.parse(_0x20c8da.gameBody[_0x20c8da.gameBody.length - 1].raw);
              _0x20c8da.gameBody.splice(0, _0x20c8da.gameBody.length);
              logger("回合开始");
              await wait(300);
              addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100604).name);
              await this.send_message("cs_online_player_operation", {
                opType: 1,
                data: {
                  skillID: 100604
                },
                groupId: ""
              });
              _0x20c8da = await this.waitEvent("sc_battle_notify_round_result");
              _0x21ac04 = JSON.parse(_0x20c8da.gameBody[_0x20c8da.gameBody.length - 1].raw);
              _0x20c8da.gameBody.splice(0, _0x20c8da.gameBody.length);
              if (_0x21ac04.result.result == 0) {
                if (_0x21ac04.result.playerInfos[0].uid == MFC.userInfo.uid) {
                  if (_0x21ac04.result.playerInfos[0].nextRoundOP == 3) {
                    await this.send_message("cs_quit_battle", {});
                  } else {
                    await this.send_message("cs_online_player_operation", {
                      data: {
                        petIndex: 1
                      },
                      groupId: "",
                      opType: 2
                    });
                    addGameLog("切换精灵");
                    if (_0x2b3d91.skills.indexOf(10630) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(10630).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 10630
                        },
                        groupId: ""
                      });
                    }
                    if (_0x2b3d91.skills.indexOf(100023) != -1) {
                      addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100023).name);
                      await this.send_message("cs_online_player_operation", {
                        opType: 1,
                        data: {
                          skillID: 100023
                        },
                        groupId: ""
                      });
                    }
                    _0x20c8da = await this.waitEvent("sc_battle_notify_round_result");
                    _0x21ac04 = JSON.parse(_0x20c8da.gameBody[_0x20c8da.gameBody.length - 1].raw);
                    _0x20c8da.gameBody.splice(0, _0x20c8da.gameBody.length);
                    await this.send_message("cs_quit_battle", {});
                  }
                } else if (_0x21ac04.result.playerInfos[1].nextRoundOP == 3) {
                  await this.send_message("cs_quit_battle", {});
                } else {
                  await this.send_message("cs_online_player_operation", {
                    data: {
                      petIndex: 1
                    },
                    groupId: "",
                    opType: 2
                  });
                  addGameLog("切换精灵");
                  if (_0x2b3d91.skills.indexOf(10630) != -1) {
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(10630).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 10630
                      },
                      groupId: ""
                    });
                  }
                  if (_0x2b3d91.skills.indexOf(100023) != -1) {
                    addGameLog("释放技能:" + petConfig.SkillConfig.getDef(100023).name);
                    await this.send_message("cs_online_player_operation", {
                      opType: 1,
                      data: {
                        skillID: 100023
                      },
                      groupId: ""
                    });
                  }
                  _0x20c8da = await this.waitEvent("sc_battle_notify_round_result");
                  _0x21ac04 = JSON.parse(_0x20c8da.gameBody[_0x20c8da.gameBody.length - 1].raw);
                  _0x20c8da.gameBody.splice(0, _0x20c8da.gameBody.length);
                  await this.send_message("cs_quit_battle", {});
                }
              }
            }
          }
        }
      }
    }
    addGameLog("暗卡结束");
    this.stop();
  }
  async darkwarbattle6() {
    let _0x2b7d6d = [];
    while (true) {
      let _0x5bf814 = await this.send_message("cs_super_boss", {
        fun: 1,
        isSuper: 0,
        getTime: [],
        activityCard: 0,
        activityType: 2,
        friendUid: 0,
        bossLevel: 0
      });
      if (MFC.userInfo.curEnergy < 5) {
        addGameLog("电池不足进行对战");
        break;
      } else {
        await wait(500);
        logger("获取当前boss列表" + _0x5bf814.bossInfo);
        if (_0x5bf814.bossInfo.length == 0) {
          logger("当前未发现boss");
          if (ItemManager.getInstance().getItemNumById(100893) < 2) {
            addGameLog("光明远征不足2");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 2,
              isSuper: 0,
              getTime: [],
              activityCard: 0,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
          }
        }
        for (let _0x49516a = 0; _0x49516a < _0x5bf814.bossInfo.length; _0x49516a++) {
          if (_0x5bf814.bossInfo[_0x49516a].activityCard >= 1737 && _0x5bf814.bossInfo[_0x49516a].activityCard <= 1791) {
            logger("当前发现boss,数量为" + _0x5bf814.bossInfo.length);
            _0x2b7d6d[_0x49516a] = _0x5bf814.bossInfo[_0x49516a].activityCard;
          }
        }
        if (_0x2b7d6d.filter(_0x2db33f => _0x2db33f !== undefined).length !== 0) {
          logger("低星数量" + _0x2b7d6d.filter(_0x2800ee => _0x2800ee !== undefined).length);
          logger("低星" + _0x2b7d6d.filter(_0x27030f => _0x27030f !== undefined)[0]);
          let _0x28007a = PetManager.getInstance().getAllPets().map(_0x1a4b8c => {
            if (_0x1a4b8c.skills.indexOf(11022) != -1) {
              return _0x1a4b8c;
            }
          }).filter(_0x22093b => _0x22093b !== undefined)[0];
          if (_0x28007a == undefined) {
            addGameLog("背包没有绝命火焰");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 3,
              isSuper: 0,
              getTime: [_0x28007a.getTime, PetManager.getInstance().getAllPets()[1].getTime],
              activityCard: _0x2b7d6d.filter(_0x12ae03 => _0x12ae03 !== undefined)[0],
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
            let _0x53a49b = await this.waitEvent("sc_battle_notify_load_resource");
            _0x53a49b.gameBody.splice(0, _0x53a49b.gameBody.length);
            await this.send_message("cs_online_load_resource", {
              groupId: "",
              battleType: 0
            });
            await wait(300);
            await this.send_message("cs_online_player_operation", {
              opType: 5,
              data: null,
              groupId: ""
            });
            _0x53a49b = await this.waitEvent("sc_battle_notify_round_result");
            let _0x1efbf0 = JSON.parse(_0x53a49b.gameBody[_0x53a49b.gameBody.length - 1].raw);
            _0x53a49b.gameBody.splice(0, _0x53a49b.gameBody.length);
            logger("回合开始");
            await wait(300);
            if (_0x1efbf0.result.result == 0) {
              addGameLog("释放技能:" + petConfig.SkillConfig.getDef(11022).name);
              await this.send_message("cs_online_player_operation", {
                opType: 1,
                data: {
                  skillID: 11022
                },
                groupId: ""
              });
              _0x53a49b = await this.waitEvent("sc_battle_notify_round_result");
              _0x1efbf0 = JSON.parse(_0x53a49b.gameBody[_0x53a49b.gameBody.length - 1].raw);
              _0x53a49b.gameBody.splice(0, _0x53a49b.gameBody.length);
              if (_0x1efbf0.result.result == 1) {
                addGameLog("击败boss");
              }
              if (_0x1efbf0.result.result == 2) {
                addGameLog("逃跑");
              }
              await this.send_message("cs_quit_battle", {});
            }
          }
        } else if (_0x5bf814.bossInfo.length !== 3 && _0x2b7d6d.filter(_0x9516f4 => _0x9516f4 !== undefined).length == 0) {
          if (ItemManager.getInstance().getItemNumById(100893) < 2) {
            addGameLog("光明远征不足2");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 2,
              isSuper: 0,
              getTime: [],
              activityCard: 0,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
          }
        } else {
          addGameLog("全为高星Boss");
          break;
        }
      }
    }
    addGameLog("暗卡结束");
    this.stop();
  }
  async darkwarbattle7() {
    let _0x5258b5 = [];
    while (true) {
      let _0xb13b3f = await this.send_message("cs_super_boss", {
        fun: 1,
        isSuper: 0,
        getTime: [],
        activityCard: 0,
        activityType: 2,
        friendUid: 0,
        bossLevel: 0
      });
      if (MFC.userInfo.curEnergy < 5) {
        addGameLog("电池不足进行对战");
        break;
      } else {
        await wait(500);
        logger("获取当前boss列表" + _0xb13b3f.bossInfo);
        if (_0xb13b3f.bossInfo.length == 0) {
          logger("当前未发现boss");
          if (ItemManager.getInstance().getItemNumById(100893) < 2) {
            addGameLog("光明远征不足2");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 2,
              isSuper: 0,
              getTime: [],
              activityCard: 0,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
          }
        }
        for (let _0x3c5d50 = 0; _0x3c5d50 < _0xb13b3f.bossInfo.length; _0x3c5d50++) {
          if (_0xb13b3f.bossInfo[_0x3c5d50].activityCard !== 1807 && _0xb13b3f.bossInfo[_0x3c5d50].activityCard !== 1812 && _0xb13b3f.bossInfo[_0x3c5d50].activityCard !== 1813 && _0xb13b3f.bossInfo[_0x3c5d50].activityCard !== 1815 && _0xb13b3f.bossInfo[_0x3c5d50].activityCard !== 1817) {
            logger("当前发现boss,数量为" + _0xb13b3f.bossInfo.length);
            _0x5258b5[_0x3c5d50] = _0xb13b3f.bossInfo[_0x3c5d50].activityCard;
          }
        }
        if (_0x5258b5.filter(_0x23b3e7 => _0x23b3e7 !== undefined).length !== 0) {
          logger("boss数量" + _0x5258b5.filter(_0x4a4e25 => _0x4a4e25 !== undefined).length);
          logger("boss" + _0x5258b5.filter(_0x175d7e => _0x175d7e !== undefined)[0]);
          let _0x58642c = PetManager.getInstance().getAllPets().map(_0x15e589 => {
            if (_0x15e589.skills.indexOf(23506) != -1 && _0x15e589.skills.indexOf(23505) != -1) {
              return _0x15e589;
            }
          }).filter(_0x241ea9 => _0x241ea9 !== undefined)[0];
          if (_0x58642c == undefined) {
            addGameLog("背包缪斯没有苍月或皎月");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 3,
              isSuper: 0,
              getTime: [_0x58642c.getTime, PetManager.getInstance().getAllPets()[1].getTime],
              activityCard: _0x5258b5.filter(_0x4e98de => _0x4e98de !== undefined)[0],
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
            let _0x31415b = await this.waitEvent("sc_battle_notify_load_resource");
            _0x31415b.gameBody.splice(0, _0x31415b.gameBody.length);
            await this.send_message("cs_online_load_resource", {
              groupId: "",
              battleType: 0
            });
            await wait(300);
            await this.send_message("cs_online_player_operation", {
              opType: 5,
              data: null,
              groupId: ""
            });
            _0x31415b = await this.waitEvent("sc_battle_notify_round_result");
            let _0xf11f30 = JSON.parse(_0x31415b.gameBody[_0x31415b.gameBody.length - 1].raw);
            _0x31415b.gameBody.splice(0, _0x31415b.gameBody.length);
            if (_0xf11f30.result.result == 0) {
              for (let _0x2d225e = 0; _0x2d225e < 3; _0x2d225e++) {
                addGameLog("释放技能:" + petConfig.SkillConfig.getDef(23505).name);
                await this.send_message("cs_online_player_operation", {
                  opType: 1,
                  data: {
                    skillID: 23505
                  },
                  groupId: ""
                });
                _0x31415b = await this.waitEvent("sc_battle_notify_round_result");
                _0xf11f30 = JSON.parse(_0x31415b.gameBody[_0x31415b.gameBody.length - 1].raw);
                _0x31415b.gameBody.splice(0, _0x31415b.gameBody.length);
                if (_0xf11f30.result.result !== 0) {
                  break;
                }
              }
              while (_0xf11f30.result.result == 0) {
                addGameLog("释放技能:" + petConfig.SkillConfig.getDef(23506).name);
                await this.send_message("cs_online_player_operation", {
                  opType: 1,
                  data: {
                    skillID: 23506
                  },
                  groupId: ""
                });
                _0x31415b = await this.waitEvent("sc_battle_notify_round_result");
                _0xf11f30 = JSON.parse(_0x31415b.gameBody[_0x31415b.gameBody.length - 1].raw);
                _0x31415b.gameBody.splice(0, _0x31415b.gameBody.length);
              }
            }
          }
        } else if (_0xb13b3f.bossInfo.length !== 3 && _0x5258b5.filter(_0x180e92 => _0x180e92 !== undefined).length == 0) {
          if (ItemManager.getInstance().getItemNumById(100893) < 2) {
            addGameLog("光明远征不足2");
            break;
          } else {
            await this.send_message("cs_super_boss", {
              fun: 2,
              isSuper: 0,
              getTime: [],
              activityCard: 0,
              activityType: 2,
              friendUid: 0,
              bossLevel: 0
            });
          }
        } else {
          addGameLog("剩余是打不过的Boss");
          break;
        }
      }
    }
    addGameLog("暗卡结束");
    this.stop();
  }
  async modiui() {
    super.start();
    let _0x243d12 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x7cad0c = [];
      var _0x5019dc = SimpleAlertUi({
        height: 200,
        width: 370
      });
      _0x243d12.alertWin = _0x5019dc;
      const _0xb566d8 = {
        text: "莫迪西斯",
        x: _0x5019dc.applicationWidth / 2 - 30,
        y: _0x5019dc.height / 15
      };
      let _0x118a09 = createLabel(_0xb566d8);
      _0x118a09.size = 20;
      _0x7cad0c.push(_0x118a09);
      const _0x5d5a66 = {
        text: `莫迪西斯使用瞬杀光闪击
(副本有pp限制水次等pp不足以打30次)
使用时别在副本点进点出
用的bfs搜索最佳路线`,
        x: _0x5019dc.applicationWidth / 6 - 40,
        y: _0x118a09.y + 40
      };
      let _0xe35a64 = createLabel(_0x5d5a66);
      _0x7cad0c.push(_0xe35a64);
      _0x243d12.addAllUis(_0x7cad0c);
      _0x5019dc.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x243d12.stop();
      }, function () {
        _0x243d12.modi();
      }], null);
      _0x5019dc.showAlert();
    });
  }
  async modi() {
    while (1) {
      let _0x57368a = await this.send_message("cs_Modissis_output_op", {
        type: 1,
        itemId: 0,
        eventId: 0,
        petGetTime: [],
        mapStep: ""
      });
      let _0x2c48b8 = PetManager.getInstance().getAllPets().map(_0x49727b => {
        if ((_0x49727b.skills.indexOf(10630) != -1 || _0x49727b.skills.indexOf(100023) != -1) && (_0x49727b.featureId == 5 || _0x49727b.featureId == 6 || _0x49727b.featureId == 7 || _0x49727b.featureId == 8)) {
          return _0x49727b;
        }
      }).filter(_0x91f5bd => _0x91f5bd !== undefined).sort((_0x1df7b9, _0x996e98) => _0x996e98.featureId - _0x1df7b9.featureId)[0];
      let _0x1c1754 = _0x57368a.petGetTimes.find(_0x4eade9 => _0x4eade9.useSkills.find(_0x38aa63 => _0x38aa63.id === 100023))?.useSkills.find(_0x537c5c => _0x537c5c.id === 100023)?.crtPP;
      let _0x127016 = _0x57368a.petGetTimes.find(_0xa5daab => _0xa5daab.useSkills.find(_0x27b40c => _0x27b40c.id === 10630))?.useSkills.find(_0xa2b201 => _0xa2b201.id === 10630)?.crtPP;
      if (_0x2c48b8.skills.indexOf(100023) != -1) {
        addGameLog("光闪击pp为" + _0x1c1754);
        if (_0x1c1754 == 0) {
          addGameLog("光闪击pp为0,结束");
          break;
        }
      }
      if (_0x2c48b8.skills.indexOf(10630) != -1) {
        addGameLog("光闪击pp为" + _0x127016);
        if (_0x127016 == 0) {
          addGameLog("光闪击pp为0,结束");
          break;
        }
      }
      let _0x588252 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
      let _0x48ec68 = _0x57368a.map.filter(function (_0x28a9dc) {
        return _0x28a9dc.cardId !== 0;
      });
      for (let _0x2bb0c1 = 0; _0x2bb0c1 < _0x48ec68.length; _0x2bb0c1++) {
        let _0x540264 = _0x48ec68[_0x2bb0c1].coordinate.split(",")[0];
        let _0x2e6385 = _0x48ec68[_0x2bb0c1].coordinate.split(",")[1];
        _0x588252[_0x540264][_0x2e6385] = 1;
      }
      logger(_0x588252);
      _0x588252[_0x57368a.seerStep.split(",")[0]][_0x57368a.seerStep.split(",")[1]] = 1;
      const _0x267f5a = [[-1, 0], [1, 0], [0, -1], [0, 1]];
      const _0x209023 = [parseInt(_0x57368a.seerStep.split(",")[0]), parseInt(_0x57368a.seerStep.split(",")[1])];
      const _0x14a051 = [5, 5];
      const _0x59b96d = [[_0x209023]];
      const _0x1ab9c9 = new Set();
      _0x1ab9c9.add(_0x209023.toString());
      let _0x353041 = null;
      while (_0x59b96d.length > 0) {
        const _0x4e7d80 = _0x59b96d.shift();
        const _0x49a2ee = _0x4e7d80[_0x4e7d80.length - 1];
        if (_0x49a2ee[0] === _0x14a051[0] && _0x49a2ee[1] === _0x14a051[1]) {
          _0x353041 = _0x4e7d80;
          break;
        }
        for (const [_0x29ccdd, _0x16f633] of _0x267f5a) {
          const _0x2fea8b = _0x49a2ee[0] + _0x29ccdd;
          const _0x1fdb11 = _0x49a2ee[1] + _0x16f633;
          const _0x24c12a = [_0x2fea8b, _0x1fdb11];
          if (_0x2fea8b >= 0 && _0x2fea8b < _0x588252.length && _0x1fdb11 >= 0 && _0x1fdb11 < _0x588252[_0x2fea8b].length && _0x588252[_0x2fea8b][_0x1fdb11] === 1 && !_0x1ab9c9.has(_0x24c12a.toString())) {
            const _0x4b2d20 = [..._0x4e7d80, _0x24c12a];
            _0x59b96d.push(_0x4b2d20);
            _0x1ab9c9.add(_0x24c12a.toString());
          }
        }
      }
      _0x353041.shift();
      if (ItemManager.getInstance().getItemNumById(101193) == 0 || MFC.userInfo.curEnergy < 15) {
        break;
      }
      for (let _0xecb1ac = 0; _0xecb1ac < _0x353041.length; _0xecb1ac++) {
        let _0x53bae7 = _0x353041[_0xecb1ac].join(",");
        if (_0x57368a.map.filter(function (_0x261f49) {
          return _0x261f49.coordinate.indexOf(_0x53bae7) !== -1 && _0x261f49.passBy !== 2;
        })) {
          if (ItemManager.getInstance().getItemNumById(101193) > 0 && MFC.userInfo.curEnergy > 15) {
            let _0x1dcbf0 = PetManager.getInstance().getAllPets().map(_0x4d45fe => {
              if ((_0x4d45fe.skills.indexOf(10630) != -1 || _0x4d45fe.skills.indexOf(100023) != -1) && (_0x4d45fe.featureId == 5 || _0x4d45fe.featureId == 6 || _0x4d45fe.featureId == 7 || _0x4d45fe.featureId == 8)) {
                return _0x4d45fe;
              }
            }).filter(_0x529161 => _0x529161 !== undefined).sort((_0x4b9cf1, _0x19e875) => _0x19e875.featureId - _0x4b9cf1.featureId)[0];
            let _0x56539c;
            if (PetManager.getInstance().getAllPets().map(_0x3bc856 => {
              if ((_0x3bc856.skills.indexOf(10630) != -1 || _0x3bc856.skills.indexOf(100023) != -1) && (_0x3bc856.featureId == 5 || _0x3bc856.featureId == 6 || _0x3bc856.featureId == 7 || _0x3bc856.featureId == 8)) {
                return _0x3bc856;
              }
            }).filter(_0x13faa9 => _0x13faa9 !== undefined).sort((_0x384a73, _0x304843) => _0x304843.featureId - _0x384a73.featureId)[0].skills.indexOf(100023) !== -1) {
              _0x56539c = 100023;
            } else {
              _0x56539c = 10630;
            }
            while (true) {
              let _0x37fa2a = await this.send_message("cs_Modissis_output_op", {
                type: 1,
                itemId: 0,
                eventId: 0,
                petGetTime: [],
                mapStep: ""
              });
              await this.send_message("cs_Modissis_output_op", {
                type: 4,
                itemId: 0,
                eventId: 0,
                petGetTime: [_0x1dcbf0.getTime, PetManager.getInstance().getAllPets()[0].getTime],
                mapStep: ""
              });
              await this.send_message("cs_Modissis_output_op", {
                type: 3,
                itemId: 0,
                eventId: 0,
                mapStep: _0x37fa2a.map.filter(function (_0x5ade97) {
                  return _0x5ade97.coordinate.indexOf(_0x53bae7) !== -1 && _0x5ade97.passBy !== 2;
                })[0].coordinate
              });
              await this.initBattle();
              let _0x45369f = await this.useSkill(_0x56539c);
              if (_0x45369f.result.result == 1) {
                if (_0x37fa2a.map.filter(function (_0x117943) {
                  return _0x117943.coordinate.indexOf(_0x53bae7) !== -1 && _0x117943.passBy !== 2;
                })[0].coordinate.indexOf("5,5") !== -1) {
                  await this.send_message("cs_Modissis_output_op", {
                    type: 5,
                    itemId: 0,
                    eventId: 0,
                    petGetTime: [],
                    mapStep: ""
                  });
                } else if (_0x37fa2a.map.filter(function (_0x50aa34) {
                  return _0x50aa34.coordinate.indexOf(_0x53bae7) !== -1 && _0x50aa34.passBy !== 2;
                })[0].randomList[0] !== 97) {
                  await this.send_message("cs_Modissis_output_op", {
                    type: 6,
                    itemId: 0,
                    eventId: _0x37fa2a.map.filter(function (_0x526b55) {
                      return _0x526b55.coordinate.indexOf(_0x53bae7) !== -1 && _0x526b55.passBy !== 2;
                    })[0].randomList[0],
                    petGetTime: [],
                    mapStep: _0x37fa2a.map.filter(function (_0x541d4e) {
                      return _0x541d4e.coordinate.indexOf(_0x53bae7) !== -1 && _0x541d4e.passBy !== 2;
                    })[0].coordinate
                  });
                  await this.send_message("cs_Modissis_output_op", {
                    type: 6,
                    itemId: 0,
                    eventId: 0,
                    petGetTime: [],
                    mapStep: _0x37fa2a.map.filter(function (_0x593957) {
                      return _0x593957.coordinate.indexOf(_0x53bae7) !== -1 && _0x593957.passBy !== 2;
                    })[0].coordinate
                  });
                } else {
                  await this.send_message("cs_Modissis_output_op", {
                    type: 6,
                    itemId: 0,
                    eventId: _0x37fa2a.map.filter(function (_0x2b5e89) {
                      return _0x2b5e89.coordinate.indexOf(_0x53bae7) !== -1 && _0x2b5e89.passBy !== 2;
                    })[0].randomList[1],
                    petGetTime: [],
                    mapStep: _0x37fa2a.map.filter(function (_0x5b76c0) {
                      return _0x5b76c0.coordinate.indexOf(_0x53bae7) !== -1 && _0x5b76c0.passBy !== 2;
                    })[0].coordinate
                  });
                  await this.send_message("cs_Modissis_output_op", {
                    type: 6,
                    itemId: 0,
                    eventId: 0,
                    petGetTime: [],
                    mapStep: _0x37fa2a.map.filter(function (_0x4cb69d) {
                      return _0x4cb69d.coordinate.indexOf(_0x53bae7) !== -1 && _0x4cb69d.passBy !== 2;
                    })[0].coordinate
                  });
                }
                break;
              }
            }
          } else {
            addGameLog("虚化能源或者电池不足");
          }
        }
      }
    }
    let _0x31c104 = xls.activityTaskReset.getItems().filter(function (_0x2b1842) {
      return _0x2b1842.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x2b1842.deadline >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x2b1842.name.indexOf("莫迪西斯每日任务") !== -1;
    });
    for (let _0x535a3e = 0; _0x535a3e < _0x31c104.length; _0x535a3e++) {
      if (TaskUtils.GetRestTaskState(_0x31c104[_0x535a3e]) == 1) {
        addGameLog("领取" + _0x31c104[_0x535a3e].task);
        const _0x161815 = {
          carnivalId: _0x31c104[_0x535a3e].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x161815);
      } else if (TaskUtils.GetRestTaskState(_0x31c104[_0x535a3e]) == 0) {
        addGameLog(_0x31c104[_0x535a3e].task + "未完成");
      } else {
        addGameLog(_0x31c104[_0x535a3e].task + "已完成");
      }
    }
    addGameLog("莫迪西斯完成");
    this.stop();
  }
  async pthl() {
    if (!xls.activityMaze.hasLoaded) {
      xls.activityMaze.load(() => {});
    }
    if (!xls.activityCard.hasLoaded) {
      xls.activityCard.load(() => {});
    }
    if (!xls.activityAffect.hasLoaded) {
      xls.activityAffect.load(() => {});
    }
    if (!xls.activitySpecialAffect.hasLoaded) {
      xls.activitySpecialAffect.load(() => {});
    }
    let _0x3f0399 = await this.send_message("cs_fox_maze_query", {
      fun: 1
    });
    if (_0x3f0399.id !== undefined && _0x3f0399.id == 6104084) {
      addGameLog("巨尾狐妖结束");
      this.stop();
    }
    while (true) {
      let _0x2ad2a1 = await this.send_message("cs_fox_maze_query", {
        fun: 1
      });
      await wait(200);
      _0x2ad2a1 = await this.send_message("cs_fox_maze_query", {
        fun: 1
      });
      if (3 - MFC.attr.getAttr(5000516) > 0) {
        if (_0x2ad2a1.positionIndex.indexOf(parseInt(xls.activityMaze.getItem(_0x2ad2a1.currentCaveID).buffCell.split("_")[0])) == -1 && xls.activityMaze.getItem(_0x2ad2a1.currentCaveID).buffCell.length !== 0) {
          await this.send_message("cs_fox_maze_action", {
            fun: 1,
            positionIndex: parseInt(xls.activityMaze.getItem(_0x2ad2a1.currentCaveID).buffCell.split("_")[0]),
            affectIndex: 2,
            getTimeList: [],
            getTime: 0,
            itemId: 0,
            caveId: 0
          });
        }
        if (_0x2ad2a1.positionIndex.indexOf(parseInt(xls.activityMaze.getItem(_0x2ad2a1.currentCaveID).dropCell.split("*")[0].split("_")[0])) == -1) {
          await this.send_message("cs_fox_maze_action", {
            fun: 1,
            positionIndex: parseInt(xls.activityMaze.getItem(_0x2ad2a1.currentCaveID).dropCell.split("*")[0].split("_")[0]),
            affectIndex: 0,
            getTimeList: [],
            getTime: 0,
            itemId: 0,
            caveId: 0
          });
        }
        if (_0x2ad2a1.positionIndex.indexOf(parseInt(xls.activityMaze.getItem(_0x2ad2a1.currentCaveID).dropCell.split("*")[1].split("_")[0])) == -1) {
          await this.send_message("cs_fox_maze_action", {
            fun: 1,
            positionIndex: parseInt(xls.activityMaze.getItem(_0x2ad2a1.currentCaveID).dropCell.split("*")[1].split("_")[0]),
            affectIndex: 0,
            getTimeList: [],
            getTime: 0,
            itemId: 0,
            caveId: 0
          });
        }
      } else {
        addGameLog("行动点不足");
      }
      if (Math.floor((MFC.attr.getAttr(MFC.attrType.dailyFoxMazeLevel) - 1) / 6) == 4 && Math.floor((MFC.attr.getAttr(MFC.attrType.dailyFoxMazeLevel) - 1) % 6) == 5 && _0x2ad2a1.bossPetInfo.crtHp == 0) {
        await this.send_message("cs_fox_maze_action", {
          fun: 4,
          positionIndex: 0,
          affectIndex: 0,
          getTimeList: [],
          getTime: 0,
          itemId: 0
        });
        addGameLog("领取奖励");
        await this.send_message("cs_fox_maze_action", {
          fun: 5,
          positionIndex: 0,
          affectIndex: 0,
          getTimeList: [],
          getTime: 0,
          itemId: 0,
          caveId: 0
        });
        break;
      } else if (_0x2ad2a1.bossPetInfo.crtHp > 0) {
        if (xls.activityCard.getItem(_0x2ad2a1.bossPetInfo.getTime).energy.split("_")[0] > MFC.userInfo.curEnergy) {
          addGameLog("电池不足");
          break;
        } else if (Math.floor((MFC.attr.getAttr(MFC.attrType.dailyFoxMazeLevel) - 1) / 6) == 2 && Math.floor((MFC.attr.getAttr(MFC.attrType.dailyFoxMazeLevel) - 1) % 6) == 5) {
          if (ItemManager.getInstance().getItemNumById(2009) > 0) {
            let _0x5360b4 = await this.dispatchSelfPet("朵拉格", [100446, 100443, 100444, 100442]);
            if (!_0x5360b4) {
              break;
            } else {
              await this.send_message("cs_fox_maze_action", {
                fun: 3,
                positionIndex: 0,
                affectIndex: 0,
                getTimeList: [_0x5360b4.getTime, PetManager.getInstance().getAllPets()[0].getTime],
                getTime: 0,
                itemId: 0,
                caveId: 0
              });
              let _0x55d0b4 = await this.initBattle();
              let _0x1fa453 = 0;
              let _0x20592d = 0;
              let _0x1355a2 = [100446, 100443, 100444, 100442];
              while (_0x55d0b4.result.result == 0) {
                _0x55d0b4 = await this.useSkill(_0x1355a2[_0x1fa453]);
                if (_0x55d0b4.result.result == 0) {
                  if (_0x1fa453 == 3) {
                    _0x1fa453 = 0;
                    _0x20592d++;
                  } else {
                    _0x1fa453++;
                  }
                }
                if (_0x20592d == 4) {
                  if (getSeerItemNum(2009) > 0) {
                    addGameLog("回pp");
                    this.pp = true;
                    _0x55d0b4 = await this.useItem(2009);
                  }
                  _0x20592d = 0;
                }
                if (_0x55d0b4.result.playerInfos[0].uid == MFC.userInfo.uid) {
                  if (_0x55d0b4.result.playerInfos[0].nextRoundOP !== 1) {
                    addGameLog("被击败");
                    break;
                  }
                } else if (_0x55d0b4.result.playerInfos[1].nextRoundOP !== 1) {
                  addGameLog("被击败");
                  break;
                }
              }
              if (_0x55d0b4.result.result == 1) {
                addGameLog("成功击杀" + xls.activityCard.getItem(_0x2ad2a1.bossPetInfo.getTime).levelID);
                await this.send_message("cs_fox_maze_action", {
                  fun: 4,
                  positionIndex: 0,
                  affectIndex: 0,
                  getTimeList: [],
                  getTime: 0,
                  itemId: 0,
                  caveId: _0x2ad2a1.cave.filter(function (_0x5b5721) {
                    return _0x5b5721 !== 0;
                  })[0]
                });
                addGameLog("进入下一层");
              }
            }
          } else {
            addGameLog("专属pp药不足");
            break;
          }
        } else {
          let _0x50b260 = PetManager.getInstance().getAllPets().map(_0x4df732 => {
            if (_0x4df732.featureId == 5 || _0x4df732.featureId == 6 || _0x4df732.featureId == 7 || _0x4df732.featureId == 8) {
              if (_0x4df732.skills.indexOf(100023) != -1 || _0x4df732.skills.indexOf(10630) != -1) {
                return _0x4df732.getTime;
              }
            }
          }).filter(_0x499e45 => _0x499e45 !== undefined).sort((_0x4582e3, _0x38b60a) => _0x38b60a.featureId - _0x4582e3.featureId)[0];
          let _0xa7869;
          if (_0x50b260 == undefined) {
            addGameLog("没有瞬杀光闪击");
          } else {
            if (PetManager.getInstance().getPetInfoByGetTime(_0x50b260).skills.indexOf(10630) !== -1) {
              _0xa7869 = 10630;
            } else {
              _0xa7869 = 100023;
            }
            while (1) {
              await this.send_message("cs_fox_maze_action", {
                fun: 3,
                positionIndex: 0,
                affectIndex: 0,
                getTimeList: [_0x50b260, PetManager.getInstance().getAllPets()[0].getTime],
                getTime: 0,
                itemId: 0,
                caveId: 0
              });
              let _0x3ac03c = await this.initBattle();
              if (_0x3ac03c.result.result == 0) {
                _0x3ac03c = await this.useSkill(_0xa7869);
              }
              if (_0x3ac03c.result.result == 1) {
                addGameLog("成功瞬杀" + xls.activityCard.getItem(_0x2ad2a1.bossPetInfo.getTime).levelID);
                await this.send_message("cs_fox_maze_action", {
                  fun: 4,
                  positionIndex: 0,
                  affectIndex: 0,
                  getTimeList: [],
                  getTime: 0,
                  itemId: 0,
                  caveId: _0x2ad2a1.cave.filter(function (_0xfbc759) {
                    return _0xfbc759 !== 0;
                  })[0]
                });
                addGameLog("进入下一层");
                break;
              }
            }
          }
        }
      } else {
        addGameLog("已击败" + xls.activityCard.getItem(_0x2ad2a1.bossPetInfo.getTime).levelID);
        await this.send_message("cs_fox_maze_action", {
          fun: 4,
          positionIndex: 0,
          affectIndex: 0,
          getTimeList: [],
          getTime: 0,
          itemId: 0,
          caveId: _0x2ad2a1.cave.filter(function (_0x4369e3) {
            return _0x4369e3 !== 0;
          })[0]
        });
        addGameLog("进入下一层");
      }
    }
    addGameLog("巨尾狐妖结束");
    this.stop();
  }
}
class LimitActivity extends SuperTask {
  constructor() {
    super();
    this.nowName = "限时活动";
    this.skillData = {
      光闪击: 10630,
      光闪击Plus: 100023
    };
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_notify_change_pet"
    }, {
      watchEventName: "sc_change_default_team"
    }, {
      watchEventName: "sc_notify_item_change"
    }, {
      watchEventName: "sc_notify_rouge_change"
    }, {
      watchEventName: "sc_notify_rouge_attr"
    }, {
      watchEventName: "sc_notify_rouge_ctrl"
    }, {
      watchEventName: "sc_notify_nv1_fight_boss_start"
    }, {
      watchEventName: "sc_notify_nv1_battle_end"
    }];
    this.task = [];
    this.countSuccess = 0;
    this.countOpen = 0;
    this.defaultTeam = [];
    this.rewardstatus = 0;
  }
  start() {
    super.start();
    let _0x3c1656 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x407c30 = [];
      var _0x1a729f = SimpleAlertUi({
        height: 400,
        width: 600
      });
      _0x3c1656.alertWin = _0x1a729f;
      const _0xaeb9b0 = {
        text: "限时活动",
        x: _0x1a729f.width / 2 - 32,
        y: _0x1a729f.height / 16
      };
      var _0x2ab620 = createLabel(_0xaeb9b0);
      _0x407c30.push(_0x2ab620);
      const _0x54b075 = {
        text: "注意:",
        x: 30,
        y: _0x1a729f.height / 20,
        textColor: 16776960
      };
      var _0x2a943b = createLabel(_0x54b075);
      _0x407c30.push(_0x2a943b);
      const _0x457ec3 = {
        text: "1.暗黑武斗场需要自己输入次数层数",
        x: 80,
        y: _0x2a943b.y + 10 + _0x2a943b.height
      };
      var _0xc2b84e = createLabel(_0x457ec3);
      _0x407c30.push(_0xc2b84e);
      const _0x204399 = {
        text: "2.能量大作战打的困难6块钱需高功",
        x: 80,
        y: _0xc2b84e.y + 10 + _0xc2b84e.height
      };
      var _0x49ee8e = createLabel(_0x204399);
      _0x407c30.push(_0x49ee8e);
      const _0x49e3f2 = {
        x: 40,
        y: _0x49ee8e.y + _0x49ee8e.height + 10,
        selected: true,
        storageKey: "bugNewYear"
      };
      let _0x102518 = createRadio(_0x49e3f2);
      _0x407c30.push(_0x102518);
      const _0x31a1d7 = {
        text: "暗黑武斗场",
        x: _0x102518.width + _0x102518.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 10
      };
      var _0x811dcb = createLabel(_0x31a1d7);
      _0x407c30.push(_0x811dcb);
      const _0x272933 = {
        x: _0x811dcb.x + _0x811dcb.width + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 10,
        selected: true,
        storageKey: "Raymars"
      };
      let _0x1e546d = createRadio(_0x272933);
      _0x407c30.push(_0x1e546d);
      const _0x46d4a5 = {
        text: "能量大作战",
        x: _0x1e546d.width + _0x1e546d.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 10
      };
      var _0x4fc7a9 = createLabel(_0x46d4a5);
      _0x407c30.push(_0x4fc7a9);
      const _0x1ad3d6 = {
        x: 40,
        y: _0x49ee8e.y + _0x49ee8e.height + 60,
        selected: false,
        storageKey: "Maskfanpai"
      };
      let _0x3d3515 = createRadio(_0x1ad3d6);
      _0x407c30.push(_0x3d3515);
      const _0x191329 = {
        text: "豆芽依依捕抓",
        x: _0x102518.width + _0x102518.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 60
      };
      var _0xb1f708 = createLabel(_0x191329);
      _0x407c30.push(_0xb1f708);
      const _0x33265c = {
        x: _0xb1f708.x + _0xb1f708.width + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 60,
        selected: false,
        storageKey: "xiayi"
      };
      let _0x601a27 = createRadio(_0x33265c);
      _0x407c30.push(_0x601a27);
      const _0x3a75c5 = {
        text: "新春大作战",
        x: _0x601a27.width + _0x601a27.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 60
      };
      var _0x1a3a2e = createLabel(_0x3a75c5);
      _0x407c30.push(_0x1a3a2e);
      const _0x29a53b = {
        x: 40,
        y: _0x49ee8e.y + _0x49ee8e.height + 100,
        selected: false,
        storageKey: "keluosivistor"
      };
      let _0x2463a5 = createRadio(_0x29a53b);
      _0x407c30.push(_0x2463a5);
      const _0x26fe31 = {
        text: "昔日伙伴-雷恩",
        x: _0x102518.width + _0x102518.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 100
      };
      var _0x33e603 = createLabel(_0x26fe31);
      _0x407c30.push(_0x33e603);
      const _0x108aa1 = {
        x: _0xb1f708.x + _0xb1f708.width + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 100,
        selected: false,
        storageKey: "guiwang1"
      };
      let _0x1269e3 = createRadio(_0x108aa1);
      _0x407c30.push(_0x1269e3);
      const _0x3d85f7 = {
        text: "豆芽依依3次",
        x: _0x601a27.width + _0x601a27.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 100
      };
      var _0x46a21f = createLabel(_0x3d85f7);
      _0x407c30.push(_0x46a21f);
      const _0x364675 = {
        x: _0x46a21f.x + _0x46a21f.width + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 100,
        selected: false,
        storageKey: "guiwang1"
      };
      let _0x458df8 = createRadio(_0x364675);
      _0x407c30.push(_0x458df8);
      const _0x32e0f5 = {
        text: "萨菲罗",
        x: _0x458df8.width + _0x458df8.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 100
      };
      var _0x27a6ab = createLabel(_0x32e0f5);
      _0x407c30.push(_0x27a6ab);
      const _0x35ed6e = {
        x: 40,
        y: _0x49ee8e.y + _0x49ee8e.height + 140,
        selected: false,
        storageKey: "dongji"
      };
      let _0x4bf113 = createRadio(_0x35ed6e);
      _0x407c30.push(_0x4bf113);
      const _0x45581f = {
        text: "元宵分汤圆",
        x: _0x102518.width + _0x102518.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 140
      };
      var _0x45fed8 = createLabel(_0x45581f);
      _0x407c30.push(_0x45fed8);
      const _0x545071 = {
        x: _0x45fed8.x + _0x45fed8.width + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 140,
        selected: false,
        storageKey: "oceanGame"
      };
      let _0x4e7d05 = createRadio(_0x545071);
      _0x407c30.push(_0x4e7d05);
      const _0x9c4b25 = {
        text: "帕斯裟帝小怪",
        x: _0x4e7d05.width + _0x4e7d05.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 140
      };
      var _0x6a3972 = createLabel(_0x9c4b25);
      _0x407c30.push(_0x6a3972);
      const _0x2a3a6b = {
        x: _0x6a3972.x + _0x6a3972.width + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 140,
        selected: false,
        storageKey: "wsjgame"
      };
      let _0x5aa346 = createRadio(_0x2a3a6b);
      _0x407c30.push(_0x5aa346);
      const _0x4b423c = {
        text: "帕斯裟帝本体",
        x: _0x5aa346.width + _0x5aa346.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 140
      };
      var _0x882600 = createLabel(_0x4b423c);
      _0x407c30.push(_0x882600);
      const _0x13bc7d = {
        x: _0x882600.x + _0x882600.width + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 140,
        selected: false,
        storageKey: "zetgame"
      };
      let _0xb2bf96 = createRadio(_0x13bc7d);
      _0x407c30.push(_0xb2bf96);
      const _0x16aeec = {
        text: "闪光雷吉",
        x: _0xb2bf96.width + _0xb2bf96.x + 10,
        y: _0x49ee8e.y + _0x49ee8e.height + 140
      };
      var _0x207b0c = createLabel(_0x16aeec);
      _0x407c30.push(_0x207b0c);
      _0x3c1656.addAllUis(_0x407c30);
      _0x1a729f.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x3c1656.stop();
      }, function () {
        localStorage.setItem("bugNewYear", true);
        localStorage.setItem("Raymars", false);
        localStorage.setItem("Maskfanpai", false);
        localStorage.setItem("xiayi", false);
        localStorage.setItem("bugNewYear", _0x102518.selected);
        localStorage.setItem("Raymars", _0x1e546d.selected);
        localStorage.setItem("Maskfanpai", _0x3d3515.selected);
        localStorage.setItem("xiayi", _0x601a27.selected);
        localStorage.setItem("keluosivistor", _0x2463a5.selected);
        localStorage.setItem("guiwangjie", _0x1269e3.selected);
        localStorage.setItem("conglin", _0x458df8.selected);
        localStorage.setItem("dongji", _0x4bf113.selected);
        localStorage.setItem("oceanGame", _0x4e7d05.selected);
        localStorage.setItem("wsjgame", _0x5aa346.selected);
        localStorage.setItem("zetgame", _0xb2bf96.selected);
        if (_0x102518.selected) {
          _0x3c1656.task[1] = 1;
        }
        if (_0x1e546d.selected) {
          _0x3c1656.task[0] = 1;
        }
        if (_0x3d3515.selected) {
          _0x3c1656.task[2] = 1;
        }
        if (_0x601a27.selected) {
          _0x3c1656.task[3] = 1;
        }
        if (_0x2463a5.selected) {
          _0x3c1656.task[4] = 1;
        }
        if (_0x1269e3.selected) {
          _0x3c1656.task[5] = 1;
        }
        if (_0x458df8.selected) {
          _0x3c1656.task[6] = 1;
        }
        if (_0x4bf113.selected) {
          _0x3c1656.task[7] = 1;
        }
        if (_0x4e7d05.selected) {
          _0x3c1656.task[8] = 1;
        }
        if (_0x5aa346.selected) {
          _0x3c1656.task[9] = 1;
        }
        if (_0xb2bf96.selected) {
          _0x3c1656.task[10] = 1;
        }
        _0x3c1656.prcessBody();
      }], null);
      _0x1a729f.showAlert();
    });
  }
  async prcessBody() {
    try {
      if (this.task[0]) {
        await this.expfightui();
      }
      if (this.task[1]) {
        await this.darkui();
      }
      if (this.task[2]) {
        await this.keluosileyuan();
      }
      if (this.task[3]) {
        await this.newyearui();
      }
      if (this.task[4]) {
        await this.xrhble();
      }
      if (this.task[5]) {
        await this.keluosileyuan1();
      }
      if (this.task[6]) {
        await this.cardBattleui();
      }
      if (this.task[7]) {
        await this.fentangyuan();
      }
      if (this.task[8]) {
        await this.pssdxgui();
        addGameLog("活动结束");
      }
      if (this.task[9]) {
        await this.pssdui();
      }
      if (this.task[10]) {
        if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") <= "2025_03_05 14:05:00") {
          await this.sgljosui();
        } else {
          addGameLog("活动结束");
        }
      }
    } catch (_0x52b702) {
      logger(_0x52b702);
    }
  }
  async xrhble() {
    if (!xls.activityTaskReset.hasLoaded) {
      xls.activityTaskReset.load(() => {});
    }
    if (!xls.activityNewExchange.hasLoaded) {
      xls.activityNewExchange.load(() => {});
    }
    while (!pveUtils.GetNewActivityCardOneData(2450)) {
      let _0x1fdc5e = await this.xrhbleba();
      if (!_0x1fdc5e) {
        break;
      }
    }
    while (!!pveUtils.GetNewActivityCardOneData(2450) && pveUtils.GetNewActivityCardOneData(2450).dailyWin < 1) {
      let _0x54583a = await this.xrhbleba();
      if (!_0x54583a) {
        break;
      }
    }
    let _0x126a9e = xls.activityTaskReset.getItemsByKeyValue("activityIdentity", 480);
    for (let _0x343e6f = 0; _0x343e6f < _0x126a9e.length; _0x343e6f++) {
      if (TaskUtils.GetRestTaskState(_0x126a9e[_0x343e6f]) == 1) {
        const _0x578d8b = {
          carnivalId: _0x126a9e[_0x343e6f].id,
          recvIndex: 0
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x578d8b);
      } else if (TaskUtils.GetRestTaskState(_0x126a9e[_0x343e6f]) == 0) {
        addGameLog(_0x126a9e[_0x343e6f].name + _0x126a9e[_0x343e6f].task + "未完成");
      }
    }
    if (MFC.attr.getAttr(10000050) >= 200) {
      if (ExchangeUtils.GetExchangeState(xls.activityNewExchange.getItem(100454)) == 0) {
        addGameLog(xls.activityNewExchange.getItem(100454).name + "未完成");
      } else if (ExchangeUtils.GetExchangeState(xls.activityNewExchange.getItem(100454)) == 1) {
        await this.send_message("cs_new_exchange_activity_reward", {
          id: 100454,
          selectIndex: 0,
          subDropIdList: []
        });
      }
    }
    this.stop();
  }
  async xrhbleba() {
    let _0x37668b = getGoalPets([{
      skills: [11022]
    }]);
    if (_0x37668b) {
      const _0x38ca2b = {
        type: 1,
        cardId: [2450],
        petList: [_0x37668b.getTime],
        times: 0,
        train: 0
      };
      await this.send_message("cs_pve_fight_start", _0x38ca2b);
      await this.initBattle();
      let _0x1c4163 = 11022;
      let _0x49802e = await this.useSkill(_0x1c4163);
      while (_0x49802e.result.result === 0) {
        addGameLog("未击败，继续攻击");
        _0x49802e = await this.useSkill(_0x1c4163);
      }
      if (_0x49802e.result.result === 1) {
        return false;
      } else {
        return true;
      }
    } else {
      addGameLog("背包没有绝命火焰猩猩");
      this.stop();
      return false;
    }
  }
  async pssdxgui() {
    super.start();
    let _0x25b892 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x3cd140 = [];
      var _0x9ab6e6 = SimpleAlertUi({
        height: 350,
        width: 440
      });
      _0x25b892.alertWin = _0x9ab6e6;
      const _0x765080 = {
        text: "帕斯裟帝小怪",
        y: _0x9ab6e6.height / 20
      };
      let _0x55921e = createLabel(_0x765080);
      _0x55921e.x = _0x9ab6e6.applicationWidth / 2 - _0x55921e.width / 2;
      _0x3cd140.push(_0x55921e);
      const _0x722659 = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x55921e.y + _0x55921e.height + 10
      };
      var _0x298535 = createLabel(_0x722659);
      _0x3cd140.push(_0x298535);
      const _0x4f54df = {
        text: "迪福特携带驱邪会卡水冰(系统不会检测)",
        textColor: 16711680,
        x: 40,
        y: _0x298535.y + 10 + _0x298535.height
      };
      var _0x300e8f = createLabel(_0x4f54df);
      _0x3cd140.push(_0x300e8f);
      const _0x3b236d = {
        text: "帕斯裟帝小怪:配置",
        textColor: 16776960,
        x: 30,
        y: _0x55921e.y + 80
      };
      let _0x1fec76 = createLabel(_0x3b236d);
      _0x3cd140.push(_0x1fec76);
      const _0x3f7d56 = {
        text: "============================",
        textColor: 16776960,
        y: _0x1fec76.y + 20
      };
      let _0x2f8c6b = createLabel(_0x3f7d56);
      _0x2f8c6b.x = _0x9ab6e6.applicationWidth / 2 - _0x2f8c6b.width / 2;
      _0x3cd140.push(_0x2f8c6b);
      const _0x502b4a = {
        text: "魔焰猩猩: ",
        textColor: 65535,
        x: _0x9ab6e6.width / 8,
        y: _0x2f8c6b.y + 20
      };
      let _0x19d8eb = createLabel(_0x502b4a);
      _0x3cd140.push(_0x19d8eb);
      const _0x3dc370 = {
        text: "绝命火焰",
        textColor: 16776960,
        x: _0x19d8eb.x + _0x19d8eb.width,
        y: _0x19d8eb.y + 20
      };
      let _0x48dd74 = createLabel(_0x3dc370);
      _0x3cd140.push(_0x48dd74);
      const _0x200335 = {
        text: "迪福特: ",
        textColor: 65535,
        x: _0x9ab6e6.width / 8,
        y: _0x48dd74.y + 20
      };
      let _0x335275 = createLabel(_0x200335);
      _0x3cd140.push(_0x335275);
      const _0x323a94 = {
        text: "地灵幻刺",
        textColor: 16776960,
        x: _0x19d8eb.x + _0x19d8eb.width,
        y: _0x335275.y + 20
      };
      let _0xaa79a6 = createLabel(_0x323a94);
      _0x3cd140.push(_0xaa79a6);
      const _0x22b7d0 = {
        text: "迪福特携带驱邪会卡水冰(系统不会检测)",
        textColor: 16776960,
        x: _0xaa79a6.x,
        y: _0xaa79a6.y + 20
      };
      let _0x360ed3 = createLabel(_0x22b7d0);
      _0x3cd140.push(_0x360ed3);
      const _0x81cd6f = {
        text: "============================",
        textColor: 16776960,
        x: _0x2f8c6b.x,
        y: _0x360ed3.y + 20
      };
      let _0x362a4b = createLabel(_0x81cd6f);
      _0x3cd140.push(_0x362a4b);
      _0x25b892.addAllUis(_0x3cd140);
      _0x9ab6e6.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x25b892.stop();
      }, function () {
        _0x25b892.pssdxgact();
      }], null);
      _0x9ab6e6.showAlert();
    });
  }
  async pssdxgact() {
    await this.send_message("cs_pasroti_activity", {
      action: 1
    });
    await this.pssd();
    let _0x550289 = getGoalPets([{
      skills: [11022]
    }]);
    let _0xf06745 = getGoalPets([{
      skills: [100586]
    }]);
    if (_0x550289 && _0xf06745) {
      let _0x35968b = [2436, 2437, 2438, 2439, 2440, 2441];
      for (let _0x14d11a = 0; _0x14d11a < _0x35968b.length; _0x14d11a++) {
        while (mongoAttr.getActivityAttrPasroti().passLevels.indexOf(_0x35968b[_0x14d11a]) == -1) {
          if (MFC.userInfo.curEnergy >= 5) {
            if (_0x35968b[_0x14d11a] == 2436) {
              const _0xbdc9c7 = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x550289.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0xbdc9c7);
              const _0x283087 = {
                type: 1,
                cardId: [2436],
                petList: [_0x550289.getTime],
                times: 0,
                train: 0
              };
              await this.send_message("cs_pve_fight_start", _0x283087);
              let _0x28caf6 = 11022;
              let _0x187b31 = await this.useSkill(_0x28caf6);
              while (_0x187b31.result.result === 0) {
                addGameLog("未击败，继续攻击");
                _0x187b31 = await this.useSkill(_0x28caf6);
              }
            } else {
              const _0x2d6502 = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0xf06745.getTime, _0x550289.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x2d6502);
              const _0x5567bf = {
                type: 1,
                cardId: [_0x35968b[_0x14d11a]],
                petList: [_0xf06745.getTime, _0x550289.getTime],
                times: 0,
                train: 0
              };
              await this.send_message("cs_pve_fight_start", _0x5567bf);
              let _0x4017a6 = 100586;
              let _0x3f13a2 = 0;
              let _0x567790 = await this.useSkill(_0x4017a6);
              while (_0x567790.result.result === 0) {
                addGameLog("未击败，继续攻击");
                if (_0x3f13a2 == 0) {
                  _0x567790 = await this.useSkill(100586);
                } else {
                  _0x567790 = await this.useSkill(11022, 1);
                }
                let _0x2a756b = _0x567790.result.playerInfos.find(_0x19c71b => _0x19c71b.uid == _0x567790.uid__);
                let _0x3867cf = _0x2a756b.nextRoundOP;
                if (_0x3867cf == 3) {
                  if (_0x567790.result.result !== 0) {
                    break;
                  }
                  addGameLog("首发被击败");
                  await this.send_message("cs_online_player_operation", {
                    opType: 2,
                    data: {
                      petIndex: 1
                    },
                    groupId: ""
                  });
                  _0x3f13a2 = 1;
                }
              }
            }
          } else {
            addGameLog("电池不足");
            this.stop();
            break;
          }
        }
      }
    } else {
      addGameLog("背包没有绝命火焰猩猩或者地灵幻刺迪福特");
    }
    this.stop();
  }
  async pssdui() {
    super.start();
    let _0x37cc96 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x168deb = [];
      var _0x3917d9 = SimpleAlertUi({
        height: 450,
        width: 440
      });
      _0x37cc96.alertWin = _0x3917d9;
      const _0x510508 = {
        text: "帕斯裟帝",
        y: _0x3917d9.height / 20
      };
      let _0x124f49 = createLabel(_0x510508);
      _0x124f49.x = _0x3917d9.applicationWidth / 2 - _0x124f49.width / 2;
      _0x168deb.push(_0x124f49);
      const _0x32ad98 = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x124f49.y + _0x124f49.height + 10
      };
      var _0x2a098d = createLabel(_0x32ad98);
      _0x168deb.push(_0x2a098d);
      const _0x35ff59 = {
        text: "蘑菇怪需要携带朵瑞斯特附魔(系统不会检测)\n上古贤者需要打过第一个buff",
        textColor: 16711680,
        x: 40,
        y: _0x2a098d.y + 10 + _0x2a098d.height
      };
      var _0x4498e9 = createLabel(_0x35ff59);
      _0x168deb.push(_0x4498e9);
      const _0x104d18 = {
        text: "帕斯裟帝:配置",
        textColor: 16776960,
        x: 30,
        y: _0x124f49.y + 100
      };
      let _0x44c9e1 = createLabel(_0x104d18);
      _0x168deb.push(_0x44c9e1);
      const _0x515121 = {
        text: "============================",
        textColor: 16776960,
        y: _0x44c9e1.y + 20
      };
      let _0x4ab6fe = createLabel(_0x515121);
      _0x4ab6fe.x = _0x3917d9.applicationWidth / 2 - _0x4ab6fe.width / 2;
      _0x168deb.push(_0x4ab6fe);
      const _0x15c610 = {
        text: "蘑菇怪打法: ",
        textColor: 65535,
        x: _0x3917d9.width / 8,
        y: _0x4ab6fe.y + 20
      };
      let _0x47a4f4 = createLabel(_0x15c610);
      _0x168deb.push(_0x47a4f4);
      const _0x12de16 = {
        text: "蔽日毒孢+毒气集中(被动)",
        textColor: 16776960,
        x: _0x47a4f4.x + _0x47a4f4.width,
        y: _0x47a4f4.y + 20
      };
      let _0x10e32b = createLabel(_0x12de16);
      _0x168deb.push(_0x10e32b);
      const _0x57a71a = {
        text: "毒粉(符文)+毒炮(符文)",
        textColor: 16776960,
        x: _0x47a4f4.x + _0x47a4f4.width,
        y: _0x10e32b.y + 20
      };
      let _0x23daf6 = createLabel(_0x57a71a);
      _0x168deb.push(_0x23daf6);
      const _0x5a7d44 = {
        text: "索林打法: ",
        textColor: 65535,
        x: _0x3917d9.width / 8,
        y: _0x23daf6.y + 20
      };
      let _0x37c5a6 = createLabel(_0x5a7d44);
      _0x168deb.push(_0x37c5a6);
      const _0x5d4028 = {
        text: "周而复始",
        textColor: 16776960,
        x: _0x47a4f4.x + _0x47a4f4.width,
        y: _0x37c5a6.y + 20
      };
      let _0x551d8e = createLabel(_0x5d4028);
      _0x168deb.push(_0x551d8e);
      const _0x543f0a = {
        text: "塞维尔或者上古贤者",
        textColor: 16776960,
        x: _0x551d8e.x,
        y: _0x551d8e.y + 20
      };
      let _0x15d9e3 = createLabel(_0x543f0a);
      _0x168deb.push(_0x15d9e3);
      const _0x2afe2d = {
        text: "============================",
        textColor: 16776960,
        x: _0x4ab6fe.x,
        y: _0x15d9e3.y + 20
      };
      let _0x5022f4 = createLabel(_0x2afe2d);
      _0x168deb.push(_0x5022f4);
      const _0x371806 = {
        text: "蘑菇怪打法",
        x: 60,
        y: _0x15d9e3.y + 52
      };
      let _0x461c50 = createLabel(_0x371806);
      _0x168deb.push(_0x461c50);
      const _0x4f6fd1 = {
        x: _0x461c50.width + _0x461c50.x + 20,
        y: _0x461c50.y - 1,
        selected: false,
        storageKey: "pssd11"
      };
      let _0xdd68a6 = createToggle(_0x4f6fd1);
      _0x168deb.push(_0xdd68a6);
      const _0x317a35 = {
        text: "索林打法",
        x: _0xdd68a6.x + _0xdd68a6.width + 40,
        y: _0x15d9e3.y + 52
      };
      let _0x5c9e82 = createLabel(_0x317a35);
      _0x168deb.push(_0x5c9e82);
      const _0x5534e2 = {
        x: _0x5c9e82.width + _0x5c9e82.x + 20,
        y: _0x461c50.y - 1,
        selected: false,
        storageKey: "pssd22"
      };
      let _0x3bf636 = createToggle(_0x5534e2);
      _0x168deb.push(_0x3bf636);
      _0x37cc96.addAllUis(_0x168deb);
      _0x3917d9.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x37cc96.stop();
      }, function () {
        localStorage.setItem("pssd11", _0xdd68a6.selected);
        localStorage.setItem("pssd22", _0x3bf636.selected);
        if (_0xdd68a6.selected) {
          _0x37cc96.mgg = 1;
        }
        if (_0x3bf636.selected) {
          _0x37cc96.sl = 1;
        }
        if (_0xdd68a6.selected && _0x3bf636.selected) {
          MFC.bubbleAlert.showAlert("只能勾选一项");
          return true;
        }
        _0x37cc96.pssdact();
      }], null);
      _0x3917d9.showAlert();
    });
  }
  async pssdact() {
    await this.send_message("cs_pasroti_activity", {
      action: 1
    });
    await this.pssd();
    if (this.mgg) {
      await this.pssdba1();
    }
    if (this.sl) {
      await this.pssdba2();
    }
    this.stop();
  }
  async pssd() {
    if (ExchangeUtils.GetExchangeState(xls.activityNewExchange.getItem(100641)) == 0) {
      addGameLog(xls.activityNewExchange.getItem(100641).name + "未完成");
    } else if (ExchangeUtils.GetExchangeState(xls.activityNewExchange.getItem(100641)) == 1) {
      await this.send_message("cs_new_exchange_activity_reward", {
        id: 100641,
        coeff: 1,
        selectIndex: 0,
        subDropIdList: [],
        groupIds: []
      });
    }
  }
  async pssdba1() {
    let _0x43a082 = getGoalPets([{
      skills: [100785, 100800, 100788, 100789]
    }]);
    if (_0x43a082) {
      while (mongoAttr.getActivityAttrPasroti().bossInfo.hpPercent > 0) {
        if (MFC.userInfo.curEnergy >= 15) {
          let _0x2cddda = xls.activityCard.getItems().filter(function (_0x558735) {
            var _0x258295 = TimeUtils.V_CheckTwoDayByConfig(_0x558735.startTime, _0x558735.endTime);
            return _0x558735.eventId == 169 && _0x258295;
          })[0].id;
          await this.send_message("cs_new_change_petArray", {
            op: 1,
            arrayType: "defaultTeam",
            subArray: 0,
            idx: 1,
            teamUp: 0,
            fightType: 0,
            getTimeList: [_0x43a082.getTime, PetManager.getInstance().getAllPets()[0].getTime]
          });
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [_0x2cddda],
            petList: [_0x43a082.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            times: 0,
            train: 0
          });
          await this.initBattle();
          let _0x2652ef = [100800, 100788, 100789];
          let _0x3f465b = await this.useSkill(_0x2652ef[0]);
          let _0x1e859d = 1;
          while (_0x3f465b.result.result === 0) {
            addGameLog("未击败，继续攻击");
            _0x3f465b = await this.useSkill(_0x2652ef[_0x1e859d]);
            if (_0x1e859d >= 2) {
              _0x1e859d = 0;
            }
            _0x1e859d++;
            let _0x43c6f2 = _0x3f465b.result.playerInfos.find(_0x3b0af8 => _0x3b0af8.uid === MFC.userInfo.uid).nextRoundOP;
            if (_0x43c6f2 !== 1) {
              addGameLog("首发被击败");
            }
          }
        } else {
          addGameLog("电池不足");
          this.stop();
          break;
        }
      }
    } else {
      MFC.alert.show(`背包没有带有
蔽日毒孢   毒气集中(被动)
毒粉(符文)   毒炮(符文)
[技能均需要符文]的精灵`);
      this.stop();
      return;
    }
  }
  async pssdba2() {
    let _0x4a45a3 = getGoalPets([{
      skills: [43025]
    }]);
    if (_0x4a45a3) {
      let _0xcab549 = getGoalPets([{
        skills: [100838]
      }]);
      if (!_0xcab549) {
        addGameLog("背包塞维尔没有增幅龙腾裂天震");
        let _0x3adb86 = getGoalPets([{
          skills: [33096]
        }]);
        if (!_0x3adb86) {
          addGameLog("背包上古贤者没有螺旋绝命击");
          this.stop();
          return;
        } else {
          while (mongoAttr.getActivityAttrPasroti().bossInfo.hpPercent > 0) {
            if (MFC.userInfo.curEnergy >= 15) {
              let _0x296a8a = xls.activityCard.getItems().filter(function (_0x5c3eba) {
                var _0x48fc89 = TimeUtils.V_CheckTwoDayByConfig(_0x5c3eba.startTime, _0x5c3eba.endTime);
                return _0x5c3eba.eventId == 169 && _0x48fc89;
              })[0].id;
              await this.send_message("cs_new_change_petArray", {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x3adb86.getTime, _0x4a45a3.getTime, PetManager.getInstance().getAllPets()[0].getTime]
              });
              await this.send_message("cs_pve_fight_start", {
                type: 1,
                cardId: [_0x296a8a],
                petList: [_0x3adb86.getTime, _0x4a45a3.getTime, PetManager.getInstance().getAllPets()[0].getTime],
                times: 0,
                train: 0
              });
              await this.initBattle();
              let _0x1c3914 = await this.useSkill(33096);
              let _0x368324 = 0;
              while (_0x1c3914.result.result == 0) {
                if (_0x368324 == 0 && _0x1c3914.result.result == 0) {
                  _0x1c3914 = await this.useSkill(33096);
                } else if (_0x368324 == 1 && _0x1c3914.result.result == 0) {
                  _0x1c3914 = await this.useSkill(43025, 1);
                } else if (_0x1c3914.result.result == 0) {
                  _0x1c3914 = await this.useSkill(PetManager.getInstance().getAllPets()[0].skills[0]);
                }
                let _0x5ae345 = _0x1c3914.result.playerInfos.find(_0x307ad0 => _0x307ad0.uid == _0x1c3914.uid__);
                let _0xc6c9b8 = _0x5ae345.nextRoundOP;
                if (_0xc6c9b8 == 3 && _0x368324 == 0) {
                  if (_0x1c3914.result.result !== 0) {
                    break;
                  } else {
                    addGameLog("首发被击败,切换索林");
                    const _0x27a70c = {
                      petIndex: _0x368324 + 1
                    };
                    const _0x123467 = {
                      opType: 2,
                      data: _0x27a70c,
                      groupId: ""
                    };
                    await this.send_message("cs_online_player_operation", _0x123467);
                    await this.send_message("cs_online_load_battle_result", {
                      groupId: ""
                    });
                    _0x1c3914 = await this.useSkill(43025, 1);
                    _0x368324++;
                  }
                } else if (_0xc6c9b8 == 3 && _0x368324 == 1) {
                  const _0x5784eb = {
                    petIndex: _0x368324 + 1
                  };
                  const _0x38fcaf = {
                    opType: 2,
                    data: _0x5784eb,
                    groupId: ""
                  };
                  await this.send_message("cs_online_player_operation", _0x38fcaf);
                  await this.send_message("cs_online_load_battle_result", {
                    groupId: ""
                  });
                  break;
                }
                if (_0x1c3914.result.result !== 0 || _0x1c3914.result.roundNum > 8) {
                  break;
                }
              }
            } else {
              addGameLog("电池不足");
              this.stop();
              break;
            }
          }
        }
      } else {
        while (mongoAttr.getActivityAttrPasroti().bossInfo.hpPercent > 0) {
          if (MFC.userInfo.curEnergy >= 15) {
            let _0x48e25b = xls.activityCard.getItems().filter(function (_0x35d0f9) {
              var _0x5ca6ce = TimeUtils.V_CheckTwoDayByConfig(_0x35d0f9.startTime, _0x35d0f9.endTime);
              return _0x35d0f9.eventId == 169 && _0x5ca6ce;
            })[0].id;
            await this.send_message("cs_new_change_petArray", {
              op: 1,
              arrayType: "defaultTeam",
              subArray: 0,
              idx: 1,
              teamUp: 0,
              fightType: 0,
              getTimeList: [_0xcab549.getTime, _0x4a45a3.getTime, PetManager.getInstance().getAllPets()[0].getTime]
            });
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [_0x48e25b],
              petList: [_0xcab549.getTime, _0x4a45a3.getTime, PetManager.getInstance().getAllPets()[0].getTime],
              times: 0,
              train: 0
            });
            await this.initBattle();
            let _0x1eb44c = await this.useSkill(100838);
            let _0x11d3db = 0;
            while (_0x1eb44c.result.result == 0) {
              if (_0x11d3db == 0 && _0x1eb44c.result.result == 0) {
                _0x1eb44c = await this.useSkill(100838);
              } else if (_0x11d3db == 1 && _0x1eb44c.result.result == 0) {
                _0x1eb44c = await this.useSkill(43025, 1);
              } else if (_0x1eb44c.result.result == 0) {
                _0x1eb44c = await this.useSkill(PetManager.getInstance().getAllPets()[0].skills[0]);
              }
              let _0x3ad978 = _0x1eb44c.result.playerInfos.find(_0x354952 => _0x354952.uid == _0x1eb44c.uid__);
              let _0x21e356 = _0x3ad978.nextRoundOP;
              if (_0x21e356 == 3 && _0x11d3db == 0) {
                if (_0x1eb44c.result.result !== 0) {
                  break;
                } else {
                  addGameLog("首发被击败,切换索林");
                  const _0x548756 = {
                    petIndex: _0x11d3db + 1
                  };
                  const _0x384f91 = {
                    opType: 2,
                    data: _0x548756,
                    groupId: ""
                  };
                  await this.send_message("cs_online_player_operation", _0x384f91);
                  await this.send_message("cs_online_load_battle_result", {
                    groupId: ""
                  });
                  _0x1eb44c = await this.useSkill(43025, 1);
                  _0x11d3db++;
                }
              } else if (_0x21e356 == 3 && _0x11d3db == 1) {
                const _0xfe794 = {
                  petIndex: _0x11d3db + 1
                };
                const _0x4a18ae = {
                  opType: 2,
                  data: _0xfe794,
                  groupId: ""
                };
                await this.send_message("cs_online_player_operation", _0x4a18ae);
                await this.send_message("cs_online_load_battle_result", {
                  groupId: ""
                });
                break;
              }
              if (_0x1eb44c.result.result !== 0 || _0x1eb44c.result.roundNum > 8) {
                break;
              }
            }
          } else {
            addGameLog("电池不足");
            this.stop();
            break;
          }
        }
      }
    } else {
      addGameLog("背包索林没有周而复始");
      this.stop();
      return;
    }
  }
  async fentangyuan() {
    let _0x518dc8 = xls.eventSummary.getItems().filter(_0x4a3b79 => _0x4a3b79.eventName.includes("元宵分汤圆"));
    if (!_0x518dc8.length || !canNowTime(_0x518dc8[0].deadline)) {
      MFC.alert.show("元宵分汤圆时间未到");
      this.stop();
      return;
    }
    let _0x466515 = new Date("2025-02-12T05:00:00");
    let _0x29bb1b = MFC.serverTimer.getTime() - _0x466515.getTime();
    let _0x20c4ef = Math.floor(_0x29bb1b / 86400000) + 1;
    let _0x1e7620 = await this.send_message("cs_lanternFestival_riceBalls", {
      checkpoint: 0,
      from: 0,
      opType: 1,
      to: 0
    });
    while (1) {
      if (_0x1e7620.challengingList.no > _0x20c4ef * 3) {
        addGameLog("元宵分汤圆活动结束");
        break;
      } else {
        if (_0x1e7620.challengingList.no == 1) {
          const _0x1bce1e = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1bce1e);
          const _0x155487 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x155487);
        }
        if (_0x1e7620.challengingList.no == 2) {
          const _0x122d92 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x122d92);
          const _0x12accc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x12accc);
          const _0x327c97 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x327c97);
        }
        if (_0x1e7620.challengingList.no == 3) {
          const _0x433b6e = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x433b6e);
          const _0x975121 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x975121);
          const _0x1d0171 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1d0171);
        }
        if (_0x1e7620.challengingList.no == 4) {
          const _0x128756 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x128756);
          const _0xe20ed6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xe20ed6);
          const _0x36eb82 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x36eb82);
          const _0x257bf8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x257bf8);
        }
        if (_0x1e7620.challengingList.no == 5) {
          const _0x403286 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x403286);
          const _0x1d6ef1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1d6ef1);
          const _0x383582 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x383582);
          const _0x15b140 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x15b140);
          const _0x35447e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x35447e);
          const _0x3682c6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3682c6);
          const _0xbac6b3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xbac6b3);
          const _0x45dc39 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x45dc39);
        }
        if (_0x1e7620.challengingList.no == 6) {
          const _0x2d8c89 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2d8c89);
          const _0x5693c9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5693c9);
          const _0x52085c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x52085c);
          const _0x2315d8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2315d8);
          const _0xbf8b87 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xbf8b87);
          const _0x550e2f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x550e2f);
          const _0x4ddc9a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4ddc9a);
        }
        if (_0x1e7620.challengingList.no == 7) {
          const _0x41d268 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x41d268);
          const _0xc4575 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc4575);
          const _0x5f1653 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5f1653);
          const _0x3c5cc4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3c5cc4);
          const _0x3504dd = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3504dd);
          const _0x51e047 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x51e047);
          const _0xaf1d5e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xaf1d5e);
          const _0x1f0dfc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1f0dfc);
          const _0x32c03a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x32c03a);
          const _0xeda81 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xeda81);
          const _0x426f29 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x426f29);
          const _0x2a5ee9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2a5ee9);
          const _0x106074 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x106074);
          const _0x485938 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x485938);
        }
        if (_0x1e7620.challengingList.no == 8) {
          const _0x10a823 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10a823);
          const _0x536fe4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x536fe4);
          const _0x57aa08 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x57aa08);
          const _0x2f792d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2f792d);
          const _0x36f48f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x36f48f);
          const _0x20cf2d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x20cf2d);
          const _0x55d455 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55d455);
          const _0x317642 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x317642);
          const _0x6e138e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x6e138e);
          const _0x2aa1ed = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2aa1ed);
          const _0x2fbb31 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2fbb31);
        }
        if (_0x1e7620.challengingList.no == 9) {
          const _0x4d412c = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4d412c);
          const _0x5ce4c7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5ce4c7);
          const _0x44cf4f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x44cf4f);
          const _0x12ec08 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x12ec08);
          const _0x2874fd = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2874fd);
          const _0x31b8f3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x31b8f3);
          const _0x10282f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10282f);
          const _0x42e884 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x42e884);
          const _0x1c161d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1c161d);
          const _0x14f9f3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x14f9f3);
          const _0x3ea75e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3ea75e);
          const _0x5855e6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5855e6);
        }
        if (_0x1e7620.challengingList.no == 10) {
          const _0x5cbbdb = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5cbbdb);
          const _0x33f3c9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x33f3c9);
          const _0x2490f3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2490f3);
          const _0x4ee178 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4ee178);
          const _0x15f7c1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x15f7c1);
          const _0x4e62eb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4e62eb);
          const _0x5b6d00 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5b6d00);
          const _0x20157e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x20157e);
          const _0x18d595 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x18d595);
          const _0x3541da = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3541da);
          const _0x3370b4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3370b4);
          const _0x27f40b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x27f40b);
        }
        if (_0x1e7620.challengingList.no == 11) {
          const _0x22789a = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x22789a);
          const _0x16b303 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x16b303);
          const _0x8f84bd = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x8f84bd);
          const _0x517770 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x517770);
          const _0x56471b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x56471b);
          const _0x1ac0ed = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1ac0ed);
          const _0x5bc116 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5bc116);
          const _0x5decd7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5decd7);
          const _0x10f85e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10f85e);
          const _0x4fdbc8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4fdbc8);
          const _0x22cdee = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x22cdee);
          const _0x99379d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x99379d);
          const _0x30e031 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x30e031);
          const _0x560e73 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x560e73);
          const _0x199d26 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x199d26);
          const _0x58b7a9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x58b7a9);
          const _0x34f621 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34f621);
          const _0x453541 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x453541);
          const _0x5082ca = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5082ca);
        }
        if (_0x1e7620.challengingList.no == 12) {
          const _0x2a9351 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2a9351);
          const _0x2868a5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2868a5);
          const _0x18ca62 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x18ca62);
          const _0x3b89ef = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b89ef);
          const _0x44aac5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x44aac5);
          const _0x1158f5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1158f5);
          const _0x41dac7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x41dac7);
          const _0x4d918c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4d918c);
          const _0x38018a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x38018a);
          const _0x4e91b4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4e91b4);
          const _0x50b73d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x50b73d);
          const _0x59470b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x59470b);
          const _0x1bd4e2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1bd4e2);
          const _0x241d1a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x241d1a);
          const _0x3f3289 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3f3289);
          const _0x1cc435 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1cc435);
          const _0x706bf5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x706bf5);
        }
        if (_0x1e7620.challengingList.no == 13) {
          const _0x4c3d7a = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c3d7a);
          const _0x123f29 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x123f29);
          const _0x259997 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x259997);
          const _0x402663 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x402663);
          const _0xb967cf = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xb967cf);
          const _0x409a41 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x409a41);
          const _0x3c0088 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3c0088);
          const _0x41f2af = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x41f2af);
          const _0x46417b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46417b);
          const _0x1f179c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1f179c);
          const _0x53880f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x53880f);
          const _0x26512a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x26512a);
          const _0x46a769 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46a769);
          const _0x171026 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x171026);
        }
        if (_0x1e7620.challengingList.no == 14) {
          const _0x3ec4df = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3ec4df);
          const _0x1083a8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1083a8);
          const _0x24f6c8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x24f6c8);
          const _0x177386 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x177386);
          const _0x2c865e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c865e);
          const _0x4c6397 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c6397);
          const _0x366be3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x366be3);
          const _0x3ff6d4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3ff6d4);
          const _0x131494 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x131494);
          const _0x272eae = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x272eae);
          const _0x2d70c8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2d70c8);
          const _0x10e1cf = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10e1cf);
          const _0x131a87 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x131a87);
          const _0x3ca46f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3ca46f);
          const _0x8c318 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x8c318);
        }
        if (_0x1e7620.challengingList.no == 15) {
          const _0x24f668 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x24f668);
          const _0xa8194 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xa8194);
          const _0x53fb00 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x53fb00);
          const _0x177524 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x177524);
          const _0x52f6f7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x52f6f7);
          const _0xfbf56b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xfbf56b);
          const _0x316257 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x316257);
          const _0x52d477 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x52d477);
          const _0x34a419 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34a419);
          const _0x48fe8f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x48fe8f);
          const _0x1e614a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1e614a);
          const _0x11cb47 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x11cb47);
          const _0x55ad13 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55ad13);
          const _0x1cf233 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1cf233);
          const _0x1fe1e3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1fe1e3);
          const _0x3f85c5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3f85c5);
          const _0x3d75c4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3d75c4);
          const _0x2a8d3a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2a8d3a);
          const _0xec0769 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xec0769);
        }
        if (_0x1e7620.challengingList.no == 16) {
          const _0x15e46a = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x15e46a);
          const _0x560998 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x560998);
          const _0x130214 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x130214);
          const _0x23a5ab = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x23a5ab);
          const _0xe9b30 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xe9b30);
          const _0x46e158 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46e158);
          const _0x1087e1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1087e1);
          const _0x4ec46a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4ec46a);
          const _0x232683 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x232683);
          const _0x55edb2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55edb2);
          const _0x3af067 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3af067);
          const _0xcb8ffe = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xcb8ffe);
          const _0x395c43 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x395c43);
          const _0x202c0e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x202c0e);
          const _0x1a10d2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1a10d2);
          const _0x34ef3e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34ef3e);
          const _0x4c3ff4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c3ff4);
          const _0x54ddae = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x54ddae);
          const _0xae3360 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xae3360);
          const _0x20264f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x20264f);
          const _0x128058 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x128058);
          const _0x7f4432 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x7f4432);
        }
        if (_0x1e7620.challengingList.no == 17) {
          const _0x550f5e = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x550f5e);
          const _0x2dbcd0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2dbcd0);
          const _0x384fc0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x384fc0);
          const _0xd55e57 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xd55e57);
          const _0x64cf20 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x64cf20);
          const _0x56759d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x56759d);
          const _0x4c10a9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c10a9);
          const _0x12bc1e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x12bc1e);
          const _0x401894 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x401894);
          const _0x513768 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x513768);
          const _0xb5abc4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xb5abc4);
          const _0x50d599 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x50d599);
        }
        if (_0x1e7620.challengingList.no == 18) {
          const _0x4cd02a = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4cd02a);
          const _0x425388 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x425388);
          const _0x21c95d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x21c95d);
          const _0x57db5a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x57db5a);
          const _0x263000 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x263000);
          const _0x41b8e7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x41b8e7);
          const _0x53249c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x53249c);
          const _0x496f96 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x496f96);
          const _0x55f4cb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55f4cb);
          const _0x10f4c8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10f4c8);
          const _0x5054c2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5054c2);
          const _0x2a124e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2a124e);
          const _0x69f3a4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x69f3a4);
          const _0x261303 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x261303);
          const _0x463a3b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x463a3b);
          const _0x480f4b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x480f4b);
          const _0x3bbb41 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3bbb41);
          const _0x254744 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x254744);
          const _0x40010b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x40010b);
          const _0x2c9925 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c9925);
          const _0x263d31 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x263d31);
          const _0x1f0988 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1f0988);
          const _0x4bc584 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4bc584);
        }
        if (_0x1e7620.challengingList.no == 19) {
          const _0x32c4cb = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x32c4cb);
          const _0x5b348d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5b348d);
          const _0x30f362 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x30f362);
          const _0x56fdb3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x56fdb3);
          const _0xf5bd1d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xf5bd1d);
          const _0x55131f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55131f);
          const _0x40c0dc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x40c0dc);
          const _0x403b87 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x403b87);
          const _0x40b78d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x40b78d);
          const _0x186fe3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x186fe3);
          const _0x572946 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x572946);
          const _0xcda430 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xcda430);
          const _0x534726 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x534726);
          const _0xc7d07c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc7d07c);
          const _0x286d2e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x286d2e);
          const _0x42b0fb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x42b0fb);
          const _0x45d7fe = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x45d7fe);
          const _0x37438b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x37438b);
        }
        if (_0x1e7620.challengingList.no == 20) {
          const _0x2fe775 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2fe775);
          const _0xfe8060 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xfe8060);
          const _0x54b7a2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x54b7a2);
          const _0x2fd301 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2fd301);
          const _0x5d2e01 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5d2e01);
          const _0x5e4c83 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5e4c83);
          const _0x4ba13c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4ba13c);
          const _0x4bfd87 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4bfd87);
          const _0x440320 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x440320);
          const _0x11c203 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x11c203);
          const _0x577da0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x577da0);
          const _0x18845d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x18845d);
          const _0xc409f7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc409f7);
          const _0x9558ba = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x9558ba);
          const _0x12d080 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x12d080);
          const _0x2c9724 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c9724);
          const _0x34afb6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34afb6);
          const _0x4ca852 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4ca852);
          const _0x4f822b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4f822b);
          const _0x251394 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x251394);
          const _0xc5f80a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc5f80a);
          const _0x58f9a3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x58f9a3);
        }
        if (_0x1e7620.challengingList.no == 21) {
          const _0x26e422 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x26e422);
          const _0x31657d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x31657d);
          const _0x56a00d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x56a00d);
          const _0x1e339e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1e339e);
          const _0x5eb27d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5eb27d);
          const _0x3a2e2f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3a2e2f);
          const _0x58f49a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x58f49a);
          const _0x5e6646 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5e6646);
          const _0x4c5e97 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c5e97);
          const _0x59452a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x59452a);
          const _0x1d59f6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1d59f6);
          const _0xf670e1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xf670e1);
          const _0x46170d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46170d);
          const _0x4a915a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4a915a);
          const _0x421f1a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x421f1a);
          const _0x2a19e9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2a19e9);
          const _0x32bcea = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x32bcea);
          const _0x596ab5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x596ab5);
          const _0x2ceebe = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2ceebe);
          const _0x3999d4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3999d4);
          const _0x45a56a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x45a56a);
          const _0x552c30 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x552c30);
          const _0x14fb01 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x14fb01);
          const _0x28a049 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x28a049);
          const _0x5b2f8f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5b2f8f);
          const _0x5a0aff = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5a0aff);
          const _0x3c503a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3c503a);
        }
        if (_0x1e7620.challengingList.no == 22) {
          const _0x463d82 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x463d82);
          const _0x16f385 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x16f385);
          const _0x4cb285 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4cb285);
          const _0x46410a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46410a);
          const _0x2783ef = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2783ef);
          const _0x45feb2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x45feb2);
          const _0x300b3b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x300b3b);
          const _0x301bd9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x301bd9);
          const _0x360e7f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x360e7f);
          const _0x3a20e8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3a20e8);
          const _0x1e03bb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1e03bb);
          const _0x2c8591 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c8591);
          const _0x4e734e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4e734e);
          const _0x115769 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x115769);
          const _0x6e342b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x6e342b);
          const _0x34ace5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34ace5);
          const _0x5a7670 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5a7670);
          const _0x26ce34 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x26ce34);
          const _0x32d908 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x32d908);
          const _0xc7bdcc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc7bdcc);
        }
        if (_0x1e7620.challengingList.no == 23) {
          const _0x14c0c0 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x14c0c0);
          const _0xc2db1c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc2db1c);
          const _0x3e2bf0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3e2bf0);
          const _0x48fd6e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x48fd6e);
          const _0x2953f2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2953f2);
          const _0x4e5a0e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4e5a0e);
          const _0x1e73ee = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1e73ee);
          const _0x38ff9b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x38ff9b);
          const _0x4574ef = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4574ef);
          const _0x53718f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x53718f);
          const _0x876231 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x876231);
          const _0x1153eb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1153eb);
          const _0x4588d3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4588d3);
          const _0x4be872 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4be872);
        }
        if (_0x1e7620.challengingList.no == 24) {
          const _0x4ee3ef = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4ee3ef);
          const _0xe38d89 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xe38d89);
          const _0x5f4306 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5f4306);
          const _0x10b994 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10b994);
          const _0x389bed = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x389bed);
          const _0x1712e0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1712e0);
          const _0x55ce17 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55ce17);
          const _0x51274e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x51274e);
          const _0x41acf8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x41acf8);
          const _0x5e49e5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5e49e5);
          const _0x1d70cd = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1d70cd);
          const _0x356e62 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x356e62);
          const _0x1e932e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1e932e);
          const _0x2f48a0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2f48a0);
          const _0x5a34be = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5a34be);
          const _0x45eac3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x45eac3);
          const _0x174fb9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x174fb9);
          const _0x536a30 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x536a30);
          const _0x4a9e3a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4a9e3a);
          const _0x55c3a4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55c3a4);
          const _0x5928dd = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5928dd);
        }
        if (_0x1e7620.challengingList.no == 25) {
          const _0x577658 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x577658);
          const _0x23a7e5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x23a7e5);
          const _0x33da1d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x33da1d);
          const _0xce9f36 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xce9f36);
          const _0x2998fb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2998fb);
          const _0xcf495a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xcf495a);
          const _0x40f8d2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x40f8d2);
          const _0x38bf7b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x38bf7b);
          const _0x6c199e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x6c199e);
          const _0x1a18df = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1a18df);
          const _0x3360ea = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3360ea);
          const _0x3088cb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3088cb);
          const _0x331004 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x331004);
          const _0x2b470a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2b470a);
          const _0x3a2e0c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3a2e0c);
          const _0x2fb1aa = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2fb1aa);
          const _0x8b8772 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x8b8772);
          const _0x1dfc1b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1dfc1b);
          const _0x37f102 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x37f102);
          const _0x3d21dd = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3d21dd);
          const _0x506a13 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x506a13);
          const _0x118c1d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x118c1d);
        }
        if (_0x1e7620.challengingList.no == 26) {
          const _0x46dc91 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46dc91);
          const _0x58cc3d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x58cc3d);
          const _0x23b910 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x23b910);
          const _0x223fcc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x223fcc);
          const _0x26268b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x26268b);
          const _0x359f06 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x359f06);
          const _0x53f386 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x53f386);
          const _0x1d87cb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1d87cb);
          const _0x437c7f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x437c7f);
          const _0xab95ce = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xab95ce);
          const _0x26070b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x26070b);
          const _0x3e90e4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3e90e4);
          const _0x23d80d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x23d80d);
          const _0x24cd54 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x24cd54);
          const _0x2ad9a7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2ad9a7);
          const _0x10f21e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10f21e);
          const _0x265c26 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x265c26);
          const _0xf6545f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xf6545f);
          const _0x171ecc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x171ecc);
          const _0x3818a1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3818a1);
        }
        if (_0x1e7620.challengingList.no == 27) {
          const _0x26f913 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x26f913);
          const _0x3b7aa4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b7aa4);
          const _0x4d3cbc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4d3cbc);
          const _0x2d396d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2d396d);
          const _0x503e49 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x503e49);
          const _0x4fcc51 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4fcc51);
          const _0x529937 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x529937);
          const _0xd4b9c5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xd4b9c5);
          const _0x223232 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x223232);
          const _0x5cdedf = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5cdedf);
          const _0x20f1ac = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x20f1ac);
          const _0x3bb1dd = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3bb1dd);
          const _0x401c45 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x401c45);
          const _0x39ba65 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x39ba65);
          const _0x1c0c53 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1c0c53);
          const _0x1e14f6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1e14f6);
          const _0xa07ed8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xa07ed8);
          const _0x17e53c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x17e53c);
          const _0x114a4e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x114a4e);
          const _0x3fc127 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3fc127);
          const _0x55b4c1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55b4c1);
          const _0xe1fac4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xe1fac4);
        }
        if (_0x1e7620.challengingList.no == 28) {
          const _0x3f1861 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3f1861);
          const _0x2b40ac = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2b40ac);
          const _0x209a81 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x209a81);
          const _0x24d295 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x24d295);
          const _0x683605 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x683605);
          const _0x37c6d8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x37c6d8);
          const _0x2005c6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2005c6);
          const _0x2e568e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2e568e);
          const _0x5ad954 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5ad954);
          const _0x3bc3b5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3bc3b5);
          const _0x38be03 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x38be03);
          const _0x3ececf = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3ececf);
          const _0x3b08a6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b08a6);
          const _0x468635 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x468635);
          const _0x242163 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x242163);
          const _0x57ba09 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x57ba09);
          const _0x40d5d5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x40d5d5);
          const _0x3ca8fe = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3ca8fe);
          const _0x344be8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x344be8);
          const _0x172f9e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x172f9e);
        }
        if (_0x1e7620.challengingList.no == 29) {
          const _0x55f26f = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55f26f);
          const _0x3f2e54 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3f2e54);
          const _0x3b1e24 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b1e24);
          const _0x5c95b9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5c95b9);
          const _0x1e7dea = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1e7dea);
          const _0x5c79b1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5c79b1);
          const _0x3cadfb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3cadfb);
          const _0x1feade = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1feade);
          const _0x19bf4d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x19bf4d);
          const _0xcf95c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xcf95c);
          const _0x1bcda6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1bcda6);
          const _0x55c603 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55c603);
          const _0x3ba02b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3ba02b);
          const _0x3f98fe = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3f98fe);
          const _0x227f4b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x227f4b);
          const _0x25e2cb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x25e2cb);
          const _0xef78ee = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xef78ee);
          const _0x1bf9a8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1bf9a8);
          const _0x33a966 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x33a966);
          const _0x5c0a9e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5c0a9e);
          const _0x269ef8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x269ef8);
          const _0xcda97c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xcda97c);
          const _0x1411cb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1411cb);
          const _0x2d4f13 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2d4f13);
          const _0x169d92 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x169d92);
          const _0x2b373a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2b373a);
          const _0x32e6c7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x32e6c7);
          const _0x53f341 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x53f341);
        }
        if (_0x1e7620.challengingList.no == 30) {
          const _0x3a0991 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3a0991);
          const _0x4f1e34 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4f1e34);
          const _0x5632f9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5632f9);
          const _0x1f286b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1f286b);
          const _0x365bd8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x365bd8);
          const _0x50f75c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x50f75c);
          const _0x51bce5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x51bce5);
          const _0x431f2b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x431f2b);
          const _0xab4083 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xab4083);
          const _0x413ac8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x413ac8);
          const _0x4284a7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4284a7);
          const _0x4fa260 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4fa260);
          const _0xfb05c5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xfb05c5);
          const _0x21d724 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x21d724);
          const _0x2b3caa = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2b3caa);
          const _0x46561c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46561c);
          const _0x18238e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x18238e);
          const _0x107f96 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x107f96);
          const _0x2303f1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2303f1);
          const _0x592962 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x592962);
          const _0x178526 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x178526);
          const _0x4f35fb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4f35fb);
          const _0x264196 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x264196);
          const _0x2503a4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2503a4);
        }
        if (_0x1e7620.challengingList.no == 31) {
          const _0x95d55b = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x95d55b);
          const _0x359e45 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x359e45);
          const _0x51de4b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x51de4b);
          const _0x290662 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x290662);
          const _0x45e4f7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x45e4f7);
          const _0x5ca72a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5ca72a);
          const _0x3d36c5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3d36c5);
          const _0xfeb0e2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xfeb0e2);
          const _0x560365 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x560365);
          const _0x2236a9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2236a9);
          const _0x2d8f8d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2d8f8d);
          const _0x5ccf60 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5ccf60);
          const _0x2c66d0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c66d0);
          const _0x3a8754 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3a8754);
          const _0x2f79de = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2f79de);
          const _0x4638ad = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4638ad);
          const _0x4edeba = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4edeba);
          const _0x4f801b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4f801b);
          const _0x256045 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x256045);
          const _0x1bb4ee = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1bb4ee);
          const _0x3e0a51 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3e0a51);
          const _0x57aaa3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x57aaa3);
          const _0x57a30e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x57a30e);
          const _0x543d4c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x543d4c);
          const _0x3b808f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b808f);
          const _0x5548bd = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5548bd);
          const _0x2c7656 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c7656);
        }
        if (_0x1e7620.challengingList.no == 32) {
          const _0x31f4a1 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x31f4a1);
          const _0x1b2d05 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1b2d05);
          const _0x574c64 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x574c64);
          const _0x3b25aa = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b25aa);
          const _0x14018f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x14018f);
          const _0x5cfd08 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5cfd08);
          const _0x46e560 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46e560);
          const _0x2cf72f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2cf72f);
          const _0x14c3cc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x14c3cc);
          const _0x3932d5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3932d5);
        }
        if (_0x1e7620.challengingList.no == 33) {
          const _0x1dde8d = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1dde8d);
          const _0x56461e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x56461e);
          const _0x13ed39 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x13ed39);
          const _0x3c9cdb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3c9cdb);
          const _0x1bb2f0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1bb2f0);
          const _0x143ad1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x143ad1);
          const _0x27a5df = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x27a5df);
          const _0x3515d1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3515d1);
          const _0x32868a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x32868a);
          const _0x4d7794 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4d7794);
          const _0x2ee686 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2ee686);
          const _0xd4eb62 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xd4eb62);
          const _0x5671b9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5671b9);
          const _0x2264b6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2264b6);
          const _0x573817 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x573817);
          const _0x3da168 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3da168);
          const _0x746a48 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x746a48);
          const _0x3257b0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3257b0);
          const _0x2cbf1f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2cbf1f);
          const _0x456e1a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x456e1a);
          const _0x187c39 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x187c39);
          const _0x2f3abf = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2f3abf);
        }
        if (_0x1e7620.challengingList.no == 34) {
          const _0x2c861b = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c861b);
          const _0xd5b30b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xd5b30b);
          const _0x32c376 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x32c376);
          const _0x488c60 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x488c60);
          const _0x186a0e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x186a0e);
          const _0x2c4807 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c4807);
          const _0x3fe22a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3fe22a);
          const _0x490489 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x490489);
          const _0x2a297c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2a297c);
          const _0x4a69fc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4a69fc);
          const _0x14fe50 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x14fe50);
          const _0x59087a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x59087a);
          const _0x23b775 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x23b775);
          const _0x2f6aad = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2f6aad);
          const _0x1b1013 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1b1013);
          const _0x5737f3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5737f3);
          const _0x16011f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x16011f);
          const _0x196214 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x196214);
          const _0x9b12fe = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x9b12fe);
          const _0x54932b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x54932b);
          const _0x59a381 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x59a381);
          const _0x302069 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x302069);
          const _0x5aef9d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5aef9d);
          const _0x2d04ef = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2d04ef);
          const _0x33ed99 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x33ed99);
          const _0x1f1218 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1f1218);
          const _0x211fbc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x211fbc);
          const _0x293a37 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x293a37);
        }
        if (_0x1e7620.challengingList.no == 35) {
          const _0x469a88 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x469a88);
          const _0x541a22 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x541a22);
          const _0x276466 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x276466);
          const _0xc283b5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc283b5);
          const _0x38a111 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x38a111);
          const _0x104284 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x104284);
          const _0x647fb2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x647fb2);
          const _0x29e5b1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x29e5b1);
          const _0x4c72de = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c72de);
          const _0x128d7d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x128d7d);
          const _0x3e401b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3e401b);
          const _0x252c1b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x252c1b);
          const _0x24a14c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x24a14c);
          const _0x30364f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x30364f);
          const _0x586854 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x586854);
          const _0x29cc0c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x29cc0c);
          const _0x3f69a5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3f69a5);
          const _0x52f970 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x52f970);
          const _0x2a657e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2a657e);
          const _0x535ad4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x535ad4);
          const _0xefa272 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xefa272);
          const _0x5d2111 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5d2111);
        }
        if (_0x1e7620.challengingList.no == 36) {
          const _0x124d94 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x124d94);
          const _0x2c56eb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c56eb);
          const _0x59428b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x59428b);
          const _0x34740c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34740c);
          const _0x3b4f04 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b4f04);
          const _0x4c2bec = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c2bec);
          const _0x3422a8 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3422a8);
          const _0x137b92 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x137b92);
          const _0x5df385 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5df385);
          const _0x193e2d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x193e2d);
          const _0x32e333 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x32e333);
          const _0x34db17 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34db17);
          const _0x3f6a97 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3f6a97);
          const _0x5e59f6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5e59f6);
          const _0x36eab7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x36eab7);
          const _0x108668 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x108668);
          const _0x220841 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x220841);
          const _0x10bbd3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10bbd3);
          const _0x43c844 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x43c844);
          const _0x537982 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x537982);
          const _0x475fa4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x475fa4);
          const _0x4ae250 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4ae250);
          const _0x453976 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x453976);
          const _0x5432c4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5432c4);
          const _0x23741c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x23741c);
          const _0x27b57b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x27b57b);
          const _0x5eab33 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5eab33);
          const _0x22707f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x22707f);
          const _0x1e3340 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1e3340);
          const _0x3c9ee4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3c9ee4);
        }
        if (_0x1e7620.challengingList.no == 37) {
          const _0x10ae21 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10ae21);
          const _0x402f07 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x402f07);
          const _0x3a0949 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3a0949);
          const _0x48d749 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x48d749);
          const _0x524a84 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x524a84);
          const _0x22d860 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x22d860);
          const _0x332825 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x332825);
          const _0x59646d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x59646d);
          const _0x27076c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x27076c);
          const _0x481572 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x481572);
          const _0x510542 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x510542);
          const _0x4ef35d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4ef35d);
          const _0x347609 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x347609);
          const _0x1fc1ac = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1fc1ac);
          const _0x179d01 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x179d01);
          const _0x17dcd2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x17dcd2);
          const _0x3b8f40 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b8f40);
          const _0x10b655 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10b655);
          const _0x2b53ee = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2b53ee);
          const _0x14fa4b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x14fa4b);
          const _0x5ba725 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5ba725);
          const _0x3722ce = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3722ce);
          const _0x3cba7f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3cba7f);
        }
        if (_0x1e7620.challengingList.no == 38) {
          const _0x904594 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x904594);
          const _0x215fd5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x215fd5);
          const _0x1b6811 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1b6811);
          const _0x56e5b1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x56e5b1);
          const _0x481a42 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x481a42);
          const _0x3196fb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3196fb);
          const _0x15df29 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x15df29);
          const _0x1328d1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1328d1);
          const _0xdee77c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xdee77c);
          const _0x4ee04f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4ee04f);
          const _0x4a8b5e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4a8b5e);
          const _0x268ad9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x268ad9);
          const _0x103085 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x103085);
          const _0x45437d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x45437d);
          const _0x3d204c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3d204c);
          const _0x559342 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x559342);
          const _0x1b8994 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1b8994);
          const _0x52de2d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x52de2d);
          const _0x1c881d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1c881d);
          const _0x5299d1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5299d1);
          const _0x4dc4c2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4dc4c2);
          const _0x493259 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x493259);
          const _0x21968e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x21968e);
          const _0x3efa2f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3efa2f);
        }
        if (_0x1e7620.challengingList.no == 39) {
          const _0x4c1d65 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c1d65);
          const _0x4469dd = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4469dd);
          const _0x59e0bf = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x59e0bf);
          const _0x36def0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x36def0);
          const _0x2ec20e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2ec20e);
          const _0x52cdef = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x52cdef);
          const _0x35f59b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x35f59b);
          const _0x32b65f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x32b65f);
          const _0x4e681c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4e681c);
          const _0x5c1ca4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5c1ca4);
          const _0x1d169f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1d169f);
          const _0x137e1d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x137e1d);
          const _0x11764b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x11764b);
          const _0x215011 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x215011);
          const _0x39e559 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x39e559);
          const _0x134456 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x134456);
          const _0x1d9344 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1d9344);
          const _0x317aaa = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x317aaa);
          const _0x5f29de = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5f29de);
          const _0x3b89fe = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b89fe);
          const _0x34d164 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34d164);
        }
        if (_0x1e7620.challengingList.no == 40) {
          const _0xb36858 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xb36858);
          const _0x4f3169 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4f3169);
          const _0x20ddc2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x20ddc2);
          const _0x48355e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x48355e);
          const _0x1bf9c3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1bf9c3);
          const _0x58c324 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x58c324);
          const _0x4892cf = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4892cf);
          const _0x4971af = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4971af);
          const _0x3ed4d3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3ed4d3);
          const _0x1292a7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1292a7);
          const _0x445a61 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x445a61);
          const _0x3c434f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3c434f);
          const _0x30f115 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x30f115);
          const _0x2879fb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2879fb);
          const _0xd2dbeb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xd2dbeb);
          const _0x19ce5a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x19ce5a);
          const _0x238a5e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x238a5e);
          const _0x3e2851 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3e2851);
          const _0x46e104 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46e104);
          const _0x5e3db3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5e3db3);
          const _0xfc65f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xfc65f);
          const _0xe7159c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xe7159c);
          const _0x2de7d9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2de7d9);
          const _0x180f2d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x180f2d);
          const _0x5525da = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5525da);
          const _0x234f50 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x234f50);
          const _0x109e0d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x109e0d);
          const _0x166c94 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x166c94);
        }
        if (_0x1e7620.challengingList.no == 41) {
          const _0x27511e = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x27511e);
          const _0x22391e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x22391e);
          const _0x24b60a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x24b60a);
          const _0x34a862 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34a862);
          const _0x322c43 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x322c43);
          const _0x39dd27 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x39dd27);
          const _0x13ddd6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x13ddd6);
          const _0x269a14 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x269a14);
          const _0x24b1ff = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x24b1ff);
          const _0x5c5e46 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5c5e46);
          const _0x548009 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x548009);
          const _0x3934d2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3934d2);
          const _0x242fbc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x242fbc);
          const _0x244799 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x244799);
          const _0x908581 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x908581);
          const _0x517a1e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x517a1e);
          const _0x2af826 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2af826);
          const _0x2067f9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2067f9);
          const _0x49719a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x49719a);
          const _0xc4aa21 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc4aa21);
          const _0x3cb7d3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3cb7d3);
          const _0x2feba6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2feba6);
          const _0x39aa3c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x39aa3c);
          const _0x59dbc9 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x59dbc9);
          const _0xba5dbb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xba5dbb);
          const _0x12c038 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x12c038);
          const _0x4fc3cb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4fc3cb);
          const _0x40c892 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x40c892);
          const _0x4f8bb7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4f8bb7);
          const _0x36ac45 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x36ac45);
        }
        if (_0x1e7620.challengingList.no == 42) {
          const _0x4c1ce2 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c1ce2);
          const _0x597f82 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x597f82);
          const _0x41b7c3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x41b7c3);
          const _0x4e5b65 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4e5b65);
          const _0xd1cb12 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xd1cb12);
          const _0x210214 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x210214);
          const _0xf51cbe = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xf51cbe);
          const _0x105634 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x105634);
          const _0xfcdc41 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xfcdc41);
          const _0x40346e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x40346e);
          const _0x47e061 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x47e061);
          const _0x3a65ca = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3a65ca);
          const _0x288313 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x288313);
          const _0x3de30a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3de30a);
          const _0x23beac = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x23beac);
          const _0x4e15ec = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4e15ec);
          const _0x3f7082 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3f7082);
          const _0x5384a1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5384a1);
          const _0x50e6d0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x50e6d0);
          const _0x58f2f6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x58f2f6);
          const _0x4c714f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c714f);
          const _0x134f55 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x134f55);
          const _0x293e37 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x293e37);
          const _0x456a19 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x456a19);
        }
        if (_0x1e7620.challengingList.no == 43) {
          const _0x210b5a = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x210b5a);
          const _0x356ad6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x356ad6);
          const _0x5bad3c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5bad3c);
          const _0x53fadb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x53fadb);
          const _0x3a8c37 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3a8c37);
          const _0xddc30a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xddc30a);
          const _0x3128c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3128c);
          const _0x55fd2e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x55fd2e);
          const _0x4a5618 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4a5618);
          const _0x285906 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x285906);
          const _0x198555 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x198555);
          const _0x168077 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x168077);
          const _0x2fd492 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2fd492);
          const _0x423092 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x423092);
          const _0xed1a79 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xed1a79);
          const _0xaf3042 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xaf3042);
          const _0x26c0c3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x26c0c3);
          const _0x84af02 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x84af02);
          const _0x270025 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x270025);
          const _0x2d8fcf = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2d8fcf);
          const _0x2115e1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2115e1);
          const _0x417cfb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x417cfb);
          const _0x1d55d3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1d55d3);
          const _0x8549f2 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x8549f2);
          const _0x29e130 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x29e130);
          const _0x41204c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x41204c);
          const _0xbb5185 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xbb5185);
          const _0x14973b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x14973b);
          const _0xa5e1e5 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xa5e1e5);
        }
        if (_0x1e7620.challengingList.no == 44) {
          const _0x50127d = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x50127d);
          const _0x250410 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x250410);
          const _0x725b01 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x725b01);
          const _0x4c2040 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c2040);
          const _0x47110b = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x47110b);
          const _0x28a92a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x28a92a);
          const _0x3d3b0d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3d3b0d);
          const _0x18e2e1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x18e2e1);
          const _0x28c538 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x28c538);
          const _0x5c987e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5c987e);
          const _0x5ab6cf = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5ab6cf);
          const _0xc72be3 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc72be3);
          const _0x34e8f4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x34e8f4);
          const _0x1eeb44 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1eeb44);
          const _0x35372d = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x35372d);
          const _0x36362e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x36362e);
          const _0x9ba80a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x9ba80a);
          const _0x57e023 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x57e023);
          const _0x2079c4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2079c4);
          const _0x12b601 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x12b601);
          const _0x4fd519 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4fd519);
          const _0x473105 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x473105);
          const _0x1960a1 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1960a1);
          const _0x2d3b8e = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2d3b8e);
          const _0x36be94 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x36be94);
          const _0x2c67d0 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2c67d0);
          const _0x77ee6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x77ee6);
          const _0x535757 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x535757);
          const _0x3dd4e4 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3dd4e4);
          const _0x127386 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x127386);
          const _0xa8e06 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xa8e06);
          const _0x17453c = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x17453c);
          const _0x2d51fb = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x2d51fb);
          const _0x4c4abc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x4c4abc);
          const _0x5152bc = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5152bc);
        }
        if (_0x1e7620.challengingList.no == 45) {
          const _0x3fea39 = {
            checkpoint: _0x1e7620.challengingList.no,
            opType: 4,
            from: 0,
            to: 0
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3fea39);
          const _0x159e33 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 7,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x159e33);
          const _0x33d453 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x33d453);
          const _0x10c0de = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x10c0de);
          const _0x3b4a10 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 5,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x3b4a10);
          const _0x37cd79 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x37cd79);
          const _0x51871f = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x51871f);
          const _0x49bf32 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x49bf32);
          const _0x261016 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 3
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x261016);
          const _0x25c93a = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 5
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x25c93a);
          const _0x59c659 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 7
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x59c659);
          const _0x1f50af = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1f50af);
          const _0x482d32 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 2,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x482d32);
          const _0x579a31 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 4
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x579a31);
          const _0x46e417 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 6,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x46e417);
          const _0x593413 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 4,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x593413);
          const _0x5acef7 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 1,
            opType: 2,
            to: 6
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x5acef7);
          const _0x333814 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x333814);
          const _0x1fdf41 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x1fdf41);
          const _0x463bef = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 1
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0x463bef);
          const _0xc9abf6 = {
            checkpoint: _0x1e7620.challengingList.no,
            from: 3,
            opType: 2,
            to: 2
          };
          await this.send_message("cs_lanternFestival_riceBalls", _0xc9abf6);
        }
        _0x1e7620.challengingList.no++;
      }
    }
    for (let _0x597849 = 0; _0x597849 < xls.activityTaskReset.getItems().map(_0x5a30e7 => {
      if (_0x5a30e7.name.indexOf("元宵分汤圆任务") != -1) {
        return _0x5a30e7;
      }
    }).filter(_0x20c4fc => _0x20c4fc !== undefined).length; _0x597849++) {
      if (TaskUtils.GetRestTaskState(xls.activityTaskReset.getItems().map(_0x45f00d => {
        if (_0x45f00d.name.indexOf("元宵分汤圆任务") != -1) {
          return _0x45f00d;
        }
      }).filter(_0x5b9649 => _0x5b9649 !== undefined)[_0x597849]) == 1) {
        await this.send_message("cs_get_activity_task_reset_reward", {
          carnivalId: xls.activityTaskReset.getItems().map(_0x458d23 => {
            if (_0x458d23.name.indexOf("元宵分汤圆任务") != -1) {
              return _0x458d23;
            }
          }).filter(_0x393057 => _0x393057 !== undefined)[_0x597849].id,
          selectIndex: undefined
        });
      }
    }
    this.stop();
  }
  async sgljosui() {
    super.start();
    let _0x4b2757 = this;
    MFC.alert.show("确定进行闪光雷吉吗?(请确保水次带奥义断水击与凝神水炮（消强化）)", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x445873) {
      _0x4b2757.stop();
    }, function (_0x5ef928) {
      _0x4b2757.sgljos();
    }]);
  }
  async sgljos() {
    let _0x2e114f;
    for (var _0x28f97a = xls.activityCard.getItemsByKeyValue("eventId", 138), _0x57ceab = MFC.serverTimer.getTime(), _0x507a96 = 0, _0x6991cb = _0x28f97a; _0x507a96 < _0x6991cb.length; _0x507a96++) {
      var _0x41c43e = _0x6991cb[_0x507a96];
      var _0x5affb3 = MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0x41c43e.startTime.replace(/-/g, "/").replace(/_/g, "/")));
      var _0x3ffda2 = MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0x41c43e.endTime.replace(/-/g, "/").replace(/_/g, "/")));
      if (_0x57ceab >= _0x5affb3 && _0x3ffda2 >= _0x57ceab) {
        _0x2e114f = _0x41c43e;
      }
    }
    const _0x150640 = {
      type: 2,
      cardId: [_0x2e114f.id],
      petList: [],
      times: 0,
      train: 0
    };
    let _0x3e1616 = await this.send_message("cs_pve_fight_start", _0x150640);
    if (_0x3e1616.subIdNumber[0].num >= 4) {
      addGameLog("对战次数仅剩1次,请手动");
    } else {
      let _0x1b048c = await this.sgljoschecksc();
      if (_0x1b048c) {
        if (TaskUtils.GetRestTaskState(xls.activityTaskReset.getItemsByKeyValue("activityIdentity", 436)[4]) == 0) {
          const _0x233822 = {
            type: 1,
            cardId: [_0x2e114f.id],
            petList: [_0x1b048c.getTime],
            times: 0,
            train: 0
          };
          await this.send_message("cs_pve_fight_start", _0x233822);
          await this.initBattle();
          let _0x196cd8 = [32525, 32529];
          let _0x172f0d = await this.useSkill(_0x196cd8[0]);
          let _0x3de022 = 1;
          while (_0x172f0d.result.result === 0) {
            addGameLog("未击败，继续攻击");
            _0x172f0d = await this.useSkill(_0x196cd8[_0x3de022]);
            if (_0x3de022 >= 1) {
              _0x3de022 = -1;
            }
            _0x3de022++;
          }
        }
      }
    }
    let _0x1a37dd = xls.activityTaskReset.getItemsByKeyValue("activityIdentity", 436);
    for (let _0x4acde1 = 0; _0x4acde1 < _0x1a37dd.length; _0x4acde1++) {
      if (TaskUtils.GetRestTaskState(_0x1a37dd[_0x4acde1]) == 1) {
        addGameLog("领取" + _0x1a37dd[_0x4acde1].task);
        const _0x24bd3e = {
          carnivalId: _0x1a37dd[_0x4acde1].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x24bd3e);
      } else if (TaskUtils.GetRestTaskState(_0x1a37dd[_0x4acde1]) == 0) {
        addGameLog(_0x1a37dd[_0x4acde1].task + "未完成");
      } else {
        addGameLog(_0x1a37dd[_0x4acde1].task + "已完成");
      }
    }
    this.stop();
  }
  async sgljoschecksc() {
    let _0x2015f0 = getGoalPets([{
      skills: [32525, 32529]
    }]);
    if (_0x2015f0) {
      return _0x2015f0;
    } else {
      addGameLog("水次技能不符合凝神水泡+奥义断水击");
      return false;
    }
  }
  async getSecPets() {
    let _0x98553d = await this.dispatchSelfPet("蒂朵", [100604]);
    if (_0x98553d) {
      return {
        pet: _0x98553d,
        skillID: 100604
      };
    }
    let _0x2364da = await this.dispatchSelfPet("凯西恩", [32529]);
    if (_0x2364da) {
      return {
        pet: _0x2364da,
        skillID: 32529
      };
    }
    let _0x4afef5 = await this.dispatchSelfPet("哈肯萨", [14816]);
    if (_0x4afef5) {
      return {
        pet: _0x4afef5,
        skillID: 14816
      };
    }
    let _0x1bdfbe = await this.dispatchSelfPet("赫尔卡长老", [32127]);
    if (_0x1bdfbe) {
      return {
        pet: _0x1bdfbe,
        skillID: 32127
      };
    }
    let _0x249215 = await this.dispatchSelfPet("魔焰猩猩", [11022]);
    if (_0x249215) {
      return {
        pet: _0x249215,
        skillID: 11022
      };
    }
  }
  async overtimebattleraymars() {
    let _0x44722a = 32529;
    const _0x23d5a7 = {
      skills: [_0x44722a]
    };
    let _0x334c6f = getGoalPets([_0x23d5a7]);
    this.secSkillId = 32529;
    if (!_0x334c6f) {
      _0x44722a = 11022;
      const _0x44102d = {
        skills: [_0x44722a]
      };
      _0x334c6f = getGoalPets([_0x44102d]);
      this.secSkillId = 11022;
    }
    if (!_0x334c6f) {
      addGameLog("背包没有绝命火焰/奥义断水击");
      this.stop();
      return;
    } else {
      timer.change(1 / 5);
      if (MFC.serverTimer.date.getHours() > 11 && MFC.serverTimer.date.getHours() < 23) {
        let _0x11f6b7 = MFC.attr.getAttr(MFC.attrType.dailyCurFightFool);
        let _0x4b45c3 = xls.activityCard.getItems().filter(_0x5eea03 => _0x5eea03.eventId == 28);
        while (1) {
          if (MFC.attr.getAttr(MFC.attrType.dailyCurFightFool) >= 12) {
            break;
          } else if (_0x11f6b7 > 11) {
            addGameLog("超越时空的对决雷伊vs迈尔斯没有次数");
            break;
          } else {
            const _0x3cc1e6 = {
              activityCard: _0x4b45c3[_0x11f6b7].id,
              getTime: [_0x334c6f.getTime]
            };
            await this.send_message("cs_fight_12_guangka", _0x3cc1e6);
            let _0x2abae0 = await this.initBattle();
            while (_0x2abae0.result.result == 0) {
              _0x2abae0 = await this.useSkill(this.secSkillId);
            }
            if (_0x2abae0.result.result === 1) {
              _0x11f6b7++;
              addGameLog("顺利击杀");
            } else {
              addGameLog("未击杀");
            }
            await wait(500);
          }
        }
      } else {
        addGameLog("超越时空的对决雷伊vs迈尔斯不在时间内");
        this.stop();
      }
      addGameLog("超越时空的对决雷伊vs迈尔斯结束");
      timer.change(1);
      this.stop();
    }
  }
  async dongji() {
    await this.send_message("cs_cecilia_star_activity", {
      score: 80
    });
    await wait(600);
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 1
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 2,
      childStep: 1
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 4
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 2
    });
    await this.send_message("cs_mining", {
      id: 49
    });
    await this.send_message("cs_mining", {
      id: 48
    });
    await this.send_message("cs_mining", {
      id: 47
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 3
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 1
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 1
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 1
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 2
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 3
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 4
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 1,
      childStep: 1
    });
    await this.send_message("cs_map_task_chain_op", {
      type: 1,
      chainId: 2,
      childStep: 1
    });
    addGameLog("冬季乐园已经完成!");
    this.stop();
  }
  async huaxue() {
    addGameLog("滑雪活动已经结束");
    this.stop();
  }
  async patchLeiyi() {
    let _0x23300d = await this.dispatchSelfPet("雷伊", [10825]);
    if (!_0x23300d) {
      _0x23300d = await this.dispatchSelfPet("雷伊", [100484]);
      if (!_0x23300d) {
        addGameLog("背包未携带雷伊+雷神天明闪");
        this.stop();
        return false;
      }
      _0x23300d.skillId = 100484;
    } else {
      _0x23300d.skillId = 10825;
    }
    this.myxx = _0x23300d;
    return true;
  }
  async newyearui() {
    let _0x3f0fed = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x3ac3de = [];
      var _0x3b5f12 = SimpleAlertUi({
        height: 200,
        width: 460
      });
      _0x3f0fed.alertWin = _0x3b5f12;
      const _0x32370b = {
        text: "阿瑞斯新春大拜年",
        x: _0x3b5f12.width / 2 - 75,
        y: _0x3b5f12.height / 16
      };
      var _0x584f4b = createLabel(_0x32370b);
      _0x3ac3de.push(_0x584f4b);
      const _0x673e5e = {
        x: 40,
        y: _0x584f4b.y + 26,
        selected: true,
        storageKey: "xc1"
      };
      let _0x12d8db = createRadio(_0x673e5e);
      _0x3ac3de.push(_0x12d8db);
      const _0x55d3de = {
        text: "光闪击瞬杀打法",
        x: _0x12d8db.width + _0x12d8db.x + 10,
        y: _0x12d8db.y
      };
      var _0x40322f = createLabel(_0x55d3de);
      _0x3ac3de.push(_0x40322f);
      const _0x250e22 = {
        x: _0x40322f.x + _0x40322f.width + 80,
        y: _0x12d8db.y,
        selected: false,
        storageKey: "xc2"
      };
      let _0x268676 = createRadio(_0x250e22);
      _0x3ac3de.push(_0x268676);
      const _0x188492 = {
        text: "水次",
        x: _0x268676.width + _0x268676.x + 10,
        y: _0x12d8db.y
      };
      var _0x261678 = createLabel(_0x188492);
      _0x3ac3de.push(_0x261678);
      const _0x5c7598 = {
        x: 40,
        y: _0x584f4b.y + 52,
        selected: false,
        storageKey: "xc3"
      };
      let _0x22008f = createRadio(_0x5c7598);
      _0x3ac3de.push(_0x22008f);
      const _0x3bb638 = {
        text: "索林+增幅塞维尔",
        x: _0x22008f.width + _0x22008f.x + 10,
        y: _0x22008f.y
      };
      var _0x5a7361 = createLabel(_0x3bb638);
      _0x3ac3de.push(_0x5a7361);
      _0x3f0fed.addAllUis(_0x3ac3de);
      _0x3b5f12.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x3f0fed.stop();
      }, function () {
        localStorage.setItem("xc1", _0x12d8db.selected);
        localStorage.setItem("xc2", _0x268676.selected);
        localStorage.setItem("xc3", _0x22008f.selected);
        if (_0x12d8db.selected) {
          _0x3f0fed.newyearbug();
        }
        if (_0x268676.selected) {
          _0x3f0fed.newyearbug2();
        }
        if (_0x22008f.selected) {
          _0x3f0fed.newyearbug3();
        }
      }], null);
      _0x3b5f12.showAlert();
    });
  }
  async newyearbug() {
    let _0x4e2dec = getGoalPets([{
      skills: [10630],
      features: [8, 7, 6, 5]
    }, {
      skills: [100023],
      features: [8, 7, 6, 5]
    }]);
    if (!_0x4e2dec) {
      addGameLog("没有瞬杀光闪击");
      this.stop();
      return;
    }
    let _0x69c11e;
    if (_0x4e2dec.skills.find(_0x8c2295 => _0x8c2295 == 100023)) {
      _0x69c11e = 100023;
    } else {
      _0x69c11e = 10630;
    }
    addGameLog("设置挑战阵容1");
    await this.send_message("cs_new_change_petArray", {
      op: 2,
      arrayType: "defaultTeam",
      subArray: 0,
      idx: 1,
      teamUp: 0,
      fightType: 0,
      getTimeList: []
    });
    const _0x3df178 = {
      op: 1,
      arrayType: "defaultTeam",
      subArray: 0,
      idx: 1,
      teamUp: 0,
      fightType: 0,
      getTimeList: [_0x4e2dec.getTime]
    };
    await this.send_message("cs_new_change_petArray", _0x3df178);
    while (1) {
      if (Math.max(5 - MFC.attr.getAttr(5000523), 0) >= 1) {
        while (1) {
          const _0x4e2247 = {
            type: 1,
            cardId: [2413],
            petList: [_0x4e2dec.getTime],
            times: 0
          };
          let _0x103fcb = await this.send_message("cs_pve_fight_start", _0x4e2247);
          if (_0x103fcb.desc && _0x103fcb.desc.indexOf("次数不足") !== -1) {
            this.stop();
            break;
          }
          await this.initBattle();
          let _0x144598 = await this.useSkill(_0x69c11e);
          while (_0x144598.result.result == 0) {
            _0x144598 = await this.useSkill(_0x69c11e);
            let _0xe0ea10 = _0x144598.result.playerInfos;
            logger("players", _0xe0ea10);
            let _0x1f2561 = "";
            for (let _0x2c5d9f = 0; _0x2c5d9f < _0xe0ea10.length; _0x2c5d9f++) {
              if (_0xe0ea10[_0x2c5d9f].uid == UserManager.getInstance().userInfo.uid) {
                _0x1f2561 = _0xe0ea10[_0x2c5d9f].petInfos[0];
                break;
              }
            }
            logger("nowPet", _0x1f2561);
            let _0xf69ac7 = _0x1f2561.useSkills.find(_0x157f22 => _0x157f22.id === _0x69c11e).crtPP;
            logger("crtPP", _0xf69ac7);
            if (_0xf69ac7 <= 1) {
              addGameLog("大招技能次数不足,退出战斗");
              this.send_message("cs_quit_battle", {});
              break;
            }
            logger("nowPet", _0x1f2561.crtHp);
            if (_0x1f2561.crtHp <= 40) {
              addGameLog("血量不足,退出战斗");
              this.send_message("cs_quit_battle", {});
              break;
            }
          }
          if (_0x144598.result.result === 1) {
            addGameLog("顺利击杀阿瑞斯新春大拜年[噩梦难度]");
          } else {
            addGameLog("未击阿瑞斯新春大拜年[噩梦难度]");
          }
          if (_0x144598.result.result != 1) {
            addGameLog("继续阿瑞斯新春大拜年");
          } else {
            break;
          }
        }
        await wait(200);
      } else {
        addGameLog("阿瑞斯新春大拜年奖励次数已经用完!");
        break;
      }
    }
    this.stop();
  }
  async newyearbug2() {
    let _0xc7dba7 = getGoalPets([{
      skills: [32529]
    }]);
    if (!_0xc7dba7) {
      addGameLog("没有水次");
      this.stop();
      return;
    }
    let _0x258509 = 32529;
    addGameLog("设置挑战阵容1");
    await this.send_message("cs_new_change_petArray", {
      op: 2,
      arrayType: "defaultTeam",
      subArray: 0,
      idx: 1,
      teamUp: 0,
      fightType: 0,
      getTimeList: []
    });
    const _0x1e2d26 = {
      op: 1,
      arrayType: "defaultTeam",
      subArray: 0,
      idx: 1,
      teamUp: 0,
      fightType: 0,
      getTimeList: [_0xc7dba7.getTime]
    };
    await this.send_message("cs_new_change_petArray", _0x1e2d26);
    while (1) {
      if (Math.max(5 - MFC.attr.getAttr(5000523), 0) >= 1) {
        while (1) {
          const _0x26b148 = {
            type: 1,
            cardId: [2413],
            petList: [_0xc7dba7.getTime],
            times: 0
          };
          let _0x4d8e94 = await this.send_message("cs_pve_fight_start", _0x26b148);
          if (_0x4d8e94.desc && _0x4d8e94.desc.indexOf("次数不足") !== -1) {
            this.stop();
            break;
          }
          await this.initBattle();
          let _0x1fdd73 = await this.useSkill(_0x258509);
          while (_0x1fdd73.result.result == 0) {
            _0x1fdd73 = await this.useSkill(_0x258509);
            let _0x3725bf = _0x1fdd73.result.playerInfos;
            logger("players", _0x3725bf);
            let _0x5a909f = "";
            for (let _0x219c95 = 0; _0x219c95 < _0x3725bf.length; _0x219c95++) {
              if (_0x3725bf[_0x219c95].uid == UserManager.getInstance().userInfo.uid) {
                _0x5a909f = _0x3725bf[_0x219c95].petInfos[0];
                break;
              }
            }
            logger("nowPet", _0x5a909f);
            let _0x56c1a0 = _0x5a909f.useSkills.find(_0x19004a => _0x19004a.id === _0x258509).crtPP;
            logger("crtPP", _0x56c1a0);
            if (_0x56c1a0 <= 1) {
              addGameLog("大招技能次数不足,退出战斗");
              this.send_message("cs_quit_battle", {});
              break;
            }
            logger("nowPet", _0x5a909f.crtHp);
            if (_0x5a909f.crtHp <= 40) {
              addGameLog("血量不足,退出战斗");
              this.send_message("cs_quit_battle", {});
              break;
            }
          }
          if (_0x1fdd73.result.result === 1) {
            addGameLog("顺利击杀阿瑞斯新春大拜年[噩梦难度]");
          } else {
            addGameLog("未击阿瑞斯新春大拜年[噩梦难度]");
          }
          if (_0x1fdd73.result.result != 1) {
            addGameLog("继续阿瑞斯新春大拜年");
          } else {
            break;
          }
        }
        await wait(200);
      } else {
        addGameLog("阿瑞斯新春大拜年奖励次数已经用完!");
        break;
      }
    }
    this.stop();
  }
  async newyearbug3() {
    let _0x673a77 = getGoalPets([{
      skills: [100838]
    }]);
    if (!_0x673a77) {
      addGameLog("背包塞维尔没有增幅龙腾裂天震");
      this.stop();
      return;
    }
    let _0x395c99 = getGoalPets([{
      skills: [43025]
    }]);
    if (!_0x395c99) {
      addGameLog("背包索林没有周而复始");
      this.stop();
      return;
    }
    addGameLog("设置挑战阵容1");
    await this.send_message("cs_new_change_petArray", {
      op: 2,
      arrayType: "defaultTeam",
      subArray: 0,
      idx: 1,
      teamUp: 0,
      fightType: 0,
      getTimeList: []
    });
    const _0x187013 = {
      op: 1,
      arrayType: "defaultTeam",
      subArray: 0,
      idx: 1,
      teamUp: 0,
      fightType: 0,
      getTimeList: [_0x673a77.getTime, _0x395c99.getTime]
    };
    await this.send_message("cs_new_change_petArray", _0x187013);
    while (1) {
      if (Math.max(5 - MFC.attr.getAttr(5000523), 0) >= 1) {
        while (1) {
          const _0x28617b = {
            type: 1,
            cardId: [2413],
            petList: [_0x673a77.getTime, _0x395c99.getTime],
            times: 0
          };
          let _0xd5ad4a = await this.send_message("cs_pve_fight_start", _0x28617b);
          if (_0xd5ad4a.desc && _0xd5ad4a.desc.indexOf("次数不足") !== -1) {
            this.stop();
            break;
          }
          await this.initBattle();
          let _0x4b6281 = await this.useSkill(100838);
          let _0x4c59fc = 0;
          while (_0x4b6281.result.result == 0) {
            if (_0x4c59fc == 0) {
              _0x4b6281 = await this.useSkill(100838);
            } else {
              _0x4b6281 = await this.useSkill(43025, 1);
            }
            let _0x517b01 = _0x4b6281.result.playerInfos.find(_0xeca869 => _0xeca869.uid == _0x4b6281.uid__);
            let _0x3bce6b = _0x517b01.nextRoundOP;
            if (_0x3bce6b == 3) {
              if (_0x4b6281.result.result !== 0) {
                break;
              }
              addGameLog("首发被击败,切换索林");
              await this.send_message("cs_online_player_operation", {
                opType: 2,
                data: {
                  petIndex: 1
                },
                groupId: ""
              });
              _0x4c59fc = 1;
            }
            if (_0x4b6281.result.result !== 0 || _0x4b6281.result.roundNum > 8) {
              break;
            }
          }
          if (_0x4b6281.result.result === 1) {
            addGameLog("顺利击杀阿瑞斯新春大拜年[噩梦难度]");
          } else {
            addGameLog("未击阿瑞斯新春大拜年[噩梦难度]");
          }
          if (_0x4b6281.result.result != 1) {
            addGameLog("继续阿瑞斯新春大拜年");
          } else {
            break;
          }
        }
        await wait(200);
      } else {
        addGameLog("阿瑞斯新春大拜年奖励次数已经用完!");
        break;
      }
    }
    this.stop();
  }
  async oceanGame() {
    addGameLog("口腔清洁");
    await this.send_message("cs_ocean_star_activity", {
      type: 2,
      score: 15
    });
    let _0x1cf69e = await this.patchLeiyi();
    if (!_0x1cf69e) {
      return false;
    }
    let _0x829938 = PetManager.getInstance().getAllPets()[0];
    await this.send_message("cs_new_change_petArray", {
      op: 1,
      arrayType: "defaultTeam",
      subArray: 0,
      idx: 1,
      teamUp: 0,
      fightType: 0,
      getTimeList: [this.myxx.getTime, _0x829938.getTime]
    });
    while (1) {
      let _0x2aaa59 = await this.send_message("cs_get_mapBoss_data", {});
      let _0x423745 = _0x2aaa59.reward["363"];
      if (_0x423745 != 3) {
        while (1) {
          await this.send_message("cs_pve_activity_battle", {
            levelId: 363,
            battleType: 3
          });
          let _0x2b9056 = await this.initBattle();
          while (_0x2b9056.result.result == 0) {
            if (_0x2b9056.result.playerInfos[0].nextRoundOP == 3) {
              addGameLog("雷伊被击败退出!");
              await this.send_message("cs_quit_battle", {});
              break;
            } else {
              _0x2b9056 = await this.useSkill(this.myxx.skillId);
            }
          }
          if (_0x2b9056.result.result == 1) {
            addGameLog("顺利击败!");
            break;
          }
        }
      } else {
        addGameLog("击败黑影完成!");
        break;
      }
    }
    addGameLog("开始清洁海洋污染");
    await this.send_message("cs_mining", {
      id: 38
    });
    await this.send_message("cs_mining", {
      id: 39
    });
    addGameLog("开始大雨吃小鱼");
    await this.send_message("cs_ocean_star_activity", {
      type: 1,
      score: 2000
    });
    await wait(300);
    MFC.alert.show("海洋乐园今日已经完成!");
    this.stop();
  }
  async gang() {
    let _0x30ca8e = await this.patchLeiyi();
    if (!_0x30ca8e) {
      return false;
    }
    await wait(700);
    let _0x1b6134 = PetManager.getInstance().getAllPets()[0];
    addGameLog("开始对战钢牙鲨VS魔牙鲨");
    while (1) {
      let _0x9f7fcc = await this.send_message("sc_pve_fight_start", {
        type: 1,
        cardId: [this.gangId],
        petList: [this.myxx.getTime, _0x1b6134.getTime],
        times: 0,
        train: 0
      });
      if (JSON.stringify(_0x9f7fcc).includes("次数不足")) {
        addGameLog("钢牙鲨VS魔牙鲨 已经完成!");
        MFC.alert.show("钢牙鲨VS魔牙鲨 已经完成!");
        this.stop();
      }
      let _0x3450b0 = await this.initBattle();
      while (_0x3450b0.result.result == 0) {
        if (_0x3450b0.result.playerInfos[0].nextRoundOP == 3) {
          addGameLog("雷伊被击败退出!");
          await this.send_message("cs_quit_battle", {});
          break;
        } else {
          _0x3450b0 = await this.useSkill(this.myxx.skillId);
        }
      }
    }
  }
  async zetui() {
    super.start();
    let _0xbcf495 = this;
    MFC.alert.show("确定进行灾厄塔吗(需要绝命火焰,雷伊需要雷怒+充电符文+闪电斗气符文+电光大招)\n还需一只瞬杀精灵", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x3203b9) {
      _0xbcf495.stop();
    }, function (_0x140d4c) {
      _0xbcf495.zet();
    }]);
  }
  async zet() {
    let _0xe8942d = xls.activityTaskReset.getItems().filter(function (_0x147fb1) {
      return _0x147fb1.activityIdentity == 164;
    });
    for (let _0x1bf113 = 0; _0x1bf113 < _0xe8942d.length; _0x1bf113++) {
      if (TaskUtils.GetRestTaskState(_0xe8942d[_0x1bf113]) == 1) {
        const _0x218132 = {
          carnivalId: _0xe8942d[_0x1bf113].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x218132);
      } else if (TaskUtils.GetRestTaskState(_0xe8942d[_0x1bf113]) == 0) {
        addGameLog(_0xe8942d[_0x1bf113].task + "未完成");
      }
    }
    let _0x262c21 = 0;
    let _0x425b1e = 1;
    let _0x1248cd = getGoalPets([{
      skills: [11022, 10034]
    }, {
      skills: [11022, 100009]
    }]);
    let _0xf5acc7 = getGoalPets([{
      skills: [10630, 11783],
      features: [5, 6, 7, 8]
    }, {
      skills: [100023, 11783],
      features: [5, 6, 7, 8]
    }]);
    let _0x4066d8 = getGoalPets([{
      skills: [100531, 23245, 100483, 15894]
    }]);
    while (1) {
      if (20 - MFC.attr.getAttr(MFC.attrType.dailyChallengeTimes) > 0) {
        if (MFC.attr.getAttr(MFC.attrType.foreverDisasterTowerVitalityValue) >= 10) {
          if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), _0x425b1e * 10) == 0) {
            if (_0x262c21 < 2) {
              if (!_0x1248cd) {
                addGameLog("精灵背包中没有魔焰猩猩+绝命火焰，请确保有其条件，再来启动脚本");
                break;
              } else {
                await this.send_message("cs_fight_boss_start_battle", {
                  battleType: 36,
                  getTimeList: [_0x1248cd.getTime, PetManager.getInstance().getAllPets().filter(function (_0x2a3250) {
                    return _0x2a3250.getTime !== _0x1248cd.getTime;
                  })[0].getTime],
                  subId: BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), (_0x425b1e - 1) * 10, (_0x425b1e - 1) * 10 + 9)
                });
                let _0x29d9f4 = 11022;
                await this.initBattle();
                let _0x6d1332 = await this.useSkill(_0x29d9f4);
                while (_0x6d1332.result.result === 0) {
                  let _0x375127 = _0x6d1332.result.playerInfos.find(_0x451cf1 => _0x451cf1.uid === MFC.userInfo.uid).nextRoundOP;
                  if (_0x375127 !== 1) {
                    addGameLog("首发被击败");
                    break;
                  }
                  addGameLog("未击败，继续攻击");
                  _0x6d1332 = await this.useSkill(_0x29d9f4);
                }
                if (_0x6d1332.result.result === 1) {
                  _0x425b1e++;
                }
              }
            } else if (_0x262c21 == 2) {
              if (!_0x4066d8) {
                addGameLog("背包中没有雷伊或者没带雷怒+充电符文+闪电斗气符文+电光大招");
                break;
              } else {
                let _0x12668e = [23245, 100531, 100483, 15894];
                let _0x27b231 = 1;
                let _0x1cbcf8 = 1;
                await this.send_message("cs_fight_boss_start_battle", {
                  battleType: 36,
                  getTimeList: [_0x4066d8.getTime],
                  subId: BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), (_0x425b1e - 1) * 10, (_0x425b1e - 1) * 10 + 9)
                });
                await this.initBattle();
                let _0x38442f = await this.useSkill(_0x12668e[0]);
                while (_0x38442f.result.result === 0) {
                  addGameLog("未击败，继续攻击");
                  if (_0x1cbcf8 < 3) {
                    _0x38442f = await this.useSkill(_0x12668e[_0x27b231]);
                    _0x27b231++;
                  } else if (getSeerItemNum(2001) > 1) {
                    addGameLog("回pp");
                    _0x38442f = await this.useItem(2001);
                    _0x1cbcf8 = 1;
                    _0x27b231 = 0;
                  } else if (getSeerItemNum(2002) > 1) {
                    addGameLog("回pp");
                    _0x38442f = await this.useItem(2002);
                    _0x1cbcf8 = 1;
                    _0x27b231 = 0;
                  } else if (getSeerItemNum(2003) > 1) {
                    addGameLog("回pp");
                    _0x38442f = await this.useItem(2003);
                    _0x1cbcf8 = 1;
                    _0x27b231 = 0;
                  } else {
                    addGameLog("pp不足");
                    await this.send_message("cs_quit_battle", {});
                    break;
                  }
                  if (_0x27b231 > 3) {
                    _0x27b231 = 0;
                    _0x1cbcf8++;
                  }
                }
              }
            } else if (_0x262c21 > 2) {
              if (BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), (_0x425b1e - 1) * 10, (_0x425b1e - 1) * 10 + 9) == 267) {
                if (!_0x4066d8) {
                  addGameLog("背包中没有雷伊或者没带雷怒+充电符文+闪电斗气符文+电光大招");
                  break;
                } else {
                  let _0x4b6125 = [23245, 100531, 100483, 15894];
                  let _0x141729 = 1;
                  let _0xf1ad46 = 1;
                  await this.send_message("cs_fight_boss_start_battle", {
                    battleType: 36,
                    getTimeList: [_0x4066d8.getTime],
                    subId: BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), (_0x425b1e - 1) * 10, (_0x425b1e - 1) * 10 + 9)
                  });
                  await this.initBattle();
                  let _0xe5c50f = await this.useSkill(_0x4b6125[0]);
                  while (_0xe5c50f.result.result === 0) {
                    addGameLog("未击败，继续攻击");
                    if (_0xf1ad46 < 3) {
                      _0xe5c50f = await this.useSkill(_0x4b6125[_0x141729]);
                      _0x141729++;
                    } else if (getSeerItemNum(2001) > 1) {
                      addGameLog("回pp");
                      _0xe5c50f = await this.useItem(2001);
                      _0xf1ad46 = 1;
                      _0x141729 = 0;
                    } else if (getSeerItemNum(2002) > 1) {
                      addGameLog("回pp");
                      _0xe5c50f = await this.useItem(2002);
                      _0xf1ad46 = 1;
                      _0x141729 = 0;
                    } else if (getSeerItemNum(2003) > 1) {
                      addGameLog("回pp");
                      _0xe5c50f = await this.useItem(2003);
                      _0xf1ad46 = 1;
                      _0x141729 = 0;
                    } else {
                      addGameLog("pp不足");
                      await this.send_message("cs_quit_battle", {});
                      break;
                    }
                    if (_0x141729 > 3) {
                      _0x141729 = 0;
                      _0xf1ad46++;
                    }
                  }
                }
              } else if (BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), (_0x425b1e - 1) * 10, (_0x425b1e - 1) * 10 + 9) == 263) {
                if (!_0x1248cd) {
                  addGameLog("背包中没有魔焰猩猩绝命+火焰漩涡");
                  break;
                } else if (!_0xf5acc7) {
                  addGameLog("背包中没有瞬杀蒙多或者没带光烈普通大招");
                  break;
                } else {
                  let _0x500e74;
                  let _0x52ecb0;
                  if (_0xf5acc7.skills.indexOf(10630) !== -1) {
                    _0x500e74 = 10630;
                  } else {
                    _0x500e74 = 100023;
                  }
                  if (_0x1248cd.skills.indexOf(10034) !== -1) {
                    _0x52ecb0 = 10034;
                  } else {
                    _0x52ecb0 = 100009;
                  }
                  await this.send_message("cs_fight_boss_start_battle", {
                    battleType: 36,
                    getTimeList: [_0x1248cd.getTime, _0xf5acc7.getTime],
                    subId: BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), (_0x425b1e - 1) * 10, (_0x425b1e - 1) * 10 + 9)
                  });
                  await this.initBattle();
                  let _0x520974 = await this.useSkill(_0x52ecb0);
                  let _0x56df5f = 1;
                  while (_0x520974.result.result === 0) {
                    if (_0x520974.result.playerInfos[0].nextRoundOP == 3) {
                      _0x56df5f = 0;
                      await this.send_message("cs_online_player_operation", {
                        opType: 2,
                        data: {
                          petIndex: 1
                        },
                        groupId: ""
                      });
                    }
                    if (_0x56df5f == 1) {
                      addGameLog("未击败，继续攻击");
                      _0x520974 = await this.useSkill(_0x52ecb0);
                    } else if (_0x56df5f == 0) {
                      _0x520974 = await this.useSkill(_0x500e74);
                    }
                  }
                }
              } else if (BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), (_0x425b1e - 1) * 10, (_0x425b1e - 1) * 10 + 9) == 278) {
                if (!_0xf5acc7) {
                  addGameLog("背包中没有瞬杀先制相关精灵");
                  break;
                } else {
                  let _0x30fb3a = 11783;
                  await this.send_message("cs_fight_boss_start_battle", {
                    battleType: 36,
                    getTimeList: [_0xf5acc7.getTime],
                    subId: BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), (_0x425b1e - 1) * 10, (_0x425b1e - 1) * 10 + 9)
                  });
                  await this.initBattle();
                  let _0x3c2f1d = await this.useSkill(_0x30fb3a);
                  while (_0x3c2f1d.result.result === 0) {
                    addGameLog("未击败，继续攻击");
                    _0x3c2f1d = await this.useSkill(_0x30fb3a);
                  }
                }
              } else if (!_0xf5acc7) {
                addGameLog("背包中没有瞬杀先制相关精灵");
                break;
              } else {
                let _0x3579d4;
                if (_0xf5acc7.skills.indexOf(10630) !== -1) {
                  _0x3579d4 = 10630;
                } else {
                  _0x3579d4 = 100023;
                }
                await this.send_message("cs_fight_boss_start_battle", {
                  battleType: 36,
                  getTimeList: [_0xf5acc7.getTime],
                  subId: BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + _0x262c21), (_0x425b1e - 1) * 10, (_0x425b1e - 1) * 10 + 9)
                });
                await this.initBattle();
                let _0x5a862c = await this.useSkill(_0x3579d4);
                while (_0x5a862c.result.result === 0) {
                  addGameLog("未击败，继续攻击");
                  _0x5a862c = await this.useSkill(_0x3579d4);
                }
              }
            } else if (_0x262c21 > 4) {
              break;
            }
          } else {
            _0x425b1e++;
            if (_0x425b1e > 3) {
              _0x262c21++;
              _0x425b1e = 1;
            }
            if (_0x262c21 > 4) {
              break;
            }
          }
        } else {
          addGameLog("活力不足灾厄塔结束");
          break;
        }
      } else {
        addGameLog("挑战次数不足灾厄塔结束");
        break;
      }
    }
    while (1) {
      if (20 - MFC.attr.getAttr(MFC.attrType.dailyChallengeTimes) > 0) {
        if (MFC.attr.getAttr(MFC.attrType.foreverDisasterTowerVitalityValue) >= 10) {
          if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + 4), 30) == 1) {
            await this.send_message("cs_fight_boss_start_battle_sd", {
              battleType: 36,
              subId: BitUtils.getBitsValue(MFC.attr.getAttr(MFC.attrType.dailyChallengeCardRecordstart + 4), 20, 29),
              times: 1
            });
          } else {
            break;
          }
        } else {
          addGameLog("活力不足灾厄塔结束");
          break;
        }
      } else {
        addGameLog("挑战次数不足灾厄塔结束");
        break;
      }
    }
    _0xe8942d = xls.activityTaskReset.getItems().filter(function (_0x300684) {
      return _0x300684.activityIdentity == 161;
    });
    for (let _0x855b5b = 0; _0x855b5b < _0xe8942d.length; _0x855b5b++) {
      if (TaskUtils.GetRestTaskState(_0xe8942d[_0x855b5b]) == 1) {
        const _0xca7e6c = {
          carnivalId: _0xe8942d[_0x855b5b].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0xca7e6c);
      } else if (TaskUtils.GetRestTaskState(_0xe8942d[_0x855b5b]) == 0) {
        addGameLog(_0xe8942d[_0x855b5b].task + "未完成");
      }
    }
    _0xe8942d = xls.activityTaskReset.getItems().filter(function (_0x34cef9) {
      return _0x34cef9.activityIdentity == 162;
    });
    for (let _0x4a14c4 = 0; _0x4a14c4 < _0xe8942d.length; _0x4a14c4++) {
      if (TaskUtils.GetRestTaskState(_0xe8942d[_0x4a14c4]) == 1) {
        const _0x5067db = {
          carnivalId: _0xe8942d[_0x4a14c4].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x5067db);
      } else if (TaskUtils.GetRestTaskState(_0xe8942d[_0x4a14c4]) == 0) {
        addGameLog(_0xe8942d[_0x4a14c4].task + "未完成");
      }
    }
    if (!_0x1248cd) {
      addGameLog("背包没有绝命+火焰漩涡请更换");
    }
    if (!_0xf5acc7) {
      addGameLog("背包没有瞬杀光闪击+普通大招光烈突击");
    }
    if (!_0x4066d8) {
      addGameLog("背包中没有雷伊或者没带雷怒+充电符文+闪电斗气符文+电光大招");
    }
    addGameLog("灾厄塔结束");
    this.stop();
  }
  async gangui() {
    super.start();
    let _0x275254 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x2e3710 = [];
      var _0x565dd1 = SimpleAlertUi({
        height: 350,
        width: 400
      });
      _0x275254.alertWin = _0x565dd1;
      const _0xb1eab5 = {
        text: "钢牙鲨VS魔牙鲨",
        y: _0x565dd1.height / 15
      };
      var _0x76169b = createLabel(_0xb1eab5);
      _0x76169b.x = _0x565dd1.width / 2 - _0x76169b.width / 2;
      _0x2e3710.push(_0x76169b);
      const _0x360e8c = {
        text: "采用雷伊+雷神天明闪",
        y: _0x76169b.y + _0x76169b.height + 20
      };
      var _0x5bf4d5 = createLabel(_0x360e8c);
      _0x5bf4d5.x = _0x565dd1.width / 2 - _0x5bf4d5.width / 2;
      _0x2e3710.push(_0x5bf4d5);
      const _0x834baa = {
        text: "钢牙鲨",
        x: _0x565dd1.applicationWidth / 8,
        y: _0x5bf4d5.y + 40
      };
      var _0x5ab327 = createLabel(_0x834baa);
      _0x2e3710.push(_0x5ab327);
      const _0x14ae0a = {
        x: _0x5ab327.x + _0x5ab327.width + 10,
        y: _0x5ab327.y,
        selected: false,
        storageKey: "darkbattler1"
      };
      let _0x485f4a = createRadio(_0x14ae0a);
      _0x2e3710.push(_0x485f4a);
      const _0xabeca7 = {
        text: "魔牙鲨",
        x: _0x485f4a.x + _0x485f4a.width + 40,
        y: _0x5ab327.y
      };
      var _0x196e30 = createLabel(_0xabeca7);
      _0x2e3710.push(_0x196e30);
      const _0x35fb91 = {
        x: _0x196e30.x + _0x196e30.width + 10,
        y: _0x5ab327.y,
        selected: false,
        storageKey: "darkbattler2"
      };
      let _0xa14821 = createRadio(_0x35fb91);
      _0x2e3710.push(_0xa14821);
      _0x275254.addAllUis(_0x2e3710);
      _0x565dd1.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x275254.stop();
      }, function () {
        if (_0x485f4a.selected) {
          _0x275254.gangId = 1482;
        }
        if (_0xa14821.selected) {
          _0x275254.gangId = 1483;
        }
        _0x275254.gang();
      }], null);
      _0x565dd1.showAlert();
    });
  }
  async sailuoatm() {
    let _0x5bf69 = await this.send_message("cs_super_human", {
      type: 1
    });
    let _0x227935 = 1;
    while (_0x227935 < 9) {
      let _0x1f1f31 = await this.sailuoBattle();
      if (!_0x1f1f31) {
        break;
      } else if (_0x5bf69.cardIds[_0x227935] == 1) {
        if (MFC.userInfo.curEnergy >= 5) {
          const _0x4a467a = {
            type: 1,
            cardId: [_0x5bf69.cardIds[_0x227935 - 1]],
            petList: [_0x1f1f31.pet.getTime],
            times: 0,
            train: 0
          };
          await this.send_message("cs_pve_fight_start", _0x4a467a);
          await this.initBattle();
          let _0xaf3c0b = await this.useSkill(11022);
          while (_0xaf3c0b.result.result === 0) {
            addGameLog("未击败，继续攻击");
            _0xaf3c0b = await this.useSkill(11022);
          }
          if (_0xaf3c0b.result.result === 1) {
            _0x227935 += 2;
          } else {
            addGameLog("未击败");
          }
          await wait(300);
        } else {
          addGameLog("电池不足");
          break;
        }
      } else {
        _0x227935 += 2;
      }
    }
    let _0x1e4688 = xls.activityTaskReset.getItems().filter(function (_0x270e3e) {
      return _0x270e3e.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x270e3e.endTime >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x270e3e.activityIdentity == 442;
    });
    for (let _0x437e78 = 0; _0x437e78 < _0x1e4688.length; _0x437e78++) {
      if (TaskUtils.GetRestTaskState(_0x1e4688[_0x437e78]) == 1) {
        addGameLog("领取" + _0x1e4688[_0x437e78].task);
        const _0x175f1d = {
          carnivalId: _0x1e4688[_0x437e78].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x175f1d);
      } else if (TaskUtils.GetRestTaskState(_0x1e4688[_0x437e78]) == 0) {
        addGameLog(_0x1e4688[_0x437e78].task + "未完成");
      } else {
        addGameLog(_0x1e4688[_0x437e78].task + "已完成");
      }
    }
    let _0x44a0a0 = xls.activityExchange.getItems().filter(function (_0x1c7cab) {
      return _0x1c7cab.name.indexOf("奥特曼联动：帕拉吉之盾奖励") !== -1;
    });
    for (let _0x2b547d = 0; _0x2b547d < _0x44a0a0.length; _0x2b547d++) {
      if (ExchangeUtils.GetExchangeState(_0x44a0a0[_0x2b547d]) == 1) {
        const _0x5406cb = {
          id: _0x44a0a0[_0x2b547d].id,
          selectIndex: 0,
          subDropIdList: []
        };
        await this.send_message("cs_exchange_activity_reward", _0x5406cb);
      } else if (ExchangeUtils.GetExchangeState(_0x44a0a0[_0x2b547d]) == -1) {
        addGameLog(_0x44a0a0[_0x2b547d].name + "已领取");
      } else if (ExchangeUtils.GetExchangeState(_0x44a0a0[_0x2b547d]) == 0) {
        addGameLog(_0x44a0a0[_0x2b547d].name + "未完成");
      }
    }
    addGameLog("赛罗奥特曼完成");
    this.stop();
  }
  async sailuoBattle() {
    let _0x17522f = await this.dispatchSelfPet("魔焰猩猩", [11022]);
    if (_0x17522f) {
      return {
        pet: _0x17522f,
        skillsName: [11022]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async handleCardList() {
    let _0x1ad65b = await this.send_message("cs_unlock_gongge_fight", {
      fun: 1,
      getTimeList: []
    });
    let _0x34c163 = {
      wayArray: [-1, 0, 1],
      canTouchList: [],
      unlockList: _0x1ad65b.unlock,
      setCanTouchPoint: function () {
        this.unlockList.push(0);
        for (var _0xadcd4a = 0; _0xadcd4a < this.unlockList.length; _0xadcd4a++) {
          for (var _0x114b7a = this.findNearlyCell(this.unlockList[_0xadcd4a], 20, 8), _0x4f12e3 = 0; _0x4f12e3 < _0x114b7a.length; _0x4f12e3++) {
            if (this.canTouchList.indexOf(_0x114b7a[_0x4f12e3]) == -1) {
              this.canTouchList.push(_0x114b7a[_0x4f12e3]);
            }
          }
        }
      },
      findNearlyCell: function (_0x53a24, _0x1e2afd, _0x47afca) {
        for (var _0x520bc3 = _0x53a24 % _0x1e2afd, _0x447fc1 = Math.floor(_0x53a24 / _0x1e2afd), _0x42ec52 = [], _0x6b2371 = 0; _0x6b2371 < this.wayArray.length; _0x6b2371++) {
          for (var _0x4afb4c = 0; _0x4afb4c < this.wayArray.length; _0x4afb4c++) {
            if (_0x520bc3 + this.wayArray[_0x6b2371] >= 0 && _0x520bc3 + this.wayArray[_0x6b2371] < _0x1e2afd && _0x447fc1 + this.wayArray[_0x4afb4c] >= 0 && _0x447fc1 + this.wayArray[_0x4afb4c] < _0x47afca) {
              var _0x29bf80 = _0x520bc3 + this.wayArray[_0x6b2371] + (_0x447fc1 + this.wayArray[_0x4afb4c]) * _0x1e2afd;
              _0x42ec52.push(_0x29bf80);
            }
          }
        }
        return _0x42ec52;
      }
    };
    _0x34c163.setCanTouchPoint();
    logger(_0x34c163.canTouchList);
    let _0x303bbb = _0x1ad65b.BossHpList.filter(_0x4d674c => _0x34c163.canTouchList.includes(_0x4d674c.index) && _0x4d674c.hp == 0);
    return _0x303bbb;
  }
  async cardBattleui() {
    super.start();
    let _0x4295b9 = this;
    MFC.alert.show("确定进行萨菲罗吗(奥斯卡禁忌加虚空,库贝萨天霸加玄灵\n谱尼元素+圣洁或者熊猫横空裂加熊猫陷阵)", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x896b2d) {
      _0x4295b9.stop();
    }, function (_0x14aaec) {
      _0x4295b9.cardBattle();
    }]);
  }
  async cardBattle() {
    try {
      if (!xls.obtainZafiro.hasLoaded) {
        xls.obtainZafiro.load(() => {});
      }
      await wait(200);
      let _0x3285a3 = 0;
      let _0x4de5a1 = MFC.userInfo.defaultTeam;
      while (1) {
        if (MFC.attr.getAttr(MFC.attrType.foreverSaFeiLuoValue) >= 1000) {
          addGameLog("调度已达1000,即将判断图纸是否领取");
          if (!!MFC.attr.getAttr(MFC.attrType.foreverSaFeiLuoRewardStatus)) {
            addGameLog("萨菲罗图纸已领取");
            addGameLog("萨菲罗结束");
            break;
          } else {
            addGameLog("领取图纸");
            await this.send_message("cs_get_safeiluo_reward", {});
            addGameLog("萨菲罗结束");
            break;
          }
        } else if (MFC.userInfo.curEnergy >= 10) {
          addGameLog("当前boss" + PetConfig.getDef(xls.obtainZafiro.getItem(_0x3285a3 + 1).petId).name);
          if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailySaFeiLuoFightBossStatus), _0x3285a3 + 1) > 0) {
            addGameLog(PetConfig.getDef(xls.obtainZafiro.getItem(_0x3285a3 + 1).petId).name + "已击败");
          } else if (150 + Random.getDateRandom(7, 0, 9)[_0x3285a3] * 50 == 150) {
            let _0x57ba68 = await this.sfl200Battle();
            if (_0x57ba68) {
              const _0x24ded1 = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x57ba68.pet.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x24ded1);
              const _0x3e3832 = {
                id: _0x3285a3 + 1
              };
              await this.send_message("cs_safeiluo_start_fight", _0x3e3832);
              await this.initBattle();
              let _0x56756 = await this.useSkill(_0x57ba68.skillsName[0]);
              if (_0x56756.result.result == 0) {
                _0x56756 = await this.useSkill(_0x57ba68.skillsName[0]);
              }
              while (_0x56756.result.result == 0) {
                _0x56756 = await this.useSkill(_0x57ba68.skillsName[1]);
              }
            }
          } else if (150 + Random.getDateRandom(7, 0, 9)[_0x3285a3] * 50 == 200) {
            let _0x5ab538 = await this.sfl200Battle();
            if (_0x5ab538) {
              const _0x424fe2 = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x5ab538.pet.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x424fe2);
              const _0x4416d9 = {
                id: _0x3285a3 + 1
              };
              await this.send_message("cs_safeiluo_start_fight", _0x4416d9);
              await this.initBattle();
              let _0xcc55a7 = await this.useSkill(_0x5ab538.skillsName[0]);
              if (_0xcc55a7.result.result == 0) {
                _0xcc55a7 = await this.useSkill(_0x5ab538.skillsName[0]);
              }
              while (_0xcc55a7.result.result == 0) {
                _0xcc55a7 = await this.useSkill(_0x5ab538.skillsName[1]);
              }
            }
          } else if (150 + Random.getDateRandom(7, 0, 9)[_0x3285a3] * 50 == 250) {
            let _0x5d53e5 = await this.sfl300Battle();
            if (_0x5d53e5) {
              const _0x3ef75e = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x5d53e5.pet.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x3ef75e);
              const _0x1af1f1 = {
                id: _0x3285a3 + 1
              };
              await this.send_message("cs_safeiluo_start_fight", _0x1af1f1);
              await this.initBattle();
              let _0x5a72be = await this.useSkill(_0x5d53e5.skillsName[1]);
              if (_0x5a72be.result.result == 0) {
                _0x5a72be = await this.useSkill(_0x5d53e5.skillsName[1]);
              }
              while (_0x5a72be.result.result == 0) {
                _0x5a72be = await this.useSkill(_0x5d53e5.skillsName[0]);
              }
            }
          } else if (150 + Random.getDateRandom(7, 0, 9)[_0x3285a3] * 50 == 300) {
            let _0x542f29 = await this.sfl300Battle();
            if (_0x542f29) {
              const _0x2784ff = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x542f29.pet.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x2784ff);
              const _0x333f0b = {
                id: _0x3285a3 + 1
              };
              await this.send_message("cs_safeiluo_start_fight", _0x333f0b);
              await this.initBattle();
              let _0x5c75fe = await this.useSkill(_0x542f29.skillsName[1]);
              if (_0x5c75fe.result.result == 0) {
                _0x5c75fe = await this.useSkill(_0x542f29.skillsName[1]);
              }
              while (_0x5c75fe.result.result == 0) {
                _0x5c75fe = await this.useSkill(_0x542f29.skillsName[0]);
              }
            }
          } else if (150 + Random.getDateRandom(7, 0, 9)[_0x3285a3] * 50 == 350) {
            let _0x56d2ea = await this.sfl50Battle();
            if (_0x56d2ea) {
              const _0x1702cb = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x56d2ea.pet.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x1702cb);
              const _0x325945 = {
                id: _0x3285a3 + 1
              };
              await this.send_message("cs_safeiluo_start_fight", _0x325945);
              await this.initBattle();
              let _0x10fcdd = await this.useSkill(_0x56d2ea.skillsName[0]);
              if (_0x10fcdd.result.result == 0) {
                _0x10fcdd = await this.useSkill(_0x56d2ea.skillsName[1]);
              }
              while (_0x10fcdd.result.result == 0) {
                _0x10fcdd = await this.useSkill(_0x56d2ea.skillsName[1]);
              }
            }
          } else if (150 + Random.getDateRandom(7, 0, 9)[_0x3285a3] * 50 == 400) {
            let _0x527b4f = await this.sfl200Battle();
            if (_0x527b4f) {
              const _0x520d10 = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x527b4f.pet.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x520d10);
              const _0x24e490 = {
                id: _0x3285a3 + 1
              };
              await this.send_message("cs_safeiluo_start_fight", _0x24e490);
              await this.initBattle();
              let _0x333c8d = await this.useSkill(_0x527b4f.skillsName[1]);
              if (_0x333c8d.result.result == 0) {
                _0x333c8d = await this.useSkill(_0x527b4f.skillsName[0]);
              }
              while (_0x333c8d.result.result == 0) {
                _0x333c8d = await this.useSkill(_0x527b4f.skillsName[1]);
              }
            }
          } else if (150 + Random.getDateRandom(7, 0, 9)[_0x3285a3] * 50 == 450) {
            let _0x578239 = await this.sfl50Battle();
            if (_0x578239) {
              const _0x41f55b = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x578239.pet.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x41f55b);
              const _0x24f4ff = {
                id: _0x3285a3 + 1
              };
              await this.send_message("cs_safeiluo_start_fight", _0x24f4ff);
              await this.initBattle();
              let _0x142828 = await this.useSkill(_0x578239.skillsName[1]);
              if (_0x142828.result.result == 0) {
                _0x142828 = await this.useSkill(_0x578239.skillsName[0]);
              }
              while (_0x142828.result.result == 0) {
                _0x142828 = await this.useSkill(_0x578239.skillsName[1]);
              }
            }
          } else if (150 + Random.getDateRandom(7, 0, 9)[_0x3285a3] * 50 == 500 || 150 + Random.getDateRandom(7, 0, 9)[_0x3285a3] * 50 == 550) {
            let _0x284807 = await this.sfl50Battle();
            if (_0x284807) {
              const _0x41c2a0 = {
                op: 1,
                arrayType: "defaultTeam",
                subArray: 0,
                idx: 1,
                teamUp: 0,
                fightType: 0,
                getTimeList: [_0x284807.pet.getTime]
              };
              await this.send_message("cs_new_change_petArray", _0x41c2a0);
              const _0x28fff0 = {
                id: _0x3285a3 + 1
              };
              await this.send_message("cs_safeiluo_start_fight", _0x28fff0);
              await this.initBattle();
              let _0x16e8f8 = await this.useSkill(_0x284807.skillsName[1]);
              if (_0x16e8f8.result.result == 0) {
                _0x16e8f8 = await this.useSkill(_0x284807.skillsName[1]);
              }
              while (_0x16e8f8.result.result == 0) {
                _0x16e8f8 = await this.useSkill(_0x284807.skillsName[0]);
              }
            }
          }
          _0x3285a3++;
          if (_0x3285a3 > 6) {
            addGameLog("萨菲罗结束");
            const _0x19204c = {
              op: 1,
              arrayType: "defaultTeam",
              subArray: 0,
              idx: 1,
              teamUp: 0,
              fightType: 0,
              getTimeList: _0x4de5a1
            };
            await this.send_message("cs_new_change_petArray", _0x19204c);
            break;
          }
        } else {
          addGameLog("电池不足");
          break;
        }
      }
      this.stop();
    } catch (_0x539d40) {}
  }
  async sfl50Battle() {
    let _0x2bcdb9 = await this.dispatchSelfPet("奥斯卡", [22637, 22638]);
    if (_0x2bcdb9) {
      return {
        pet: _0x2bcdb9,
        skillsName: [22637, 22638]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async sfl200Battle() {
    let _0x406f6c = await this.dispatchSelfPet("谱尼", [11261, 20605]);
    if (_0x406f6c) {
      return {
        pet: _0x406f6c,
        skillsName: [11261, 20605]
      };
    }
    let _0x2397e6 = await this.dispatchSelfPet("熊猫", [41030, 41027]);
    if (_0x2397e6) {
      return {
        pet: _0x2397e6,
        skillsName: [41030, 41027]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async sfl300Battle() {
    let _0x1b57bd = await this.dispatchSelfPet("库贝撒", [22197, 22195]);
    if (_0x1b57bd) {
      return {
        pet: _0x1b57bd,
        skillsName: [22197, 22195]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async blackrabbitpet() {
    let _0x149636 = await this.dispatchSelfPet("哈肯萨", [22615, 14816]);
    if (_0x149636) {
      return {
        pet: _0x149636,
        skillsName: [22615, 14816]
      };
    }
    let _0x2528f2 = await this.dispatchSelfPet("赫尔卡长老", [20592, 32127]);
    if (_0x2528f2) {
      return {
        pet: _0x2528f2,
        skillsName: [20592, 32127]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async blackrabbitbattle() {
    let _0x4a8d6c = MFC.userInfo.defaultTeam;
    while (true) {
      if (MFC.attr.getAttr(MFC.attrType.dailyNv1FightFieldBossDamageStart + xls.mapBossChallenge.getItems().filter(function (_0x5254e1) {
        var _0x1c7874 = new Date((_0x5254e1.date + " " + _0x5254e1.time.split("-")[0]).replace(/_/g, "/"));
        var _0x4ea48f = new Date((_0x5254e1.date + " " + _0x5254e1.time.split("-")[1]).replace(/_/g, "/"));
        return _0x5254e1.battleType == 71 && MFC.serverTimer.date > _0x1c7874 && MFC.serverTimer.date < _0x4ea48f;
      })[0].activityType - 1) > 150000) {
        let _0x35678d = xls.mapBossChallenge.getItems().filter(function (_0x4c4469) {
          var _0x2b0ccc = new Date((_0x4c4469.date + " " + _0x4c4469.time.split("-")[0]).replace(/_/g, "/"));
          var _0x4cc60b = new Date((_0x4c4469.date + " " + _0x4c4469.time.split("-")[1]).replace(/_/g, "/"));
          return _0x4c4469.battleType == 71 && MFC.serverTimer.date > _0x2b0ccc && MFC.serverTimer.date < _0x4cc60b;
        })[0].activityType;
        if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyNv1FightBossRewardStatusStart + _0x35678d - 1), 4) > 0 && BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyNv1FightBossRewardStatusStart + _0x35678d - 1), 3) > 0 && BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyNv1FightBossRewardStatusStart + _0x35678d - 1), 2) > 0 && BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyNv1FightBossRewardStatusStart + _0x35678d - 1), 1) > 0) {
          addGameLog("夜之诅咒结束");
          break;
        } else {
          for (let _0x8194a7 = 0; _0x8194a7 < 4; _0x8194a7++) {
            if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyNv1FightBossRewardStatusStart + _0x35678d - 1), _0x8194a7 + 1) == 0) {
              const _0x2c5285 = {
                activityType: 2,
                index: _0x8194a7 + 1
              };
              await this.send_message("cs_get_nv1_fight_boss_box", _0x2c5285);
              addGameLog("领取第" + (_0x8194a7 + 1) + "个宝箱");
            }
          }
        }
      } else if (MFC.serverTimer.date.getHours() > 17 && MFC.serverTimer.date.getHours() <= 21) {
        if (MFC.userInfo.curEnergy > 5) {
          let _0x45518c = xls.mapBossChallenge.getItems().filter(function (_0x5ea32c) {
            var _0x2e895a = new Date((_0x5ea32c.date + " " + _0x5ea32c.time.split("-")[0]).replace(/_/g, "/"));
            var _0x1ac4c0 = new Date((_0x5ea32c.date + " " + _0x5ea32c.time.split("-")[1]).replace(/_/g, "/"));
            return _0x5ea32c.battleType == 71 && MFC.serverTimer.date > _0x2e895a && MFC.serverTimer.date < _0x1ac4c0;
          })[0].id;
          let _0x321448 = await this.blackrabbitpet();
          if (!_0x321448) {
            break;
          }
          const _0x1c2bbd = {
            op: 1,
            arrayType: "defaultTeam",
            subArray: 0,
            idx: 1,
            teamUp: 0,
            fightType: 0,
            getTimeList: [_0x321448.pet.getTime]
          };
          await this.send_message("cs_new_change_petArray", _0x1c2bbd);
          const _0x1d8da8 = {
            configId: _0x45518c,
            btlType: 71
          };
          await this.send_message("cs_leader_nv1_fight_boss_check", _0x1d8da8);
          let _0x372888 = await this.waitEvent("sc_notify_nv1_fight_boss_start");
          let _0x36678a = JSON.parse(_0x372888.gameBody[_0x372888.gameBody.length - 1].raw);
          _0x372888.gameBody.splice(0, _0x372888.gameBody.length);
          const _0x32d33f = {
            btlType: 71,
            petList: [_0x321448.pet.getTime],
            id: _0x45518c,
            btlSvrId: _0x36678a.battleId,
            groupId: _0x36678a.groupId
          };
          await this.send_message("cs_nv1_fight_boss_start_battle", _0x32d33f);
          await this.send_message("cs_set_match_battle_speed", {
            speed: 2
          });
          let _0x5804cd = await this.waitEvent("sc_battle_notify_load_resource");
          _0x5804cd.gameBody.splice(0, _0x5804cd.gameBody.length);
          const _0x4bc9f0 = {
            groupId: _0x36678a.groupId,
            battleType: 157
          };
          await this.send_message("cs_online_load_resource", _0x4bc9f0);
          await wait(300);
          const _0x40a3c1 = {
            opType: 5,
            data: null,
            groupId: _0x36678a.groupId
          };
          await this.send_message("cs_online_player_operation", _0x40a3c1);
          _0x5804cd = await this.waitEvent("sc_battle_notify_round_result");
          let _0x5e5578 = JSON.parse(_0x5804cd.gameBody[_0x5804cd.gameBody.length - 1].raw);
          _0x5804cd.gameBody.splice(0, _0x5804cd.gameBody.length);
          addGameLog("释放技能:" + petConfig.SkillConfig.getDef(_0x321448.skillsName[0]).name);
          const _0x486b2d = {
            skillID: _0x321448.skillsName[0]
          };
          const _0x304ee0 = {
            opType: 1,
            data: _0x486b2d,
            groupId: _0x36678a.groupId
          };
          await this.send_message("cs_online_player_operation", _0x304ee0);
          _0x5804cd = await this.waitEvent("sc_battle_notify_round_result");
          _0x5e5578 = JSON.parse(_0x5804cd.gameBody[_0x5804cd.gameBody.length - 1].raw);
          _0x5804cd.gameBody.splice(0, _0x5804cd.gameBody.length);
          while (_0x5e5578.result.result == 0) {
            addGameLog("释放技能:" + petConfig.SkillConfig.getDef(_0x321448.skillsName[1]).name);
            const _0x26c1cd = {
              skillID: _0x321448.skillsName[1]
            };
            const _0x5bb2a6 = {
              opType: 1,
              data: _0x26c1cd,
              groupId: _0x36678a.groupId
            };
            await this.send_message("cs_online_player_operation", _0x5bb2a6);
            _0x5804cd = await this.waitEvent("sc_notify_nv1_battle_end");
            let _0x15dada = JSON.parse(_0x5804cd.gameBody[_0x5804cd.gameBody.length - 1].raw);
            _0x5804cd.gameBody.splice(0, _0x5804cd.gameBody.length);
            if (_0x15dada) {
              break;
            }
          }
        } else {
          addGameLog("体力不足5");
          break;
        }
      } else {
        addGameLog("时间在18~24点开放");
        break;
      }
    }
    addGameLog("将阵容切换回来");
    const _0x5ccb12 = {
      op: 1,
      arrayType: "defaultTeam",
      subArray: 0,
      idx: 1,
      teamUp: 0,
      fightType: 0,
      getTimeList: _0x4a8d6c
    };
    await this.send_message("cs_new_change_petArray", _0x5ccb12);
    this.stop();
  }
  async game2048() {
    while (1) {
      if (MFC.attr.getAttr(MFC.attrType.dailySummerFeastDrop) == 2) {
        break;
      }
      let _0x2f769f = await this.send_message("cs_summer_feast", {
        type: 1,
        mv: 0
      });
      let _0x5d24fa = 0;
      addGameLog("2048游戏第" + (MFC.attr.getAttr(MFC.attrType.dailySummerFeastDrop) + 1) + "次");
      while (1) {
        if (_0x2f769f.state !== 2) {
          break;
        }
        if (_0x5d24fa == 0) {
          _0x5d24fa++;
          _0x2f769f = await this.send_message("cs_summer_feast", {
            type: 2,
            mv: 1
          });
        }
        if (_0x5d24fa == 1) {
          _0x5d24fa++;
          _0x2f769f = await this.send_message("cs_summer_feast", {
            type: 2,
            mv: 4
          });
        }
        if (_0x5d24fa == 2) {
          _0x5d24fa++;
          _0x2f769f = await this.send_message("cs_summer_feast", {
            type: 2,
            mv: 2
          });
        }
        if (_0x5d24fa == 3) {
          _0x5d24fa = 0;
          _0x2f769f = await this.send_message("cs_summer_feast", {
            type: 2,
            mv: 3
          });
        }
        if (_0x2f769f.desc) {
          if (_0x2f769f.desc.indexOf("已经领取过奖励了") !== -1) {
            break;
          } else {
            _0x5d24fa++;
            _0x2f769f.state = 2;
          }
        }
        if (_0x2f769f.state == 1) {
          addGameLog("成功");
          break;
        }
      }
    }
    let _0x1fa4c7 = xls.activityTaskReset.getItems().filter(function (_0x37f929) {
      return _0x37f929.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x37f929.endTime >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss").toString() && _0x37f929.activityIdentity == 460;
    });
    for (let _0x3c6ade = 0; _0x3c6ade < _0x1fa4c7.length; _0x3c6ade++) {
      if (NewTaskUtils.getTaskResetStateByIndex(_0x1fa4c7[_0x3c6ade]) == 1) {
        const _0x3ed770 = {
          carnivalId: _0x1fa4c7[_0x3c6ade].id,
          recvIndex: 0
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x3ed770);
      } else if (NewTaskUtils.getTaskResetStateByIndex(_0x1fa4c7[_0x3c6ade]) == 0) {
        addGameLog(_0x1fa4c7[_0x3c6ade].name + _0x1fa4c7[_0x3c6ade].task + "未完成");
      }
    }
    this.stop();
  }
  async darkui() {
    super.start();
    let _0x29aa93 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x1d1119 = [];
      var _0x1f17e2 = SimpleAlertUi({
        height: 350,
        width: 400
      });
      _0x29aa93.alertWin = _0x1f17e2;
      const _0x32b6f0 = {
        text: "暗黑武斗场",
        x: _0x1f17e2.width / 2 - 32,
        y: _0x1f17e2.height / 15
      };
      var _0x167c6a = createLabel(_0x32b6f0);
      _0x1d1119.push(_0x167c6a);
      const _0x37921f = {
        text: "请在圆点点击选择挑战难度:",
        x: _0x1f17e2.applicationWidth / 2 - 60,
        y: _0x167c6a.y + _0x167c6a.height + 20
      };
      var _0x4aa400 = createLabel(_0x37921f);
      _0x1d1119.push(_0x4aa400);
      const _0x1b0121 = {
        text: "简单",
        x: _0x1f17e2.applicationWidth / 8,
        y: _0x4aa400.y + 40
      };
      var _0xbc32a4 = createLabel(_0x1b0121);
      _0x1d1119.push(_0xbc32a4);
      const _0x4a4cc8 = {
        x: _0xbc32a4.x + _0xbc32a4.width + 10,
        y: _0xbc32a4.y,
        selected: false,
        storageKey: "darkbattler1"
      };
      let _0x3231c4 = createRadio(_0x4a4cc8);
      _0x1d1119.push(_0x3231c4);
      const _0x192960 = {
        text: "普通",
        x: _0x3231c4.x + _0x3231c4.width + 40,
        y: _0xbc32a4.y
      };
      var _0x531151 = createLabel(_0x192960);
      _0x1d1119.push(_0x531151);
      const _0x78c803 = {
        x: _0x531151.x + _0x531151.width + 10,
        y: _0xbc32a4.y,
        selected: false,
        storageKey: "darkbattler2"
      };
      let _0x449911 = createRadio(_0x78c803);
      _0x1d1119.push(_0x449911);
      const _0x414d14 = {
        text: "困难",
        x: _0x449911.x + _0x449911.width + 40,
        y: _0xbc32a4.y
      };
      var _0x20262f = createLabel(_0x414d14);
      _0x1d1119.push(_0x20262f);
      const _0x4859f8 = {
        x: _0x20262f.x + _0x20262f.width + 10,
        y: _0xbc32a4.y,
        selected: true,
        storageKey: "darkbattler3"
      };
      let _0x8af1ae = createRadio(_0x4859f8);
      _0x1d1119.push(_0x8af1ae);
      const _0x5573cd = {
        x: 70,
        y: _0xbc32a4.y + _0xbc32a4.width + 10,
        width: 150,
        prompt: "请输入挑战次数",
        storageKey: "darknum"
      };
      var _0x254728 = createEdit(_0x5573cd);
      _0x1d1119.push(_0x254728);
      const _0x498e95 = {
        text: "输入数字但不超过",
        x: _0x254728.x + _0x254728.width + 10,
        y: _0x254728.y + 10
      };
      var _0x4b32ba = createLabel(_0x498e95);
      _0x1d1119.push(_0x4b32ba);
      var _0x51ac12 = createLabel({
        text: 5 - MFC.attr.getAttr(MFC.attrType.dailyDarknessEnterTimes),
        x: _0x4b32ba.x + _0x4b32ba.width + 5,
        y: _0x254728.y + 10,
        textColor: 16776960
      });
      _0x1d1119.push(_0x51ac12);
      const _0x12d6e9 = {
        x: 70,
        y: _0x254728.y + _0x254728.height + 20,
        width: 150,
        prompt: "请输入挑战层数",
        storageKey: "darkfloor"
      };
      var _0xf32da7 = createEdit(_0x12d6e9);
      _0x1d1119.push(_0xf32da7);
      const _0x3c3a5b = {
        text: "输入数字在",
        x: _0xf32da7.x + _0xf32da7.width + 10,
        y: _0xf32da7.y + 10
      };
      var _0x309be1 = createLabel(_0x3c3a5b);
      _0x1d1119.push(_0x309be1);
      const _0xd65a2c = {
        text: "1 ~ 15",
        x: _0x309be1.x + _0x309be1.width + 5,
        y: _0xf32da7.y + 10,
        textColor: 16776960
      };
      var _0x2b95f3 = createLabel(_0xd65a2c);
      _0x1d1119.push(_0x2b95f3);
      const _0x44e97e = {
        text: "暗黑武斗场用的绝命火焰",
        x: _0x1f17e2.applicationWidth / 2 - 55,
        y: _0xf32da7.y + 46,
        textColor: 16711680
      };
      var _0x1674e4 = createLabel(_0x44e97e);
      _0x1d1119.push(_0x1674e4);
      _0x29aa93.addAllUis(_0x1d1119);
      _0x1f17e2.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x29aa93.stop();
      }, function () {
        localStorage.setItem("darkbattler1", _0x3231c4.selected);
        localStorage.setItem("darkbattler2", _0x449911.selected);
        localStorage.setItem("darkbattler3", _0x8af1ae.selected);
        localStorage.setItem("darknum", _0x254728.text);
        localStorage.setItem("darkfloor", _0xf32da7.text);
        if (_0x3231c4.selected) {
          _0x29aa93.diffcult = 1;
        }
        if (_0x449911.selected) {
          _0x29aa93.diffcult = 2;
        }
        if (_0x8af1ae.selected) {
          _0x29aa93.diffcult = 3;
        }
        if (_0x254728.text.length == 0) {
          MFC.bubbleAlert.showAlert("请输入挑战次数");
          return true;
        }
        if (!Number.isInteger(parseInt(_0x254728.text)) || _0x254728.text > 5 - MFC.attr.getAttr(MFC.attrType.dailyDarknessEnterTimes) || parseInt(_0x254728.text) < 0) {
          MFC.bubbleAlert.showAlert("挑战次数错误");
          return true;
        }
        localStorage.setItem("darknum", _0x254728.text);
        if (_0xf32da7.text.length == 0) {
          MFC.bubbleAlert.showAlert("请输入挑战层数");
          return true;
        }
        if (!Number.isInteger(parseInt(_0xf32da7.text)) || parseInt(_0xf32da7.text) > 15 || parseInt(_0xf32da7.text) <= 0) {
          MFC.bubbleAlert.showAlert("挑战层数错误");
          return true;
        }
        localStorage.setItem("darkfloor", _0xf32da7.text);
        _0x29aa93.Darkbattle();
      }], null);
      _0x1f17e2.showAlert();
    });
  }
  async Darkbattle() {
    if (localStorage.getItem("darknum") * 20 > MFC.userInfo.curEnergy) {
      addGameLog("电池不够");
      this.stop();
    } else {
      let _0x2095f8 = PetManager.getInstance().getAllPets().map(_0x5683e6 => {
        if (_0x5683e6.level == 100) {
          if (_0x5683e6.skills.indexOf(11022) != -1) {
            return _0x5683e6.getTime;
          }
        }
      }).filter(_0x49abd8 => _0x49abd8)[0];
      if (_0x2095f8 == undefined) {
        addGameLog("背包没有绝命火焰");
        this.stop();
      } else {
        let _0x56c360 = 0;
        while (true) {
          let _0x48be1a = parseInt(localStorage.getItem("darknum")) - 1;
          let _0x351cc3 = 0;
          let _0x53f1b7 = [0, 2, 4];
          if (_0x56c360 > _0x48be1a) {
            break;
          } else {
            const _0x3f91d5 = {
              op: 1,
              arrayType: "defaultTeam",
              subArray: 0,
              idx: 1,
              teamUp: 0,
              fightType: 0,
              getTimeList: [_0x2095f8]
            };
            await this.send_message("cs_new_change_petArray", _0x3f91d5);
            await this.send_message("cs_darkness_difficult_rank", {
              difficult: this.diffcult,
              type: 1
            });
            await this.send_message("cs_darkness_enter", {
              diffculty: this.diffcult,
              floor: parseInt(localStorage.getItem("darkfloor"))
            });
            addGameLog("第" + localStorage.getItem("darkfloor") + "层;难度:" + this.diffcult);
            await this.send_message("cs_darkness_open", {
              index: 0,
              method: 0
            });
            await this.send_message("cs_darkness_open", {
              index: 2,
              method: 0
            });
            await this.send_message("cs_darkness_open", {
              index: 4,
              method: 0
            });
            await wait(200);
            while (_0x351cc3 < 3) {
              const _0x1f7d95 = {
                petList: [_0x2095f8],
                bossIndex: _0x53f1b7[_0x351cc3]
              };
              await this.send_message("cs_darkness_start_battle", _0x1f7d95);
              await this.initBattle();
              let _0x7d98b2 = await this.useSkill(11022);
              while (_0x7d98b2.result.result == 0) {
                if (_0x7d98b2.result.playerInfos[0].uid == MFC.userInfo.uid) {
                  if (_0x7d98b2.result.playerInfos[0].nextRoundOP !== 1) {
                    addGameLog("首发被击败");
                    break;
                  }
                } else if (_0x7d98b2.result.playerInfos[1].nextRoundOP !== 1) {
                  addGameLog("首发被击败");
                  break;
                }
                if (_0x7d98b2.result.roundNum > 5) {
                  break;
                }
                logger("未击败，继续攻击");
                _0x7d98b2 = await this.useSkill(11022);
              }
              if (_0x7d98b2.result.result == 1) {
                _0x351cc3++;
              }
              await wait(300);
            }
            let _0x17d287 = _0x56c360 + 1;
            addGameLog("成功完成第" + _0x17d287 + "次");
            _0x56c360++;
          }
        }
        addGameLog("暗黑武斗场完成");
        this.stop();
      }
    }
  }
  async expfightui() {
    super.start();
    let _0x5e5434 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x27a6e4 = [];
      var _0x20f516 = SimpleAlertUi({
        height: 350,
        width: 500
      });
      _0x5e5434.alertWin = _0x20f516;
      const _0xf53a14 = {
        text: "能量大作战",
        x: _0x20f516.width / 2 - 32,
        y: _0x20f516.height / 15
      };
      var _0x5d97ed = createLabel(_0xf53a14);
      _0x5d97ed.size = 20;
      _0x27a6e4.push(_0x5d97ed);
      const _0x42b592 = {
        text: `默认选择困难难度;神秘狗灵神加万象;
蒂朵异维需要符文
比德尔6块钱柔弱无限超动灵破闪记得充能给特功刻印`,
        x: _0x20f516.applicationWidth / 2 - 235,
        y: _0x5d97ed.y + _0x5d97ed.height + 20
      };
      var _0x20ca04 = createLabel(_0x42b592);
      _0x27a6e4.push(_0x20ca04);
      const _0x42d0fe = {
        text: "神秘狗",
        x: _0x20f516.applicationWidth / 2 - 48,
        y: _0x20ca04.y + _0x20ca04.height + 20
      };
      var _0xf408d9 = createLabel(_0x42d0fe);
      _0x27a6e4.push(_0xf408d9);
      const _0x4e4f61 = {
        x: _0xf408d9.x + 70,
        y: _0xf408d9.y,
        selected: true,
        storageKey: "expfightteam1"
      };
      let _0x3eb5b7 = createToggle(_0x4e4f61);
      _0x27a6e4.push(_0x3eb5b7);
      const _0xef9c79 = {
        text: "蒂朵",
        x: _0xf408d9.x,
        y: _0xf408d9.y + 40
      };
      var _0x67e8cf = createLabel(_0xef9c79);
      _0x27a6e4.push(_0x67e8cf);
      const _0x3a09da = {
        x: _0x67e8cf.x + 70,
        y: _0x67e8cf.y,
        selected: false,
        storageKey: "expfightteam2"
      };
      let _0xd7768b = createToggle(_0x3a09da);
      _0x27a6e4.push(_0xd7768b);
      const _0x237b55 = {
        text: "比德尔",
        x: _0xf408d9.x,
        y: _0x67e8cf.y + 40
      };
      var _0x377f7a = createLabel(_0x237b55);
      _0x27a6e4.push(_0x377f7a);
      const _0x186d56 = {
        x: _0x377f7a.x + 70,
        y: _0x377f7a.y,
        selected: false,
        storageKey: "expfightteam3"
      };
      let _0x4348f7 = createToggle(_0x186d56);
      _0x27a6e4.push(_0x4348f7);
      _0x5e5434.addAllUis(_0x27a6e4);
      _0x20f516.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x5e5434.stop();
      }, function () {
        localStorage.setItem("expfightteam1", _0x3eb5b7.selected);
        localStorage.setItem("expfightteam2", _0xd7768b.selected);
        localStorage.setItem("expfightteam3", _0x4348f7.selected);
        if (_0x3eb5b7.selected && _0xd7768b.selected || _0xd7768b.selected && _0x4348f7.selected || _0x3eb5b7.selected && _0x4348f7.selected || _0x3eb5b7.selected && _0xd7768b.selected && _0x4348f7.selected) {
          addGameLog("请不要同时选中多个阵容");
          _0x5e5434.stop();
        } else if (_0x3eb5b7.selected || _0xd7768b.selected || _0x4348f7.selected) {
          if (xls.activityTimeLimit.getItems()[30].startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy/MM/dd hh:mm:ss") <= xls.activityTimeLimit.getItems()[30].endTime) {
            if (_0x3eb5b7.selected) {
              _0x5e5434.expfight1();
            }
            if (_0xd7768b.selected) {
              _0x5e5434.expfight2();
            }
            if (_0x4348f7.selected) {
              _0x5e5434.expfight3();
            }
          } else {
            addGameLog(xls.activityTimeLimit.getItems()[30].activityName + "时间在" + xls.activityTimeLimit.getItems()[30].startTime + "~" + xls.activityTimeLimit.getItems()[30].endTime);
            addGameLog("不在活动时间内");
            _0x5e5434.stop();
          }
        }
        if (_0x3eb5b7.selected == false && _0xd7768b.selected == false && _0x4348f7.selected == false) {
          addGameLog("请选择阵容");
          _0x5e5434.stop();
        }
      }], null);
      _0x20f516.showAlert();
    });
  }
  async expfight1() {
    let _0x5bc38b;
    switch (VIPManager.getInstance().vipLevel) {
      case 0:
        _0x5bc38b = 4;
        break;
      case 1:
        _0x5bc38b = 5;
        break;
      case 2:
      case 3:
        _0x5bc38b = 6;
        break;
      case 4:
      case 5:
        _0x5bc38b = 7;
        break;
      case 6:
      case 7:
        _0x5bc38b = 8;
        break;
      case 8:
      case 9:
        _0x5bc38b = 9;
        break;
      case 10:
        _0x5bc38b = 10;
        break;
    }
    logger("boss" + (40 + MFC.serverTimer.date.getDay()) + "与" + (33 + MFC.serverTimer.date.getDay()));
    while (true) {
      if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyEnergyFightCompletionSign), 3) == 0) {
        addGameLog("坚持到底困难还未首胜");
        let _0x50b603 = PetManager.getInstance().getAllPets().map(_0x155800 => {
          if (_0x155800.nick.indexOf("SP艾诺尔") != -1) {
            return _0x155800;
          }
        }).filter(_0x568b77 => _0x568b77 !== undefined)[0];
        if (_0x50b603 !== undefined) {
          if (_0x50b603.skills.indexOf(40958) != -1) {
            if (_0x50b603.skills.indexOf(40957) != -1) {
              if (_0x50b603.skills.indexOf(31943) != -1 || _0x50b603.skills.indexOf(31940) != -1) {
                addGameLog("SP艾诺尔技能符合");
              } else {
                addGameLog("没有回影虚光灭或神影辉光");
                this.stop();
              }
            } else {
              addGameLog("没有万象归元");
              this.stop();
            }
          } else {
            addGameLog("没有灵神归寂");
            this.stop();
          }
        } else {
          addGameLog("没有SP艾诺尔");
          this.stop();
        }
        const _0x265672 = {
          op: 1,
          arrayType: "defaultTeam",
          subArray: 0,
          idx: 1,
          teamUp: 0,
          fightType: 0,
          getTimeList: [_0x50b603.getTime]
        };
        await this.send_message("cs_new_change_petArray", _0x265672);
        await this.expbattle12();
        touchBtn(sta);
      } else {
        addGameLog("坚持到底困难已首胜");
      }
      if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyEnergyFightCompletionSign), 6) == 0) {
        addGameLog("不惧反弹困难还未首胜");
        let _0x2d78f7 = PetManager.getInstance().getAllPets().map(_0x3bf04d => {
          if (_0x3bf04d.nick.indexOf("SP艾诺尔") != -1) {
            return _0x3bf04d;
          }
        }).filter(_0x2081ab => _0x2081ab !== undefined)[0];
        if (_0x2d78f7 !== undefined) {
          if (_0x2d78f7.skills.indexOf(40958) != -1) {
            if (_0x2d78f7.skills.indexOf(40957) != -1) {
              if (_0x2d78f7.skills.indexOf(31943) != -1 || _0x2d78f7.skills.indexOf(31940) != -1) {
                addGameLog("SP艾诺尔技能符合");
              } else {
                addGameLog("没有回影虚光灭或神影辉光");
                this.stop();
              }
            } else {
              addGameLog("没有万象归元");
              this.stop();
            }
          } else {
            addGameLog("没有灵神归寂");
            this.stop();
          }
        } else {
          addGameLog("没有SP艾诺尔");
          this.stop();
        }
        let _0x2a99da = PetManager.getInstance().getAllPets().map(_0x1c3633 => {
          if (_0x1c3633.level == 100) {
            return _0x1c3633;
          }
        }).filter(_0x3feb9d => _0x3feb9d !== undefined)[0];
        const _0x540335 = {
          op: 1,
          arrayType: "defaultTeam",
          subArray: 0,
          idx: 1,
          teamUp: 0,
          fightType: 0,
          getTimeList: [_0x2d78f7.getTime, _0x2a99da.getTime]
        };
        await this.send_message("cs_new_change_petArray", _0x540335);
        await this.expbattle1();
        touchBtn(sta);
      } else {
        addGameLog("不惧反弹困难已首胜");
        addGameLog("即将进行扫荡");
        if (_0x5bc38b - MFC.attr.getAttr(MFC.attrType.dailyEnergyFightExtraCount) > 0) {
          for (let _0x2674e7 = 0; _0x2674e7 < _0x5bc38b - MFC.attr.getAttr(MFC.attrType.dailyEnergyFightExtraCount); _0x2674e7++) {
            await this.send_message("cs_energy_fight_boss", {
              getTime: 3,
              index: 40 + MFC.serverTimer.date.getDay(),
              sdFlag: 1
            });
            await wait(200);
            touchBtn(sta);
          }
        } else {
          break;
        }
      }
    }
    addGameLog("能量大作战结束");
    this.stop();
  }
  async expbattle1() {
    await this.send_message("cs_energy_fight_boss", {
      getTime: 3,
      index: 40 + MFC.serverTimer.date.getDay()
    });
    await this.initBattle();
    let _0x610ca4 = await this.useSkill(40958);
    while (_0x610ca4.result.result == 0) {
      _0x610ca4 = await this.useSkill(40957);
      if (_0x610ca4.result.roundNum > 7) {
        break;
      }
    }
    addGameLog("成功击败");
  }
  async expbattle12() {
    await this.send_message("cs_energy_fight_boss", {
      getTime: 3,
      index: 33 + MFC.serverTimer.date.getDay()
    });
    await this.initBattle();
    let _0x4bbe64 = this.useSkill(40958);
    for (let _0x24828f = 0; _0x24828f < 4; _0x24828f++) {
      if (_0x4bbe64.result.result == 0) {
        if (PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam[0]).skills.indexOf(31943) != -1) {
          _0x4bbe64 = this.useSkill(31943);
        } else {
          _0x4bbe64 = this.useSkill(31940);
        }
      } else {
        break;
      }
    }
    if (_0x4bbe64.result.result == 0) {
      _0x4bbe64 = this.useSkill(40957);
      if (_0x4bbe64.result.result !== 0) {
        addGameLog("成功击败");
      }
    }
  }
  async expfight2() {
    let _0x1d5177;
    switch (VIPManager.getInstance().vipLevel) {
      case 0:
        _0x1d5177 = 4;
        break;
      case 1:
        _0x1d5177 = 5;
        break;
      case 2:
      case 3:
        _0x1d5177 = 6;
        break;
      case 4:
      case 5:
        _0x1d5177 = 7;
        break;
      case 6:
      case 7:
        _0x1d5177 = 8;
        break;
      case 8:
      case 9:
        _0x1d5177 = 9;
        break;
      case 10:
        _0x1d5177 = 10;
        break;
    }
    logger("boss" + (40 + MFC.serverTimer.date.getDay()) + "与" + (33 + MFC.serverTimer.date.getDay()));
    while (true) {
      if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyEnergyFightCompletionSign), 3) == 0) {
        addGameLog("坚持到底困难还未首胜");
        let _0x1317c4 = PetManager.getInstance().getAllPets().map(_0x15f39f => {
          if (_0x15f39f.nick.indexOf("蒂朵") != -1) {
            if (_0x15f39f.skills.indexOf(100604) != -1) {
              return _0x15f39f;
            }
          }
        }).filter(_0x48b561 => _0x48b561 !== undefined)[0];
        if (_0x1317c4 !== undefined) {
          addGameLog("有异维守护蒂朵");
        } else {
          addGameLog("没有异维守护蒂朵");
          this.stop();
        }
        let _0x1a55ad = PetManager.getInstance().getAllPets().map(_0x2da59b => {
          if (_0x2da59b.level == 100) {
            return _0x2da59b;
          }
        }).filter(_0x4fcf29 => _0x4fcf29 !== undefined)[0];
        const _0x387ceb = {
          op: 1,
          arrayType: "defaultTeam",
          subArray: 0,
          idx: 1,
          teamUp: 0,
          fightType: 0,
          getTimeList: [_0x1317c4.getTime, _0x1a55ad.getTime]
        };
        await this.send_message("cs_new_change_petArray", _0x387ceb);
        await this.expbattle22();
        touchBtn(sta);
      } else {
        addGameLog("坚持到底困难已首胜");
      }
      if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyEnergyFightCompletionSign), 6) == 0) {
        addGameLog("不惧反弹困难还未首胜");
        let _0x3a2ad3 = PetManager.getInstance().getAllPets().map(_0x20f70f => {
          if (_0x20f70f.nick.indexOf("蒂朵") != -1) {
            if (_0x20f70f.skills.indexOf(100604) != -1) {
              return _0x20f70f;
            }
          }
        }).filter(_0xc15dd3 => _0xc15dd3 !== undefined)[0];
        if (_0x3a2ad3 !== undefined) {
          addGameLog("有异维守护蒂朵");
        } else {
          addGameLog("没有异维守护蒂朵");
          this.stop();
        }
        let _0x175ed7 = PetManager.getInstance().getAllPets().map(_0x401f55 => {
          if (_0x401f55.level == 100) {
            return _0x401f55;
          }
        }).filter(_0x581101 => _0x581101 !== undefined)[0];
        const _0x19d17c = {
          op: 1,
          arrayType: "defaultTeam",
          subArray: 0,
          idx: 1,
          teamUp: 0,
          fightType: 0,
          getTimeList: [_0x3a2ad3.getTime, _0x175ed7.getTime]
        };
        await this.send_message("cs_new_change_petArray", _0x19d17c);
        await this.expbattle21();
        touchBtn(sta);
      } else {
        addGameLog("不惧反弹困难已首胜");
        addGameLog("即将进行扫荡");
        if (_0x1d5177 - MFC.attr.getAttr(MFC.attrType.dailyEnergyFightExtraCount) > 0) {
          for (let _0x586c41 = 0; _0x586c41 < _0x1d5177 - MFC.attr.getAttr(MFC.attrType.dailyEnergyFightExtraCount); _0x586c41++) {
            await this.send_message("cs_energy_fight_boss", {
              getTime: 3,
              index: 40 + MFC.serverTimer.date.getDay(),
              sdFlag: 1
            });
            await wait(200);
            touchBtn(sta);
          }
        } else {
          break;
        }
      }
    }
    addGameLog("能量大作战结束");
    this.stop();
  }
  async expbattle21() {
    await this.send_message("cs_energy_fight_boss", {
      getTime: 3,
      index: 40 + MFC.serverTimer.date.getDay()
    });
    await this.initBattle();
    let _0x2a1a45 = await this.useSkill(100604);
    if (_0x2a1a45.result.result == 0) {
      _0x2a1a45 = await this.useSkill(100604);
    }
    if (_0x2a1a45.result.result == 0) {
      await this.expbattle21();
    } else {
      addGameLog("成功击败");
    }
  }
  async expbattle22() {
    await this.send_message("cs_energy_fight_boss", {
      getTime: 3,
      index: 33 + MFC.serverTimer.date.getDay()
    });
    await this.initBattle();
    let _0x3eaa3b = await this.useSkill(100604);
    if (_0x3eaa3b.result.result == 0) {
      _0x3eaa3b = await this.useSkill(100604);
    }
    if (_0x3eaa3b.result.result == 0) {
      await this.expbattle22();
    } else {
      addGameLog("成功击败");
    }
  }
  async expfight3() {
    let _0x528ac6;
    switch (VIPManager.getInstance().vipLevel) {
      case 0:
        _0x528ac6 = 4;
        break;
      case 1:
        _0x528ac6 = 5;
        break;
      case 2:
      case 3:
        _0x528ac6 = 6;
        break;
      case 4:
      case 5:
        _0x528ac6 = 7;
        break;
      case 6:
      case 7:
        _0x528ac6 = 8;
        break;
      case 8:
      case 9:
        _0x528ac6 = 9;
        break;
      case 10:
        _0x528ac6 = 10;
        break;
    }
    logger("boss" + (40 + MFC.serverTimer.date.getDay()) + "与" + (33 + MFC.serverTimer.date.getDay()));
    while (true) {
      if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyEnergyFightCompletionSign), 3) == 0) {
        addGameLog("坚持到底困难还未首胜");
        let _0x419fac = PetManager.getInstance().getAllPets().map(_0x3110e7 => {
          if (_0x3110e7.skills.indexOf(42971) != -1 && _0x3110e7.skills.indexOf(42972) != -1 && _0x3110e7.skills.indexOf(32346) != -1 && _0x3110e7.level == 100) {
            return _0x3110e7;
          }
        }).filter(_0x283468 => _0x283468 !== undefined)[0];
        let _0x24fa60 = PetManager.getInstance().getAllPets().map(_0x586938 => {
          if (_0x586938.level == 100) {
            return _0x586938;
          }
        }).filter(_0x483352 => _0x483352 !== undefined)[0];
        if (_0x419fac !== undefined) {
          if (_0x419fac.skills.indexOf(42971) != -1) {
            if (_0x419fac.skills.indexOf(42972) != -1) {
              if (_0x419fac.skills.indexOf(32346) != -1) {
                addGameLog("比德尔符合");
              } else {
                addGameLog("没有超动灵破闪");
                this.stop();
              }
            } else {
              addGameLog("没有无限愤怒");
              this.stop();
            }
          } else {
            addGameLog("没有柔弱身躯");
            this.stop();
          }
        } else {
          addGameLog("比德尔或没有100级");
          this.stop();
        }
        const _0x5f1c40 = {
          op: 1,
          arrayType: "defaultTeam",
          subArray: 0,
          idx: 1,
          teamUp: 0,
          fightType: 0,
          getTimeList: [_0x419fac.getTime, _0x24fa60.getTime]
        };
        await this.send_message("cs_new_change_petArray", _0x5f1c40);
        await this.expbattle32();
        touchBtn(sta);
      } else {
        addGameLog("坚持到底困难已首胜");
      }
      if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.dailyEnergyFightCompletionSign), 6) == 0) {
        addGameLog("不惧反弹困难还未首胜");
        let _0x24d145 = PetManager.getInstance().getAllPets().map(_0x1f1852 => {
          if (_0x1f1852.skills.indexOf(42971) != -1 && _0x1f1852.skills.indexOf(42972) != -1 && _0x1f1852.skills.indexOf(32346) != -1 && _0x1f1852.level == 100) {
            return _0x1f1852;
          }
        }).filter(_0x5a1a0d => _0x5a1a0d !== undefined)[0];
        let _0x1cc55b = PetManager.getInstance().getAllPets().map(_0x51a416 => {
          if (_0x51a416.level == 100) {
            return _0x51a416;
          }
        }).filter(_0x239dd5 => _0x239dd5 !== undefined)[0];
        if (_0x24d145 !== undefined) {
          if (_0x24d145.skills.indexOf(42971) != -1) {
            if (_0x24d145.skills.indexOf(42972) != -1) {
              if (_0x24d145.skills.indexOf(32346) != -1) {
                addGameLog("比德尔符合");
              } else {
                addGameLog("没有超动灵破闪");
                this.stop();
              }
            } else {
              addGameLog("没有无限愤怒");
              this.stop();
            }
          } else {
            addGameLog("没有柔弱身躯");
            this.stop();
          }
        } else {
          addGameLog("比德尔或没有100级");
          this.stop();
        }
        const _0x176a7c = {
          op: 1,
          arrayType: "defaultTeam",
          subArray: 0,
          idx: 1,
          teamUp: 0,
          fightType: 0,
          getTimeList: [_0x24d145.getTime, _0x1cc55b.getTime]
        };
        await this.send_message("cs_new_change_petArray", _0x176a7c);
        await this.expbattle31();
        touchBtn(sta);
      } else {
        addGameLog("不惧反弹困难已首胜");
        addGameLog("即将进行扫荡");
        if (_0x528ac6 - MFC.attr.getAttr(MFC.attrType.dailyEnergyFightExtraCount) > 0) {
          for (let _0x1915b4 = 0; _0x1915b4 < _0x528ac6 - MFC.attr.getAttr(MFC.attrType.dailyEnergyFightExtraCount); _0x1915b4++) {
            await this.send_message("cs_energy_fight_boss", {
              getTime: 3,
              index: 40 + MFC.serverTimer.date.getDay(),
              sdFlag: 1
            });
            await wait(200);
            touchBtn(sta);
          }
        } else {
          break;
        }
      }
    }
    addGameLog("能量大作战结束");
    this.stop();
  }
  async expbattle31() {
    await this.send_message("cs_energy_fight_boss", {
      getTime: 3,
      index: 40 + MFC.serverTimer.date.getDay()
    });
    let _0x174b57 = await this.initBattle();
    for (let _0x107609 = 0; _0x107609 < 3; _0x107609++) {
      if (_0x174b57.result.result == 0) {
        _0x174b57 = await this.useSkill(42971);
      }
    }
    if (_0x174b57.result.result == 0) {
      _0x174b57 = await this.useSkill(42972);
    }
    if (_0x174b57.result.result == 0) {
      _0x174b57 = await this.useSkill(42971);
    }
    if (_0x174b57.result.result == 0) {
      _0x174b57 = await this.useSkill(42972);
    }
    if (_0x174b57.result.result == 0) {
      _0x174b57 = await this.useSkill(42971);
    }
    if (_0x174b57.result.result == 0) {
      _0x174b57 = await this.useSkill(42972);
    }
    if (_0x174b57.result.result == 0) {
      _0x174b57 = await this.useSkill(32346);
    }
    if (_0x174b57.result.result == 0) {
      await this.expbattle31();
    } else {
      addGameLog("成功击败");
    }
  }
  async expbattle32() {
    await this.send_message("cs_energy_fight_boss", {
      getTime: 3,
      index: 33 + MFC.serverTimer.date.getDay()
    });
    let _0x84e68 = await this.initBattle();
    for (let _0x140b82 = 0; _0x140b82 < 3; _0x140b82++) {
      if (_0x84e68.result.result == 0) {
        _0x84e68 = await this.useSkill(42971);
      }
    }
    if (_0x84e68.result.result == 0) {
      _0x84e68 = await this.useSkill(42972);
    }
    if (_0x84e68.result.result == 0) {
      _0x84e68 = await this.useSkill(42971);
    }
    if (_0x84e68.result.result == 0) {
      _0x84e68 = await this.useSkill(42972);
    }
    if (_0x84e68.result.result == 0) {
      _0x84e68 = await this.useSkill(42971);
    }
    if (_0x84e68.result.result == 0) {
      _0x84e68 = await this.useSkill(42972);
    }
    while (_0x84e68.result.result == 0) {
      _0x84e68 = await this.useSkill(32346);
    }
    if (_0x84e68.result.result !== 1) {
      await this.expbattle32();
    } else {
      addGameLog("成功击败");
    }
  }
  async keluosileyuan() {
    while (1) {
      let _0x3656be = await this.send_message("cs_get_mapBoss_data", {
        planetId: 1
      });
      if (_0x3656be.reward[361] < 3 || _0x3656be.reward[361] == undefined) {
        let _0x34301c = new MapCatch();
        _0x34301c.capIds = [4001, 4002, 4003];
        _0x34301c.levelIds = [361];
        _0x34301c.catchCounts = 1;
        _0x34301c.stopTalent = 31;
        _0x34301c.petteamstatus = true;
        await _0x34301c.prcessBody();
      } else {
        addGameLog("抓小豆芽完成");
        break;
      }
    }
    while (1) {
      let _0x26761d = await this.send_message("cs_get_mapBoss_data", {
        planetId: 1
      });
      if (_0x26761d.reward[360] < 3 || _0x26761d.reward[360] == undefined) {
        let _0x471dfe = new MapCatch();
        _0x471dfe.capIds = [4001, 4002, 4003];
        _0x471dfe.levelIds = [360];
        _0x471dfe.catchCounts = 1;
        _0x471dfe.stopTalent = 31;
        _0x471dfe.petteamstatus = true;
        await _0x471dfe.prcessBody();
      } else {
        addGameLog("抓依依完成");
        break;
      }
    }
    this.stop();
  }
  async keluosileyuan1() {
    while (1) {
      let _0x1ea8b6 = await this.send_message("cs_get_mapBoss_data", {
        planetId: 1
      });
      if (_0x1ea8b6.reward[361] < 3 || _0x1ea8b6.reward[361] == undefined) {
        let _0x1caddb = PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam1[0]).skills[0];
        await this.send_message("cs_pve_activity_battle", {
          levelId: 361,
          battleType: 3
        });
        await this.initBattle();
        let _0x2ab472 = await this.useSkill(_0x1caddb);
        while (_0x2ab472.result.result === 0) {
          let _0x57707a = _0x2ab472.result.playerInfos.find(_0x270885 => _0x270885.uid === MFC.userInfo.uid);
          let _0x5e78dc = _0x57707a ? _0x57707a.nextRoundOP : _0x2ab472.result.playerInfos[1].nextRoundOP;
          if (_0x5e78dc !== 1) {
            addGameLog("首发被击败");
            break;
          }
          if (_0x2ab472.result.roundNum > 5) {
            break;
          }
          addGameLog("未击败，继续攻击");
          _0x2ab472 = await this.useSkill(_0x1caddb);
        }
        await wait(300);
      } else {
        addGameLog("小豆芽完成");
        break;
      }
    }
    while (1) {
      let _0x4ef178 = await this.send_message("cs_get_mapBoss_data", {
        planetId: 1
      });
      if (_0x4ef178.reward[360] < 3 || _0x4ef178.reward[360] == undefined) {
        let _0x53ca8c = PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam1[0]).skills[0];
        await this.send_message("cs_pve_activity_battle", {
          levelId: 360,
          battleType: 3
        });
        await this.initBattle();
        let _0x21700c = await this.useSkill(_0x53ca8c);
        while (_0x21700c.result.result === 0) {
          let _0xadf5c4 = _0x21700c.result.playerInfos.find(_0x560dc2 => _0x560dc2.uid === MFC.userInfo.uid);
          let _0x2b0d81 = _0xadf5c4 ? _0xadf5c4.nextRoundOP : _0x21700c.result.playerInfos[1].nextRoundOP;
          if (_0x2b0d81 !== 1) {
            addGameLog("首发被击败");
            break;
          }
          if (_0x21700c.result.roundNum > 5) {
            break;
          }
          addGameLog("未击败，继续攻击");
          _0x21700c = await this.useSkill(_0x53ca8c);
        }
        await wait(300);
      } else {
        addGameLog("依依完成");
        break;
      }
    }
    this.stop();
  }
  async bingbingpet() {
    let _0x4a58fa = XlsUtils.getItemsByKeyValue("mapMonster", "mapId", 50082).filter(function (_0x1e67e2) {
      return _0x1e67e2.date.split("|")[0] == deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_M_d") || _0x1e67e2.date.split("|")[1] == deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_M_d");
    });
    for (let _0xdbac3e = 0; _0xdbac3e < _0x4a58fa.length; _0xdbac3e++) {
      while (1) {
        const _0x1d1102 = {
          planetId: undefined
        };
        let _0x476a1d = await this.send_message("cs_get_mapBoss_data", _0x1d1102);
        if (_0x476a1d.reward[_0x4a58fa[_0xdbac3e].id.toString()] < 5 || _0x476a1d.reward[_0x4a58fa[_0xdbac3e].id.toString()] == undefined) {
          let _0x3568a3 = UserManager.getInstance().userInfo.defaultTeam[0];
          let _0xa58c8e = PetManager.getInstance().getPetInfoByGetTime(_0x3568a3).skills[0];
          await wait(300);
          const _0x26b95f = {
            levelId: _0x4a58fa[_0xdbac3e].id,
            battleType: 3
          };
          await this.send_message("cs_pve_activity_battle", _0x26b95f);
          await this.initBattle();
          let _0x3a5891 = await this.useSkill(_0xa58c8e);
          while (_0x3a5891.result.result === 0) {
            let _0x13a38e = _0x3a5891.result.playerInfos.find(_0x1e0494 => _0x1e0494.uid === MFC.userInfo.uid).nextRoundOP;
            if (_0x13a38e !== 1) {
              addGameLog("首发被击败");
              break;
            }
            addGameLog("未击败，继续攻击");
            _0x3a5891 = await this.useSkill(_0xa58c8e);
          }
          await wait(300);
        } else {
          break;
        }
      }
    }
    addGameLog("闪光精灵大派对完成");
    this.stop();
  }
  async keluosivisitor() {
    addGameLog("开始进行对赌左轮!");
    while (1) {
      let _0x2cbbac = await this.send_message("cs_PerilousRoulette", {
        op: 1,
        action: 0,
        itemId: 0,
        target: 0
      });
      if (JSON.stringify(_0x2cbbac).includes("游戏未结束")) {
        await this.send_message("cs_PerilousRoulette", {
          op: 2,
          action: 3,
          itemId: 0,
          target: 0
        });
        await this.send_message("cs_PerilousRoulette", {
          op: 1,
          action: 0,
          itemId: 0,
          target: 0
        });
      }
      let _0x5704a8 = 0;
      while (1) {
        let _0x3f896c = await this.send_message("cs_PerilousRoulette", {
          op: 2,
          action: 1,
          itemId: 0,
          target: 2
        });
        if (_0x3f896c.real) {
          _0x5704a8++;
        }
        if (JSON.stringify(_0x3f896c).includes("目标已阵亡")) {
          await this.send_message("cs_PerilousRoulette", {
            op: 2,
            action: 3,
            itemId: 0,
            target: 0
          });
          break;
        }
        if (_0x5704a8 >= 3) {
          addGameLog("已经获胜,见好就收!!");
          await this.send_message("cs_PerilousRoulette", {
            op: 2,
            action: 3,
            itemId: 0,
            target: 0
          });
        }
      }
      var _0x1eed68 = +xls.item.getItem(101391).dailyLimit;
      var _0x32937b = 30;
      var _0xe651d3 = Math.min(_0x1eed68, ItemManager.getInstance().getDailyNumById(101391));
      var _0x1b6655 = Math.min(mongoAttr.getPerilousRouletteAttrperilousRoulette().dropNum, _0x32937b);
      addGameLog("每日印记掉落：" + _0xe651d3 + "/" + _0x1eed68 + "\n每日随机掉落：" + _0x1b6655 + "/" + _0x32937b);
      if (_0xe651d3 == _0x1eed68 && _0x1b6655 == _0x32937b) {
        addGameLog("对赌左轮完成!!");
        break;
      }
    }
    this.stop();
  }
  async msyBattle() {
    let _0x2d5ad9 = await this.dispatchSelfPet("水次", [32529, 32529]);
    if (_0x2d5ad9) {
      return {
        pet: _0x2d5ad9,
        skillsName: [32529, 32529]
      };
    }
    let _0x24f765 = await this.dispatchSelfPet("熊猫", [31998, 31998]);
    if (_0x24f765) {
      return {
        pet: _0x24f765,
        skillsName: [31998, 31998]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async pipibigbattleui() {
    super.start();
    let _0x431d84 = this;
    MFC.alert.show("确保有100闪光皮皮还有大招,100缪斯皎月苍月,100二巡卡修斯,丽莎布布", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x245dc0) {
      _0x431d84.stop();
    }, function (_0x496d01) {
      _0x431d84.pipibigbattle();
    }]);
  }
  async pipibigbattle() {
    while (1) {
      if (MFC.userInfo.curEnergy < 10) {
        break;
      }
      if (pveUtils.GetNewActivityCardData([1982])[0].infos.filter(_0x4c1e0b => _0x4c1e0b.cardId == 1982)[0].dailyWin == 0) {
        let _0x4dd55a = await this.pipibigBattle1();
        if (!_0x4dd55a) {
          break;
        } else {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [1982],
            petList: [_0x4dd55a.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            times: 0
          });
          await this.initBattle();
          let _0xa102a7 = await this.useSkill(_0x4dd55a.skillsName);
          while (_0xa102a7.result.result == 0) {
            if (_0xa102a7.result.playerInfos[0].uid == MFC.userInfo.uid) {
              if (_0xa102a7.result.playerInfos[0].nextRoundOP !== 1) {
                addGameLog("首发被击败");
                break;
              }
            } else if (_0xa102a7.result.playerInfos[1].nextRoundOP !== 1) {
              addGameLog("首发被击败");
              break;
            }
            _0xa102a7 = await this.useSkill(_0x4dd55a.skillsName);
          }
        }
      } else {
        break;
      }
    }
    while (1) {
      if (MFC.userInfo.curEnergy < 10) {
        break;
      }
      if (pveUtils.GetNewActivityCardData([1983])[0].infos.filter(_0x5ef3e1 => _0x5ef3e1.cardId == 1983)[0].dailyWin == 0) {
        let _0x293be4 = await this.pipibigBattle2();
        if (!_0x293be4) {
          break;
        } else {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [1983],
            petList: [_0x293be4.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            times: 0
          });
          await this.initBattle();
          let _0x22ba30 = await this.useSkill(23505);
          if (_0x22ba30.result.result == 0) {
            _0x22ba30 = await this.useSkill(23505);
          }
          while (_0x22ba30.result.result == 0) {
            if (_0x22ba30.result.playerInfos[0].uid == MFC.userInfo.uid) {
              if (_0x22ba30.result.playerInfos[0].nextRoundOP !== 1) {
                addGameLog("首发被击败");
                break;
              }
            } else if (_0x22ba30.result.playerInfos[1].nextRoundOP !== 1) {
              addGameLog("首发被击败");
              break;
            }
            _0x22ba30 = await this.useSkill(23506);
          }
        }
      } else {
        break;
      }
    }
    while (1) {
      if (MFC.userInfo.curEnergy < 10) {
        break;
      }
      if (pveUtils.GetNewActivityCardData([1985])[0].infos.filter(_0x51ad9d => _0x51ad9d.cardId == 1985)[0].dailyWin == 0) {
        let _0x3525d1 = await this.pipibigBattle2();
        if (!_0x3525d1) {
          break;
        } else {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [1985],
            petList: [_0x3525d1.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            times: 0
          });
          await this.initBattle();
          let _0x1d5bca = await this.useSkill(23505);
          if (_0x1d5bca.result.result == 0) {
            _0x1d5bca = await this.useSkill(23505);
          }
          while (_0x1d5bca.result.result == 0) {
            if (_0x1d5bca.result.playerInfos[0].uid == MFC.userInfo.uid) {
              if (_0x1d5bca.result.playerInfos[0].nextRoundOP !== 1) {
                addGameLog("首发被击败");
                break;
              }
            } else if (_0x1d5bca.result.playerInfos[1].nextRoundOP !== 1) {
              addGameLog("首发被击败");
              break;
            }
            _0x1d5bca = await this.useSkill(23506);
          }
        }
      } else {
        break;
      }
    }
    while (1) {
      if (MFC.userInfo.curEnergy < 10) {
        break;
      }
      if (pveUtils.GetNewActivityCardData([1987])[0].infos.filter(_0x3e671f => _0x3e671f.cardId == 1987)[0].dailyWin == 0) {
        let _0x1d45ba = await this.pipibigBattle2();
        if (!_0x1d45ba) {
          break;
        } else {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [1987],
            petList: [_0x1d45ba.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            times: 0
          });
          await this.initBattle();
          let _0x35915d = await this.useSkill(23505);
          if (_0x35915d.result.result == 0) {
            _0x35915d = await this.useSkill(23505);
          }
          while (_0x35915d.result.result == 0) {
            if (_0x35915d.result.playerInfos[0].uid == MFC.userInfo.uid) {
              if (_0x35915d.result.playerInfos[0].nextRoundOP !== 1) {
                addGameLog("首发被击败");
                break;
              }
            } else if (_0x35915d.result.playerInfos[1].nextRoundOP !== 1) {
              addGameLog("首发被击败");
              break;
            }
            _0x35915d = await this.useSkill(23506);
          }
        }
      } else {
        break;
      }
    }
    while (1) {
      if (MFC.userInfo.curEnergy < 10) {
        break;
      }
      if (pveUtils.GetNewActivityCardData([1984])[0].infos.filter(_0x2e1222 => _0x2e1222.cardId == 1984)[0].dailyWin == 0) {
        let _0xb5b462 = await this.pipibigBattle3();
        if (!_0xb5b462) {
          break;
        } else {
          await this.send_message("cs_pve_fight_start", {
            type: 1,
            cardId: [1984],
            petList: [_0xb5b462.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
            times: 0
          });
          await this.initBattle();
          let _0x124414 = await this.useSkill(42968);
          while (_0x124414.result.result == 0) {
            if (_0x124414.result.playerInfos[0].uid == MFC.userInfo.uid) {
              if (_0x124414.result.playerInfos[0].nextRoundOP !== 1) {
                addGameLog("首发被击败");
                break;
              }
            } else if (_0x124414.result.playerInfos[1].nextRoundOP !== 1) {
              addGameLog("首发被击败");
              break;
            }
            _0x124414 = await this.useSkill(32340);
          }
        }
      } else {
        break;
      }
    }
    while (1) {
      if (MFC.userInfo.curEnergy < 10) {
        break;
      }
      if (pveUtils.GetNewActivityCardData([1986])[0].infos.filter(_0x54fb6c => _0x54fb6c.cardId == 1986)[0].dailyWin == 0) {
        let _0x378c80 = await this.pipibigBattle4();
        if (!_0x378c80) {
          break;
        } else {
          if (_0x378c80.pet.getTime == PetManager.getInstance().getAllPets()[0].getTime) {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [1986],
              petList: [_0x378c80.pet.getTime, PetManager.getInstance().getAllPets()[1].getTime],
              times: 0
            });
          } else {
            await this.send_message("cs_pve_fight_start", {
              type: 1,
              cardId: [1986],
              petList: [_0x378c80.pet.getTime, PetManager.getInstance().getAllPets()[0].getTime],
              times: 0
            });
          }
          await this.initBattle();
          let _0x2bc337 = await this.useSkill(11006);
          let _0x147f8e = 0;
          let _0x1e88e4 = 20504;
          while (_0x2bc337.result.result == 0) {
            if (_0x147f8e == 0) {
              _0x1e88e4 = 20504;
            }
            if (_0x147f8e == 1) {
              if (_0x378c80.skillsName.indexOf(100008) !== -1) {
                _0x1e88e4 = 100008;
              } else {
                _0x1e88e4 = 11007;
              }
            }
            if (_0x147f8e == 2) {
              _0x1e88e4 = 11006;
            }
            if (_0x147f8e == 3) {
              _0x1e88e4 = 11006;
            }
            if (_0x147f8e == 4) {
              _0x1e88e4 = 11006;
            }
            if (_0x147f8e == 5) {
              if (_0x378c80.skillsName.indexOf(100486) !== -1) {
                _0x1e88e4 = 100486;
              } else {
                _0x1e88e4 = 20009;
              }
            }
            _0x2bc337 = await this.useSkill(_0x1e88e4);
            let _0x3405bd = _0x2bc337.result.playerInfos;
            if (_0x2bc337.result.playerInfos[0].uid == MFC.userInfo.uid) {
              if (_0x2bc337.result.playerInfos[0].nextRoundOP !== 1) {
                addGameLog("首发被击败");
                break;
              }
            } else if (_0x2bc337.result.playerInfos[1].nextRoundOP !== 1) {
              addGameLog("首发被击败");
              break;
            }
            let _0x5c6abd = "";
            for (let _0x283d9e = 0; _0x283d9e < _0x3405bd.length; _0x283d9e++) {
              if (_0x3405bd[_0x283d9e].uid == UserManager.getInstance().userInfo.uid) {
                _0x5c6abd = _0x3405bd[_0x283d9e].petInfos[0];
                break;
              }
            }
            let _0x275516 = _0x5c6abd.useSkills.find(_0x43b1fa => _0x43b1fa.id === _0x1e88e4).crtPP;
            if (_0x275516 <= 1) {
              addGameLog("技能次数不足,回复pp");
              if (getSeerItemNum(2001) > 1) {
                addGameLog("回pp");
                this.pp = true;
                _0x2bc337 = await this.useItem(2001);
              } else if (getSeerItemNum(2002) > 1) {
                addGameLog("回pp");
                this.pp = true;
                _0x2bc337 = await this.useItem(2002);
              } else if (getSeerItemNum(2003) > 1) {
                addGameLog("回pp");
                this.pp = true;
                _0x2bc337 = await this.useItem(2003);
              } else {
                addGameLog("pp药不足");
                await this.send_message("cs_quit_battle", {});
                break;
              }
            }
            _0x147f8e++;
            if (_0x147f8e > 5) {
              _0x147f8e = 0;
            }
          }
        }
      } else {
        break;
      }
    }
    addGameLog("皮皮大作战结束");
    this.stop();
  }
  async pipibigBattle1() {
    let _0x5ee266 = await this.dispatchSelfPet("闪光皮皮", [10486]);
    if (_0x5ee266) {
      return {
        pet: _0x5ee266,
        skillsName: [10486]
      };
    }
    let _0x1a2c9b = await this.dispatchSelfPet("闪光皮皮", [100015]);
    if (_0x1a2c9b) {
      return {
        pet: _0x1a2c9b,
        skillsName: [100015]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async pipibigBattle2() {
    let _0x39cdb6 = await this.dispatchSelfPet("缪斯", [23505, 23506]);
    if (_0x39cdb6) {
      return {
        pet: _0x39cdb6,
        skillsName: [23505, 23506]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async pipibigBattle3() {
    let _0x181de2 = await this.dispatchSelfPet("卡修斯", [42968, 32340]);
    if (_0x181de2) {
      return {
        pet: _0x181de2,
        skillsName: [42968, 32340]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async pipibigBattle4() {
    let _0x600492 = await this.dispatchSelfPet("丽莎布布", [11006, 20504, 11007, 20009]);
    if (_0x600492) {
      return {
        pet: _0x600492,
        skillsName: [11006, 20504, 11007, 20009]
      };
    }
    let _0x391a1d = await this.dispatchSelfPet("丽莎布布", [11006, 20504, 11007, 100486]);
    if (_0x391a1d) {
      return {
        pet: _0x391a1d,
        skillsName: [11006, 20504, 11007, 100486]
      };
    }
    let _0x28f4c0 = await this.dispatchSelfPet("丽莎布布", [11006, 20504, 100008, 100486]);
    if (_0x28f4c0) {
      return {
        pet: _0x28f4c0,
        skillsName: [11006, 20504, 100008, 100486]
      };
    }
    let _0x223428 = await this.dispatchSelfPet("丽莎布布", [11006, 20504, 100008, 20009]);
    if (_0x223428) {
      return {
        pet: _0x223428,
        skillsName: [11006, 20504, 100008, 20009]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async guiwangjieui() {
    super.start();
    let _0x3527f3 = this;
    MFC.alert.show("此活动需要水次或者哈肯撒或者长老,单局500000可能得手打一下", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x559545) {
      _0x3527f3.stop();
    }, function (_0x14f62c) {
      _0x3527f3.guiwangjie();
    }]);
  }
  async guiwangjie() {
    if (!xls.activityCard.hasLoaded) {
      xls.activityCard.load({});
    }
    while (1) {
      if (Math.max(0, 5 - MFC.attr.getAttr(MFC.attrType.dailyHellwayBattleTime)) > 0) {
        if (MFC.userInfo.curEnergy > 10) {
          let _0x50eef1 = xls.activityCard.getItemsByKeyValue("eventId", 146);
          for (var _0x46a786 = MFC.serverTimer.getTime(), _0x10913f = 0; _0x10913f < _0x50eef1.length; _0x10913f++) {
            var _0x3cc76d = _0x50eef1[_0x10913f];
            var _0x5b1bb8 = MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0x3cc76d.startTime.replace(/-/g, "/").replace(/_/g, "/")));
            var _0xdfa95e = MFC.serverTimer.getServerTimeFlagByServerDate(new Date(_0x3cc76d.endTime.replace(/-/g, "/").replace(/_/g, "/")));
            if (_0x46a786 >= _0x5b1bb8 && _0xdfa95e >= _0x46a786) {
              _0x50eef1 = _0x3cc76d;
              break;
            }
          }
          if (_0x50eef1.id == 2070 || _0x50eef1.id == 2077 || _0x50eef1.id == 2084 || _0x50eef1.id == 2071 || _0x50eef1.id == 2078 || _0x50eef1.id == 2076 || _0x50eef1.id == 2083 || _0x50eef1.id == 2075 || _0x50eef1.id == 2082) {
            let _0x1b3173 = await this.guiwangjiebattle11();
            if (!_0x1b3173) {
              break;
            }
            const _0x1d97a7 = {
              type: 1,
              cardId: [_0x50eef1.id],
              petList: [_0x1b3173.pet.getTime],
              times: 0,
              train: 0
            };
            await this.send_message("cs_pve_fight_start", _0x1d97a7);
            await this.initBattle();
            let _0x5dfc3e = await this.useSkill(_0x1b3173.skillsName[0]);
            while (_0x5dfc3e.result.result == 0) {
              _0x5dfc3e = await this.useSkill(_0x1b3173.skillsName[1]);
              let _0x2dcf90 = _0x5dfc3e.result.playerInfos;
              let _0x128d07 = "";
              for (let _0x4a66ef = 0; _0x4a66ef < _0x2dcf90.length; _0x4a66ef++) {
                if (_0x2dcf90[_0x4a66ef].uid == UserManager.getInstance().userInfo.uid) {
                  _0x128d07 = _0x2dcf90[_0x4a66ef].petInfos[0];
                  break;
                }
              }
              let _0x4a4d5a = _0x128d07.useSkills.find(_0x1a8b04 => _0x1a8b04.id === _0x1b3173.skillsName[1]).crtPP;
              if (_0x4a4d5a == 0) {
                if (getSeerItemNum(2001) > 1) {
                  addGameLog("回pp");
                  _0x5dfc3e = await this.useItem(2001);
                } else if (getSeerItemNum(2002) > 1) {
                  addGameLog("回pp");
                  _0x5dfc3e = await this.useItem(2002);
                } else if (getSeerItemNum(2003) > 1) {
                  addGameLog("回pp");
                  _0x5dfc3e = await this.useItem(2003);
                } else {
                  addGameLog("pp不足");
                  await this.send_message("cs_quit_battle", {});
                  break;
                }
              }
            }
          } else if (_0x50eef1.id == 2072 || _0x50eef1.id == 2079 || _0x50eef1.id == 2074 || _0x50eef1.id == 2081 || _0x50eef1.id == 2073 || _0x50eef1.id == 2080) {
            let _0x23738f = await this.guiwangjiebattle12();
            if (!_0x23738f) {
              break;
            }
            const _0x5aa84f = {
              type: 1,
              cardId: [_0x50eef1.id],
              petList: [_0x23738f.pet.getTime],
              times: 0,
              train: 0
            };
            await this.send_message("cs_pve_fight_start", _0x5aa84f);
            await this.initBattle();
            let _0x33a459 = 0;
            let _0x28a034;
            let _0x1a4d8d = await this.useSkill(_0x23738f.skillsName[0]);
            while (_0x1a4d8d.result.result == 0) {
              if (_0x33a459 == 3) {
                _0x33a459 = 0;
              }
              if (_0x33a459 == 0) {
                _0x28a034 = _0x23738f.skillsName[1];
              }
              if (_0x33a459 == 1) {
                _0x28a034 = _0x23738f.skillsName[0];
              }
              _0x1a4d8d = await this.useSkill(_0x28a034);
              let _0x5a33df = _0x1a4d8d.result.playerInfos;
              let _0x4a4f1d = "";
              for (let _0x398726 = 0; _0x398726 < _0x5a33df.length; _0x398726++) {
                if (_0x5a33df[_0x398726].uid == UserManager.getInstance().userInfo.uid) {
                  _0x4a4f1d = _0x5a33df[_0x398726].petInfos[0];
                  break;
                }
              }
              let _0x578ca0 = _0x4a4f1d.useSkills.find(_0x48927f => _0x48927f.id === _0x28a034).crtPP;
              if (_0x578ca0 == 0) {
                if (getSeerItemNum(2001) > 1) {
                  addGameLog("回pp");
                  _0x1a4d8d = await this.useItem(2001);
                } else if (getSeerItemNum(2002) > 1) {
                  addGameLog("回pp");
                  _0x1a4d8d = await this.useItem(2002);
                } else if (getSeerItemNum(2003) > 1) {
                  addGameLog("回pp");
                  _0x1a4d8d = await this.useItem(2003);
                } else {
                  addGameLog("pp不足");
                  await this.send_message("cs_quit_battle", {});
                  break;
                }
              }
              _0x33a459++;
            }
          }
        } else {
          addGameLog("电池不足");
          break;
        }
      } else {
        addGameLog("次数不足");
        break;
      }
    }
    if (!xls.activityTaskReset.hasLoaded) {
      xls.activityTaskReset.load({});
    }
    if (!xls.activityBattlePassTask.hasLoaded) {
      xls.activityBattlePassTask.load({});
    }
    if (!xls.activityExchange.hasLoaded) {
      xls.activityExchange.load({});
    }
    let _0x1c576b = xls.activityTaskReset.getItems().filter(function (_0x39ba54) {
      return _0x39ba54.activityIdentity == 310;
    });
    for (let _0x56b578 = 0; _0x56b578 < _0x1c576b.length; _0x56b578++) {
      if (TaskUtils.GetRestTaskState(_0x1c576b[_0x56b578]) == -1) {
        addGameLog(_0x1c576b[_0x56b578].task + "已领取");
      } else if (TaskUtils.GetRestTaskState(_0x1c576b[_0x56b578]) == 0) {
        addGameLog(_0x1c576b[_0x56b578].task + "未完成");
      } else {
        addGameLog(_0x1c576b[_0x56b578].task + "已完成");
        addGameLog("即将进行领取=>\n领取" + _0x1c576b[_0x56b578].task);
        const _0x24c281 = {
          carnivalId: _0x1c576b[_0x56b578].id
        };
        await this.send_message("cs_get_activity_task_reset_reward", _0x24c281);
      }
    }
    let _0x8535a0 = xls.activityBattlePassTask.getItems().filter(function (_0x5cc294) {
      return _0x5cc294.activityIdentity == 419;
    });
    for (let _0x68c202 = 0; _0x68c202 < _0x8535a0.length; _0x68c202++) {
      if (BattlePassTaskUtils.GetBattlePassTaskState(_0x8535a0[_0x68c202]) == -1) {
        addGameLog(_0x8535a0[_0x68c202].describe + "已领取");
      } else if (BattlePassTaskUtils.GetBattlePassTaskState(_0x8535a0[_0x68c202]) == 0) {
        addGameLog(_0x8535a0[_0x68c202].describe + "未完成");
      } else {
        addGameLog(_0x8535a0[_0x68c202].describe + "已完成");
        addGameLog("即将进行领取=>\n领取" + _0x8535a0[_0x68c202].describe);
        const _0x49d37e = {
          activityId: 419,
          taskId: _0x8535a0[_0x68c202].id
        };
        await this.send_message("cs_activity_battle_pass_op_reward", _0x49d37e);
        await this.send_message("cs_activity_battle_pass_op_reward", {
          activityId: 419
        });
      }
    }
    let _0x3d3f29 = xls.activityExchange.getItems().filter(function (_0x463d28) {
      return _0x463d28.type == 637 && _0x463d28.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss").toString() && _0x463d28.endTime >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss").toString() && _0x463d28.name.indexOf("伤害达到") !== -1;
    });
    for (let _0x2d6478 = 0; _0x2d6478 < _0x3d3f29.length; _0x2d6478++) {
      if (ExchangeUtils.GetExchangeState(_0x3d3f29[_0x2d6478]) == 1) {
        const _0x10b201 = {
          id: _0x3d3f29[_0x2d6478].id,
          selectIndex: 0,
          subDropIdList: []
        };
        await this.send_message("cs_exchange_activity_reward", _0x10b201);
      } else if (ExchangeUtils.GetExchangeState(_0x3d3f29[_0x2d6478]) == -1) {
        addGameLog(_0x3d3f29[_0x2d6478].name + "已领取");
      } else if (ExchangeUtils.GetExchangeState(_0x3d3f29[_0x2d6478]) == 0) {
        addGameLog(_0x3d3f29[_0x2d6478].name + "未完成");
      }
    }
    addGameLog("归亡节完成");
    this.stop();
  }
  async guiwangjiebattle11() {
    let _0x3c19bb = await this.dispatchSelfPet("哈肯萨", [22615, 14816]);
    if (_0x3c19bb) {
      return {
        pet: _0x3c19bb,
        skillsName: [22615, 14816]
      };
    }
    let _0x23c64a = await this.dispatchSelfPet("赫尔卡长老", [20592, 32127]);
    if (_0x23c64a) {
      return {
        pet: _0x23c64a,
        skillsName: [20592, 32127]
      };
    }
    let _0x273075 = await this.dispatchSelfPet("水次", [32528, 32529]);
    if (_0x273075) {
      return {
        pet: _0x273075,
        skillsName: [32528, 32529]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async guiwangjiebattle12() {
    let _0xcb6d5a = await this.dispatchSelfPet("哈肯萨", [22615, 14816]);
    if (_0xcb6d5a) {
      return {
        pet: _0xcb6d5a,
        skillsName: [22615, 14816]
      };
    }
    let _0xe5acb6 = await this.dispatchSelfPet("赫尔卡长老", [20592, 32127]);
    if (_0xe5acb6) {
      return {
        pet: _0xe5acb6,
        skillsName: [20592, 32127]
      };
    }
    addGameLog("没有符合条件的精灵");
    return false;
  }
  async dispatchSelfPet(_0x2b56c1, _0x4ee525, _0x500f60) {
    let _0xe8a377 = [];
    let _0x335009 = [];
    for (let _0x1b3c58 = 0; _0x1b3c58 < _0x4ee525.length; _0x1b3c58++) {
      _0xe8a377.push(_0x4ee525[_0x1b3c58]);
      _0x335009.push(petConfig.SkillConfig.getDef(_0x4ee525[_0x1b3c58]).name);
    }
    const _0x1b7e86 = {
      skills: _0xe8a377,
      features: _0x500f60
    };
    let _0x539cda = await getGoalPets([_0x1b7e86]);
    if (_0x539cda) {
      addGameLog("精灵背包中携有" + _0x2b56c1 + "+" + _0x335009.join("+"));
      return _0x539cda;
    } else {
      addGameLog("背包 没有" + _0x2b56c1 + "+" + _0x335009.join("+"));
      return false;
    }
  }
  async haoli() {
    let _0x117391 = this;
    MFC.alert.show("确定进行开学季每日在线领好礼计时器吗?", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x5ad6a8) {
      _0x117391.stop();
    }, function (_0x38f838) {
      _0x117391.haoli1();
      _0x117391.stop();
    }]);
  }
  async haoli1() {
    if (typeof newSchoolTermSign === "undefined") {
      MFC.moduleManager.openModule(1376);
      MFC.moduleManager.closeModule(1376);
    }
    let _0x3a2fbb = // TOLOOK
    setInterval(() => {
      try {
        if (!xls.onlineReward.hasLoaded) {
          xls.onlineReward.load(() => {});
        }
        if (mongoAttr.getOnlineRewardonlineReward()[0].rewards) {
          if (mongoAttr.getOnlineRewardonlineReward()[0].rewards.siteArray.filter(function (_0x17578d) {
            _0x17578d !== 0;
          }).length !== 8) {
            for (let _0x58aeb3 = 0; _0x58aeb3 < 8; _0x58aeb3++) {
              const _0x577fbd = {
                op: 1,
                level: 0,
                site: _0x58aeb3 + 1
              };
              GlobalSocket.PROTOCOL_SOCKET.send(10693, _0x577fbd);
            }
          } else {
            clearInterval(_0x3a2fbb);
          }
        }
      } catch (_0x52880e) {}
    }, 600000);
    addGameLog("开学季每日在线领好礼计时器开启");
  }
}
class Paitepet extends SuperTask {
  constructor() {
    super();
    this.nowName = "研究计划";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_notify_change_pet"
    }, {
      watchEventName: "sc_change_default_team"
    }, {
      watchEventName: "sc_notify_item_change"
    }];
    this.task = [];
    this.CatchPetDatas = null;
    this.addCount = 0;
  }
  start() {
    super.start();
    let _0x3ec1af = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x40a7e8 = [];
      var _0x52a8c5 = SimpleAlertUi({
        height: 350,
        width: 460
      });
      _0x3ec1af.alertWin = _0x52a8c5;
      const _0x571c0e = {
        text: "精灵研究计划",
        x: _0x52a8c5.width / 2 - 48,
        y: _0x52a8c5.height / 16
      };
      var _0x47573c = createLabel(_0x571c0e);
      _0x40a7e8.push(_0x47573c);
      const _0x14f272 = {
        text: "注意:",
        x: 30,
        y: _0x47573c.y + _0x47573c.height + 12,
        textColor: 16776960
      };
      var _0x3879dc = createLabel(_0x14f272);
      _0x40a7e8.push(_0x3879dc);
      const _0x8d9875 = {
        text: "请确保有胶囊可以捕抓",
        x: 40,
        y: _0x3879dc.y + _0x3879dc.height + 10
      };
      var _0x3aa6ef = createLabel(_0x8d9875);
      _0x40a7e8.push(_0x3aa6ef);
      const _0xf3ff86 = {
        text: "请确保有电池可以捕抓地图抓捕不到的",
        x: 40,
        y: _0x3aa6ef.y + _0x3aa6ef.height + 10
      };
      var _0x1a379f = createLabel(_0xf3ff86);
      _0x40a7e8.push(_0x1a379f);
      const _0x3e89ac = {
        text: "用电池捕抓的会每一只都抓",
        x: 40,
        y: _0x1a379f.y + _0x1a379f.height + 10
      };
      var _0x4371c8 = createLabel(_0x3e89ac);
      _0x40a7e8.push(_0x4371c8);
      const _0xa29f6d = {
        text: "无敌胶囊达到需要自己领取",
        x: 40,
        y: _0x4371c8.y + _0x4371c8.height + 10
      };
      var _0x3fae04 = createLabel(_0xa29f6d);
      _0x40a7e8.push(_0x3fae04);
      const _0x7eeaf5 = {
        x: 70,
        y: _0x3fae04.y + _0x3fae04.height + 10,
        width: 100,
        prompt: "请输入天赋",
        storageKey: "cptalent"
      };
      var _0x3a9788 = createEdit(_0x7eeaf5);
      _0x40a7e8.push(_0x3a9788);
      const _0x421743 = {
        text: "比如输入30就抓到30跟31不兑换",
        x: _0x3a9788.x + _0x3a9788.width + 30,
        y: _0x3a9788.y + 10
      };
      var _0x4bf370 = createLabel(_0x421743);
      _0x40a7e8.push(_0x4bf370);
      const _0x483763 = {
        text: "消耗电池进入的是否全部捕抓",
        textColor: 16776960,
        x: 40,
        y: _0x4bf370.y + 30
      };
      var _0x54a695 = createLabel(_0x483763);
      _0x40a7e8.push(_0x54a695);
      const _0x31d2fa = {
        x: _0x54a695.x + _0x54a695.width + 5,
        y: _0x54a695.y,
        selected: false,
        storageKey: "allincatch"
      };
      let _0x27bd95 = createToggle(_0x31d2fa);
      _0x40a7e8.push(_0x27bd95);
      _0x3ec1af.addAllUis(_0x40a7e8);
      _0x52a8c5.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x3ec1af.stop();
      }, function () {
        if (_0x3a9788.text.length == 0) {
          MFC.bubbleAlert.showAlert("请输入天赋");
          return true;
        }
        if (!Number.isInteger(parseInt(_0x3a9788.text)) || _0x3a9788.text > 31 || parseInt(_0x3a9788.text) < 0) {
          MFC.bubbleAlert.showAlert("天赋错误");
          return true;
        }
        localStorage.setItem("cptalent", _0x3a9788.text);
        localStorage.setItem("allincatch", _0x27bd95.selected);
        _0x3ec1af.prcessBody();
      }], null);
      _0x52a8c5.showAlert();
    });
  }
  async prcessBody() {
    try {
      if (!xls.eventPetAnaysis.hasLoaded) {
        xls.eventPetAnaysis.load(() => {});
      }
      await wait(500);
      if (xls.eventPetAnaysis.getItems()[0].date <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd") && xls.eventPetAnaysis.getItem(xls.eventPetAnaysis.getItems().length).date >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd")) {
        if (MFC.serverTimer.date.getHours() < 5) {
          MFC.moduleManager.closeModule(xls.ModuleConst.ACTIVITIES_PANEL, {});
          MFC.alert.show("派特博士去休息啦，请5点之后再来哟~");
          this.stop();
        } else {
          var _0x2f74fb = MFC.attr.getAttr(MFC.attrType.dailyPetResearchFinishStatus);
          if (_0x2f74fb >= 3) {
            if (_0x2f74fb >= 4) {
              addGameLog("宝箱已经打开");
              MFC.bubbleAlert.showAlert("今天任务已经完成，不能再提交精灵了！");
              this.stop();
            }
            await this.send_message("cs_pet_research_get_reward", {});
            MFC.bubbleAlert.showAlert("今天任务已经完成，不能再提交精灵了！");
            this.stop();
          } else {
            let _0x4e76e1 = [];
            for (let _0x3bf74f = 0; _0x3bf74f < 3 - _0x2f74fb; _0x3bf74f++) {
              _0x4e76e1[_0x3bf74f] = xls.eventPetAnaysis.getItems().map(_0x1c3c68 => {
                if (_0x1c3c68.date == deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd")) {
                  return _0x1c3c68;
                }
              }).filter(_0x247d65 => _0x247d65 !== undefined)[_0x3bf74f + _0x2f74fb];
            }
            for (let _0x166f5f = 0; _0x166f5f < _0x4e76e1.length; _0x166f5f++) {
              this.CatchPetDatas = null;
              var _0x4f884 = PetManager.getInstance().getAllPets();
              var _0x208a33 = MFC.serverTimer.date;
              var _0x51802b = _0x208a33.getTime();
              var _0x12aaea = new Date(_0x208a33.getFullYear(), _0x208a33.getMonth(), _0x208a33.getDate());
              var _0xd3c9 = _0x12aaea.getTime();
              var _0x31831a = [];
              for (var _0x48a1ba = 0; _0x48a1ba < _0x4f884.length; _0x48a1ba++) {
                var _0x521cc4 = _0x4f884[_0x48a1ba];
                if (_0x521cc4.petId == _0x4e76e1[_0x166f5f].petId && _0x521cc4.talent < parseInt(localStorage.getItem("cptalent"))) {
                  var _0x47a224 = MFC.serverTimer.getServerDateByTimeFlag(_0x521cc4.getTime * 1000).getTime();
                  if (_0x47a224 >= _0xd3c9 && _0x51802b > _0x47a224) {
                    _0x31831a.push(_0x521cc4);
                  }
                }
              }
              if (_0x31831a.length > 0) {
                _0x31831a = _0x31831a.sort((_0x5305e4, _0x34a1a5) => _0x5305e4.talent - _0x34a1a5.talent);
                const _0x4197cb = {
                  getTime: _0x31831a[0].getTime
                };
                await this.send_message("cs_pet_research_submit_pet", _0x4197cb);
              } else {
                if (_0x4e76e1[_0x166f5f].petName.indexOf("皮皮") !== -1) {
                  await wait(200);
                  let _0x39dd65 = new MapCatch();
                  _0x39dd65.capIds = [4001, 4002];
                  _0x39dd65.levelIds = [1];
                  _0x39dd65.catchCounts = 1;
                  _0x39dd65.stopTalent = 31;
                  await _0x39dd65.prcessBody();
                  let _0x337064 = _0x39dd65.CatchPetDatas.pet.talent;
                  let _0x55c81c = _0x39dd65.CatchPetDatas.pet.getTime;
                  while (_0x337064 > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x5a73d0 = new MapCatch();
                    _0x5a73d0.capIds = [4001, 4002];
                    _0x5a73d0.levelIds = [1];
                    _0x5a73d0.catchCounts = 1;
                    _0x5a73d0.stopTalent = 31;
                    await _0x5a73d0.prcessBody();
                    _0x337064 = _0x5a73d0.CatchPetDatas.pet.talent;
                    _0x55c81c = _0x5a73d0.CatchPetDatas.pet.getTime;
                  }
                  if (_0x55c81c.toString().length > 0) {
                    const _0x23c633 = {
                      getTime: _0x55c81c
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x23c633);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("仙人球") !== -1) {
                  await wait(200);
                  let _0x2d10f5 = new MapCatch();
                  _0x2d10f5.capIds = [4001, 4002];
                  _0x2d10f5.levelIds = [2];
                  _0x2d10f5.catchCounts = 1;
                  _0x2d10f5.stopTalent = 31;
                  await _0x2d10f5.prcessBody();
                  let _0x94a56f = _0x2d10f5.CatchPetDatas.pet.talent;
                  let _0x20a556 = _0x2d10f5.CatchPetDatas.pet.getTime;
                  while (_0x94a56f > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x4ef4b = new MapCatch();
                    _0x4ef4b.capIds = [4001, 4002];
                    _0x4ef4b.levelIds = [2];
                    _0x4ef4b.catchCounts = 1;
                    _0x4ef4b.stopTalent = 31;
                    await _0x4ef4b.prcessBody();
                    _0x94a56f = _0x4ef4b.CatchPetDatas.pet.talent;
                    _0x20a556 = _0x4ef4b.CatchPetDatas.pet.getTime;
                  }
                  if (_0x20a556.toString().length > 0) {
                    const _0x49f377 = {
                      getTime: _0x20a556
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x49f377);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("贝尔") !== -1) {
                  await wait(200);
                  let _0x361a44 = new MapCatch();
                  _0x361a44.capIds = [4001, 4002];
                  _0x361a44.levelIds = [9];
                  _0x361a44.catchCounts = 1;
                  _0x361a44.stopTalent = 31;
                  await _0x361a44.prcessBody();
                  let _0x4a5f5e = _0x361a44.CatchPetDatas.pet.talent;
                  let _0xc5717 = _0x361a44.CatchPetDatas.pet.getTime;
                  while (_0x4a5f5e > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x4d69f3 = new MapCatch();
                    _0x4d69f3.capIds = [4001, 4002];
                    _0x4d69f3.levelIds = [9];
                    _0x4d69f3.catchCounts = 1;
                    _0x4d69f3.stopTalent = 31;
                    await _0x4d69f3.prcessBody();
                    _0x4a5f5e = _0x4d69f3.CatchPetDatas.pet.talent;
                    _0xc5717 = _0x4d69f3.CatchPetDatas.pet.getTime;
                  }
                  if (_0xc5717.toString().length > 0) {
                    const _0x19d8bf = {
                      getTime: _0xc5717
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x19d8bf);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("小鳍鱼") !== -1) {
                  await wait(200);
                  let _0x6eac4e = new MapCatch();
                  _0x6eac4e.capIds = [4001, 4002];
                  _0x6eac4e.levelIds = [10];
                  _0x6eac4e.catchCounts = 1;
                  _0x6eac4e.stopTalent = 31;
                  await _0x6eac4e.prcessBody();
                  let _0xabb6fb = _0x6eac4e.CatchPetDatas.pet.talent;
                  let _0x528413 = _0x6eac4e.CatchPetDatas.pet.getTime;
                  while (_0xabb6fb > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x1b60ea = new MapCatch();
                    _0x1b60ea.capIds = [4001, 4002];
                    _0x1b60ea.levelIds = [10];
                    _0x1b60ea.catchCounts = 1;
                    _0x1b60ea.stopTalent = 31;
                    await _0x1b60ea.prcessBody();
                    _0xabb6fb = _0x1b60ea.CatchPetDatas.pet.talent;
                    _0x528413 = _0x1b60ea.CatchPetDatas.pet.getTime;
                  }
                  if (_0x528413.toString().length > 0) {
                    const _0x9e0bf7 = {
                      getTime: _0x528413
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x9e0bf7);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("吉尔") !== -1) {
                  await wait(200);
                  let _0xbf994 = new MapCatch();
                  _0xbf994.capIds = [4001, 4002];
                  _0xbf994.levelIds = [13];
                  _0xbf994.catchCounts = 1;
                  _0xbf994.stopTalent = 31;
                  await _0xbf994.prcessBody();
                  let _0x2b16ef = _0xbf994.CatchPetDatas.pet.talent;
                  let _0x123c1e = _0xbf994.CatchPetDatas.pet.getTime;
                  while (_0x2b16ef > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x2cda38 = new MapCatch();
                    _0x2cda38.capIds = [4001, 4002];
                    _0x2cda38.levelIds = [13];
                    _0x2cda38.catchCounts = 1;
                    _0x2cda38.stopTalent = 31;
                    await _0x2cda38.prcessBody();
                    _0x2b16ef = _0x2cda38.CatchPetDatas.pet.talent;
                    _0x123c1e = _0x2cda38.CatchPetDatas.pet.getTime;
                  }
                  if (_0x123c1e.toString().length > 0) {
                    const _0x4be430 = {
                      getTime: _0x123c1e
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x4be430);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("火炎贝") !== -1) {
                  await wait(200);
                  let _0x161d9f = new MapCatch();
                  _0x161d9f.capIds = [4001, 4002];
                  _0x161d9f.levelIds = [12];
                  _0x161d9f.catchCounts = 1;
                  _0x161d9f.stopTalent = 31;
                  await _0x161d9f.prcessBody();
                  let _0x30ef4b = _0x161d9f.CatchPetDatas.pet.talent;
                  let _0x3b2698 = _0x161d9f.CatchPetDatas.pet.getTime;
                  while (_0x30ef4b > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x5becbd = new MapCatch();
                    _0x5becbd.capIds = [4001, 4002];
                    _0x5becbd.levelIds = [12];
                    _0x5becbd.catchCounts = 1;
                    _0x5becbd.stopTalent = 31;
                    await _0x5becbd.prcessBody();
                    _0x30ef4b = _0x5becbd.CatchPetDatas.pet.talent;
                    _0x3b2698 = _0x5becbd.CatchPetDatas.pet.getTime;
                  }
                  if (_0x3b2698.toString().length > 0) {
                    const _0x320b1e = {
                      getTime: _0x3b2698
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x320b1e);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("巴多") !== -1) {
                  await wait(200);
                  let _0x4efad0 = new MapCatch();
                  _0x4efad0.capIds = [4001, 4002];
                  _0x4efad0.levelIds = [72];
                  _0x4efad0.catchCounts = 1;
                  _0x4efad0.stopTalent = 31;
                  await _0x4efad0.prcessBody();
                  let _0x5931cf = _0x4efad0.CatchPetDatas.pet.talent;
                  let _0x161c93 = _0x4efad0.CatchPetDatas.pet.getTime;
                  while (_0x5931cf > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x11dc5f = new MapCatch();
                    _0x11dc5f.capIds = [4001, 4002];
                    _0x11dc5f.levelIds = [72];
                    _0x11dc5f.catchCounts = 1;
                    _0x11dc5f.stopTalent = 31;
                    await _0x11dc5f.prcessBody();
                    _0x5931cf = _0x11dc5f.CatchPetDatas.pet.talent;
                    _0x161c93 = _0x11dc5f.CatchPetDatas.pet.getTime;
                  }
                  if (_0x161c93.toString().length > 0) {
                    const _0x12c73c = {
                      getTime: _0x161c93
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x12c73c);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("卡卡") !== -1) {
                  await wait(200);
                  let _0x11bf73 = new MapCatch();
                  _0x11bf73.capIds = [4001, 4002];
                  _0x11bf73.levelIds = [21];
                  _0x11bf73.catchCounts = 1;
                  _0x11bf73.stopTalent = 31;
                  await _0x11bf73.prcessBody();
                  let _0x18eaa6 = _0x11bf73.CatchPetDatas.pet.talent;
                  let _0x489aa4 = _0x11bf73.CatchPetDatas.pet.getTime;
                  while (_0x18eaa6 > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x2b7a59 = new MapCatch();
                    _0x2b7a59.capIds = [4001, 4002];
                    _0x2b7a59.levelIds = [21];
                    _0x2b7a59.catchCounts = 1;
                    _0x2b7a59.stopTalent = 31;
                    await _0x2b7a59.prcessBody();
                    _0x18eaa6 = _0x2b7a59.CatchPetDatas.pet.talent;
                    _0x489aa4 = _0x2b7a59.CatchPetDatas.pet.getTime;
                  }
                  if (_0x489aa4.toString().length > 0) {
                    const _0x4db3c6 = {
                      getTime: _0x489aa4
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x4db3c6);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("玄冰兽") !== -1) {
                  await wait(200);
                  let _0x1d9c03 = new MapCatch();
                  _0x1d9c03.capIds = [4001, 4002];
                  _0x1d9c03.levelIds = [22];
                  _0x1d9c03.catchCounts = 1;
                  _0x1d9c03.stopTalent = 31;
                  await _0x1d9c03.prcessBody();
                  let _0x3b25d5 = _0x1d9c03.CatchPetDatas.pet.talent;
                  let _0x33490d = _0x1d9c03.CatchPetDatas.pet.getTime;
                  while (_0x3b25d5 > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x5807dc = new MapCatch();
                    _0x5807dc.capIds = [4001, 4002];
                    _0x5807dc.levelIds = [22];
                    _0x5807dc.catchCounts = 1;
                    _0x5807dc.stopTalent = 31;
                    await _0x5807dc.prcessBody();
                    _0x3b25d5 = _0x5807dc.CatchPetDatas.pet.talent;
                    _0x33490d = _0x5807dc.CatchPetDatas.pet.getTime;
                  }
                  if (_0x33490d.toString().length > 0) {
                    const _0x4326cb = {
                      getTime: _0x33490d
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x4326cb);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("幽浮") !== -1) {
                  await wait(200);
                  let _0x411780 = new MapCatch();
                  _0x411780.capIds = [4001, 4002];
                  _0x411780.levelIds = [34];
                  _0x411780.catchCounts = 1;
                  _0x411780.stopTalent = 31;
                  await _0x411780.prcessBody();
                  let _0x5d1a1e = _0x411780.CatchPetDatas.pet.talent;
                  let _0x433a90 = _0x411780.CatchPetDatas.pet.getTime;
                  while (_0x5d1a1e > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x52a750 = new MapCatch();
                    _0x52a750.capIds = [4001, 4002];
                    _0x52a750.levelIds = [34];
                    _0x52a750.catchCounts = 1;
                    _0x52a750.stopTalent = 31;
                    await _0x52a750.prcessBody();
                    _0x5d1a1e = _0x52a750.CatchPetDatas.pet.talent;
                    _0x433a90 = _0x52a750.CatchPetDatas.pet.getTime;
                  }
                  if (_0x433a90.toString().length > 0) {
                    const _0x1887ec = {
                      getTime: _0x433a90
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x1887ec);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("丁格") !== -1) {
                  await wait(200);
                  let _0x23f8bd = new MapCatch();
                  _0x23f8bd.capIds = [4001, 4002];
                  _0x23f8bd.levelIds = [60];
                  _0x23f8bd.catchCounts = 1;
                  _0x23f8bd.stopTalent = 31;
                  await _0x23f8bd.prcessBody();
                  let _0x67707f = _0x23f8bd.CatchPetDatas.pet.talent;
                  let _0x3da7b2 = _0x23f8bd.CatchPetDatas.pet.getTime;
                  while (_0x67707f > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x117428 = new MapCatch();
                    _0x117428.capIds = [4001, 4002];
                    _0x117428.levelIds = [60];
                    _0x117428.catchCounts = 1;
                    _0x117428.stopTalent = 31;
                    await _0x117428.prcessBody();
                    _0x67707f = _0x117428.CatchPetDatas.pet.talent;
                    _0x3da7b2 = _0x117428.CatchPetDatas.pet.getTime;
                  }
                  if (_0x3da7b2.toString().length > 0) {
                    const _0xc51713 = {
                      getTime: _0x3da7b2
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0xc51713);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("卡西") !== -1) {
                  await wait(200);
                  let _0x3d56c5 = new MapCatch();
                  _0x3d56c5.capIds = [4001, 4002];
                  _0x3d56c5.levelIds = [62];
                  _0x3d56c5.catchCounts = 1;
                  _0x3d56c5.stopTalent = 31;
                  await _0x3d56c5.prcessBody();
                  let _0x7f6d40 = _0x3d56c5.CatchPetDatas.pet.talent;
                  let _0x447c7b = _0x3d56c5.CatchPetDatas.pet.getTime;
                  while (_0x7f6d40 > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x232059 = new MapCatch();
                    _0x232059.capIds = [4001, 4002];
                    _0x232059.levelIds = [62];
                    _0x232059.catchCounts = 1;
                    _0x232059.stopTalent = 31;
                    await _0x232059.prcessBody();
                    _0x7f6d40 = _0x232059.CatchPetDatas.pet.talent;
                    _0x447c7b = _0x232059.CatchPetDatas.pet.getTime;
                  }
                  if (_0x447c7b.toString().length > 0) {
                    const _0x10aa50 = {
                      getTime: _0x447c7b
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x10aa50);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("莫顿") !== -1) {
                  await wait(200);
                  let _0x11b065 = new MapCatch();
                  _0x11b065.capIds = [4001, 4002];
                  _0x11b065.levelIds = [64];
                  _0x11b065.catchCounts = 1;
                  _0x11b065.stopTalent = 31;
                  await _0x11b065.prcessBody();
                  let _0x36e9fb = _0x11b065.CatchPetDatas.pet.talent;
                  let _0x22fbcf = _0x11b065.CatchPetDatas.pet.getTime;
                  while (_0x36e9fb > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x1ab8d5 = new MapCatch();
                    _0x1ab8d5.capIds = [4001, 4002];
                    _0x1ab8d5.levelIds = [64];
                    _0x1ab8d5.catchCounts = 1;
                    _0x1ab8d5.stopTalent = 31;
                    await _0x1ab8d5.prcessBody();
                    _0x36e9fb = _0x1ab8d5.CatchPetDatas.pet.talent;
                    _0x22fbcf = _0x1ab8d5.CatchPetDatas.pet.getTime;
                  }
                  if (_0x22fbcf.toString().length > 0) {
                    const _0xd2e346 = {
                      getTime: _0x22fbcf
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0xd2e346);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("依依") !== -1) {
                  await wait(200);
                  let _0x5baf9c = new MapCatch();
                  _0x5baf9c.capIds = [4001, 4002];
                  _0x5baf9c.levelIds = [360];
                  _0x5baf9c.catchCounts = 1;
                  _0x5baf9c.stopTalent = 31;
                  await _0x5baf9c.prcessBody();
                  let _0x30ef08 = _0x5baf9c.CatchPetDatas.pet.talent;
                  let _0x19bf03 = _0x5baf9c.CatchPetDatas.pet.getTime;
                  while (_0x30ef08 > localStorage.getItem("cptalent")) {
                    await wait(200);
                    let _0x4c0602 = new MapCatch();
                    _0x4c0602.capIds = [4001, 4002];
                    _0x4c0602.levelIds = [1];
                    _0x4c0602.catchCounts = 1;
                    _0x4c0602.stopTalent = 31;
                    await _0x4c0602.prcessBody();
                    _0x30ef08 = _0x4c0602.CatchPetDatas.pet.talent;
                    _0x19bf03 = _0x4c0602.CatchPetDatas.pet.getTime;
                  }
                  if (_0x19bf03.toString().length > 0) {
                    const _0x48db79 = {
                      getTime: _0x19bf03
                    };
                    await this.send_message("cs_pet_research_submit_pet", _0x48db79);
                  } else {
                    addGameLog("没有胶囊没抓到精灵");
                    this.stop();
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("毛毛") !== -1) {
                  let _0x204424 = false;
                  while (true) {
                    if (UserManager.getInstance().userInfo.curEnergy < 5) {
                      MFC.alert.show("电池不足,任务取消!");
                      addGameLog("电池不足,任务取消!");
                      this.stop();
                    }
                    this.CatchPetDatas = null;
                    await wait(200);
                    let _0x40659e = new LevelCatch();
                    _0x40659e.capIds = [4001, 4002];
                    _0x40659e.catchCounts = 1;
                    _0x40659e.stopTalent = 31;
                    _0x40659e.levelId = 27;
                    if (localStorage.getItem("allincatch")) {
                      _0x40659e.petIds = ["22", "26", "249", "153", "53"];
                    } else {
                      _0x40659e.petIds = ["22", "249"];
                    }
                    await _0x40659e.prcessBody();
                    let _0x524fd3 = _0x40659e.CatchPetDatas.pet.talent;
                    let _0xe82943 = _0x40659e.CatchPetDatas.pet.getTime;
                    let _0x1de019 = _0x40659e.CatchPetDatas.pet.nick;
                    if (_0x1de019.indexOf("毛毛") !== -1) {
                      const _0x2f7fda = {
                        getTime: _0xe82943
                      };
                      await this.send_message("cs_pet_research_submit_pet", _0x2f7fda);
                      break;
                    }
                    while (_0x524fd3 > localStorage.getItem("cptalent")) {
                      this.CatchPetDatas = null;
                      await wait(200);
                      let _0x55d27e = new LevelCatch();
                      _0x55d27e.capIds = [4001, 4002];
                      _0x55d27e.catchCounts = 1;
                      _0x55d27e.stopTalent = 31;
                      _0x55d27e.levelId = 27;
                      _0x55d27e.addCount = 0;
                      if (localStorage.getItem("allincatch")) {
                        _0x55d27e.petIds = ["22", "26", "249", "153", "53"];
                      } else {
                        _0x55d27e.petIds = ["22", "249"];
                      }
                      await _0x55d27e.prcessBody();
                      _0x524fd3 = _0x55d27e.CatchPetDatas.pet.talent;
                      _0xe82943 = _0x55d27e.CatchPetDatas.pet.getTime;
                      _0x1de019 = _0x55d27e.CatchPetDatas.pet.nick;
                      if (_0x1de019.indexOf("毛毛") !== -1) {
                        _0x204424 = true;
                        break;
                      }
                    }
                    if (_0x204424) {
                      const _0x355c01 = {
                        getTime: _0xe82943
                      };
                      await this.send_message("cs_pet_research_submit_pet", _0x355c01);
                      break;
                    }
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("浮空苗") !== -1) {
                  let _0x27362a = false;
                  while (true) {
                    if (UserManager.getInstance().userInfo.curEnergy < 5) {
                      MFC.alert.show("电池不足,任务取消!");
                      addGameLog("电池不足,任务取消!");
                      this.stop();
                    }
                    this.CatchPetDatas = null;
                    await wait(200);
                    let _0x4bdf06 = new LevelCatch();
                    _0x4bdf06.capIds = [4001, 4002];
                    _0x4bdf06.catchCounts = 1;
                    _0x4bdf06.stopTalent = 31;
                    _0x4bdf06.levelId = 27;
                    if (localStorage.getItem("allincatch")) {
                      _0x4bdf06.petIds = ["22", "26", "249", "153", "53"];
                    } else {
                      _0x4bdf06.petIds = ["22", "249"];
                    }
                    await _0x4bdf06.prcessBody();
                    let _0x4455c5 = _0x4bdf06.CatchPetDatas.pet.talent;
                    let _0x5aa7c4 = _0x4bdf06.CatchPetDatas.pet.getTime;
                    let _0x7dda83 = _0x4bdf06.CatchPetDatas.pet.nick;
                    logger(_0x7dda83);
                    if (_0x7dda83.indexOf("浮空苗") !== -1) {
                      const _0x1bbb9d = {
                        getTime: _0x5aa7c4
                      };
                      await this.send_message("cs_pet_research_submit_pet", _0x1bbb9d);
                      break;
                    }
                    while (_0x4455c5 > localStorage.getItem("cptalent")) {
                      this.CatchPetDatas = null;
                      await wait(200);
                      let _0xe340b0 = new LevelCatch();
                      _0xe340b0.capIds = [4001, 4002];
                      _0xe340b0.catchCounts = 1;
                      _0xe340b0.stopTalent = 31;
                      _0xe340b0.levelId = 27;
                      _0xe340b0.addCount = 0;
                      if (localStorage.getItem("allincatch")) {
                        _0xe340b0.petIds = ["22", "26", "249", "153", "53"];
                      } else {
                        _0xe340b0.petIds = ["22", "249"];
                      }
                      await _0xe340b0.prcessBody();
                      _0x4455c5 = _0xe340b0.CatchPetDatas.pet.talent;
                      _0x5aa7c4 = _0xe340b0.CatchPetDatas.pet.getTime;
                      _0x7dda83 = _0xe340b0.CatchPetDatas.pet.nick;
                      if (_0x7dda83.indexOf("浮空苗") !== -1) {
                        _0x27362a = true;
                        break;
                      }
                    }
                    if (_0x27362a) {
                      const _0x38f346 = {
                        getTime: _0x5aa7c4
                      };
                      await this.send_message("cs_pet_research_submit_pet", _0x38f346);
                      break;
                    }
                  }
                }
                if (_0x4e76e1[_0x166f5f].petName.indexOf("米隆") !== -1) {
                  let _0x2941ce = false;
                  while (true) {
                    if (UserManager.getInstance().userInfo.curEnergy < 5) {
                      MFC.alert.show("电池不足,任务取消!");
                      addGameLog("电池不足,任务取消!");
                      this.stop();
                    }
                    this.CatchPetDatas = null;
                    await wait(200);
                    let _0x5ec932 = new LevelCatch();
                    _0x5ec932.capIds = [4001, 4002];
                    _0x5ec932.catchCounts = 1;
                    _0x5ec932.stopTalent = 31;
                    _0x5ec932.levelId = 34;
                    if (localStorage.getItem("allincatch")) {
                      _0x5ec932.petIds = ["107", "99", "236", "64"];
                    } else {
                      _0x5ec932.petIds = ["236"];
                    }
                    await _0x5ec932.prcessBody();
                    let _0x599eda = _0x5ec932.CatchPetDatas.pet.talent;
                    let _0x20e183 = _0x5ec932.CatchPetDatas.pet.getTime;
                    let _0xac1bb = _0x5ec932.CatchPetDatas.pet.nick;
                    logger(_0xac1bb);
                    if (_0xac1bb.indexOf("米隆") !== -1) {
                      const _0x391b78 = {
                        getTime: _0x20e183
                      };
                      await this.send_message("cs_pet_research_submit_pet", _0x391b78);
                      break;
                    }
                    while (_0x599eda > localStorage.getItem("cptalent")) {
                      this.CatchPetDatas = null;
                      await wait(200);
                      let _0x3cb211 = new LevelCatch();
                      _0x3cb211.capIds = [4001, 4002];
                      _0x3cb211.catchCounts = 1;
                      _0x3cb211.stopTalent = 31;
                      _0x3cb211.levelId = 34;
                      _0x3cb211.addCount = 0;
                      if (localStorage.getItem("allincatch")) {
                        _0x3cb211.petIds = ["107", "99", "236", "64"];
                      } else {
                        _0x3cb211.petIds = ["236"];
                      }
                      await _0x3cb211.prcessBody();
                      _0x599eda = _0x3cb211.CatchPetDatas.pet.talent;
                      _0x20e183 = _0x3cb211.CatchPetDatas.pet.getTime;
                      _0xac1bb = _0x3cb211.CatchPetDatas.pet.nick;
                      if (_0xac1bb.indexOf("米隆") !== -1) {
                        _0x2941ce = true;
                        break;
                      }
                    }
                    if (_0x2941ce) {
                      const _0x90330a = {
                        getTime: _0x20e183
                      };
                      await this.send_message("cs_pet_research_submit_pet", _0x90330a);
                      break;
                    }
                  }
                }
              }
            }
            _0x2f74fb = MFC.attr.getAttr(MFC.attrType.dailyPetResearchFinishStatus);
            if (_0x2f74fb >= 3) {
              if (_0x2f74fb >= 4) {
                addGameLog("宝箱已经打开");
                MFC.bubbleAlert.showAlert("今天任务已经完成，不能再提交精灵了！");
                this.stop();
              }
              await this.send_message("cs_pet_research_get_reward", {});
              MFC.bubbleAlert.showAlert("今天任务已经完成，不能再提交精灵了！");
              this.stop();
            }
            if (MFC.attr.getAttr(MFC.attrType.foreverPetResearchFinishTimes) >= 7) {
              await this.send_message("cs_pet_research_get_reward", {
                is7d: 1
              });
            }
            addGameLog("精灵研究计划完成");
            this.stop();
          }
        }
      } else {
        MFC.bubbleAlert.showAlert("活动已结束！");
        this.stop();
      }
    } catch (_0x83167d) {
      logger(_0x83167d);
    }
  }
}
class Timetask extends SuperTask {
  constructor() {
    super();
    this.nowName = "精灵探索";
    this.type = null;
    this.task = [];
  }
  start() {
    super.start();
    let _0x45d41f = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x1f256b = [];
      var _0x962e9e = SimpleAlertUi({
        height: 350,
        width: 400
      });
      _0x45d41f.alertWin = _0x962e9e;
      const _0x590634 = {
        text: "精灵探索小分队",
        x: _0x962e9e.applicationWidth / 2 - 35,
        y: _0x962e9e.height / 15
      };
      let _0x669d98 = createLabel(_0x590634);
      _0x669d98.size = 20;
      _0x1f256b.push(_0x669d98);
      const _0x357595 = {
        x: 70,
        y: _0x669d98.y + 50,
        width: 100,
        prompt: "输入系别",
        storageKey: "text"
      };
      var _0x5dc538 = createEdit(_0x357595);
      _0x1f256b.push(_0x5dc538);
      const _0x52d0e7 = {
        text: "比如草系就输入草\n双属性输入水超",
        x: _0x5dc538.x + _0x5dc538.width + 50,
        y: _0x5dc538.y
      };
      let _0x39dd15 = createLabel(_0x52d0e7);
      _0x1f256b.push(_0x39dd15);
      const _0x37a7a1 = {
        text: "初级",
        x: _0x962e9e.width / 2 - 60,
        y: _0x5dc538.y + 60
      };
      let _0x3d8f71 = createLabel(_0x37a7a1);
      _0x3d8f71.size = 20;
      _0x1f256b.push(_0x3d8f71);
      const _0x599832 = {
        x: _0x3d8f71.x + 70,
        y: _0x3d8f71.y,
        selected: true,
        storageKey: "cjpq"
      };
      let _0x3f3d4e = createToggle(_0x599832);
      _0x1f256b.push(_0x3f3d4e);
      const _0x50a860 = {
        text: "中级",
        x: _0x3d8f71.x,
        y: _0x3d8f71.y + 40
      };
      let _0x3e2e5d = createLabel(_0x50a860);
      _0x3e2e5d.size = 20;
      _0x1f256b.push(_0x3e2e5d);
      const _0x5861c9 = {
        x: _0x3e2e5d.x + 70,
        y: _0x3e2e5d.y,
        selected: true,
        storageKey: "zjpq"
      };
      let _0x329f79 = createToggle(_0x5861c9);
      _0x1f256b.push(_0x329f79);
      const _0x49598c = {
        text: "高级",
        x: _0x3d8f71.x,
        y: _0x3e2e5d.y + 40
      };
      let _0x4e4ebb = createLabel(_0x49598c);
      _0x4e4ebb.size = 20;
      _0x1f256b.push(_0x4e4ebb);
      const _0x35ae37 = {
        x: _0x4e4ebb.x + 70,
        y: _0x4e4ebb.y,
        selected: true,
        storageKey: "gjpq"
      };
      let _0x105267 = createToggle(_0x35ae37);
      _0x1f256b.push(_0x105267);
      _0x45d41f.addAllUis(_0x1f256b);
      _0x962e9e.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x45d41f.stop();
      }, function () {
        localStorage.setItem("cjpq", _0x3f3d4e.selected);
        localStorage.setItem("zjpq", _0x329f79.selected);
        localStorage.setItem("gjpq", _0x105267.selected);
        localStorage.setItem("text", _0x5dc538.text);
        if (_0x5dc538.text.length == 0 || _0x5dc538.text.indexOf("系") != -1) {
          MFC.bubbleAlert.showAlert("请输入有效系别");
          return true;
        } else if (petConfig.ElemTypesConfig.getSingleType().filter(function (_0x9e4e6a) {
          return _0x9e4e6a.cn.indexOf(_0x5dc538.text) !== -1;
        }).length == 0 && petConfig.ElemTypesConfig.getDoubbleType().filter(function (_0x5e4a01) {
          return _0x5e4a01.cn.indexOf(_0x5dc538.text) !== -1;
        }).length == 0) {
          MFC.bubbleAlert.showAlert("有效系别没有" + _0x5dc538.text);
          return true;
        }
        if (_0x3f3d4e.selected && _0x329f79.selected && _0x105267.selected || _0x3f3d4e.selected && _0x329f79.selected || _0x3f3d4e.selected && _0x105267.selected || _0x329f79.selected && _0x105267.selected) {
          MFC.bubbleAlert.showAlert("只能勾选一个等级");
          return true;
        }
        if (_0x3f3d4e.selected == false && _0x329f79.selected == false && _0x105267.selected == false) {
          MFC.bubbleAlert.showAlert("请勾选一个等级");
          return true;
        }
        _0x45d41f.type = _0x5dc538.text.toString();
        if (_0x3f3d4e.selected) {
          _0x45d41f.task[0] = 1;
          addGameLog("已选择" + _0x5dc538.text + "初级");
        }
        if (_0x329f79.selected) {
          _0x45d41f.task[1] = 1;
          addGameLog("已选择" + _0x5dc538.text + "中级");
        }
        if (_0x105267.selected) {
          _0x45d41f.task[2] = 1;
          addGameLog("已选择" + _0x5dc538.text + "高级");
        }
        _0x45d41f.prcessBody();
      }], null);
      _0x962e9e.showAlert();
    });
  }
  async prcessBody() {
    try {
      let _0x203a9a;
      let _0x4cc70d = this.type.toString();
      let _0x153c40 = await this.send_message("cs_get_pet_explore_list", {});
      if (_0x153c40.petExploreList[0] || _0x153c40.petExploreList[1]) {
        if (MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdStart) > 0) {
          addGameLog("普通委派已放置");
          if (_0x153c40.petExploreList[0].endTime * 1000 - MFC.serverTimer.date.getTime() > 0) {
            addGameLog("普通委派正在进行");
          } else {
            addGameLog("领取普通委派");
            await this.send_message("cs_get_pet_explore_back", {
              petPosition: 0
            });
          }
        }
        if (MFC.userInfo.vipLevel !== 0) {
          if (MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdEnd) > 0) {
            addGameLog("超no委派已放置");
            if (_0x153c40.petExploreList[1].endTime * 1000 - MFC.serverTimer.date.getTime() > 0) {
              addGameLog("超no委派正在进行");
            } else {
              addGameLog("领取超no委派");
              await this.send_message("cs_get_pet_explore_back", {
                petPosition: 1
              });
            }
          }
        }
      }
      if (this.task[0]) {
        _0x203a9a = PetManager.getInstance().getAllPets().filter(function (_0x12b2ee) {
          return _0x12b2ee.level >= 20 && _0x12b2ee.level < 40 && _0x12b2ee.getTime != MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdStart) && _0x12b2ee.getTime != MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdEnd) && petConfig.ElemTypesConfig.getDef(PetConfig.getDef(_0x12b2ee.petId).elemType).cn.replace(/\s/g, "").indexOf(_0x4cc70d.toString()) !== -1 && MFC.userInfo.defaultTeam.indexOf(_0x12b2ee.getTime) == -1 && MFC.userInfo.defaultTeam1.indexOf(_0x12b2ee.getTime) == -1 && MFC.userInfo.defaultTeam2.indexOf(_0x12b2ee.getTime) == -1 && MFC.userInfo.defaultTeam3.indexOf(_0x12b2ee.getTime) == -1 && MFC.userInfo.defaultTeam4.indexOf(_0x12b2ee.getTime) == -1 && MFC.userInfo.defaultTeam5.indexOf(_0x12b2ee.getTime) == -1 && MFC.userInfo.defaultTeam6.indexOf(_0x12b2ee.getTime) == -1 && MFC.userInfo.campaignDefaultTeam.indexOf(_0x12b2ee.getTime) == -1 && MFC.userInfo.expeditionTeam.indexOf(_0x12b2ee.getTime) == -1;
        });
      }
      if (this.task[1]) {
        _0x203a9a = PetManager.getInstance().getAllPets().filter(function (_0x35cda0) {
          return _0x35cda0.level >= 40 && _0x35cda0.level < 60 && _0x35cda0.getTime != MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdStart) && _0x35cda0.getTime != MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdEnd) && petConfig.ElemTypesConfig.getDef(PetConfig.getDef(_0x35cda0.petId).elemType).cn.replace(/\s/g, "").indexOf(_0x4cc70d.toString()) !== -1 && MFC.userInfo.defaultTeam.indexOf(_0x35cda0.getTime) == -1 && MFC.userInfo.defaultTeam1.indexOf(_0x35cda0.getTime) == -1 && MFC.userInfo.defaultTeam2.indexOf(_0x35cda0.getTime) == -1 && MFC.userInfo.defaultTeam3.indexOf(_0x35cda0.getTime) == -1 && MFC.userInfo.defaultTeam4.indexOf(_0x35cda0.getTime) == -1 && MFC.userInfo.defaultTeam5.indexOf(_0x35cda0.getTime) == -1 && MFC.userInfo.defaultTeam6.indexOf(_0x35cda0.getTime) == -1 && MFC.userInfo.campaignDefaultTeam.indexOf(_0x35cda0.getTime) == -1 && MFC.userInfo.expeditionTeam.indexOf(_0x35cda0.getTime) == -1;
        });
      }
      if (this.task[2]) {
        _0x203a9a = PetManager.getInstance().getAllPets().filter(function (_0x408875) {
          return _0x408875.level >= 60 && _0x408875.level <= 100 && _0x408875.getTime != MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdStart) && _0x408875.getTime != MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdEnd) && petConfig.ElemTypesConfig.getDef(PetConfig.getDef(_0x408875.petId).elemType).cn.replace(/\s/g, "").indexOf(_0x4cc70d.toString()) !== -1 && MFC.userInfo.defaultTeam.indexOf(_0x408875.getTime) == -1 && MFC.userInfo.defaultTeam1.indexOf(_0x408875.getTime) == -1 && MFC.userInfo.defaultTeam2.indexOf(_0x408875.getTime) == -1 && MFC.userInfo.defaultTeam3.indexOf(_0x408875.getTime) == -1 && MFC.userInfo.defaultTeam4.indexOf(_0x408875.getTime) == -1 && MFC.userInfo.defaultTeam5.indexOf(_0x408875.getTime) == -1 && MFC.userInfo.defaultTeam6.indexOf(_0x408875.getTime) == -1 && MFC.userInfo.campaignDefaultTeam.indexOf(_0x408875.getTime) == -1 && MFC.userInfo.expeditionTeam.indexOf(_0x408875.getTime) == -1;
        });
      }
      if (_0x203a9a.filter(_0xe2a34e => _0xe2a34e !== undefined).length == 0) {
        addGameLog("该系别没放置背包的等级宠物数量为0");
        this.stop();
      }
      if (!_0x153c40.petExploreList[0] && !_0x153c40.petExploreList[1]) {
        addGameLog("没有派遣任务正在进行");
        if (MFC.userInfo.vipLevel == 0) {
          addGameLog("没有VIP,只派遣普通探索");
          const _0x29785d = {
            petGetTime: _0x203a9a[0].getTime,
            explorePosition: 0
          };
          await this.send_message("cs_pet_explore", _0x29785d);
          addGameLog("放置" + _0x203a9a[0].nick);
        } else if (_0x203a9a.length < 2) {
          addGameLog("该属性精灵只有1只,只进行普通派遣");
          const _0x144b1a = {
            petGetTime: _0x203a9a[0].getTime,
            explorePosition: 0
          };
          await this.send_message("cs_pet_explore", _0x144b1a);
          addGameLog("放置" + _0x203a9a[0].nick);
        } else {
          const _0x704d42 = {
            petGetTime: _0x203a9a[0].getTime,
            explorePosition: 0
          };
          await this.send_message("cs_pet_explore", _0x704d42);
          const _0x10cffe = {
            petGetTime: _0x203a9a[1].getTime,
            explorePosition: 1
          };
          await this.send_message("cs_pet_explore", _0x10cffe);
          addGameLog("放置" + _0x203a9a[0].nick);
          addGameLog("放置" + _0x203a9a[1].nick);
        }
      } else {
        if (MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdStart) > 0) {
          addGameLog("普通委派已放置");
          if (_0x153c40.petExploreList[0].endTime * 1000 - MFC.serverTimer.date.getTime() > 0) {
            addGameLog("普通委派正在进行");
          } else {
            addGameLog("领取普通委派");
            await this.send_message("cs_get_pet_explore_back", {
              petPosition: 0
            });
            await wait(500);
            const _0x1cefae = {
              petGetTime: _0x203a9a[0].getTime,
              explorePosition: 0
            };
            await this.send_message("cs_pet_explore", _0x1cefae);
            addGameLog("放置" + _0x203a9a[0].nick);
          }
        } else {
          addGameLog("普通委派未放置");
          await wait(500);
          const _0x262a42 = {
            petGetTime: _0x203a9a[0].getTime,
            explorePosition: 0
          };
          await this.send_message("cs_pet_explore", _0x262a42);
          addGameLog("放置" + _0x203a9a[0].nick);
        }
        if (MFC.userInfo.vipLevel == 0) {
          addGameLog("没有VIP,只派遣普通探索");
        } else if (MFC.attr.getAttr(MFC.attrType.foreverPetExploreIdEnd) > 0) {
          addGameLog("超no委派已放置");
          if (_0x153c40.petExploreList[1].endTime * 1000 - MFC.serverTimer.date.getTime() > 0) {
            addGameLog("超no委派正在进行");
          } else {
            addGameLog("领取超no委派");
            await this.send_message("cs_get_pet_explore_back", {
              petPosition: 1
            });
            await wait(500);
            const _0x4e038f = {
              petGetTime: _0x203a9a[1].getTime,
              explorePosition: 1
            };
            await this.send_message("cs_pet_explore", _0x4e038f);
            addGameLog("放置" + _0x203a9a[1].nick);
          }
        } else {
          addGameLog("超no委派未放置");
          await wait(500);
          const _0x588385 = {
            petGetTime: _0x203a9a[1].getTime,
            explorePosition: 1
          };
          await this.send_message("cs_pet_explore", _0x588385);
          addGameLog("放置" + _0x203a9a[1].nick);
        }
      }
      addGameLog("精灵探索小分队完成");
      this.stop();
    } catch (_0x39793d) {}
  }
}
class MergeHelper extends SuperTask {
  constructor() {
    super();
    this.nowName = "融合扫荡";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
    this.fightCount = 0;
    this.userBattry;
    this.goalItem;
    this.levelId;
    this.levelName;
    this.userBattryAll = 0;
  }
  start() {
    super.start();
    let _0xf56c8 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x2056e6 = SimpleAlertUi({});
      let _0x5add62 = createLabel({
        text: "确定进行扫荡吗?",
        y: 25
      });
      _0x5add62.x = _0x2056e6.width / 2 - _0x5add62.width / 2;
      _0x2056e6.addChild(_0x5add62);
      const _0x3819ca = {
        text: "预计获取" + _0xf56c8.goalItem.name + "数量: " + _0xf56c8.goalItem.needNum,
        y: _0x5add62.y + _0x5add62.height + 15
      };
      let _0x3ab3b7 = createLabel(_0x3819ca);
      _0x3ab3b7.x = _0x2056e6.width / 2 - _0x3ab3b7.width / 2;
      _0x2056e6.addChild(_0x3ab3b7);
      _0x2056e6.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0xf56c8.stop();
      }, function () {
        _0xf56c8.prcessBody();
      }], null);
      _0x2056e6.showAlert();
    });
  }
  async prcessBody() {
    let _0x182d06 = {};
    let _0x3d5bdc = 0;
    let _0x15c179 = 0;
    try {
      addGameLog("开始进行扫荡: " + this.levelName);
      while (1) {
        if (UserManager.getInstance().userInfo.curEnergy >= this.userBattry) {
          let _0x3fad86 = await this.send_message("cs_sd_pve_battle", {
            levelId: this.levelId,
            loop: 1
          });
          _0x3d5bdc = _0x3d5bdc + 1;
          await wait(300);
          let _0x343728 = _0x3fad86.dropInfo.drops[0].itemList;
          let _0x49198d = "";
          _0x343728.forEach(_0x331ee3 => {
            _0x49198d = _0x49198d + "\n" + xls.item.getItem(_0x331ee3.itemId).name + "数量 :" + _0x331ee3.itemNum;
            if (!_0x182d06.hasOwnProperty(_0x331ee3.itemId)) {
              _0x182d06[_0x331ee3.itemId + ""] = _0x331ee3.itemNum;
            } else {
              _0x182d06[_0x331ee3.itemId + ""] = _0x182d06[_0x331ee3.itemId + ""] + _0x331ee3.itemNum;
            }
            if (_0x331ee3.itemId == this.goalItem.itemId) {
              _0x15c179 = _0x15c179 + _0x331ee3.itemNum;
            }
          });
          addGameLog("本次扫荡\n" + _0x49198d);
          addGameLog("========");
          if (_0x15c179 >= this.goalItem.needNum) {
            let _0x28750f = "";
            for (let _0x9c109d in _0x182d06) {
              if (_0x182d06.hasOwnProperty(_0x9c109d)) {
                _0x28750f = _0x28750f + "\n" + xls.item.getItem(_0x9c109d).name + "数量 :" + _0x182d06[_0x9c109d];
              }
            }
            _0x28750f = _0x28750f + "\n花费电池数 :" + _0x3d5bdc * this.userBattry;
            addGameLog("扫荡总计: \n" + _0x28750f);
            break;
          }
        } else {
          addGameLog("电池不足,停止扫荡");
          let _0x895af2 = "";
          for (let _0x619390 in _0x182d06) {
            if (_0x182d06.hasOwnProperty(_0x619390)) {
              _0x895af2 = _0x895af2 + "\n" + xls.item.getItem(_0x619390).name + "数量 :" + _0x182d06[_0x619390];
            }
          }
          _0x895af2 = _0x895af2 + "\n花费电池数 :" + _0x3d5bdc * this.userBattry;
          addGameLog("扫荡总计: \n" + _0x895af2);
          break;
        }
      }
      this.stop();
    } catch (_0x5461dc) {
      let _0x1a8606 = "";
      for (let _0x38c221 in _0x182d06) {
        if (_0x182d06.hasOwnProperty(_0x38c221)) {
          _0x1a8606 = _0x1a8606 + "\n" + xls.item.getItem(_0x38c221).name + "数量 :" + _0x182d06[_0x38c221];
        }
      }
      _0x1a8606 = _0x1a8606 + "\n花费电池数 :" + _0x3d5bdc * this.userBattry;
      addGameLog("扫荡总计: \n" + _0x1a8606);
      this.stop();
    }
  }
}
class Kloswamp extends SuperTask {
  constructor() {
    super();
    this.nowName = "刷水滴";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
  }
  start() {
    super.start();
    let _0x348da3 = this;
    MFC.alert.show("确定进行一键刷水滴吗?(请确保挑战阵容1首位技能是大招)", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x381bcb) {
      _0x348da3.stop();
    }, function (_0x4c493c) {
      _0x348da3.prcessBody();
    }]);
  }
  async waterfight() {
    let _0x134e50 = PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam1[0]).skills[0];
    await this.send_message("cs_pve_activity_battle", {
      levelId: 5,
      battleType: 3
    });
    await this.initBattle();
    let _0x4dbd6c = await this.useSkill(_0x134e50);
    while (_0x4dbd6c.result.result === 0) {
      let _0x393543 = _0x4dbd6c.result.playerInfos.find(_0x82ab8d => _0x82ab8d.uid === MFC.userInfo.uid);
      let _0x52b0e8 = _0x393543 ? _0x393543.nextRoundOP : _0x4dbd6c.result.playerInfos[1].nextRoundOP;
      if (_0x52b0e8 !== 1) {
        addGameLog("首发被击败");
        break;
      }
      if (_0x4dbd6c.result.roundNum > 5) {
        break;
      }
      addGameLog("未击败，继续攻击");
      _0x4dbd6c = await this.useSkill(_0x134e50);
    }
    await wait(300);
  }
  async treefight() {
    let _0x30edee = PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam[0]).skills[0];
    await this.send_message("cs_pve_activity_battle", {
      levelId: [5, 6, 7, 8][Math.floor(Math.random() * 4)],
      battleType: 3
    });
    await this.initBattle();
    let _0x21a3a4 = await this.useSkill(_0x30edee);
    while (_0x21a3a4.result.result === 0) {
      let _0x58f53d = _0x21a3a4.result.playerInfos.find(_0x588c51 => _0x588c51.uid === MFC.userInfo.uid);
      let _0x469001 = _0x58f53d ? _0x58f53d.nextRoundOP : _0x21a3a4.result.playerInfos[1].nextRoundOP;
      if (_0x469001 !== 1) {
        addGameLog("首发被击败");
        break;
      }
      if (_0x21a3a4.result.roundNum > 5) {
        break;
      }
      addGameLog("未击败，继续攻击");
      _0x21a3a4 = await this.useSkill(_0x30edee);
    }
    await wait(300);
  }
  async prcessBody() {
    try {
      let _0x43387f = 0;
      while (true) {
        let _0x5c720f = await this.send_message("cs_get_mapBoss_data", {
          planetId: 1
        });
        _0x43387f = _0x5c720f.reward["6"] + _0x5c720f.reward["7"] + _0x5c720f.reward["8"];
        if (_0x43387f > 4) {
          addGameLog("浇水次数已达上限");
          addGameLog("一键浇水完成");
          break;
        } else if (UserManager.getInstance().userInfo.defaultTeam[0].length == 0) {
          addGameLog("请设置阵容");
          break;
        } else if (getSeerItemNum(100021) == 5) {
          addGameLog("水滴已达上限");
          addGameLog("即将进行浇水");
          await this.send_message("cs_check_enter_battle", {
            type: 17,
            subType: 3,
            bossId: [5, 6, 7, 8][Math.floor(Math.random() * 4)]
          });
          await this.treefight();
        } else {
          await this.waterfight();
        }
      }
      this.stop();
    } catch (_0x2d3869) {}
  }
}
class Ladder extends SuperTask {
  constructor() {
    super();
    this.nowName = "阶梯";
    this.attr = 0;
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
    this.choice = [];
    this.team = [];
    this.rebuff = false;
  }
  start() {
    super.start();
    let _0x1b00bd = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x4c3955 = [];
      var _0x114ae7 = SimpleAlertUi({
        height: 450,
        width: 450
      });
      _0x1b00bd.alertWin = _0x114ae7;
      const _0x1fe2ad = {
        text: "战斗阶梯",
        x: _0x114ae7.width / 2 - 32,
        y: _0x114ae7.height / 16
      };
      var _0xfb9066 = createLabel(_0x1fe2ad);
      _0x4c3955.push(_0xfb9066);
      const _0x4614ad = {
        text: `1.艾姐阵容是艾尔伊洛增幅幻化利刃1号位
  瞬杀光闪击2号
  奥斯卡圣灵击3号(100级)
  绝命火焰4号
  艾姐固伤打不到260有可能在第8卡关哦`,
        x: _0x114ae7.width / 15 + 47,
        y: _0xfb9066.y + _0xfb9066.height + 2,
        textColor: 16776960
      };
      let _0x316724 = createLabel(_0x4614ad);
      _0x4c3955.push(_0x316724);
      const _0x5a1edd = {
        text: `2.塞维尔阵容是塞维尔增幅女王之鞭1号位
  瞬杀光闪击2号
  奥斯卡圣灵击3号(100级)
  绝命火焰4号`,
        x: _0x114ae7.width / 15 + 47,
        y: _0x316724.y + _0x316724.height + 10,
        textColor: 16776960
      };
      let _0x4811ea = createLabel(_0x5a1edd);
      _0x4c3955.push(_0x4811ea);
      const _0xaa90fb = {
        text: `3.最下面阵容是给没有艾姐跟塞维尔的
  瞬杀光闪击1号位(100级)
  奥斯卡圣灵击2号(100级)
  绝命火焰3号`,
        x: _0x114ae7.width / 15 + 47,
        y: _0x4811ea.y + _0x4811ea.height + 10,
        textColor: 16776960
      };
      let _0x4be9ad = createLabel(_0xaa90fb);
      _0x4c3955.push(_0x4be9ad);
      const _0x1e8cbb = {
        text: `注意:如果没有艾姐跟塞维尔可以手动打过前8关
并且阵容位置准确条件下选择两个阵容其中一个开始
此功能会自动识别上阵`,
        x: _0x114ae7.width / 15,
        y: _0x4be9ad.y + _0x4be9ad.height + 10,
        textColor: 16711808
      };
      let _0x3834f7 = createLabel(_0x1e8cbb);
      _0x4c3955.push(_0x3834f7);
      _0x1b00bd.addAllUis(_0x4c3955);
      _0x114ae7.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x1b00bd.stop();
      }, function () {
        _0x1b00bd.prcessBody();
      }], null);
      _0x114ae7.showAlert();
    });
  }
  async ui() {
    super.start();
    let _0x4a3750 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x2ae453 = [];
      var _0x33fb69 = SimpleAlertUi({
        height: 200,
        width: 300
      });
      _0x4a3750.alertWin = _0x33fb69;
      const _0x4b1123 = {
        x: _0x33fb69.width / 3.75,
        y: _0x33fb69.height / 4.25,
        selected: true,
        storageKey: "jtchois1"
      };
      let _0x32a799 = createRadio(_0x4b1123);
      _0x2ae453.push(_0x32a799);
      const _0x557d42 = {
        x: _0x33fb69.width / 3.75,
        y: _0x33fb69.height / 2.35,
        selected: false,
        storageKey: "jtchois2"
      };
      let _0x334830 = createRadio(_0x557d42);
      _0x2ae453.push(_0x334830);
      const _0x1ba59e = {
        text: "请在圆点点击选择战斗阶梯类型",
        x: 25 + _0x32a799.width,
        y: _0x33fb69.height / 10
      };
      var _0x1f2051 = createLabel(_0x1ba59e);
      _0x2ae453.push(_0x1f2051);
      const _0x294b5b = {
        text: "黄金十二宫",
        x: _0x32a799.x + 10 + _0x32a799.width,
        y: _0x33fb69.height / 4.5
      };
      var _0x571dd2 = createLabel(_0x294b5b);
      _0x2ae453.push(_0x571dd2);
      const _0x130a00 = {
        text: "冥界十二宫",
        x: _0x32a799.x + 10 + _0x32a799.width,
        y: _0x571dd2.y * 1.5 + _0x33fb69.height / 11
      };
      var _0x47c6a1 = createLabel(_0x130a00);
      _0x2ae453.push(_0x47c6a1);
      _0x4a3750.addAllUis(_0x2ae453);
      _0x33fb69.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {}, function () {
        localStorage.setItem("jtchois1", _0x32a799.selected);
        localStorage.setItem("jtchois2", _0x334830.selected);
        if (_0x32a799.selected) {
          _0x4a3750.choice[0] = 1;
          _0x4a3750.Choice();
        }
        if (_0x334830.selected) {
          _0x4a3750.choice[1] = 1;
          _0x4a3750.Choice();
        }
      }], null);
      _0x33fb69.showAlert();
    });
  }
  async Choice() {
    if (this.choice[0]) {
      await this.send_message("cs_combat_ladder_GhostDom", {
        type: 2,
        choice: 1
      });
      MFC.bubbleAlert.showAlert("已选择黄金十二宫");
    }
    if (this.choice[1]) {
      await this.send_message("cs_combat_ladder_GhostDom", {
        type: 2,
        choice: 2
      });
      MFC.bubbleAlert.showAlert("已选择冥界十二宫");
    }
    await this.prcessBody();
  }
  async ui2() {
    super.start();
    let _0x356d8b = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      let _0x52a187 = [];
      var _0x5c3b8c = SimpleAlertUi({
        height: 250,
        width: 350
      });
      _0x356d8b.alertWin = _0x5c3b8c;
      const _0x2b721f = {
        text: "请选择对战阵容",
        x: _0x5c3b8c.applicationWidth / 2 - 70,
        y: _0x5c3b8c.height / 15
      };
      let _0x77a223 = createLabel(_0x2b721f);
      _0x77a223.size = 20;
      _0x52a187.push(_0x77a223);
      const _0x2f813e = {
        text: "艾姐阵容",
        x: _0x5c3b8c.applicationWidth / 2 - 40,
        y: _0x77a223.y + 40
      };
      let _0x2efa6f = createLabel(_0x2f813e);
      _0x52a187.push(_0x2efa6f);
      const _0x2a62d5 = {
        x: _0x2efa6f.x + 70,
        y: _0x2efa6f.y,
        selected: true,
        storageKey: "jt1"
      };
      let _0x39f7f6 = createToggle(_0x2a62d5);
      _0x52a187.push(_0x39f7f6);
      const _0x283546 = {
        text: "塞维尔阵容",
        x: _0x5c3b8c.applicationWidth / 2 - 50,
        y: _0x2efa6f.y + 40
      };
      let _0xc72b9f = createLabel(_0x283546);
      _0x52a187.push(_0xc72b9f);
      const _0x123fc6 = {
        x: _0x39f7f6.x,
        y: _0xc72b9f.y,
        selected: true,
        storageKey: "jt2"
      };
      let _0x123143 = createToggle(_0x123fc6);
      _0x52a187.push(_0x123143);
      const _0x29ec9a = {
        text: "光闪击+奥斯卡+绝命",
        x: _0x5c3b8c.applicationWidth / 2 - 120,
        y: _0xc72b9f.y + 40
      };
      let _0xd7ba18 = createLabel(_0x29ec9a);
      _0x52a187.push(_0xd7ba18);
      const _0x571300 = {
        x: _0x123143.x,
        y: _0xd7ba18.y,
        selected: true,
        storageKey: "jt3"
      };
      let _0x432e9d = createToggle(_0x571300);
      _0x52a187.push(_0x432e9d);
      _0x356d8b.addAllUis(_0x52a187);
      _0x5c3b8c.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x356d8b.stop();
      }, function () {
        localStorage.setItem("jt1", _0x39f7f6.selected);
        localStorage.setItem("jt2", _0x123143.selected);
        localStorage.setItem("jt3", _0x432e9d.selected);
        if (_0x39f7f6.selected && _0x123143.selected && _0x432e9d.selected || _0x39f7f6.selected && _0x123143.selected || _0x123143.selected && _0x432e9d.selected || _0x39f7f6.selected && _0x432e9d.selected) {
          addGameLog("不要选择多个阵容");
          _0x356d8b.stop();
        } else if (_0x39f7f6.selected || _0x123143.selected || _0x432e9d.selected) {
          if (_0x39f7f6.selected) {
            _0x356d8b.team[0] = 1;
          }
          if (_0x123143.selected) {
            _0x356d8b.team[1] = 1;
          }
          if (_0x432e9d.selected) {
            _0x356d8b.team[2] = 1;
          }
        } else {
          addGameLog("请选择阵容");
          _0x356d8b.stop();
        }
        _0x356d8b.teamchoice();
      }], null);
      _0x5c3b8c.showAlert();
    });
  }
  async teamchoice() {
    if (this.team[0] && this.team[1]) {
      MFC.alert.show("请不要同时选中两个阵容");
      await this.stop();
    } else {
      if (this.team[0]) {
        addGameLog("已选择艾姐阵容");
        await this.chackteam1();
      }
      if (this.team[1]) {
        addGameLog("已选择塞维尔阵容");
        await this.chackteam2();
      }
      if (this.team[2]) {
        addGameLog("已选择光闪击+奥斯卡+绝命");
        await this.chackteam3();
      }
    }
  }
  async chackteam1() {
    if (MFC.userInfo.vipLevel >= 8) {
      logger("超能nono等级为8，有保存阵容");
      let _0x4901e0 = await this.send_message("cs_combat_ladder_query_battle", {});
      let _0x50eb9a = await this.send_message("cs_combat_ladder_save_record", {
        type: 3
      });
      if (_0x4901e0.petList.length == 0) {
        logger("还没有确认阵容");
        if (_0x50eb9a.petList.find(_0x529ea2 => _0x529ea2.useSkills.find(_0x5e4253 => _0x5e4253.id === 10630)) || _0x50eb9a.petList.find(_0x347c6 => _0x347c6.useSkills.find(_0x37e3c2 => _0x37e3c2.id === 100023))) {
          logger("阵容有光闪击");
          if (_0x50eb9a.petList.find(_0x4bded6 => _0x4bded6.useSkills.find(_0x5d12b3 => _0x5d12b3.id === 14861))) {
            logger("阵容有圣灵击");
            if (_0x50eb9a.petList.find(_0x167c00 => _0x167c00.useSkills.find(_0x1846cf => _0x1846cf.id === 11022))) {
              logger("阵容有绝命火焰");
              if (_0x50eb9a.petList.find(_0x2a258e => _0x2a258e.useSkills.find(_0x337429 => _0x337429.id === 100377)) || _0x50eb9a.petList.find(_0x528935 => _0x528935.useSkills.find(_0x522334 => _0x522334.id === 10864))) {
                addGameLog("阵容符合要求");
                await this.send_message("cs_combat_ladder_save_record", {
                  type: 2
                });
                await this.fight1();
                await this.fight();
              } else {
                addGameLog("阵容内没有幻化利刃Plus");
                addGameLog("即将进行阵容更换");
                await this.setteam1();
                await this.fight1();
                await this.fight();
              }
            } else {
              addGameLog("阵容内没有绝命火焰");
              addGameLog("即将进行阵容更换");
              await this.setteam1();
              await this.fight1();
              await this.fight();
            }
          } else {
            addGameLog("阵容内没有圣灵击");
            addGameLog("即将进行阵容更换");
            await this.setteam1();
            await this.fight1();
            await this.fight();
          }
        } else {
          addGameLog("阵容内没有光闪击");
          addGameLog("即将进行阵容更换");
          await this.setteam1();
          await this.fight1();
          await this.fight();
        }
      } else {
        logger("已经确认阵容");
        if (_0x4901e0.petList.find(_0x4a1e1a => _0x4a1e1a.useSkills.find(_0x87434c => _0x87434c.id === 10630)) || _0x4901e0.petList.find(_0x25b1bb => _0x25b1bb.useSkills.find(_0x46862d => _0x46862d.id === 100023))) {
          logger("阵容有光闪击");
          if (_0x4901e0.petList.find(_0xfb6e30 => _0xfb6e30.useSkills.find(_0x1fa687 => _0x1fa687.id === 14861))) {
            logger("阵容有圣灵击");
            if (_0x4901e0.petList.find(_0x833f17 => _0x833f17.useSkills.find(_0x2d1b59 => _0x2d1b59.id === 11022))) {
              logger("阵容有绝命火焰");
              if (_0x4901e0.levelId > 9) {
                addGameLog("阵容符合要求");
                await this.fight();
              } else if (_0x4901e0.petList.find(_0x264227 => _0x264227.useSkills.find(_0x1859f4 => _0x1859f4.id === 100377)) || _0x50eb9a.petList.find(_0x2e3d9c => _0x2e3d9c.useSkills.find(_0x3d8da0 => _0x3d8da0.id === 10864))) {
                addGameLog("阵容符合要求");
                await this.fight1();
                await this.fight();
              } else {
                addGameLog("阵容内没有幻化利刃Plus");
                addGameLog("阵容不符合要求");
                this.stop();
              }
            } else {
              addGameLog("阵容内没有绝命火焰");
              addGameLog("阵容不符合要求");
              this.stop();
            }
          } else {
            addGameLog("阵容内没有圣灵击");
            addGameLog("阵容不符合要求");
            this.stop();
          }
        } else {
          addGameLog("阵容内没有光闪击");
          addGameLog("阵容不符合要求");
          this.stop();
        }
      }
    } else {
      logger("超能nono等级为" + MFC.userInfo.vipLevel + "，没有保存阵容");
      let _0x4d1d75 = await this.send_message("cs_combat_ladder_query_battle", {});
      logger(_0x4d1d75);
      if (_0x4d1d75.petList.length == 0) {
        await this.setteam1();
        await this.fight1();
        await this.fight();
      } else {
        logger("阵容已设置");
        await this.fight1();
        await this.fight();
      }
    }
  }
  async chackteam2() {
    if (MFC.userInfo.vipLevel >= 8) {
      logger("超能nono等级为8，有保存阵容");
      let _0x8c96af = await this.send_message("cs_combat_ladder_query_battle", {});
      let _0x10c72f = await this.send_message("cs_combat_ladder_save_record", {
        type: 3
      });
      if (_0x8c96af.petList.length == 0) {
        logger("还没有确认阵容");
        if (_0x10c72f.petList.find(_0x4753f2 => _0x4753f2.useSkills.find(_0x3bdb30 => _0x3bdb30.id === 10630)) || _0x10c72f.petList.find(_0x2e0815 => _0x2e0815.useSkills.find(_0x33f29e => _0x33f29e.id === 100023))) {
          logger("阵容有光闪击");
          if (_0x10c72f.petList.find(_0x47e08f => _0x47e08f.useSkills.find(_0x3bd23e => _0x3bd23e.id === 14861))) {
            logger("阵容有圣灵击");
            if (_0x10c72f.petList.find(_0x30baee => _0x30baee.useSkills.find(_0x3f9de4 => _0x3f9de4.id === 11022))) {
              logger("阵容有绝命火焰");
              if (_0x10c72f.petList.find(_0x519e2a => _0x519e2a.useSkills.find(_0x276f5d => _0x276f5d.id === 100181))) {
                addGameLog("阵容符合要求");
                await this.send_message("cs_combat_ladder_save_record", {
                  type: 2
                });
                await this.fight2();
                await this.fight();
              } else {
                addGameLog("阵容内没有女王之鞭Plus");
                addGameLog("即将进行阵容更换");
                await this.setteam2();
                await this.fight2();
                await this.fight();
              }
            } else {
              addGameLog("阵容内没有绝命火焰");
              addGameLog("即将进行阵容更换");
              await this.setteam2();
              await this.fight2();
              await this.fight();
            }
          } else {
            addGameLog("阵容内没有圣灵击");
            addGameLog("即将进行阵容更换");
            await this.setteam2();
            await this.fight2();
            await this.fight();
          }
        } else {
          addGameLog("阵容内没有光闪击");
          addGameLog("即将进行阵容更换");
          await this.setteam2();
          await this.fight2();
          await this.fight();
        }
      } else {
        logger("已经确认阵容");
        if (_0x8c96af.petList.find(_0x1dc849 => _0x1dc849.useSkills.find(_0x33a0b0 => _0x33a0b0.id === 10630)) || _0x8c96af.petList.find(_0x5b3275 => _0x5b3275.useSkills.find(_0x10099f => _0x10099f.id === 100023))) {
          logger("阵容有光闪击");
          if (_0x8c96af.petList.find(_0x5504b5 => _0x5504b5.useSkills.find(_0x60a7e7 => _0x60a7e7.id === 14861))) {
            logger("阵容有圣灵击");
            if (_0x8c96af.petList.find(_0x12b636 => _0x12b636.useSkills.find(_0x15735a => _0x15735a.id === 11022))) {
              logger("阵容有绝命火焰");
              if (_0x8c96af.levelId > 9) {
                addGameLog("阵容符合要求");
                await this.fight();
              } else if (_0x8c96af.petList.find(_0xd54f5b => _0xd54f5b.useSkills.find(_0x3772a7 => _0x3772a7.id === 100181))) {
                addGameLog("阵容符合要求");
                await this.fight2();
                await this.fight();
              } else {
                addGameLog("阵容内没有女王之鞭Plus");
                addGameLog("阵容不符合要求");
                this.stop();
              }
            } else {
              addGameLog("阵容内没有绝命火焰");
              addGameLog("阵容不符合要求");
              this.stop();
            }
          } else {
            addGameLog("阵容内没有圣灵击");
            addGameLog("阵容不符合要求");
            this.stop();
          }
        } else {
          addGameLog("阵容内没有光闪击");
          addGameLog("阵容不符合要求");
          this.stop();
        }
      }
    } else {
      logger("超能nono等级为" + MFC.userInfo.vipLevel + "，没有保存阵容");
      let _0x710c50 = await this.send_message("cs_combat_ladder_query_battle", {});
      logger(_0x710c50);
      if (_0x710c50.petList.length == 0) {
        await this.setteam2();
        await this.fight2();
        await this.fight();
      } else {
        logger("阵容已设置");
        await this.fight2();
        await this.fight();
      }
    }
  }
  async setteam1() {
    let _0xcb56c3 = PetManager.getInstance().getAllPets().map(_0x3f6220 => {
      if (_0x3f6220.level == 100) {
        if (_0x3f6220.skills.indexOf(100377) != -1 || _0x3f6220.skills.indexOf(10864) != -1) {
          return _0x3f6220.getTime;
        }
      }
    }).filter(_0x36b484 => _0x36b484)[0];
    let _0x219472 = PetManager.getInstance().getAllPets().map(_0x12d446 => {
      if (_0x12d446.featureId == 5 || _0x12d446.featureId == 6 || _0x12d446.featureId == 7 || _0x12d446.featureId == 8) {
        if (_0x12d446.battleValues[0] > 200) {
          if (_0x12d446.skills.indexOf(100023) != -1 || _0x12d446.skills.indexOf(10630) != -1) {
            return _0x12d446.getTime;
          }
        }
      }
    }).filter(_0x15848b => _0x15848b !== undefined).sort((_0x4e1069, _0x45fde8) => _0x45fde8.featureId - _0x4e1069.featureId)[0];
    let _0x51c6a5 = PetManager.getInstance().getAllPets().map(_0x19a573 => {
      if (_0x19a573.level == 100) {
        if (_0x19a573.skills.indexOf(14861) != -1) {
          return _0x19a573.getTime;
        }
      }
    }).filter(_0x20f323 => _0x20f323)[0];
    let _0x47d6e7 = PetManager.getInstance().getAllPets().map(_0x1f0d2a => {
      if (_0x1f0d2a.level == 100) {
        if (_0x1f0d2a.skills.indexOf(11022) != -1) {
          return _0x1f0d2a.getTime;
        }
      }
    }).filter(_0x2e1285 => _0x2e1285)[0];
    if (_0xcb56c3 == undefined) {
      addGameLog("背包没有艾尔伊洛或者没有装备技能");
      this.stop();
    } else if (_0x219472 == undefined) {
      addGameLog("背包没有瞬杀光闪击或者没有装备技能");
      this.stop();
    } else if (_0x51c6a5 == undefined) {
      addGameLog("背包没有奥斯卡或者没有装备技能");
      this.stop();
    } else if (_0x47d6e7 == undefined) {
      addGameLog("背包没有绝命火焰或者没有装备技能");
      this.stop();
    } else {
      const _0x353712 = {
        petList: [_0xcb56c3, _0x219472, _0x51c6a5, _0x47d6e7]
      };
      await this.send_message("cs_combat_ladder_set_array", _0x353712);
      addGameLog("阵容设置完成");
    }
  }
  async setteam2() {
    let _0x5d671e = PetManager.getInstance().getAllPets().map(_0x24ec9a => {
      if (_0x24ec9a.level > 60) {
        if (_0x24ec9a.skills.indexOf(100181) != -1) {
          return _0x24ec9a.getTime;
        }
      }
    }).filter(_0x3545d7 => _0x3545d7)[0];
    let _0x3c7530 = PetManager.getInstance().getAllPets().map(_0x53ef38 => {
      if (_0x53ef38.featureId == 5 || _0x53ef38.featureId == 6 || _0x53ef38.featureId == 7 || _0x53ef38.featureId == 8) {
        if (_0x53ef38.battleValues[0] > 200) {
          if (_0x53ef38.skills.indexOf(100023) != -1 || _0x53ef38.skills.indexOf(10630) != -1) {
            return _0x53ef38.getTime;
          }
        }
      }
    }).filter(_0x38803d => _0x38803d !== undefined).sort((_0x5ba27f, _0x25e43d) => _0x25e43d.featureId - _0x5ba27f.featureId)[0];
    let _0x5c8f57 = PetManager.getInstance().getAllPets().map(_0x1e03bf => {
      if (_0x1e03bf.level == 100) {
        if (_0x1e03bf.skills.indexOf(14861) != -1) {
          return _0x1e03bf.getTime;
        }
      }
    }).filter(_0x3c8f3f => _0x3c8f3f)[0];
    let _0x543281 = PetManager.getInstance().getAllPets().map(_0x209d84 => {
      if (_0x209d84.level == 100) {
        if (_0x209d84.skills.indexOf(11022) != -1) {
          return _0x209d84.getTime;
        }
      }
    }).filter(_0x169aa2 => _0x169aa2)[0];
    if (_0x5d671e == undefined) {
      addGameLog("背包没有塞维尔或者没有装备技能");
      this.stop();
    } else if (_0x3c7530 == undefined) {
      addGameLog("背包没有瞬杀光闪击或者没有装备技能");
      this.stop();
    } else if (_0x5c8f57 == undefined) {
      addGameLog("背包没有奥斯卡或者没有装备技能");
      this.stop();
    } else if (_0x543281 == undefined) {
      addGameLog("背包没有绝命火焰或者没有装备技能");
      this.stop();
    } else {
      const _0x3ce4b3 = {
        petList: [_0x5d671e, _0x3c7530, _0x5c8f57, _0x543281]
      };
      await this.send_message("cs_combat_ladder_set_array", _0x3ce4b3);
      addGameLog("阵容设置完成");
    }
  }
  async fight() {
    let _0x3a51bb = await this.send_message("cs_combat_ladder_query_battle", {});
    let _0x3b4b48 = _0x3a51bb.petList.findIndex(_0xa8961a => _0xa8961a.useSkills.find(_0x4f0565 => _0x4f0565.id === 10630) || _0xa8961a.useSkills.find(_0x4bd420 => _0x4bd420.id === 100023));
    let _0x15c38a = _0x3a51bb.petList.findIndex(_0x19ea26 => _0x19ea26.useSkills.find(_0x247eb5 => _0x247eb5.id === 14861));
    let _0x1b6498 = _0x3a51bb.petList.findIndex(_0x18aab3 => _0x18aab3.useSkills.find(_0x541d65 => _0x541d65.id === 11022));
    let _0x34e3c7 = {};
    while (_0x3a51bb.levelId > 8 && _0x3a51bb.levelId <= 28) {
      if (_0x3a51bb.petList.find(_0x18e21c => _0x18e21c.useSkills.find(_0x338d12 => _0x338d12.id === 10630)) || _0x3a51bb.petList.find(_0x2c7f21 => _0x2c7f21.useSkills.find(_0x13e474 => _0x13e474.id === 100023))) {
        if (_0x3a51bb.petList.find(_0x45428d => _0x45428d.useSkills.find(_0x20590c => _0x20590c.id === 14861))) {
          if (this.rebuff) {
            const _0x59689b = {
              idList: [_0x15c38a]
            };
            await this.send_message("cs_combat_ladder_start_battle", _0x59689b);
            await this.send_message("cs_set_match_battle_speed", {
              speed: 2
            });
            let _0x4f2ec6 = await this.waitEvent("sc_battle_notify_load_resource");
            _0x4f2ec6.gameBody.splice(0, _0x4f2ec6.gameBody.length);
            await this.send_message("cs_online_load_resource", {
              groupId: "",
              battleType: 0
            });
            await this.send_message("cs_online_player_operation", {
              opType: 5,
              data: null,
              groupId: ""
            });
            _0x4f2ec6 = await this.waitEvent("sc_battle_notify_round_result");
            let _0x2b94e3 = JSON.parse(_0x4f2ec6.gameBody[_0x4f2ec6.gameBody.length - 1].raw).result.processQueue.find(_0xfecadf => _0xfecadf.uid !== MFC.userInfo.uid).affects.filter(function (_0x37eee0) {
              if (_0x37eee0.id == 143 || _0x37eee0.id == 67) {
                return _0x37eee0;
              }
            });
            if (_0x2b94e3.length > 0) {
              this.rebuff = true;
            } else {
              this.rebuff = false;
            }
            if (!_0x34e3c7[_0x3a51bb.levelId]) {
              _0x34e3c7[_0x3a51bb.levelId] = 1;
            } else {
              _0x34e3c7[_0x3a51bb.levelId]++;
            }
            addGameLog("目前阶梯第" + _0x3a51bb.levelId + "层，进行第" + _0x34e3c7[_0x3a51bb.levelId] + "次战斗");
            _0x2b94e3 = await this.useSkill(14861);
            _0x3a51bb = await this.send_message("cs_combat_ladder_query_battle", {});
          } else {
            const _0x26fa89 = {
              idList: [_0x3b4b48]
            };
            await this.send_message("cs_combat_ladder_start_battle", _0x26fa89);
            let _0x1b4d73 = await this.initBattle();
            let _0x115b68 = _0x1b4d73.result.processQueue.find(_0x13f0f4 => _0x13f0f4.uid !== MFC.userInfo.uid).affects.filter(function (_0x158efc) {
              if (_0x158efc.id == 143 || _0x158efc.id == 67) {
                return _0x158efc;
              }
            });
            if (_0x115b68.length > 0) {
              this.rebuff = true;
            } else {
              this.rebuff = false;
            }
            if (!_0x34e3c7[_0x3a51bb.levelId]) {
              _0x34e3c7[_0x3a51bb.levelId] = 1;
            } else {
              _0x34e3c7[_0x3a51bb.levelId]++;
            }
            addGameLog("目前阶梯第" + _0x3a51bb.levelId + "层，进行第" + _0x34e3c7[_0x3a51bb.levelId] + "次战斗");
            if (_0x3a51bb.petList.find(_0x18f1e5 => _0x18f1e5.useSkills.find(_0x1a69f6 => _0x1a69f6.id === 10630))) {
              _0x1b4d73 = await this.useSkill(10630);
            }
            if (_0x3a51bb.petList.find(_0x1f7837 => _0x1f7837.useSkills.find(_0x4fca20 => _0x4fca20.id === 100023))) {
              _0x1b4d73 = await this.useSkill(100023);
            }
            _0x3a51bb = await this.send_message("cs_combat_ladder_query_battle", {});
          }
        } else {
          addGameLog("阵容内没有圣灵击");
          this.stop();
          break;
        }
      } else {
        addGameLog("阵容内没有光闪击");
        this.stop();
        break;
      }
      _0x3a51bb = await this.send_message("cs_combat_ladder_query_battle", {});
      logger(_0x3a51bb.levelId);
    }
    while (_0x3a51bb.levelId > 28 && _0x3a51bb.levelId <= 30) {
      if (_0x3a51bb.petList.find(_0x5b20c6 => _0x5b20c6.useSkills.find(_0x2d2b35 => _0x2d2b35.id === 11022))) {
        const _0x111af7 = {
          idList: [_0x1b6498]
        };
        await this.send_message("cs_combat_ladder_start_battle", _0x111af7);
        await this.initBattle();
        if (!_0x34e3c7[_0x3a51bb.levelId]) {
          _0x34e3c7[_0x3a51bb.levelId] = 1;
        } else {
          _0x34e3c7[_0x3a51bb.levelId]++;
        }
        addGameLog("目前阶梯第" + _0x3a51bb.levelId + "层，进行第" + _0x34e3c7[_0x3a51bb.levelId] + "次战斗");
        let _0x13a4c4 = await this.useSkill(11022);
        if (_0x13a4c4.result.result === 1) {
          if (_0x3a51bb.levelId == 30) {
            break;
          }
        }
        _0x3a51bb = await this.send_message("cs_combat_ladder_query_battle", {});
      } else {
        addGameLog("阵容内没有绝命火焰");
        this.stop();
        break;
      }
    }
    addGameLog("阶梯结束");
    this.stop();
  }
  async fight1() {
    let _0x555665 = await this.send_message("cs_combat_ladder_query_battle", {});
    let _0x4c3c72 = {};
    while (_0x555665.levelId < 9) {
      if (_0x555665.petList.find(_0x104103 => _0x104103.useSkills.find(_0x450d65 => _0x450d65.id === 100377)) || _0x555665.petList.find(_0x5b12db => _0x5b12db.useSkills.find(_0x35cdad => _0x35cdad.id === 10864))) {
        logger("阵容有幻化利刃plus");
        await this.send_message("cs_combat_ladder_start_battle", {
          idList: [0]
        });
        await this.initBattle();
        if (!_0x4c3c72[_0x555665.levelId]) {
          _0x4c3c72[_0x555665.levelId] = 1;
        } else {
          _0x4c3c72[_0x555665.levelId]++;
        }
        addGameLog("目前阶梯第" + _0x555665.levelId + "层，进行第" + _0x4c3c72[_0x555665.levelId] + "次战斗");
        if (_0x555665.petList.find(_0x2a195d => _0x2a195d.useSkills.find(_0x55eb8f => _0x55eb8f.id === 100377))) {
          await this.useSkill(100377);
        }
        if (_0x555665.petList.find(_0x69a104 => _0x69a104.useSkills.find(_0x3367ab => _0x3367ab.id === 10864))) {
          await this.useSkill(10864);
        }
        _0x555665 = await this.send_message("cs_combat_ladder_query_battle", {});
      } else {
        addGameLog("阵容缺乏幻化利刃plus");
        this.stop();
        break;
      }
    }
  }
  async fight2() {
    let _0x4e045c = await this.send_message("cs_combat_ladder_query_battle", {});
    let _0x320060 = {};
    while (_0x4e045c.levelId < 9) {
      if (_0x4e045c.petList.find(_0x2fe4fe => _0x2fe4fe.useSkills.find(_0x3bd197 => _0x3bd197.id === 100181))) {
        logger("阵容有女王之鞭plus");
        await this.send_message("cs_combat_ladder_start_battle", {
          idList: [0]
        });
        await this.initBattle();
        if (!_0x320060[_0x4e045c.levelId]) {
          _0x320060[_0x4e045c.levelId] = 1;
        } else {
          _0x320060[_0x4e045c.levelId]++;
        }
        addGameLog("目前阶梯第" + _0x4e045c.levelId + "层，进行第" + _0x320060[_0x4e045c.levelId] + "次战斗");
        await this.useSkill(100181);
        _0x4e045c = await this.send_message("cs_combat_ladder_query_battle", {});
      } else {
        addGameLog("阵容缺乏女王之鞭plus");
        this.stop();
        break;
      }
    }
  }
  async chackteam3() {
    if (MFC.userInfo.vipLevel >= 8) {
      logger("超能nono等级为8，有保存阵容");
      let _0x359849 = await this.send_message("cs_combat_ladder_query_battle", {});
      let _0x5ba82e = await this.send_message("cs_combat_ladder_save_record", {
        type: 3
      });
      if (_0x359849.petList.length == 0) {
        if (_0x5ba82e.petList.useSkills) {
          if (_0x5ba82e.petList.useSkills.find(_0xaf8944 => _0xaf8944.id === 10630) || _0x5ba82e.petList.useSkills.find(_0x47c629 => _0x47c629.id === 100023)) {
            if (_0x5ba82e.petList.useSkills.find(_0x41ebd1 => _0x41ebd1.id === 14816)) {
              logger("阵容有圣灵击");
              if (_0x5ba82e.petList.useSkills.find(_0x51f5a8 => _0x51f5a8.id === 11022)) {
                addGameLog("阵容符合要求");
                await this.send_message("cs_combat_ladder_save_record", {
                  type: 2
                });
                await this.fight3();
              } else {
                addGameLog("阵容内没有绝命火焰");
                addGameLog("即将进行阵容更换");
                await this.setteam3();
                await this.fight3();
              }
            } else {
              addGameLog("阵容内没有圣灵击");
              addGameLog("即将进行阵容更换");
              await this.setteam3();
              await this.fight3();
            }
          } else {
            addGameLog("阵容内没有光闪击");
            addGameLog("即将进行阵容更换");
            await this.setteam3();
            await this.fight3();
          }
        } else {
          await this.setteam3();
          await this.fight3();
        }
      } else if (_0x359849.petList[0].useSkills.find(_0x3aed2f => _0x3aed2f.id === 10630) || _0x359849.petList[0].useSkills.find(_0x44f52a => _0x44f52a.id === 100023)) {
        if (_0x359849.petList[1].useSkills.find(_0x3eb844 => _0x3eb844.id === 14861)) {
          if (_0x359849.petList[2].useSkills.find(_0x2065a3 => _0x2065a3.id === 11022)) {
            addGameLog("阵容符合要求");
            await this.fight3();
          } else {
            addGameLog("阵容内没有绝命火焰");
            addGameLog("阵容不符合要求");
            this.stop();
          }
        } else {
          addGameLog("阵容内没有圣灵击");
          addGameLog("阵容不符合要求");
          this.stop();
        }
      } else {
        addGameLog("阵容内没有光闪击");
        addGameLog("阵容不符合要求");
        this.stop();
      }
    } else {
      logger("超能nono等级为" + MFC.userInfo.vipLevel + "，没有保存阵容");
      let _0x39a5a7 = await this.send_message("cs_combat_ladder_query_battle", {});
      logger(_0x39a5a7);
      if (_0x39a5a7.petList.length == 0) {
        await this.setteam3();
        await this.fight3();
      } else {
        logger("阵容已设置");
        await this.setteam3();
        await this.fight3();
      }
    }
  }
  async setteam3() {
    let _0x551c4c = PetManager.getInstance().getAllPets().map(_0x33fac5 => {
      if (_0x33fac5.featureId == 5 || _0x33fac5.featureId == 6 || _0x33fac5.featureId == 7 || _0x33fac5.featureId == 8) {
        if (_0x33fac5.battleValues[0] > 200) {
          if (_0x33fac5.skills.indexOf(100023) != -1 || _0x33fac5.skills.indexOf(10630) != -1) {
            return _0x33fac5.getTime;
          }
        }
      }
    }).filter(_0x47a60a => _0x47a60a !== undefined).sort((_0x2a7130, _0x5df186) => _0x5df186.featureId - _0x2a7130.featureId)[0];
    let _0x5d382a = PetManager.getInstance().getAllPets().map(_0x37fa5f => {
      if (_0x37fa5f.level == 100) {
        if (_0x37fa5f.skills.indexOf(14861) != -1) {
          return _0x37fa5f.getTime;
        }
      }
    }).filter(_0x56301b => _0x56301b)[0];
    let _0x59095f = PetManager.getInstance().getAllPets().map(_0x1167a9 => {
      if (_0x1167a9.level == 100) {
        if (_0x1167a9.skills.indexOf(11022) != -1) {
          return _0x1167a9.getTime;
        }
      }
    }).filter(_0x1c3657 => _0x1c3657)[0];
    if (_0x551c4c == undefined) {
      addGameLog("背包没有瞬杀光闪击或者没有装备技能");
      this.stop();
    } else if (_0x5d382a == undefined) {
      addGameLog("背包没有奥斯卡或者没有装备技能");
      this.stop();
    } else if (_0x59095f == undefined) {
      addGameLog("背包没有绝命火焰或者没有装备技能");
      this.stop();
    } else {
      const _0x12ede8 = {
        petList: [_0x551c4c, _0x5d382a, _0x59095f]
      };
      await this.send_message("cs_combat_ladder_set_array", _0x12ede8);
      addGameLog("阵容设置完成");
    }
  }
  async fight3() {
    let _0x410b66 = await this.send_message("cs_combat_ladder_query_battle", {});
    let _0x50e878 = {};
    let _0x341d68 = _0x410b66.petList.findIndex(_0x3deb71 => _0x3deb71.useSkills.find(_0x314efc => _0x314efc.id === 10630) || _0x3deb71.useSkills.find(_0x66ec32 => _0x66ec32.id === 100023));
    let _0x33a063 = _0x410b66.petList.findIndex(_0xb95199 => _0xb95199.useSkills.find(_0x1e42c6 => _0x1e42c6.id === 14861));
    let _0x2f8c3a = _0x410b66.petList.findIndex(_0x5a9080 => _0x5a9080.useSkills.find(_0x1537d8 => _0x1537d8.id === 11022));
    while (_0x410b66.levelId > 0 && _0x410b66.levelId <= 28) {
      if (_0x410b66.petList.find(_0x538cd8 => _0x538cd8.useSkills.find(_0x4ad4b6 => _0x4ad4b6.id === 10630)) || _0x410b66.petList.find(_0x48ecc0 => _0x48ecc0.useSkills.find(_0x20ac18 => _0x20ac18.id === 100023))) {
        if (_0x410b66.petList.find(_0x21c13a => _0x21c13a.useSkills.find(_0x37e968 => _0x37e968.id === 14861))) {
          if (this.rebuff) {
            const _0x3fc68e = {
              idList: [_0x33a063]
            };
            await this.send_message("cs_combat_ladder_start_battle", _0x3fc68e);
            let _0x1f96d0 = await this.initBattle();
            let _0x40d5e6 = _0x1f96d0.result.affects.map(_0xbe0607 => {
              if (_0xbe0607 && _0xbe0607.id) {
                return _0xbe0607.id;
              } else {
                return null;
              }
            });
            if (_0x40d5e6.includes(143) || _0x40d5e6.includes(67) || _0x40d5e6.includes(71) || _0x410b66.levelId == 10 || _0x410b66.levelId == 11 || _0x410b66.levelId == 14 || _0x410b66.levelId == 15 || _0x410b66.levelId == 21 || _0x410b66.levelId == 22) {
              this.rebuff = true;
            } else {
              this.rebuff = false;
            }
            if (!_0x50e878[_0x410b66.levelId]) {
              _0x50e878[_0x410b66.levelId] = 1;
            } else {
              _0x50e878[_0x410b66.levelId]++;
            }
            addGameLog("目前阶梯第" + _0x410b66.levelId + "层，进行第" + _0x50e878[_0x410b66.levelId] + "次战斗");
            _0x1f96d0 = await this.useSkill(14861);
            _0x410b66 = await this.send_message("cs_combat_ladder_query_battle", {});
          } else {
            const _0x5a696c = {
              idList: [_0x341d68]
            };
            await this.send_message("cs_combat_ladder_start_battle", _0x5a696c);
            let _0x27d66c = await this.initBattle();
            let _0x52f11b = _0x27d66c.result.affects.map(_0x103bd2 => {
              if (_0x103bd2 && _0x103bd2.id) {
                return _0x103bd2.id;
              } else {
                return null;
              }
            });
            if (_0x52f11b.includes(143) || _0x52f11b.includes(67) || _0x52f11b.includes(71) || _0x410b66.levelId == 10 || _0x410b66.levelId == 11 || _0x410b66.levelId == 14 || _0x410b66.levelId == 15 || _0x410b66.levelId == 21 || _0x410b66.levelId == 22) {
              this.rebuff = true;
            } else {
              this.rebuff = false;
            }
            if (!_0x50e878[_0x410b66.levelId]) {
              _0x50e878[_0x410b66.levelId] = 1;
            } else {
              _0x50e878[_0x410b66.levelId]++;
            }
            addGameLog("目前阶梯第" + _0x410b66.levelId + "层，进行第" + _0x50e878[_0x410b66.levelId] + "次战斗");
            if (_0x410b66.petList.find(_0x23667a => _0x23667a.useSkills.find(_0xbe5b79 => _0xbe5b79.id === 10630))) {
              _0x27d66c = await this.useSkill(10630);
            }
            if (_0x410b66.petList.find(_0x2ea055 => _0x2ea055.useSkills.find(_0x3ae252 => _0x3ae252.id === 100023))) {
              _0x27d66c = await this.useSkill(100023);
            }
            _0x410b66 = await this.send_message("cs_combat_ladder_query_battle", {});
          }
        } else {
          addGameLog("阵容内没有圣灵击");
          this.stop();
          break;
        }
      } else {
        addGameLog("阵容内没有光闪击");
        this.stop();
        break;
      }
      _0x410b66 = await this.send_message("cs_combat_ladder_query_battle", {});
      logger(_0x410b66.levelId);
    }
    while (_0x410b66.levelId > 28 && _0x410b66.levelId <= 30) {
      if (_0x410b66.petList.find(_0x8bd5db => _0x8bd5db.useSkills.find(_0x5009ee => _0x5009ee.id === 11022))) {
        const _0x220435 = {
          idList: [_0x2f8c3a]
        };
        await this.send_message("cs_combat_ladder_start_battle", _0x220435);
        await this.send_message("cs_set_match_battle_speed", {
          speed: 2
        });
        await this.initBattle();
        if (!_0x50e878[_0x410b66.levelId]) {
          _0x50e878[_0x410b66.levelId] = 1;
        } else {
          _0x50e878[_0x410b66.levelId]++;
        }
        addGameLog("目前阶梯第" + _0x410b66.levelId + "层，进行第" + _0x50e878[_0x410b66.levelId] + "次战斗");
        let _0x437da9 = await this.useSkill(11022);
        if (_0x437da9.result.result === 1) {
          if (_0x410b66.levelId == 30) {
            break;
          }
        }
        _0x410b66 = await this.send_message("cs_combat_ladder_query_battle", {});
      } else {
        addGameLog("阵容内没有绝命火焰");
        this.stop();
        break;
      }
    }
    addGameLog("阶梯结束");
    this.stop();
  }
  async prcessBody() {
    try {
      xls.battleLadder.load(() => {});
      let _0x31983a = await this.send_message("cs_combat_ladder_GhostDom", {
        type: 1,
        choice: 0
      });
      if (_0x31983a.choice == 0) {
        logger("战斗阶梯未选择");
        await this.ui();
      } else {
        logger("战斗阶梯已选择");
        if (_0x31983a.choice == 1) {
          addGameLog("已选择黄金十二宫");
          await this.ui2();
        }
        if (_0x31983a.choice == 2) {
          addGameLog("已选择冥界十二宫");
          await this.ui2();
        }
      }
    } catch (_0x150331) {}
  }
}
class Misc extends SuperTask {
  constructor() {
    super();
    this.nowName = "杂项";
    this.task = [];
    this.input2Pwd = null;
  }
  start() {
    super.start();
    let _0x14d323 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x18ad65 = [];
      var _0x46c419 = SimpleAlertUi({
        height: 460,
        width: 400
      });
      _0x14d323.alertWin = _0x46c419;
      const _0x2b4d63 = {
        text: "一键杂项",
        x: _0x46c419.applicationWidth / 2 - 20,
        y: _0x46c419.height / 15
      };
      let _0x344385 = createLabel(_0x2b4d63);
      _0x344385.size = 20;
      _0x18ad65.push(_0x344385);
      const _0x494c41 = {
        text: "电池分享",
        x: _0x46c419.width / 5,
        y: _0x344385.y + 40
      };
      let _0x41cd89 = createLabel(_0x494c41);
      _0x18ad65.push(_0x41cd89);
      const _0x277649 = {
        x: _0x41cd89.x + 70,
        y: _0x41cd89.y,
        selected: true,
        storageKey: "bt1"
      };
      let _0x71d4c6 = createToggle(_0x277649);
      _0x18ad65.push(_0x71d4c6);
      const _0x2a047d = {
        text: "揍bug",
        x: _0x71d4c6.x + 70,
        y: _0x41cd89.y
      };
      let _0x1e356c = createLabel(_0x2a047d);
      _0x18ad65.push(_0x1e356c);
      const _0x3d8e78 = {
        x: _0x1e356c.x + 60,
        y: _0x41cd89.y,
        selected: true,
        storageKey: "bt2"
      };
      let _0x517448 = createToggle(_0x3d8e78);
      _0x18ad65.push(_0x517448);
      const _0x2c92aa = {
        text: "小屋点赞",
        x: _0x46c419.width / 5,
        y: _0x41cd89.y + 40
      };
      let _0x340dc5 = createLabel(_0x2c92aa);
      _0x18ad65.push(_0x340dc5);
      const _0xa2d496 = {
        x: _0x340dc5.x + 70,
        y: _0x340dc5.y,
        selected: true,
        storageKey: "bt3"
      };
      let _0x5d1a3b = createToggle(_0xa2d496);
      _0x18ad65.push(_0x5d1a3b);
      const _0xfc3586 = {
        text: "每日电池",
        x: _0x71d4c6.x + 60,
        y: _0x340dc5.y
      };
      let _0x32411a = createLabel(_0xfc3586);
      _0x18ad65.push(_0x32411a);
      const _0x49ce24 = {
        x: _0x32411a.x + 70,
        y: _0x340dc5.y,
        selected: true,
        storageKey: "bt4"
      };
      let _0xd506ed = createToggle(_0x49ce24);
      _0x18ad65.push(_0xd506ed);
      const _0x171d92 = {
        text: "经验剧情",
        x: _0x46c419.width / 5,
        y: _0x340dc5.y + 40
      };
      let _0x2acadf = createLabel(_0x171d92);
      _0x18ad65.push(_0x2acadf);
      const _0x2938a7 = {
        x: _0x2acadf.x + 70,
        y: _0x2acadf.y,
        selected: true,
        storageKey: "bt5"
      };
      let _0x273ea8 = createToggle(_0x2938a7);
      _0x18ad65.push(_0x273ea8);
      const _0x1bbd31 = {
        text: "豆子剧情",
        x: _0x71d4c6.x + 60,
        y: _0x2acadf.y
      };
      let _0x3f2f05 = createLabel(_0x1bbd31);
      _0x18ad65.push(_0x3f2f05);
      const _0x37c18f = {
        x: _0x3f2f05.x + 70,
        y: _0x3f2f05.y,
        selected: true,
        storageKey: "bt6"
      };
      let _0x8ae1d = createToggle(_0x37c18f);
      _0x18ad65.push(_0x8ae1d);
      const _0x5f16d7 = {
        text: "挖取矿物",
        x: _0x46c419.width / 5,
        y: _0x2acadf.y + 40
      };
      let _0xeb6a24 = createLabel(_0x5f16d7);
      _0x18ad65.push(_0xeb6a24);
      const _0x4f28f3 = {
        x: _0xeb6a24.x + 70,
        y: _0xeb6a24.y,
        selected: true,
        storageKey: "bt7"
      };
      let _0x5d13e2 = createToggle(_0x4f28f3);
      _0x18ad65.push(_0x5d13e2);
      const _0x510bc3 = {
        text: "光暗狮子",
        x: _0x71d4c6.x + 60,
        y: _0xeb6a24.y
      };
      let _0x3fe501 = createLabel(_0x510bc3);
      _0x18ad65.push(_0x3fe501);
      const _0x2e1e2f = {
        x: _0x3fe501.x + 70,
        y: _0x3fe501.y,
        selected: true,
        storageKey: "bt8"
      };
      let _0x142f8b = createToggle(_0x2e1e2f);
      _0x18ad65.push(_0x142f8b);
      const _0x27a408 = {
        text: "好友点赞",
        x: _0x46c419.width / 5,
        y: _0xeb6a24.y + 40
      };
      let _0x5682eb = createLabel(_0x27a408);
      _0x18ad65.push(_0x5682eb);
      const _0x5e9459 = {
        x: _0x5682eb.x + 70,
        y: _0x5682eb.y,
        selected: true,
        storageKey: "bt9"
      };
      let _0xf3712a = createToggle(_0x5e9459);
      _0x18ad65.push(_0xf3712a);
      const _0x35c303 = {
        text: "教皇领取",
        x: _0x71d4c6.x + 60,
        y: _0x5682eb.y
      };
      let _0x2e4688 = createLabel(_0x35c303);
      _0x18ad65.push(_0x2e4688);
      const _0x1e6210 = {
        x: _0x2e4688.x + 70,
        y: _0x2e4688.y,
        selected: true,
        storageKey: "bt10"
      };
      let _0x190a0d = createToggle(_0x1e6210);
      _0x18ad65.push(_0x190a0d);
      const _0x35ab4e = {
        text: "忍魂活动",
        x: _0x5682eb.x,
        y: _0x5682eb.y + 40
      };
      let _0x5285f8 = createLabel(_0x35ab4e);
      _0x18ad65.push(_0x5285f8);
      const _0x1cfa58 = {
        x: _0x5285f8.x + 70,
        y: _0x5285f8.y,
        selected: true,
        storageKey: "ninja"
      };
      let _0x140496 = createToggle(_0x1cfa58);
      _0x18ad65.push(_0x140496);
      const _0x95ce92 = {
        text: "兑换cdk",
        x: _0x71d4c6.x + 60,
        y: _0x5285f8.y
      };
      let _0x5c3400 = createLabel(_0x95ce92);
      _0x18ad65.push(_0x5c3400);
      const _0x9df087 = {
        x: _0x5c3400.x + 70,
        y: _0x5c3400.y,
        selected: false,
        storageKey: "cdk"
      };
      let _0x12817b = createToggle(_0x9df087);
      _0x18ad65.push(_0x12817b);
      const _0x335a67 = {
        text: "分解符文",
        x: _0x5285f8.x,
        y: _0x5285f8.y + 40
      };
      let _0x443549 = createLabel(_0x335a67);
      _0x18ad65.push(_0x443549);
      const _0x301fa7 = {
        x: _0x443549.x + 70,
        y: _0x443549.y,
        selected: false,
        storageKey: "rune"
      };
      let _0x47ecca = createToggle(_0x301fa7);
      _0x18ad65.push(_0x47ecca);
      const _0x15a9e5 = {
        text: "瞩目扫荡",
        x: _0x71d4c6.x + 60,
        y: _0x443549.y
      };
      let _0x447dda = createLabel(_0x15a9e5);
      _0x18ad65.push(_0x447dda);
      const _0xca452e = {
        x: _0x5c3400.x + 70,
        y: _0x447dda.y,
        selected: false,
        storageKey: "zmsd"
      };
      let _0x3619c6 = createToggle(_0xca452e);
      _0x18ad65.push(_0x3619c6);
      const _0x113d57 = {
        text: "奥特分享",
        x: _0x5285f8.x,
        y: _0x443549.y + 40
      };
      let _0x9b4d1b = createLabel(_0x113d57);
      const _0x362106 = {
        x: _0x443549.x + 70,
        y: _0x9b4d1b.y,
        selected: false,
        storageKey: "atshare"
      };
      let _0x1543ff = createToggle(_0x362106);
      _0x14d323.addAllUis(_0x18ad65);
      _0x46c419.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x14d323.stop();
      }, function () {
        localStorage.setItem("bt1", _0x71d4c6.selected);
        localStorage.setItem("bt2", _0x517448.selected);
        localStorage.setItem("bt3", _0x5d1a3b.selected);
        localStorage.setItem("bt4", _0xd506ed.selected);
        localStorage.setItem("bt5", _0x273ea8.selected);
        localStorage.setItem("bt6", _0x8ae1d.selected);
        localStorage.setItem("bt7", _0x5d13e2.selected);
        localStorage.setItem("bt8", _0x142f8b.selected);
        localStorage.setItem("bt9", _0xf3712a.selected);
        localStorage.setItem("bt10", _0x190a0d.selected);
        localStorage.setItem("ninja", _0x140496.selected);
        localStorage.setItem("cdk", _0x12817b.selected);
        localStorage.setItem("rune", _0x47ecca.selected);
        localStorage.setItem("zmsd", _0x3619c6.selected);
        localStorage.setItem("atshare", _0x1543ff.selected);
        let _0x1aee92 = [_0x71d4c6, _0x517448, _0x5d1a3b, _0xd506ed, _0x273ea8, _0x8ae1d, _0x5d13e2, _0x142f8b, _0xf3712a, _0x190a0d, _0x140496, _0x12817b, _0x47ecca, _0x3619c6, _0x1543ff];
        for (let _0x40a593 = 0; _0x40a593 < _0x1aee92.length; _0x40a593++) {
          if (_0x1aee92[_0x40a593].selected) {
            _0x14d323.task[_0x40a593] = 1;
          }
        }
        _0x14d323.prcessBody();
      }], null);
      _0x46c419.showAlert();
    });
  }
  async prcessBody() {
    try {
      if (this.task[0]) {
        await this.send_message("cs_share_succeed", {});
        await wait(200);
        addGameLog("分享电池完成");
      }
      if (this.task[13]) {
        let _0x4c6a1e = xls.monthPveBoss.getItems().filter(function (_0x1072d7) {
          return _0x1072d7.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") <= _0x1072d7.endTime;
        });
        if (_0x4c6a1e.length <= 0) {
          addGameLog("瞩目精灵活动暂未开启");
        } else {
          for (let _0x246dd0 = 0; _0x246dd0 < _0x4c6a1e.length; _0x246dd0++) {
            if (MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x4c6a1e[_0x246dd0].activityType - 1) >= 2100) {
              addGameLog("瞩目精灵活动活力值已达标");
              let _0x3edb90 = MonthPveBossUtils.V_GetPveBossCost(xls.monthPveBoss.getItems().filter(function (_0x19ea4e) {
                return _0x19ea4e.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") <= _0x19ea4e.endTime;
              })[_0x246dd0]);
              if (BitUtils.getBit(MFC.attr.getAttr(_0x3edb90.progressFinishAttr), _0x3edb90.progressFinishIdx)) {
                addGameLog("图纸已领取");
              } else {
                const _0xd65799 = {
                  type: 2,
                  id: _0x4c6a1e[_0x246dd0].activityType,
                  progressDropId: 1,
                  petList: []
                };
                await this.send_message("cs_month_pve", _0xd65799);
                addGameLog("图纸已领取");
              }
            } else {
              let _0x26cea2 = MonthPveBossUtils.V_GetPveBossCost(xls.monthPveBoss.getItems().filter(function (_0x2b701d) {
                return _0x2b701d.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") <= _0x2b701d.endTime;
              })[_0x246dd0]);
              let _0x382050 = 1;
              let _0x14dd48 = 3326;
              if (_0x4c6a1e[_0x246dd0].id >= 13) {
                _0x14dd48 = 5223990;
                _0x14dd48 = _0x14dd48 + _0x4c6a1e[_0x246dd0].activityType - 1;
              } else {
                _0x14dd48 = _0x14dd48 + _0x4c6a1e[_0x246dd0].activityType - 1;
              }
              let _0x57f203 = MFC.attr.getAttr(_0x14dd48);
              if (BitUtils.getBit(_0x57f203, 3) > 0) {
                while (1) {
                  if (Math.max(0, _0x26cea2.dailyLimit + BitUtils.getBits(MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id < 13 ? 11361 : 5002353) + _0x4c6a1e[_0x246dd0].activityType - 1), 16, 16) - BitUtils.getBits(MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id < 13 ? 11361 : 5002353) + _0x4c6a1e[_0x246dd0].activityType - 1), 0, 16)) > 0) {
                    if (VIPManager.V_GetIsNoPlus()) {
                      const _0x20e2c9 = {
                        type: 5,
                        id: _0x4c6a1e[_0x246dd0].id,
                        difficultRank: 3,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x20e2c9);
                      addGameLog("扫荡第" + _0x382050 + "次");
                      _0x382050++;
                    } else if (VIPManager.getInstance().isVip) {
                      if (MFC.userInfo.curEnergy >= _0x26cea2.cardDatas._maps[3].costEnergy * 5 * 0.5) {
                        const _0x33d9a1 = {
                          type: 5,
                          id: _0x4c6a1e[_0x246dd0].id,
                          difficultRank: 3,
                          petList: [],
                          sweepTime: 1
                        };
                        await this.send_message("cs_month_pve", _0x33d9a1);
                        addGameLog("扫荡第" + _0x382050 + "次");
                        _0x382050++;
                      } else {
                        addGameLog("电池不足");
                        break;
                      }
                    } else if (MFC.userInfo.curEnergy >= _0x26cea2.cardDatas._maps[3].costEnergy * 5) {
                      const _0x3a604a = {
                        type: 5,
                        id: _0x4c6a1e[_0x246dd0].id,
                        difficultRank: 3,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x3a604a);
                      addGameLog("扫荡第" + _0x382050 + "次");
                      _0x382050++;
                    } else {
                      addGameLog("电池不足");
                      break;
                    }
                  } else {
                    addGameLog("次数不足");
                    break;
                  }
                  if (MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x4c6a1e[_0x246dd0].activityType - 1) >= 2100) {
                    addGameLog("瞩目精灵活动活力值已达标");
                    if (BitUtils.getBit(MFC.attr.getAttr(_0x26cea2.progressFinishAttr), _0x26cea2.progressFinishIdx)) {
                      addGameLog("图纸已领取");
                    } else {
                      const _0x3ef8e9 = {
                        type: 2,
                        id: _0x4c6a1e[_0x246dd0].activityType,
                        progressDropId: 1,
                        petList: []
                      };
                      await this.send_message("cs_month_pve", _0x3ef8e9);
                      addGameLog("图纸已领取");
                    }
                    break;
                  }
                }
              } else if (BitUtils.getBit(_0x57f203, 2) > 0) {
                while (1) {
                  if (Math.max(0, _0x26cea2.dailyLimit + BitUtils.getBits(MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id < 13 ? 11361 : 5002353) + _0x4c6a1e[_0x246dd0].activityType - 1), 16, 16) - BitUtils.getBits(MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id < 13 ? 11361 : 5002353) + _0x4c6a1e[_0x246dd0].activityType - 1), 0, 16)) > 0) {
                    if (VIPManager.V_GetIsNoPlus()) {
                      const _0x4f1bb2 = {
                        type: 5,
                        id: _0x4c6a1e[_0x246dd0].id,
                        difficultRank: 2,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x4f1bb2);
                      addGameLog("扫荡第" + _0x382050 + "次");
                      _0x382050++;
                    } else if (VIPManager.getInstance().isVip) {
                      if (MFC.userInfo.curEnergy >= _0x26cea2.cardDatas._maps[2].costEnergy * 5 * 0.5) {
                        const _0x1eb4c8 = {
                          type: 5,
                          id: _0x4c6a1e[_0x246dd0].id,
                          difficultRank: 2,
                          petList: [],
                          sweepTime: 1
                        };
                        await this.send_message("cs_month_pve", _0x1eb4c8);
                        addGameLog("扫荡第" + _0x382050 + "次");
                        _0x382050++;
                      } else {
                        addGameLog("电池不足");
                        break;
                      }
                    } else if (MFC.userInfo.curEnergy >= _0x26cea2.cardDatas._maps[2].costEnergy * 5) {
                      const _0x4f745d = {
                        type: 5,
                        id: _0x4c6a1e[_0x246dd0].id,
                        difficultRank: 2,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x4f745d);
                      addGameLog("扫荡第" + _0x382050 + "次");
                      _0x382050++;
                    } else {
                      addGameLog("电池不足");
                      break;
                    }
                  } else {
                    addGameLog("次数不足");
                    break;
                  }
                  if (MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x4c6a1e[_0x246dd0].activityType - 1) >= 2100) {
                    addGameLog("瞩目精灵活动活力值已达标");
                    if (BitUtils.getBit(MFC.attr.getAttr(_0x26cea2.progressFinishAttr), _0x26cea2.progressFinishIdx)) {
                      addGameLog("图纸已领取");
                    } else {
                      const _0x508fb4 = {
                        type: 2,
                        id: _0x4c6a1e[_0x246dd0].activityType,
                        progressDropId: 1,
                        petList: []
                      };
                      await this.send_message("cs_month_pve", _0x508fb4);
                      addGameLog("图纸已领取");
                    }
                    break;
                  }
                }
              } else if (BitUtils.getBit(_0x57f203, 1) > 0) {
                while (1) {
                  if (Math.max(0, _0x26cea2.dailyLimit + BitUtils.getBits(MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id < 13 ? 11361 : 5002353) + _0x4c6a1e[_0x246dd0].activityType - 1), 16, 16) - BitUtils.getBits(MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id < 13 ? 11361 : 5002353) + _0x4c6a1e[_0x246dd0].activityType - 1), 0, 16)) > 0) {
                    if (VIPManager.V_GetIsNoPlus()) {
                      const _0x890a8d = {
                        type: 5,
                        id: _0x4c6a1e[_0x246dd0].id,
                        difficultRank: 1,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x890a8d);
                      addGameLog("扫荡第" + _0x382050 + "次");
                      _0x382050++;
                    } else if (VIPManager.getInstance().isVip) {
                      if (MFC.userInfo.curEnergy >= _0x26cea2.cardDatas._maps[1].costEnergy * 5 * 0.5) {
                        const _0x5293b6 = {
                          type: 5,
                          id: _0x4c6a1e[_0x246dd0].id,
                          difficultRank: 1,
                          petList: [],
                          sweepTime: 1
                        };
                        await this.send_message("cs_month_pve", _0x5293b6);
                        addGameLog("扫荡第" + _0x382050 + "次");
                        _0x382050++;
                      } else {
                        addGameLog("电池不足");
                        break;
                      }
                    } else if (MFC.userInfo.curEnergy >= _0x26cea2.cardDatas._maps[1].costEnergy * 5) {
                      const _0x5d4528 = {
                        type: 5,
                        id: _0x4c6a1e[_0x246dd0].id,
                        difficultRank: 1,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x5d4528);
                      addGameLog("扫荡第" + _0x382050 + "次");
                      _0x382050++;
                    } else {
                      addGameLog("电池不足");
                      break;
                    }
                  } else {
                    addGameLog("次数不足");
                    break;
                  }
                  if (MFC.attr.getAttr((_0x4c6a1e[_0x246dd0].id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x4c6a1e[_0x246dd0].activityType - 1) >= 2100) {
                    addGameLog("瞩目精灵活动活力值已达标");
                    if (BitUtils.getBit(MFC.attr.getAttr(_0x26cea2.progressFinishAttr), _0x26cea2.progressFinishIdx)) {
                      addGameLog("图纸已领取");
                    } else {
                      const _0x5f0e1f = {
                        type: 2,
                        id: _0x4c6a1e[_0x246dd0].activityType,
                        progressDropId: 1,
                        petList: []
                      };
                      await this.send_message("cs_month_pve", _0x5f0e1f);
                      addGameLog("图纸已领取");
                    }
                    break;
                  }
                }
              } else {
                addGameLog("瞩目暂未通过任意星级难度。");
              }
            }
          }
        }
        let _0x9cfd = xls.monthPveBossReturn.getItem(1);
        let _0x5e5e9e = new Date().getTime();
        let _0x14064e = new Date(_0x9cfd.chooseStartTime.replace(/_/g, "-").replace(" ", " ")).getTime();
        let _0x16ba38 = new Date(_0x9cfd.chooseEndTime.replace(/_/g, "-").replace(" ", " ")).getTime();
        if (_0x5e5e9e >= _0x14064e && _0x5e5e9e <= _0x16ba38) {
          if (mongoAttr.getMonthPveReturnAttrMonthPveReturn().common.length > 0) {
            let _0x5b67ad = xls.monthPveBoss.getItem(mongoAttr.getMonthPveReturnAttrMonthPveReturn().common[0].monthPveId);
            if (MFC.attr.getAttr((_0x5b67ad.id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x5b67ad.activityType - 1) >= 2100) {
              addGameLog("瞩目精灵活动活力值已达标");
              let _0x2fde9f = MonthPveBossUtils.V_GetPveBossCost(_0x5b67ad);
              if (BitUtils.getBit(MFC.attr.getAttr(_0x2fde9f.progressFinishAttr), _0x2fde9f.progressFinishIdx)) {
                addGameLog("图纸已领取");
              } else {
                const _0xb34fa0 = {
                  type: 2,
                  id: _0x5b67ad.activityType,
                  progressDropId: 1,
                  petList: []
                };
                await this.send_message("cs_month_pve", _0xb34fa0);
                addGameLog("图纸已领取");
              }
            } else {
              let _0xd3fda = MonthPveBossUtils.V_GetPveBossCost(_0x5b67ad);
              let _0x5d2339 = 1;
              let _0x3d9071 = 3326;
              if (_0x5b67ad.id >= 13) {
                _0x3d9071 = 5223990;
                _0x3d9071 = _0x3d9071 + _0x5b67ad.activityType - 1;
              } else {
                _0x3d9071 = _0x3d9071 + _0x5b67ad.activityType - 1;
              }
              let _0x1dec46 = MFC.attr.getAttr(_0x3d9071);
              if (BitUtils.getBit(_0x1dec46, 3) > 0) {
                while (1) {
                  if (Math.max(0, _0xd3fda.dailyLimit + BitUtils.getBits(MFC.attr.getAttr((_0x5b67ad.id < 13 ? 11361 : 5002353) + _0x5b67ad.activityType - 1), 16, 16) - BitUtils.getBits(MFC.attr.getAttr((_0x5b67ad.id < 13 ? 11361 : 5002353) + _0x5b67ad.activityType - 1), 0, 16)) > 0) {
                    if (VIPManager.V_GetIsNoPlus()) {
                      const _0x13acf9 = {
                        type: 5,
                        id: _0x5b67ad.id,
                        difficultRank: 3,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x13acf9);
                      addGameLog("扫荡第" + _0x5d2339 + "次");
                      _0x5d2339++;
                    } else if (VIPManager.getInstance().isVip) {
                      if (MFC.userInfo.curEnergy >= _0xd3fda.cardDatas._maps[3].costEnergy * 5 * 0.5) {
                        const _0x2398fd = {
                          type: 5,
                          id: _0x5b67ad.id,
                          difficultRank: 3,
                          petList: [],
                          sweepTime: 1
                        };
                        await this.send_message("cs_month_pve", _0x2398fd);
                        addGameLog("扫荡第" + _0x5d2339 + "次");
                        _0x5d2339++;
                      } else {
                        addGameLog("电池不足");
                        break;
                      }
                    } else if (MFC.userInfo.curEnergy >= _0xd3fda.cardDatas._maps[3].costEnergy * 5) {
                      const _0x3535ec = {
                        type: 5,
                        id: _0x5b67ad.id,
                        difficultRank: 3,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x3535ec);
                      addGameLog("扫荡第" + _0x5d2339 + "次");
                      _0x5d2339++;
                    } else {
                      addGameLog("电池不足");
                      break;
                    }
                  } else {
                    addGameLog("次数不足");
                    break;
                  }
                  if (MFC.attr.getAttr((_0x5b67ad.id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x5b67ad.activityType - 1) >= 2100) {
                    addGameLog("瞩目精灵活动活力值已达标");
                    if (BitUtils.getBit(MFC.attr.getAttr(_0xd3fda.progressFinishAttr), _0xd3fda.progressFinishIdx)) {
                      addGameLog("图纸已领取");
                    } else {
                      const _0x2aaccd = {
                        type: 2,
                        id: _0x5b67ad.activityType,
                        progressDropId: 1,
                        petList: []
                      };
                      await this.send_message("cs_month_pve", _0x2aaccd);
                      addGameLog("图纸已领取");
                    }
                    break;
                  }
                }
              } else if (BitUtils.getBit(_0x1dec46, 2) > 0) {
                while (1) {
                  if (Math.max(0, _0xd3fda.dailyLimit + BitUtils.getBits(MFC.attr.getAttr((_0x5b67ad.id < 13 ? 11361 : 5002353) + _0x5b67ad.activityType - 1), 16, 16) - BitUtils.getBits(MFC.attr.getAttr((_0x5b67ad.id < 13 ? 11361 : 5002353) + _0x5b67ad.activityType - 1), 0, 16)) > 0) {
                    if (VIPManager.V_GetIsNoPlus()) {
                      const _0x5accd5 = {
                        type: 5,
                        id: _0x5b67ad.id,
                        difficultRank: 2,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x5accd5);
                      addGameLog("扫荡第" + _0x5d2339 + "次");
                      _0x5d2339++;
                    } else if (VIPManager.getInstance().isVip) {
                      if (MFC.userInfo.curEnergy >= _0xd3fda.cardDatas._maps[2].costEnergy * 5 * 0.5) {
                        const _0xfe0cbe = {
                          type: 5,
                          id: _0x5b67ad.id,
                          difficultRank: 2,
                          petList: [],
                          sweepTime: 1
                        };
                        await this.send_message("cs_month_pve", _0xfe0cbe);
                        addGameLog("扫荡第" + _0x5d2339 + "次");
                        _0x5d2339++;
                      } else {
                        addGameLog("电池不足");
                        break;
                      }
                    } else if (MFC.userInfo.curEnergy >= _0xd3fda.cardDatas._maps[2].costEnergy * 5) {
                      const _0x3ff781 = {
                        type: 5,
                        id: _0x5b67ad.id,
                        difficultRank: 2,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x3ff781);
                      addGameLog("扫荡第" + _0x5d2339 + "次");
                      _0x5d2339++;
                    } else {
                      addGameLog("电池不足");
                      break;
                    }
                  } else {
                    addGameLog("次数不足");
                    break;
                  }
                  if (MFC.attr.getAttr((_0x5b67ad.id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x5b67ad.activityType - 1) >= 2100) {
                    addGameLog("瞩目精灵活动活力值已达标");
                    if (BitUtils.getBit(MFC.attr.getAttr(_0xd3fda.progressFinishAttr), _0xd3fda.progressFinishIdx)) {
                      addGameLog("图纸已领取");
                    } else {
                      const _0x2c9dbc = {
                        type: 2,
                        id: _0x5b67ad.activityType,
                        progressDropId: 1,
                        petList: []
                      };
                      await this.send_message("cs_month_pve", _0x2c9dbc);
                      addGameLog("图纸已领取");
                    }
                    break;
                  }
                }
              } else if (BitUtils.getBit(_0x1dec46, 1) > 0) {
                while (1) {
                  if (Math.max(0, _0xd3fda.dailyLimit + BitUtils.getBits(MFC.attr.getAttr((_0x5b67ad.id < 13 ? 11361 : 5002353) + _0x5b67ad.activityType - 1), 16, 16) - BitUtils.getBits(MFC.attr.getAttr((_0x5b67ad.id < 13 ? 11361 : 5002353) + _0x5b67ad[i].activityType - 1), 0, 16)) > 0) {
                    if (VIPManager.V_GetIsNoPlus()) {
                      const _0x22b8f9 = {
                        type: 5,
                        id: _0x5b67ad.id,
                        difficultRank: 1,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x22b8f9);
                      addGameLog("扫荡第" + _0x5d2339 + "次");
                      _0x5d2339++;
                    } else if (VIPManager.getInstance().isVip) {
                      if (MFC.userInfo.curEnergy >= _0xd3fda.cardDatas._maps[1].costEnergy * 5 * 0.5) {
                        const _0x54eb9a = {
                          type: 5,
                          id: _0x5b67ad.id,
                          difficultRank: 1,
                          petList: [],
                          sweepTime: 1
                        };
                        await this.send_message("cs_month_pve", _0x54eb9a);
                        addGameLog("扫荡第" + _0x5d2339 + "次");
                        _0x5d2339++;
                      } else {
                        addGameLog("电池不足");
                        break;
                      }
                    } else if (MFC.userInfo.curEnergy >= _0xd3fda.cardDatas._maps[1].costEnergy * 5) {
                      const _0x58af74 = {
                        type: 5,
                        id: _0x5b67ad.id,
                        difficultRank: 1,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x58af74);
                      addGameLog("扫荡第" + _0x5d2339 + "次");
                      _0x5d2339++;
                    } else {
                      addGameLog("电池不足");
                      break;
                    }
                  } else {
                    addGameLog("次数不足");
                    break;
                  }
                  if (MFC.attr.getAttr((_0x5b67ad.id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x5b67ad.activityType - 1) >= 2100) {
                    addGameLog("瞩目精灵活动活力值已达标");
                    if (BitUtils.getBit(MFC.attr.getAttr(_0xd3fda.progressFinishAttr), _0xd3fda.progressFinishIdx)) {
                      addGameLog("图纸已领取");
                    } else {
                      const _0x303da5 = {
                        type: 2,
                        id: _0x5b67ad.activityType,
                        progressDropId: 1,
                        petList: []
                      };
                      await this.send_message("cs_month_pve", _0x303da5);
                      addGameLog("图纸已领取");
                    }
                    break;
                  }
                }
              } else {
                addGameLog("瞩目暂未通过任意星级难度。");
              }
            }
          } else {
            addGameLog("瞩目返场活动未选择");
          }
          if (mongoAttr.getMonthPveReturnAttrMonthPveReturn().plus.length > 0) {
            let _0x1b4e64 = xls.monthPveBoss.getItem(mongoAttr.getMonthPveReturnAttrMonthPveReturn().plus[0].monthPveId);
            if (MFC.attr.getAttr((_0x1b4e64.id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x1b4e64.activityType - 1) >= 2100) {
              addGameLog("瞩目精灵活动活力值已达标");
              let _0x6094f2 = MonthPveBossUtils.V_GetPveBossCost(_0x1b4e64);
              if (BitUtils.getBit(MFC.attr.getAttr(_0x6094f2.progressFinishAttr), _0x6094f2.progressFinishIdx)) {
                addGameLog("图纸已领取");
              } else {
                const _0x2ddba7 = {
                  type: 2,
                  id: _0x1b4e64.activityType,
                  progressDropId: 1,
                  petList: []
                };
                await this.send_message("cs_month_pve", _0x2ddba7);
                addGameLog("图纸已领取");
              }
            } else {
              let _0x3f3454 = MonthPveBossUtils.V_GetPveBossCost(_0x1b4e64);
              let _0x5886c7 = 1;
              let _0x8417c = 3326;
              if (_0x1b4e64.id >= 13) {
                _0x8417c = 5223990;
                _0x8417c = _0x8417c + _0x1b4e64.activityType - 1;
              } else {
                _0x8417c = _0x8417c + _0x1b4e64.activityType - 1;
              }
              let _0x1e3447 = MFC.attr.getAttr(_0x8417c);
              if (BitUtils.getBit(_0x1e3447, 3) > 0) {
                while (1) {
                  if (Math.max(0, _0x3f3454.dailyLimit + BitUtils.getBits(MFC.attr.getAttr((_0x1b4e64.id < 13 ? 11361 : 5002353) + _0x1b4e64.activityType - 1), 16, 16) - BitUtils.getBits(MFC.attr.getAttr((_0x1b4e64.id < 13 ? 11361 : 5002353) + _0x1b4e64.activityType - 1), 0, 16)) > 0) {
                    if (VIPManager.V_GetIsNoPlus()) {
                      const _0x4acb43 = {
                        type: 5,
                        id: _0x1b4e64.id,
                        difficultRank: 3,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x4acb43);
                      addGameLog("扫荡第" + _0x5886c7 + "次");
                      _0x5886c7++;
                    } else if (VIPManager.getInstance().isVip) {
                      if (MFC.userInfo.curEnergy >= _0x3f3454.cardDatas._maps[3].costEnergy * 5 * 0.5) {
                        const _0x32e950 = {
                          type: 5,
                          id: _0x1b4e64.id,
                          difficultRank: 3,
                          petList: [],
                          sweepTime: 1
                        };
                        await this.send_message("cs_month_pve", _0x32e950);
                        addGameLog("扫荡第" + _0x5886c7 + "次");
                        _0x5886c7++;
                      } else {
                        addGameLog("电池不足");
                        break;
                      }
                    } else if (MFC.userInfo.curEnergy >= _0x3f3454.cardDatas._maps[3].costEnergy * 5) {
                      const _0x514d40 = {
                        type: 5,
                        id: _0x1b4e64.id,
                        difficultRank: 3,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x514d40);
                      addGameLog("扫荡第" + _0x5886c7 + "次");
                      _0x5886c7++;
                    } else {
                      addGameLog("电池不足");
                      break;
                    }
                  } else {
                    addGameLog("次数不足");
                    break;
                  }
                  if (MFC.attr.getAttr((_0x1b4e64.id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x1b4e64.activityType - 1) >= 2100) {
                    addGameLog("瞩目精灵活动活力值已达标");
                    if (BitUtils.getBit(MFC.attr.getAttr(_0x3f3454.progressFinishAttr), _0x3f3454.progressFinishIdx)) {
                      addGameLog("图纸已领取");
                    } else {
                      const _0x5472fd = {
                        type: 2,
                        id: _0x1b4e64.activityType,
                        progressDropId: 1,
                        petList: []
                      };
                      await this.send_message("cs_month_pve", _0x5472fd);
                      addGameLog("图纸已领取");
                    }
                    break;
                  }
                }
              } else if (BitUtils.getBit(_0x1e3447, 2) > 0) {
                while (1) {
                  if (Math.max(0, _0x3f3454.dailyLimit + BitUtils.getBits(MFC.attr.getAttr((_0x1b4e64.id < 13 ? 11361 : 5002353) + _0x1b4e64.activityType - 1), 16, 16) - BitUtils.getBits(MFC.attr.getAttr((_0x1b4e64.id < 13 ? 11361 : 5002353) + _0x1b4e64.activityType - 1), 0, 16)) > 0) {
                    if (VIPManager.V_GetIsNoPlus()) {
                      const _0x4ad771 = {
                        type: 5,
                        id: _0x1b4e64.id,
                        difficultRank: 2,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x4ad771);
                      addGameLog("扫荡第" + _0x5886c7 + "次");
                      _0x5886c7++;
                    } else if (VIPManager.getInstance().isVip) {
                      if (MFC.userInfo.curEnergy >= _0x3f3454.cardDatas._maps[2].costEnergy * 5 * 0.5) {
                        const _0x571483 = {
                          type: 5,
                          id: _0x1b4e64.id,
                          difficultRank: 2,
                          petList: [],
                          sweepTime: 1
                        };
                        await this.send_message("cs_month_pve", _0x571483);
                        addGameLog("扫荡第" + _0x5886c7 + "次");
                        _0x5886c7++;
                      } else {
                        addGameLog("电池不足");
                        break;
                      }
                    } else if (MFC.userInfo.curEnergy >= _0x3f3454.cardDatas._maps[2].costEnergy * 5) {
                      const _0x4e5852 = {
                        type: 5,
                        id: _0x1b4e64.id,
                        difficultRank: 2,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x4e5852);
                      addGameLog("扫荡第" + _0x5886c7 + "次");
                      _0x5886c7++;
                    } else {
                      addGameLog("电池不足");
                      break;
                    }
                  } else {
                    addGameLog("次数不足");
                    break;
                  }
                  if (MFC.attr.getAttr((_0x1b4e64.id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x1b4e64.activityType - 1) >= 2100) {
                    addGameLog("瞩目精灵活动活力值已达标");
                    if (BitUtils.getBit(MFC.attr.getAttr(_0x3f3454.progressFinishAttr), _0x3f3454.progressFinishIdx)) {
                      addGameLog("图纸已领取");
                    } else {
                      const _0x42be61 = {
                        type: 2,
                        id: _0x1b4e64.activityType,
                        progressDropId: 1,
                        petList: []
                      };
                      await this.send_message("cs_month_pve", _0x42be61);
                      addGameLog("图纸已领取");
                    }
                    break;
                  }
                }
              } else if (BitUtils.getBit(_0x1e3447, 1) > 0) {
                while (1) {
                  if (Math.max(0, _0x3f3454.dailyLimit + BitUtils.getBits(MFC.attr.getAttr((_0x1b4e64.id < 13 ? 11361 : 5002353) + _0x1b4e64.activityType - 1), 16, 16) - BitUtils.getBits(MFC.attr.getAttr((_0x1b4e64.id < 13 ? 11361 : 5002353) + _0x1b4e64[i].activityType - 1), 0, 16)) > 0) {
                    if (VIPManager.V_GetIsNoPlus()) {
                      const _0x961c9e = {
                        type: 5,
                        id: _0x1b4e64.id,
                        difficultRank: 1,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x961c9e);
                      addGameLog("扫荡第" + _0x5886c7 + "次");
                      _0x5886c7++;
                    } else if (VIPManager.getInstance().isVip) {
                      if (MFC.userInfo.curEnergy >= _0x3f3454.cardDatas._maps[1].costEnergy * 5 * 0.5) {
                        const _0x2db099 = {
                          type: 5,
                          id: _0x1b4e64.id,
                          difficultRank: 1,
                          petList: [],
                          sweepTime: 1
                        };
                        await this.send_message("cs_month_pve", _0x2db099);
                        addGameLog("扫荡第" + _0x5886c7 + "次");
                        _0x5886c7++;
                      } else {
                        addGameLog("电池不足");
                        break;
                      }
                    } else if (MFC.userInfo.curEnergy >= _0x3f3454.cardDatas._maps[1].costEnergy * 5) {
                      const _0x5e2db6 = {
                        type: 5,
                        id: _0x1b4e64.id,
                        difficultRank: 1,
                        petList: [],
                        sweepTime: 1
                      };
                      await this.send_message("cs_month_pve", _0x5e2db6);
                      addGameLog("扫荡第" + _0x5886c7 + "次");
                      _0x5886c7++;
                    } else {
                      addGameLog("电池不足");
                      break;
                    }
                  } else {
                    addGameLog("次数不足");
                    break;
                  }
                  if (MFC.attr.getAttr((_0x1b4e64.id >= 13 ? 5224038 : MFC.attrType.foreverMonthPveActivityStart) + _0x1b4e64.activityType - 1) >= 2100) {
                    addGameLog("瞩目精灵活动活力值已达标");
                    if (BitUtils.getBit(MFC.attr.getAttr(_0x3f3454.progressFinishAttr), _0x3f3454.progressFinishIdx)) {
                      addGameLog("图纸已领取");
                    } else {
                      const _0x229442 = {
                        type: 2,
                        id: _0x1b4e64.activityType,
                        progressDropId: 1,
                        petList: []
                      };
                      await this.send_message("cs_month_pve", _0x229442);
                      addGameLog("图纸已领取");
                    }
                    break;
                  }
                }
              } else {
                addGameLog("瞩目暂未通过任意星级难度。");
              }
            }
          }
        } else {
          addGameLog("没有瞩目返场活动");
        }
        addGameLog("瞩目扫荡结束");
      }
      if (this.task[14]) {
        if (deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") < "2024_10_18 5:00:00") {
          if (ExchangeUtils.getCurrentExchangeNum(xls.activityExchange.getItem(11781)) == 1) {
            addGameLog(xls.activityExchange.getItem(11781).name + "已领取");
          } else {
            await this.send_message("cs_exchange_activity_reward", {
              id: 11781,
              coeff: 1,
              selectIndex: 0,
              subDropIdList: []
            });
            await wait(200);
            addGameLog("领取" + xls.activityExchange.getItem(11781).name);
          }
        } else {
          addGameLog(xls.activityExchange.getItem(11781).name + "已结束");
        }
      }
      if (this.task[1]) {
        if (MFC.attr.getAttr(MFC.attrType.dailyActivityFightBugStatus) == 0) {
          await this.send_message("cs_fight_bug", {});
          touchBtn(sta);
          await wait(200);
          addGameLog("揍bug完成");
        } else {
          addGameLog("揍bug完成");
        }
      }
      if (this.task[2]) {
        if (MFC.attr.getAttr(MFC.attrType.dailyHouseLikeLength) >= 10) {
          addGameLog("小屋点赞完成");
        } else {
          let _0x51c5a0 = await this.send_message("cs_house_praise_vistors", {
            type: 1,
            pageNo: 1,
            pageSize: 10
          });
          logger(_0x51c5a0.vistors.length);
          for (let _0x5b755c = 0; _0x5b755c < _0x51c5a0.vistors.length; _0x5b755c++) {
            _0x51c5a0.vistors[0].userId = 5674485;
            _0x51c5a0.vistors[1].userId = 4816491;
            _0x51c5a0.vistors[2].userId = 8966352;
            _0x51c5a0.vistors[3].userId = 1967823;
            _0x51c5a0.vistors[4].userId = 5037279;
            _0x51c5a0.vistors[5].userId = 13644029;
            _0x51c5a0.vistors[6].userId = 1658936;
            _0x51c5a0.vistors[7].userId = 6661395;
            _0x51c5a0.vistors[8].userId = 5789350;
            _0x51c5a0.vistors[9].userId = 10069566;
            const _0x56c12a = {
              uid: _0x51c5a0.vistors[_0x5b755c].userId
            };
            await this.send_message("cs_house_like", _0x56c12a);
            touchBtn(sta);
            await wait(200);
            addGameLog("点赞" + _0x51c5a0.vistors[_0x5b755c].roleNick);
          }
          await wait(200);
          addGameLog("小屋点赞完成");
        }
      }
      if (this.task[3]) {
        if (MFC.serverTimer.date.getHours() < 12) {
          MFC.alert.show("未到电池领取时间");
        }
        if (MFC.serverTimer.date.getHours() >= 12 && MFC.serverTimer.date.getHours() < 18) {
          if (MFC.attr.getAttr(MFC.attrType.dailyGetPhysicalRecovery) == 0) {
            await this.send_message("cs_physical_recovery", {});
            touchBtn(sta);
            await wait(200);
          } else {
            addGameLog("每日电池已领取");
          }
        }
        if (MFC.serverTimer.date.getHours() >= 18 && MFC.serverTimer.date.getHours() <= 23) {
          if (MFC.attr.getAttr(MFC.attrType.dailyGetPhysicalRecovery) == 0) {
            await this.send_message("cs_physical_recovery", {});
            touchBtn(sta);
            await wait(200);
            await this.send_message("cs_physical_recovery", {});
            touchBtn(sta);
            await wait(200);
          } else if (MFC.attr.getAttr(MFC.attrType.dailyGetPhysicalRecovery) == 1) {
            await this.send_message("cs_physical_recovery", {});
            touchBtn(sta);
            await wait(200);
          } else {
            addGameLog("每日电池已领取");
          }
        }
      }
      if (this.task[4]) {
        let _0x296b10 = xls.activityPetStory.getItems().map(_0x4bc843 => {
          if (_0x4bc843.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") <= _0x4bc843.endTime) {
            var _0x17ea09 = _0x4bc843.endTime;
            var _0x2e14d1 = deden.DateUtil.create(_0x17ea09);
            _0x2e14d1.setHours(_0x2e14d1.getHours() - 15);
            var _0x524d7f = deden.DateUtil.dateFormat(_0x2e14d1, "yyyy_MM_dd hh:mm:ss");
            if (_0x524d7f >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss")) {
              if (_0x4bc843.name[_0x4bc843.name.length - 1] != "篇") {
                return _0x4bc843;
              }
            }
          }
        }).sort().filter(_0xc210b6 => _0xc210b6 != undefined);
        for (let _0x5d0a24 = 0; _0x5d0a24 < _0x296b10.length; _0x5d0a24++) {
          if (SpritePlotManager.getInstance().getPlotStateById(_0x296b10[_0x5d0a24].id) == 3) {
            addGameLog(_0x296b10[_0x5d0a24].name + _0x296b10[_0x5d0a24].stepNumber + "已完成");
          } else if (SpritePlotManager.getInstance().getPlotStateById(_0x296b10[_0x5d0a24].id) == 2) {
            const _0xdd9bc3 = {
              id: _0x296b10[_0x5d0a24].id,
              type: 2,
              getTimeList: []
            };
            await this.send_message("cs_new_pet_story", _0xdd9bc3);
            touchBtn(sta);
            await wait(200);
          } else if (SpritePlotManager.getInstance().getPlotStateById(_0x296b10[_0x5d0a24].id) == 0) {
            logger(_0x296b10[_0x5d0a24].name + "未解锁");
          } else {
            logger(_0x296b10[_0x5d0a24].id);
            const _0x2a0fdd = {
              id: _0x296b10[_0x5d0a24].id,
              type: 1,
              getTimeList: []
            };
            await this.send_message("cs_new_pet_story", _0x2a0fdd);
            await wait(200);
            const _0x4cff42 = {
              id: _0x296b10[_0x5d0a24].id,
              type: 2,
              getTimeList: []
            };
            await this.send_message("cs_new_pet_story", _0x4cff42);
            touchBtn(sta);
            await wait(200);
            addGameLog(_0x296b10[_0x5d0a24].name + _0x296b10[_0x5d0a24].stepNumber + "已完成");
          }
        }
      }
      if (this.task[5]) {
        let _0x386e19 = xls.activityPetStory.getItems().map(_0x1e74dc => {
          if (_0x1e74dc.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") <= _0x1e74dc.endTime) {
            var _0x3e3b38 = _0x1e74dc.endTime;
            var _0x4d6954 = deden.DateUtil.create(_0x3e3b38);
            _0x4d6954.setHours(_0x4d6954.getHours() - 15);
            var _0xd7545c = deden.DateUtil.dateFormat(_0x4d6954, "yyyy_MM_dd hh:mm:ss");
            if (_0xd7545c >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss")) {
              if (_0x1e74dc.name[_0x1e74dc.name.length - 1] == "篇") {
                return _0x1e74dc;
              }
            }
          }
        }).sort().filter(_0xd2bc3 => _0xd2bc3 != undefined);
        for (let _0x3a0dd2 = 0; _0x3a0dd2 < _0x386e19.length; _0x3a0dd2++) {
          if (SpritePlotManager.getInstance().getPlotStateById(_0x386e19[_0x3a0dd2].id) == 3) {
            addGameLog(_0x386e19[_0x3a0dd2].name + _0x386e19[_0x3a0dd2].stepNumber + "已完成");
          } else if (SpritePlotManager.getInstance().getPlotStateById(_0x386e19[_0x3a0dd2].id) == 2) {
            const _0x5a676c = {
              id: _0x386e19[_0x3a0dd2].id,
              type: 2,
              getTimeList: []
            };
            await this.send_message("cs_new_pet_story", _0x5a676c);
            touchBtn(sta);
            await wait(200);
          } else if (SpritePlotManager.getInstance().getPlotStateById(_0x386e19[_0x3a0dd2].id) == 0) {
            logger(_0x386e19[_0x3a0dd2].name + "未解锁");
          } else {
            logger(_0x386e19[_0x3a0dd2].id);
            const _0x1dd312 = {
              id: _0x386e19[_0x3a0dd2].id,
              type: 1,
              getTimeList: []
            };
            await this.send_message("cs_new_pet_story", _0x1dd312);
            await wait(200);
            const _0x4d6f9b = {
              id: _0x386e19[_0x3a0dd2].id,
              type: 2,
              getTimeList: []
            };
            await this.send_message("cs_new_pet_story", _0x4d6f9b);
            touchBtn(sta);
            await wait(200);
            addGameLog(_0x386e19[_0x3a0dd2].name + _0x386e19[_0x3a0dd2].stepNumber + "已完成");
          }
        }
      }
      if (this.task[6]) {
        const _0x4eed00 = xls.collect.getItems().map(_0x3c0956 => {
          if (_0x3c0956.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss") <= _0x3c0956.endTime) {
            return _0x3c0956.id;
          }
        }).filter(_0x5b2137 => _0x5b2137 !== undefined);
        const _0x49b712 = xls.collect.getItems().map(_0x5eaff2 => {
          if (_0x5eaff2.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy-MM-dd hh:mm:ss") <= _0x5eaff2.endTime) {
            return _0x5eaff2.dailyLimit;
          }
        }).filter(_0x51eec8 => _0x51eec8 !== undefined);
        const _0x376bab = _0x4eed00.map(_0x26628c => {
          return MFC.attr.getAttr(parseInt(MFC.attrType.dailyMiningStart) + _0x26628c);
        });
        let _0x997424 = 0;
        while (_0x997424 < _0x4eed00.length) {
          if (_0x376bab[_0x997424] < _0x49b712[_0x997424]) {
            const _0x58105b = {
              id: _0x4eed00[_0x997424]
            };
            await this.send_message("cs_mining", _0x58105b);
            await wait(500);
            _0x376bab[_0x997424]++;
          } else {
            let _0x3e19a5 = xls.collect.getItem(_0x4eed00[_0x997424]).name;
            addGameLog(_0x3e19a5 + "采集完毕");
            _0x997424++;
          }
        }
      }
      if (this.task[7]) {
        if (parseInt(getSeerItemNum(15019)) >= 5) {
          if (parseInt(MFC.attr.getAttr([MFC.attrType.foreverJaynesHp, MFC.attrType.foreverBaennaHp][0])) < 1000) {
            while (MFC.attr.getAttr(11842) < 5) {
              await this.send_message("cs_light_shadow", {
                itemId: 15019,
                op: 1,
                type: 1
              });
              touchBtn(sta);
              await wait(200);
              touchBtn(sta);
            }
            addGameLog("光狮子完成。");
          } else {
            MFC.alert.show("光狮子已经满血");
          }
        } else {
          MFC.alert.show("光明精华不足5");
        }
        if (parseInt(getSeerItemNum(15009)) >= 5) {
          if (parseInt(MFC.attr.getAttr([MFC.attrType.foreverJaynesHp, MFC.attrType.foreverBaennaHp][1])) < 1000) {
            while (MFC.attr.getAttr(11844) < 5) {
              await this.send_message("cs_light_shadow", {
                itemId: 15009,
                op: 1,
                type: 2
              });
              touchBtn(sta);
              await wait(200);
              touchBtn(sta);
            }
            addGameLog("暗狮子完成。");
          } else {
            MFC.alert.show("暗狮子已经满血");
          }
        } else {
          MFC.alert.show("暗黑精华不足5");
        }
      }
      if (this.task[8]) {
        if (MFC.attr.getAttr(MFC.attrType.dailyLikeFriendEventTimes) >= 5) {
          addGameLog("好友点赞完成");
        } else {
          let _0x54c874 = await this.send_message("cs_get_friend_event", {});
          logger(_0x54c874.dynEventList);
          if (_0x54c874.dynEventList.length < 5) {
            for (let _0x20b314 = 0; _0x20b314 < _0x54c874.dynEventList.length; _0x20b314++) {
              if (_0x54c874.dynEventList[_0x20b314].likeTimes == 0) {
                const _0x7dc846 = {
                  order: _0x54c874.dynEventList[_0x20b314].order,
                  userId: _0x54c874.dynEventList[_0x20b314].userId
                };
                await this.send_message("cs_like_friend_event", _0x7dc846);
                touchBtn(sta);
                await wait(200);
              }
            }
          } else {
            for (let _0x209b98 = 0; _0x209b98 < 5; _0x209b98++) {
              const _0x43cf9c = {
                order: _0x54c874.dynEventList[_0x209b98].order,
                userId: _0x54c874.dynEventList[_0x209b98].userId
              };
              await this.send_message("cs_like_friend_event", _0x43cf9c);
              touchBtn(sta);
              await wait(200);
            }
          }
          await wait(200);
          addGameLog("好友点赞完成");
        }
      }
      if (this.task[9]) {
        var _0x19b4b7 = MFC.userInfo.vipLevel;
        if (parseInt(_0x19b4b7) > 0) {
          if (Math.min(Math.max(TaskUtils.GetRestTaskCurrentProgress(xls.activityTaskReset.getItem(10711)) - 1, 0), xls.activityTaskReset.getItem(10711).parameter) == 1) {
            addGameLog("教皇券领取完成");
          } else {
            await this.send_message("cs_get_activity_task_reset_reward", {
              carnivalId: 10711
            });
            touchBtn(sta);
            addGameLog("教皇券领取完成");
          }
        } else {
          addGameLog("没有超No");
        }
      }
      if (this.task[10]) {
        if (MFC.attr.getAttr(17000) == 10) {
          addGameLog("忍魂活动次数已达10次");
        } else {
          while (true) {
            if (MFC.attr.getAttr(17000) < 10) {
              if (MFC.attr.getAttr(MFC.attrType.foreverRenhunrenzheBAttr1 + 0) < 100) {
                touchBtn(sta);
                await this.send_message("cs_exchange_activity_reward", {
                  id: 10504,
                  subDropIdList: []
                });
                touchBtn(sta);
              } else if (MFC.attr.getAttr(MFC.attrType.foreverRenhunrenzheBAttr1 + 1) < 100) {
                touchBtn(sta);
                await this.send_message("cs_exchange_activity_reward", {
                  id: 10512,
                  subDropIdList: []
                });
                touchBtn(sta);
              } else if (MFC.attr.getAttr(MFC.attrType.foreverRenhunrenzheBAttr1 + 2) < 100) {
                touchBtn(sta);
                await this.send_message("cs_exchange_activity_reward", {
                  id: 10520,
                  subDropIdList: []
                });
                touchBtn(sta);
              } else if (MFC.attr.getAttr(MFC.attrType.foreverRenhunrenzheBAttr1 + 4) < 100) {
                touchBtn(sta);
                await this.send_message("cs_exchange_activity_reward", {
                  id: 10536,
                  subDropIdList: []
                });
                touchBtn(sta);
              } else {
                touchBtn(sta);
                if (ItemManager.getInstance().getItemNumById(15017) > 10) {
                  await this.send_message("cs_exchange_activity_reward", {
                    id: 10528,
                    subDropIdList: []
                  });
                } else if (ItemManager.getInstance().getItemNumById(15015) > 10) {
                  await this.send_message("cs_exchange_activity_reward", {
                    id: 10504,
                    subDropIdList: []
                  });
                } else if (ItemManager.getInstance().getItemNumById(15027) > 10) {
                  await this.send_message("cs_exchange_activity_reward", {
                    id: 10512,
                    subDropIdList: []
                  });
                } else if (ItemManager.getInstance().getItemNumById(15011) > 10) {
                  await this.send_message("cs_exchange_activity_reward", {
                    id: 10520,
                    subDropIdList: []
                  });
                } else if (ItemManager.getInstance().getItemNumById(15001) > 10) {
                  await this.send_message("cs_exchange_activity_reward", {
                    id: 10536,
                    subDropIdList: []
                  });
                }
                touchBtn(sta);
              }
            } else {
              break;
            }
          }
          addGameLog("忍魂活动完成");
        }
      }
      if (this.task[11]) {
        let _0x20cb38 = ["蓓丽安特", "克雷弗德", "阿特米克", "奥瑞亚", "群星之集", "工业学会", "勇无止境冲破群星", "SEER61HAPPY", "SQHP"];
        for (let _0x1fbb27 = 0; _0x1fbb27 < _0x20cb38.length; _0x1fbb27++) {
          const _0xfcdb55 = {
            code: _0x20cb38[_0x1fbb27]
          };
          await this.send_message("cs_get_secret_code_rward", _0xfcdb55);
          touchBtn(sta);
        }
      }
      if (this.task[12]) {
        super.start();
        let _0x50e3e5 = this;
        RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
          let _0x521daf = [];
          var _0xce15e7 = SimpleAlertUi({
            height: 350,
            width: 460
          });
          _0x50e3e5.alertWin = _0xce15e7;
          const _0xef4b21 = {
            text: "分解符文",
            x: _0xce15e7.applicationWidth / 2 - 20,
            y: _0xce15e7.height / 15
          };
          let _0x286646 = createLabel(_0xef4b21);
          _0x286646.size = 20;
          _0x521daf.push(_0x286646);
          const _0x30314b = {
            prompt: "二级密码",
            x: _0xce15e7.applicationWidth / 6,
            y: _0xce15e7.height / 15 + 40,
            width: 100
          };
          var _0x57f870 = createEdit(_0x30314b);
          _0x521daf.push(_0x57f870);
          const _0x3b7d83 = {
            text: "[二级密码没有不填写]",
            x: _0xce15e7.applicationWidth / 3 + 25,
            y: _0xce15e7.height / 15 + 45
          };
          let _0xed2a2c = createLabel(_0x3b7d83);
          _0xed2a2c.size = 20;
          _0xed2a2c.textColor = 16711680;
          _0x521daf.push(_0xed2a2c);
          const _0x5ac5f9 = {
            x: _0xce15e7.applicationWidth / 6,
            y: _0x57f870.y + 60,
            selected: true,
            storageKey: "rune1"
          };
          let _0x4cdb44 = createRadio(_0x5ac5f9);
          _0x521daf.push(_0x4cdb44);
          const _0x3f1c3e = {
            text: "分解随机符文可获得的",
            x: _0x4cdb44.x + 40,
            y: _0x4cdb44.y
          };
          let _0x515a8c = createLabel(_0x3f1c3e);
          _0x521daf.push(_0x515a8c);
          const _0x1117d1 = {
            x: _0xce15e7.applicationWidth / 6,
            y: _0x4cdb44.y + 40,
            selected: false,
            storageKey: "rune2"
          };
          let _0x2ff947 = createRadio(_0x1117d1);
          _0x521daf.push(_0x2ff947);
          const _0x564a1a = {
            text: "分解低级符文",
            x: _0x2ff947.x + 40,
            y: _0x2ff947.y
          };
          let _0x4961ed = createLabel(_0x564a1a);
          _0x521daf.push(_0x4961ed);
          const _0x5546c5 = {
            text: `分解随机符文就是分解随机符文商店里面所描述的
分解低级就是购买不超过1200以下都分解
不会分解已绑定不分解玩水`,
            x: _0x4cdb44.x,
            y: _0x2ff947.y + 40
          };
          let _0x57acc7 = createLabel(_0x5546c5);
          _0x57acc7.textColor = 13612347;
          _0x521daf.push(_0x57acc7);
          _0x50e3e5.addAllUis(_0x521daf);
          _0xce15e7.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
            _0x50e3e5.stop();
          }, function () {
            localStorage.setItem("rune1", _0x4cdb44.selected);
            localStorage.setItem("rune2", _0x2ff947.selected);
            if (_0x57f870.text != "") {
              if (_0x57f870.text.toString().length != 6) {
                MFC.bubbleAlert.showAlert("请输入有效二级密码");
                _0x50e3e5.prcessBody(_0x50e3e5.task[12] = 1);
              } else {
                _0x50e3e5.input2Pwd = parseInt(_0x57f870.text);
                logger("二级 密码" + _0x50e3e5.input2Pwd);
                if (_0x4cdb44.selected) {
                  _0x50e3e5.disrune1();
                } else {
                  _0x50e3e5.disrune2();
                }
              }
            } else if (_0x4cdb44.selected) {
              _0x50e3e5.disrune1();
            } else {
              _0x50e3e5.disrune2();
            }
          }], null);
          _0xce15e7.showAlert();
        });
      } else {
        touchBtn(sta);
        addGameLog("一键杂项完成");
        this.stop();
      }
    } catch (_0x34f9a4) {}
  }
  async disrune1() {
    if (this.input2Pwd != null) {
      if (this.input2Pwd.toString().length == 6) {
        let _0x3692bb = await this.send_message("cs_2nd_passwd", {
          option: 2,
          param: this.input2Pwd.toString()
        });
        if (JSON.stringify(_0x3692bb).indexOf("二级密码解锁失败") != -1) {
          addGameLog("二级密码错误");
          MFC.bubbleAlert.showAlert("二级密码错误");
          await this.prcessBody(this.task[12] = 1);
        } else {
          let _0x5ceb94 = [];
          for (let _0x4e8828 = 0; _0x4e8828 < xls.dropUnit.getItem(8316).skillRune.split("|").length; _0x4e8828++) {
            _0x5ceb94.push(parseInt(xls.dropUnit.getItem(8316).skillRune.split("|")[_0x4e8828].split("_")[0]));
          }
          let _0x34187f = SkillRuneManager.getAllRunes().map(_0x10ca92 => {
            if (_0x5ceb94.indexOf(_0x10ca92.id) != -1 && _0x10ca92.bindPet == 0) {
              return _0x10ca92;
            }
          }).sort().filter(_0x52bb91 => _0x52bb91 != undefined);
          if (_0x34187f.length == 0) {
            addGameLog("没有符文可分解");
          } else {
            for (let _0x28de8b = 0; _0x28de8b < _0x34187f.length; _0x28de8b++) {
              addGameLog("分解符文=>\n" + SkillRuneManager.getNormalRuneConfs().find(_0x261c62 => _0x261c62.id === _0x34187f[_0x28de8b].id).name);
              const _0x2e76d7 = {
                op: 2,
                runeGetTime: _0x34187f[_0x28de8b].getTime,
                runeId: _0x34187f[_0x28de8b].id
              };
              await this.send_message("cs_pet_skill_rune", _0x2e76d7);
              touchBtn(sta);
            }
          }
          addGameLog("分解结束");
          addGameLog("一键杂项完成");
          this.stop();
        }
      }
    } else {
      let _0x4a3d34 = SkillRuneManager.getNormalRuneConfs().map(_0x51d751 => {
        return _0x51d751.id;
      });
      let _0x5b7951 = SkillRuneManager.getAllRunes().map(_0xecc828 => {
        if (_0x4a3d34.indexOf(_0xecc828.id) != -1 && SkillRuneManager.getNormalRuneConfs()[_0x4a3d34.indexOf(_0xecc828.id)].decompose > 0 && SkillRuneManager.getNormalRuneConfs()[_0x4a3d34.indexOf(_0xecc828.id)].decompose < 300 && _0xecc828.bindPet == 0 && _0xecc828.id != 205) {
          return _0xecc828;
        }
      }).sort().filter(_0x5284d3 => _0x5284d3 != undefined);
      if (_0x5b7951.length == 0) {
        addGameLog("没有符文可分解");
      } else {
        for (let _0x97c32a = 0; _0x97c32a < _0x5b7951.length; _0x97c32a++) {
          addGameLog("分解符文=>\n" + SkillRuneManager.getNormalRuneConfs().find(_0x4fb5a5 => _0x4fb5a5.id === _0x5b7951[_0x97c32a].id).name);
          const _0x2c93d2 = {
            op: 2,
            runeGetTime: _0x5b7951[_0x97c32a].getTime,
            runeId: _0x5b7951[_0x97c32a].id
          };
          await this.send_message("cs_pet_skill_rune", _0x2c93d2);
          touchBtn(sta);
        }
      }
      addGameLog("分解结束");
      addGameLog("一键杂项完成");
      this.stop();
    }
  }
  async disrune2() {
    if (this.input2Pwd != null) {
      if (this.input2Pwd.toString().length == 6) {
        let _0x21cffd = await this.send_message("cs_2nd_passwd", {
          option: 2,
          param: this.input2Pwd.toString()
        });
        if (JSON.stringify(_0x21cffd).indexOf("二级密码解锁失败") != -1) {
          addGameLog("二级密码错误");
          MFC.bubbleAlert.showAlert("二级密码错误");
          await this.prcessBody(this.task[12] = 1);
        } else {
          let _0x25de9e = SkillRuneManager.getNormalRuneConfs().map(_0x52d30 => {
            return _0x52d30.id;
          });
          let _0x5bcdd5 = SkillRuneManager.getAllRunes().map(_0x130d38 => {
            if (_0x25de9e.indexOf(_0x130d38.id) != -1 && SkillRuneManager.getNormalRuneConfs()[_0x25de9e.indexOf(_0x130d38.id)].decompose > 0 && SkillRuneManager.getNormalRuneConfs()[_0x25de9e.indexOf(_0x130d38.id)].decompose < 300 && _0x130d38.bindPet == 0 && _0x130d38.id != 205) {
              return _0x130d38;
            }
          }).sort().filter(_0x37f725 => _0x37f725 != undefined);
          if (_0x5bcdd5.length == 0) {
            addGameLog("没有符文可分解");
          } else {
            for (let _0x1029be = 0; _0x1029be < _0x5bcdd5.length; _0x1029be++) {
              addGameLog("分解符文=>\n" + SkillRuneManager.getNormalRuneConfs().find(_0x20b3c1 => _0x20b3c1.id === _0x5bcdd5[_0x1029be].id).name);
              const _0x45b2e2 = {
                op: 2,
                runeGetTime: _0x5bcdd5[_0x1029be].getTime,
                runeId: _0x5bcdd5[_0x1029be].id
              };
              await this.send_message("cs_pet_skill_rune", _0x45b2e2);
              touchBtn(sta);
            }
          }
          addGameLog("分解结束");
          addGameLog("一键杂项完成");
          this.stop();
        }
      }
    } else {
      let _0x41c10b = SkillRuneManager.getNormalRuneConfs().map(_0x480ab4 => {
        return _0x480ab4.id;
      });
      let _0xa12176 = SkillRuneManager.getAllRunes().map(_0x1e7e7c => {
        if (_0x41c10b.indexOf(_0x1e7e7c.id) != -1 && SkillRuneManager.getNormalRuneConfs()[_0x41c10b.indexOf(_0x1e7e7c.id)].decompose > 0 && SkillRuneManager.getNormalRuneConfs()[_0x41c10b.indexOf(_0x1e7e7c.id)].decompose < 300 && _0x1e7e7c.bindPet == 0 && _0x1e7e7c.id != 205) {
          return _0x1e7e7c;
        }
      }).sort().filter(_0x23889a => _0x23889a != undefined);
      if (_0xa12176.length == 0) {
        addGameLog("没有符文可分解");
      } else {
        for (let _0x552661 = 0; _0x552661 < _0xa12176.length; _0x552661++) {
          addGameLog("分解符文=>\n" + SkillRuneManager.getNormalRuneConfs().find(_0x366057 => _0x366057.id === _0xa12176[_0x552661].id).name);
          const _0x22a25a = {
            op: 2,
            runeGetTime: _0xa12176[_0x552661].getTime,
            runeId: _0xa12176[_0x552661].id
          };
          await this.send_message("cs_pet_skill_rune", _0x22a25a);
          touchBtn(sta);
        }
      }
      addGameLog("分解结束");
      addGameLog("一键杂项完成");
      this.stop();
    }
  }
}
class talentAll31 extends SuperTask {
  constructor() {
    super();
    this.nowName = "金灿灿";
    this.selectedvalue = 0;
  }
  start() {
    super.start();
    let _0x215ffb = this;
    MFC.alert.show(`确定进行背包一键金灿灿吗
背包里面所有精灵都会变为31天赋
娱乐功能无实际作用
恢复需刷新`, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x209a70) {
      _0x215ffb.stop();
    }, function (_0x4b36eb) {
      _0x215ffb.prcessBody();
    }]);
  }
  async prcessBody() {
    try {
      let _0x37161d = PetManager.getInstance().getAllPets();
      for (let _0x3af00e = 0; _0x3af00e < _0x37161d.length; _0x3af00e++) {
        _0x37161d[_0x3af00e].talent = 31;
      }
      addGameLog("金灿灿完毕!");
      this.stop();
    } catch (_0x1d4b9f) {
      logger(_0x1d4b9f);
    }
  }
}
class Pool extends SuperTask {
  constructor() {
    super();
    this.nowName = "抽轮盘";
    this.task = [];
  }
  start() {
    super.start();
    let _0x3ecd37 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x57f3a8 = [];
      var _0x5d87ed = SimpleAlertUi({
        width: 400,
        height: 470
      });
      _0x3ecd37.alertWin = _0x5d87ed;
      const _0x34f262 = {
        text: "抽轮盘",
        y: _0x5d87ed.height / 15
      };
      let _0x5b430e = createLabel(_0x34f262);
      _0x5b430e.x = _0x5d87ed.applicationWidth / 2 - _0x5b430e.width / 2;
      _0x5b430e.size = 20;
      _0x57f3a8.push(_0x5b430e);
      const _0x499613 = {
        text: "克洛斯星",
        x: _0x5d87ed.width / 5 - 40,
        y: _0x5b430e.y + 40
      };
      let _0x4c1c91 = createLabel(_0x499613);
      _0x57f3a8.push(_0x4c1c91);
      const _0x461c3f = {
        x: _0x4c1c91.x + 100,
        y: _0x4c1c91.y,
        selected: false,
        storageKey: "klsxq"
      };
      let _0x33d172 = createToggle(_0x461c3f);
      _0x57f3a8.push(_0x33d172);
      const _0x551305 = {
        text: "海洋星低级",
        x: _0x33d172.x + 70,
        y: _0x4c1c91.y
      };
      let _0x458d4b = createLabel(_0x551305);
      _0x57f3a8.push(_0x458d4b);
      const _0x562c10 = {
        x: _0x458d4b.x + 100,
        y: _0x4c1c91.y,
        selected: false,
        storageKey: "hyxq1"
      };
      let _0x5e3b6b = createToggle(_0x562c10);
      _0x57f3a8.push(_0x5e3b6b);
      const _0x5cee80 = {
        text: "海洋星高级",
        x: _0x4c1c91.x,
        y: _0x4c1c91.y + 40
      };
      let _0x1743c3 = createLabel(_0x5cee80);
      _0x57f3a8.push(_0x1743c3);
      const _0xa905b = {
        x: _0x33d172.x,
        y: _0x1743c3.y,
        selected: false,
        storageKey: "hyxq2"
      };
      let _0x3cc236 = createToggle(_0xa905b);
      _0x57f3a8.push(_0x3cc236);
      const _0x37c6d6 = {
        text: "火山星低级",
        x: _0x458d4b.x,
        y: _0x1743c3.y
      };
      let _0x1cd21e = createLabel(_0x37c6d6);
      _0x57f3a8.push(_0x1cd21e);
      const _0x304026 = {
        x: _0x5e3b6b.x,
        y: _0x1743c3.y,
        selected: false,
        storageKey: "hsxq1"
      };
      let _0x22132a = createToggle(_0x304026);
      _0x57f3a8.push(_0x22132a);
      const _0xdc14f4 = {
        text: "火山星高级",
        x: _0x4c1c91.x,
        y: _0x1743c3.y + 40
      };
      let _0x497b76 = createLabel(_0xdc14f4);
      _0x57f3a8.push(_0x497b76);
      const _0x5c36d4 = {
        x: _0x33d172.x,
        y: _0x497b76.y,
        selected: false,
        storageKey: "hsxq2"
      };
      let _0x5d9ce8 = createToggle(_0x5c36d4);
      _0x57f3a8.push(_0x5d9ce8);
      const _0x2a9851 = {
        text: "云霄星低级",
        x: _0x458d4b.x,
        y: _0x497b76.y
      };
      let _0x3a9148 = createLabel(_0x2a9851);
      _0x57f3a8.push(_0x3a9148);
      const _0x2d766e = {
        x: _0x5e3b6b.x,
        y: _0x3a9148.y,
        selected: false,
        storageKey: "yxxq1"
      };
      let _0x651d63 = createToggle(_0x2d766e);
      _0x57f3a8.push(_0x651d63);
      const _0x1817a5 = {
        text: "云霄星高级",
        x: _0x4c1c91.x,
        y: _0x497b76.y + 40
      };
      let _0x2fdf42 = createLabel(_0x1817a5);
      _0x57f3a8.push(_0x2fdf42);
      const _0x2833ab = {
        x: _0x33d172.x,
        y: _0x2fdf42.y,
        selected: false,
        storageKey: "yxxq2"
      };
      let _0x3a6b64 = createToggle(_0x2833ab);
      _0x57f3a8.push(_0x3a6b64);
      const _0x58bb69 = {
        text: "阿尔法星低级",
        x: _0x458d4b.x,
        y: _0x2fdf42.y
      };
      let _0x40917c = createLabel(_0x58bb69);
      _0x57f3a8.push(_0x40917c);
      const _0x31e691 = {
        x: _0x5e3b6b.x,
        y: _0x2fdf42.y,
        selected: false,
        storageKey: "aefxq1"
      };
      let _0x3602ea = createToggle(_0x31e691);
      _0x57f3a8.push(_0x3602ea);
      const _0x38a4a6 = {
        text: "阿尔法星高级",
        x: _0x4c1c91.x,
        y: _0x2fdf42.y + 40
      };
      let _0x460ce4 = createLabel(_0x38a4a6);
      _0x57f3a8.push(_0x460ce4);
      const _0x55bc09 = {
        x: _0x33d172.x,
        y: _0x460ce4.y,
        selected: false,
        storageKey: "aefxq2"
      };
      let _0x45cd87 = createToggle(_0x55bc09);
      _0x57f3a8.push(_0x45cd87);
      const _0xb14517 = {
        text: "拜伦号低级",
        x: _0x458d4b.x,
        y: _0x460ce4.y
      };
      let _0x5a200b = createLabel(_0xb14517);
      _0x57f3a8.push(_0x5a200b);
      const _0x2ba8f1 = {
        x: _0x5e3b6b.x,
        y: _0x460ce4.y,
        selected: false,
        storageKey: "blxq1"
      };
      let _0x5614f3 = createToggle(_0x2ba8f1);
      _0x57f3a8.push(_0x5614f3);
      const _0x47aefe = {
        text: "拜伦号高级",
        x: _0x4c1c91.x,
        y: _0x460ce4.y + 40
      };
      let _0x4d702e = createLabel(_0x47aefe);
      _0x57f3a8.push(_0x4d702e);
      const _0x5e1b79 = {
        x: _0x33d172.x,
        y: _0x4d702e.y,
        selected: false,
        storageKey: "blxq2"
      };
      let _0x31129a = createToggle(_0x5e1b79);
      _0x57f3a8.push(_0x31129a);
      const _0x56767c = {
        x: _0x4c1c91.x,
        y: _0x4d702e.y + 40,
        width: 100,
        text: "请输入电池",
        storageKey: "poolstatus"
      };
      var _0x2471b6 = createEdit(_0x56767c);
      _0x57f3a8.push(_0x2471b6);
      const _0x2541cd = {
        text: "达到输入电池数停止",
        x: _0x4c1c91.x + 72 + 40,
        y: _0x4d702e.y + 45
      };
      let _0x3a974f = createLabel(_0x2541cd);
      _0x3a974f.textColor = 16776960;
      _0x57f3a8.push(_0x3a974f);
      const _0x10253b = {
        x: _0x5e3b6b.x,
        y: _0x3a974f.y,
        selected: false,
        storageKey: "poolstatusnum"
      };
      let _0x408d79 = createToggle(_0x10253b);
      _0x57f3a8.push(_0x408d79);
      const _0x535a30 = {
        text: "注意:如果不要求达到多少电池就不用输入与勾选\n     停止电池数为左上角头像旁边那个数",
        x: _0x4c1c91.x,
        y: _0x3a974f.y + 40
      };
      let _0x210e76 = createLabel(_0x535a30);
      _0x210e76.textColor = 16711808;
      _0x57f3a8.push(_0x210e76);
      _0x3ecd37.addAllUis(_0x57f3a8);
      _0x5d87ed.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x3ecd37.stop();
      }, function () {
        localStorage.setItem("klsxq", _0x33d172.selected);
        localStorage.setItem("hyxq1", _0x5e3b6b.selected);
        localStorage.setItem("hyxq2", _0x3cc236.selected);
        localStorage.setItem("hsxq1", _0x22132a.selected);
        localStorage.setItem("hsxq2", _0x5d9ce8.selected);
        localStorage.setItem("yxxq1", _0x651d63.selected);
        localStorage.setItem("yxxq2", _0x3a6b64.selected);
        localStorage.setItem("aefxq1", _0x3602ea.selected);
        localStorage.setItem("aefxq2", _0x45cd87.selected);
        localStorage.setItem("blxq1", _0x5614f3.selected);
        localStorage.setItem("blxq2", _0x31129a.selected);
        localStorage.setItem("poolstatusnum", _0x408d79.selected);
        localStorage.setItem("poolstatus", _0x2471b6.text);
        let _0x507e8d = [_0x33d172.selected, _0x5e3b6b.selected, _0x3cc236.selected, _0x22132a.selected, _0x5d9ce8.selected, _0x651d63.selected, _0x3a6b64.selected, _0x3602ea.selected, _0x45cd87.selected, _0x5614f3.selected, _0x31129a.selected, _0x408d79.selected];
        _0x507e8d.forEach(function (_0x694f63, _0x429a65) {
          if (_0x694f63) {
            _0x3ecd37.task[_0x429a65] = 1;
          }
        });
        if (_0x408d79.selected) {
          if (_0x2471b6.text.length == 0) {
            MFC.bubbleAlert.showAlert("请输入电池数量");
            return true;
          } else if (!Number.isInteger(parseInt(_0x2471b6.text))) {
            MFC.bubbleAlert.showAlert("请输入正确的电池数量");
            return true;
          } else {
            _0x3ecd37.prcessBody();
          }
        } else {
          _0x3ecd37.prcessBody();
        }
      }], null);
      _0x5d87ed.showAlert();
    });
  }
  async prcessBody() {
    try {
      let _0x3e0b57 = 0;
      let _0x35bacc = false;
      let _0x13b0df = [{
        name: "克洛斯星",
        levelId: 1,
        prizePool: 1,
        itemIds: [100014],
        num: [5]
      }, {
        name: "海洋星普通",
        levelId: 2,
        prizePool: 1,
        itemIds: [100015, 100016],
        num: [2, 1]
      }, {
        name: "海洋星高级",
        levelId: 2,
        prizePool: 2,
        itemIds: [100015, 100016, 100017],
        num: [2, 1, 1]
      }, {
        name: "火山星普通",
        levelId: 3,
        prizePool: 1,
        itemIds: [100029, 100030],
        num: [1, 2]
      }, {
        name: "火山星高级",
        levelId: 3,
        prizePool: 2,
        itemIds: [100031],
        num: [1]
      }, {
        name: "云霄星普通",
        levelId: 5,
        prizePool: 1,
        itemIds: [100076],
        num: [2]
      }, {
        name: "云霄星高级",
        levelId: 5,
        prizePool: 2,
        itemIds: [100077, 100078],
        num: [2, 1]
      }, {
        name: "双子阿尔法星初级",
        levelId: 6,
        prizePool: 1,
        itemIds: [100191, 100193],
        num: [1, 1]
      }, {
        name: "双子阿尔法星高级",
        levelId: 6,
        prizePool: 2,
        itemIds: [100195],
        num: [1]
      }, {
        name: "拜伦号初级",
        levelId: 8,
        prizePool: 1,
        itemIds: [100313],
        num: [2]
      }, {
        name: "拜伦号高级",
        levelId: 8,
        prizePool: 2,
        itemIds: [100315],
        num: [1]
      }];
      for (let _0x3abbe7 = 0; _0x3abbe7 < _0x13b0df.length; _0x3abbe7++) {
        if (this.task[_0x3abbe7]) {
          while (true) {
            if (this.task[11]) {
              if (MFC.userInfo.curEnergy > parseInt(localStorage.getItem("poolstatus"))) {
                addGameLog("已达目标电池");
                break;
              }
            }
            for (let _0x10c82d = 0; _0x10c82d < _0x13b0df[_0x3abbe7].itemIds.length; _0x10c82d++) {
              if (getSeerItemNum(_0x13b0df[_0x3abbe7].itemIds[_0x10c82d]) >= _0x13b0df[_0x3abbe7].num[_0x10c82d]) {
                _0x35bacc = true;
              } else {
                _0x35bacc = false;
                addGameLog(_0x13b0df[_0x3abbe7].name + "轮盘清空!");
                break;
              }
            }
            if (_0x35bacc) {
              _0x3e0b57++;
              addGameLog(_0x13b0df[_0x3abbe7].name + "轮盘第" + _0x3e0b57 + "次");
              await wait(200);
              const _0x3b9dcb = {
                levelId: _0x13b0df[_0x3abbe7].levelId,
                prizePool: _0x13b0df[_0x3abbe7].prizePool
              };
              await this.send_message("cs_time_travel", _0x3b9dcb);
              touchBtn(sta);
              await wait(200);
            } else {
              break;
            }
          }
        }
      }
      this.stop();
    } catch (_0x1c9629) {}
  }
}
class Team extends SuperTask {
  constructor() {
    super();
    this.nowName = "战队任务";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
    this.task = [];
  }
  start() {
    super.start();
    let _0x2054c4 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("开始进行");
      let _0x3339d2 = [];
      var _0x118e18 = SimpleAlertUi({
        width: 460,
        height: 460
      });
      _0x2054c4.alertWin = _0x118e18;
      const _0x47effc = {
        text: "一键战队任务",
        y: _0x118e18.height / 16
      };
      let _0x4283ee = createLabel(_0x47effc);
      _0x4283ee.x = _0x118e18.applicationWidth / 2 - _0x4283ee.width / 2;
      _0x3339d2.push(_0x4283ee);
      const _0x476c0f = {
        text: "注意:",
        textColor: 16776960,
        x: 30,
        y: _0x4283ee.y + _0x4283ee.height + 12
      };
      var _0x302352 = createLabel(_0x476c0f);
      _0x3339d2.push(_0x302352);
      const _0x569242 = {
        text: "雇佣任务需要小号完成,商店购买不打开不进行购买",
        textColor: 16776960,
        x: 40,
        y: _0x302352.y + _0x302352.height + 10
      };
      var _0x58bafc = createLabel(_0x569242);
      _0x3339d2.push(_0x58bafc);
      const _0x39c7d4 = {
        text: "商店购买不足会默认购买小型梦幻结晶完成任务",
        x: 40,
        y: _0x58bafc.y + _0x58bafc.height + 10
      };
      var _0xcc9a42 = createLabel(_0x39c7d4);
      _0x3339d2.push(_0xcc9a42);
      const _0x1e6ad0 = {
        text: "科技点会按照时间获得顺序给100级点一次体力",
        x: 40,
        y: _0xcc9a42.y + _0xcc9a42.height + 10
      };
      var _0x38957c = createLabel(_0x1e6ad0);
      _0x3339d2.push(_0x38957c);
      const _0x158edc = {
        text: "如果普通捐献和钻石捐献同时勾选会根据次数对半捐",
        x: 40,
        y: _0x38957c.y + _0x38957c.height + 10
      };
      var _0x590407 = createLabel(_0x158edc);
      _0x3339d2.push(_0x590407);
      const _0x92b82a = {
        x: 70,
        y: _0x590407.y + _0x590407.height + 10,
        width: 100,
        prompt: "请输入捐献次数",
        storageKey: "teamcontributenum"
      };
      var _0x3c2a05 = createEdit(_0x92b82a);
      _0x3339d2.push(_0x3c2a05);
      const _0x44fed0 = {
        text: "输入数字但不超过",
        x: _0x3c2a05.x + _0x3c2a05.width + 30,
        y: _0x3c2a05.y + 10
      };
      var _0x56b9fc = createLabel(_0x44fed0);
      _0x3339d2.push(_0x56b9fc);
      var _0x2e4b0b = createLabel({
        text: VIPManager.getInstance().getVipPrivilegeInfoByLv(VIPManager.getInstance().vipLevel).teamContribute - MFC.attr.getAttr(MFC.attrType.dailyTeamContributeTimes),
        textColor: 16776960,
        x: _0x3c2a05.x + _0x3c2a05.width + 30 + _0x56b9fc.width + 5,
        y: _0x3c2a05.y + 10
      });
      _0x2e4b0b.size = 20;
      _0x3339d2.push(_0x2e4b0b);
      const _0xd46d15 = {
        text: "普通捐献",
        x: 70,
        y: _0x2e4b0b.y + _0x2e4b0b.height + 20
      };
      var _0x5b8d6b = createLabel(_0xd46d15);
      _0x3339d2.push(_0x5b8d6b);
      const _0x59e6cf = {
        x: _0x5b8d6b.x + 70,
        y: _0x5b8d6b.y,
        selected: false,
        storageKey: "ptc"
      };
      let _0x46e04a = createToggle(_0x59e6cf);
      _0x3339d2.push(_0x46e04a);
      const _0x2db7c1 = {
        text: "钻石捐献",
        x: _0x46e04a.x + _0x46e04a.width + 20,
        y: _0x5b8d6b.y
      };
      var _0xd1c8ab = createLabel(_0x2db7c1);
      _0x3339d2.push(_0xd1c8ab);
      const _0x5326a3 = {
        x: _0xd1c8ab.x + 70,
        y: _0xd1c8ab.y,
        selected: false,
        storageKey: "zsc"
      };
      let _0x5e9e22 = createToggle(_0x5326a3);
      _0x3339d2.push(_0x5e9e22);
      const _0x34e4a5 = {
        text: "商店购买",
        x: _0x5b8d6b.x,
        y: _0x5b8d6b.y + 40
      };
      var _0x276c82 = createLabel(_0x34e4a5);
      _0x3339d2.push(_0x276c82);
      const _0x19a5af = {
        x: _0x276c82.x + 70,
        y: _0x276c82.y,
        selected: false,
        storageKey: "tbuy"
      };
      let _0x5d2d55 = createToggle(_0x19a5af);
      _0x3339d2.push(_0x5d2d55);
      const _0x474bab = {
        text: "科技加点",
        x: _0x46e04a.x + _0x46e04a.width + 20,
        y: _0x5b8d6b.y + 40
      };
      var _0x21b9d3 = createLabel(_0x474bab);
      _0x3339d2.push(_0x21b9d3);
      const _0x504ddc = {
        x: _0x21b9d3.x + 70,
        y: _0x21b9d3.y,
        selected: false,
        storageKey: "tp"
      };
      let _0x619d65 = createToggle(_0x504ddc);
      _0x3339d2.push(_0x619d65);
      const _0x470ed6 = {
        text: "梦幻宝石",
        x: _0x5b8d6b.x,
        y: _0x276c82.y + 40,
        textColor: 16776960
      };
      var _0x30311c = createLabel(_0x470ed6);
      _0x3339d2.push(_0x30311c);
      const _0xcc0a7e = {
        x: _0x30311c.x + 70,
        y: _0x276c82.y + 40,
        selected: false,
        storageKey: "mhbs"
      };
      let _0x214041 = createToggle(_0xcc0a7e);
      _0x3339d2.push(_0x214041);
      const _0x27e05b = {
        text: "特性改造芯片",
        x: _0x46e04a.x + _0x46e04a.width + 20,
        y: _0x276c82.y + 40,
        textColor: 16776960
      };
      var _0x5c5e31 = createLabel(_0x27e05b);
      _0x3339d2.push(_0x5c5e31);
      const _0x517feb = {
        x: _0x5c5e31.x + 100,
        y: _0x276c82.y + 40,
        selected: false,
        storageKey: "txgz"
      };
      let _0x2ba5ae = createToggle(_0x517feb);
      _0x3339d2.push(_0x2ba5ae);
      const _0x4f53f2 = {
        text: "特性附体芯片",
        x: _0x5b8d6b.x,
        y: _0x30311c.y + 40,
        textColor: 16776960
      };
      var _0x354593 = createLabel(_0x4f53f2);
      _0x3339d2.push(_0x354593);
      const _0x25d401 = {
        x: _0x30311c.x + 100,
        y: _0x276c82.y + 80,
        selected: false,
        storageKey: "txft"
      };
      let _0x2f986a = createToggle(_0x25d401);
      _0x3339d2.push(_0x2f986a);
      _0x2054c4.addAllUis(_0x3339d2);
      _0x118e18.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x2054c4.stop();
      }, function () {
        if (_0x3c2a05.text.length == 0) {
          MFC.bubbleAlert.showAlert("请输入捐献次数");
          return true;
        }
        if (!Number.isInteger(parseInt(_0x3c2a05.text)) || _0x3c2a05.text > VIPManager.getInstance().getVipPrivilegeInfoByLv(VIPManager.getInstance().vipLevel).teamContribute - MFC.attr.getAttr(MFC.attrType.dailyTeamContributeTimes) || parseInt(_0x3c2a05.text) < 0) {
          MFC.bubbleAlert.showAlert("捐献次数错误");
          return true;
        }
        localStorage.setItem("teamcontributenum", _0x3c2a05.text);
        localStorage.setItem("ptc", _0x46e04a.selected);
        localStorage.setItem("zsc", _0x5e9e22.selected);
        localStorage.setItem("tbuy", _0x5d2d55.selected);
        localStorage.setItem("tp", _0x619d65.selected);
        localStorage.setItem("mhbs", _0x214041.selected);
        localStorage.setItem("txgz", _0x2ba5ae.selected);
        localStorage.setItem("txft", _0x2f986a.selected);
        if (_0x46e04a.selected) {
          _0x2054c4.task[0] = 1;
        }
        if (_0x5e9e22.selected) {
          _0x2054c4.task[1] = 1;
        }
        if (_0x5d2d55.selected) {
          _0x2054c4.task[2] = 1;
        }
        if (_0x619d65.selected) {
          _0x2054c4.task[3] = 1;
        }
        if (_0x214041.selected) {
          _0x2054c4.task[4] = 1;
        }
        if (_0x2ba5ae.selected) {
          _0x2054c4.task[5] = 1;
        }
        if (_0x2f986a.selected) {
          _0x2054c4.task[6] = 1;
        }
        _0x2054c4.prcessBody();
      }], null);
      _0x118e18.showAlert();
    });
  }
  async teamcontribute() {
    let _0x4923a4 = MFC.userInfo.coin;
    let _0x53f505 = VIPManager.getInstance().getVipPrivilegeInfoByLv(VIPManager.getInstance().vipLevel).teamContribute;
    let _0x362f91 = MFC.attr.getAttr(MFC.attrType.dailyTeamContributeTimes);
    if (_0x4923a4 < parseInt(localStorage.getItem("teamcontributenum")) * 20000) {
      MFC.alert.show("赛尔豆不足" + _0x53f505 + "次捐献");
    } else if (_0x362f91 >= _0x53f505) {
      MFC.alert.show("已经捐献" + _0x362f91 + "次");
    } else if (this.task[0] || this.task[1]) {
      if (this.task[0] && this.task[1]) {
        for (let _0x446bd1 = 0; _0x446bd1 < Math.floor(parseInt(localStorage.getItem("teamcontributenum")) / 2) + parseInt(localStorage.getItem("teamcontributenum")) % 2; _0x446bd1++) {
          let _0x17b522 = await this.send_message("cs_team_get_equip_info", {
            teamId: TeamManager.getInstance()._teamInfo.teamId,
            flag: 0
          });
          _0x17b522 = _0x17b522.equipInfoList.filter(function (_0x23b3ed) {
            return _0x23b3ed.energy !== 0;
          }).sort((_0x3f13b0, _0x221bc4) => _0x3f13b0.energy - _0x221bc4.energy)[0].type;
          let _0x2ba4ea = "";
          if (_0x17b522 == 0) {
            _0x2ba4ea = "战队科技中心";
          }
          if (_0x17b522 == 1) {
            _0x2ba4ea = "战队物资装置";
          }
          if (_0x17b522 == 2) {
            _0x2ba4ea = "战队商店";
          }
          if (_0x17b522 == 3) {
            _0x2ba4ea = "精灵改造仪";
          }
          addGameLog("捐献" + _0x2ba4ea + "第" + MFC.attr.getAttr(MFC.attrType.dailyTeamContributeTimes) + "次");
          const _0x505d42 = {
            type: _0x17b522,
            flag: 0
          };
          await this.send_message("cs_team_contribute", _0x505d42);
        }
        if (MFC.userInfo.diamond >= Math.floor(parseInt(localStorage.getItem("teamcontributenum")) / 2) * 20) {
          for (let _0x331e10 = 0; _0x331e10 < Math.floor(parseInt(localStorage.getItem("teamcontributenum")) / 2); _0x331e10++) {
            let _0x44bf78 = await this.send_message("cs_team_get_equip_info", {
              teamId: TeamManager.getInstance()._teamInfo.teamId,
              flag: 0
            });
            _0x44bf78 = _0x44bf78.equipInfoList.filter(function (_0x1ef5d6) {
              return _0x1ef5d6.energy !== 0;
            }).sort((_0x20fd0a, _0x1d6bf0) => _0x20fd0a.energy - _0x1d6bf0.energy)[0].type;
            let _0x3c378b = "";
            if (_0x44bf78 == 0) {
              _0x3c378b = "战队科技中心";
            }
            if (_0x44bf78 == 1) {
              _0x3c378b = "战队物资装置";
            }
            if (_0x44bf78 == 2) {
              _0x3c378b = "战队商店";
            }
            if (_0x44bf78 == 3) {
              _0x3c378b = "精灵改造仪";
            }
            addGameLog("捐献" + _0x3c378b + "第" + MFC.attr.getAttr(MFC.attrType.dailyTeamContributeTimes) + "次");
            const _0x84167f = {
              type: _0x44bf78,
              flag: 1
            };
            await this.send_message("cs_team_contribute", _0x84167f);
          }
        } else {
          MFC.alert.show("钻石不足" + parseInt(localStorage.getItem("teamcontributenum")) + "次捐献");
        }
      } else if (this.task[0]) {
        for (let _0x34bd69 = 0; _0x34bd69 < parseInt(localStorage.getItem("teamcontributenum")); _0x34bd69++) {
          let _0x1d6bec = await this.send_message("cs_team_get_equip_info", {
            teamId: TeamManager.getInstance()._teamInfo.teamId,
            flag: 0
          });
          _0x1d6bec = _0x1d6bec.equipInfoList.filter(function (_0x1cdff9) {
            return _0x1cdff9.energy !== 0;
          }).sort((_0x3f079c, _0x505d89) => _0x3f079c.energy - _0x505d89.energy)[0].type;
          let _0x11479b = "";
          if (_0x1d6bec == 0) {
            _0x11479b = "战队科技中心";
          }
          if (_0x1d6bec == 1) {
            _0x11479b = "战队物资装置";
          }
          if (_0x1d6bec == 2) {
            _0x11479b = "战队商店";
          }
          if (_0x1d6bec == 3) {
            _0x11479b = "精灵改造仪";
          }
          addGameLog("捐献" + _0x11479b + "第" + MFC.attr.getAttr(MFC.attrType.dailyTeamContributeTimes) + "次");
          const _0x186733 = {
            type: _0x1d6bec,
            flag: 0
          };
          await this.send_message("cs_team_contribute", _0x186733);
        }
      } else if (this.task[1]) {
        for (let _0x1cac23 = 0; _0x1cac23 < parseInt(localStorage.getItem("teamcontributenum")); _0x1cac23++) {
          let _0x2b0eb0 = await this.send_message("cs_team_get_equip_info", {
            teamId: TeamManager.getInstance()._teamInfo.teamId,
            flag: 0
          });
          _0x2b0eb0 = _0x2b0eb0.equipInfoList.filter(function (_0x5cb74b) {
            return _0x5cb74b.energy !== 0;
          }).sort((_0x366db8, _0x37bd2c) => _0x366db8.energy - _0x37bd2c.energy)[0].type;
          let _0x3cf2ae = "";
          if (_0x2b0eb0 == 0) {
            _0x3cf2ae = "战队科技中心";
          }
          if (_0x2b0eb0 == 1) {
            _0x3cf2ae = "战队物资装置";
          }
          if (_0x2b0eb0 == 2) {
            _0x3cf2ae = "战队商店";
          }
          if (_0x2b0eb0 == 3) {
            _0x3cf2ae = "精灵改造仪";
          }
          addGameLog("捐献" + _0x3cf2ae + "第" + MFC.attr.getAttr(MFC.attrType.dailyTeamContributeTimes) + "次");
          const _0x27623d = {
            type: _0x2b0eb0,
            flag: 1
          };
          await this.send_message("cs_team_contribute", _0x27623d);
        }
      }
    }
  }
  async teamfight() {
    let _0x5f56e3 = [PetSort.getPetList(PetManager.getInstance().getAllPets()).map(_0x79504 => {
      if (_0x79504.level < 100) {
        return _0x79504;
      }
    }).sort((_0xf55dac, _0x15467b) => _0xf55dac.battleValues[0] - _0x15467b.battleValues[0])[0].getTime.toString()];
    const _0x1e7697 = {
      op: 1,
      petList: _0x5f56e3
    };
    await this.send_message("cs_team_league_new", _0x1e7697);
    let _0x2fab46 = PetSort.getPetList(PetManager.getInstance().getAllPets()).map(_0x52ae4f => {
      if (_0x52ae4f.level < 100) {
        return _0x52ae4f;
      }
    }).sort((_0x3f20f8, _0x7a4f1d) => _0x3f20f8.battleValues[0] - _0x7a4f1d.battleValues[0])[0].skills[0];
    logger("阵容更换完毕");
    await this.send_message("cs_team_league_new", {
      op: 2
    });
    await this.send_message("cs_team_league_new", {
      op: 3
    });
    await this.initBattle();
    let _0x1c659d = await this.useSkill(_0x2fab46);
    while (_0x1c659d.result.result == 0) {
      addGameLog("未被击败，继续攻击");
      _0x1c659d = await this.useSkill(_0x2fab46);
    }
  }
  async fight2() {
    let _0x4be84 = await this.send_message("cs_get_campaign_pet_challenge_boss", {});
    let _0x36c741 = await this.send_message("cs_new_get_hire_pet_list", {
      teamPageNo: 1,
      teamPageSize: 1000
    });
    let _0x43848b = _0x36c741.teamHireList.map(_0x5cfaeb => {
      if (_0x5cfaeb.petLevel == 1) {
        for (let _0x5768da of _0x4be84.todayLimitAttr) {
          if (_0x5768da == PetConfig.getDef(_0x5cfaeb.petId).elemType) {
            return _0x5cfaeb;
          }
        }
      }
    }).filter(_0x3225b3 => _0x3225b3);
    let _0x1b2ce5 = 0;
    if (_0x43848b.length == 0) {
      addGameLog("战斗没有1级符合属性的可以雇佣");
      _0x1b2ce5 = 1;
      _0x43848b = _0x36c741.teamHireList.map(_0x473c20 => {
        if (_0x473c20.petLevel == 1) {
          return _0x473c20;
        }
      }).filter(_0xc8d036 => _0xc8d036);
    }
    if (_0x43848b.length !== 0) {
      let _0x157da3 = _0x43848b[0].getTime;
      let _0x5aa635 = _0x4be84.times;
      let _0x4b01fc = _0x43848b[0].userId + "_" + _0x43848b[0].type + "_" + _0x43848b[0].pos;
      const _0x12a3c8 = {
        type: _0x43848b[0].type,
        pos: _0x43848b[0].pos,
        targetUid: _0x43848b[0].userId
      };
      let _0x4b4e65 = await this.send_message("cs_new_get_hire_pet_info", _0x12a3c8);
      if (_0x5aa635 < 1 || _0x1b2ce5 == 1) {
        MFC.alert.show("极限挑战次数不足1，雇佣需要耗费体力");
        if (MFC.userInfo.curEnergy < 5) {
          MFC.alert.show("体力不足5");
        } else {
          const _0x17ff31 = {
            petId: _0x43848b[0].petId,
            level: 1,
            skillList: _0x4b4e65.pet.skills,
            getTime: _0x157da3,
            otherUid: _0x43848b[0].userId,
            type: _0x43848b[0].type
          };
          const _0x4dad7b = {
            levelId: 2,
            getTimeList: [_0x4b01fc],
            attachBattleSkill: [_0x17ff31]
          };
          await this.send_message("cs_pve_planet_start_battle", _0x4dad7b);
          await this.initBattle();
          let _0x1e574f = await this.useSkill(_0x4b4e65.pet.skills[0]);
          while (_0x1e574f.result.result == 0) {
            addGameLog("未被击败，继续攻击");
            _0x1e574f = await this.useSkill(_0x4b4e65.pet.skills[0]);
          }
        }
      } else {
        const _0x42a5c0 = {
          type: _0x43848b[0].type,
          pos: _0x43848b[0].pos,
          targetUid: _0x43848b[0].userId
        };
        await this.send_message("cs_new_get_hire_pet_info", _0x42a5c0);
        const _0xd3cd80 = {
          petId: _0x43848b[0].petId,
          level: 1,
          skillList: _0x4b4e65.pet.skills,
          getTime: _0x157da3,
          otherUid: _0x43848b[0].userId,
          type: _0x43848b[0].type
        };
        const _0xa82af3 = {
          levelId: 5,
          hirePetList: [_0x4b01fc],
          attachBattleSkill: [_0xd3cd80]
        };
        await this.send_message("cs_start_campaign_pet_challenge", _0xa82af3);
        await this.initBattle();
        let _0x25e86c = await this.useSkill(_0x4b4e65.pet.skills[0]);
        while (_0x25e86c.result.result == 0) {
          addGameLog("未被击败，继续攻击");
          _0x25e86c = await this.useSkill(_0x4b4e65.pet.skills[0]);
        }
      }
    }
  }
  async cheak() {
    let _0x282eed = TaskUtils.GetRestTaskState(xls.activityTaskReset.getItem(10450));
    let _0x321708 = TaskUtils.GetRestTaskState(xls.activityTaskReset.getItem(10451));
    let _0x5b8fe0 = TaskUtils.GetRestTaskState(xls.activityTaskReset.getItem(10452));
    let _0x30bff2 = TaskUtils.GetRestTaskState(xls.activityTaskReset.getItem(10453));
    let _0x486b4b = TaskUtils.GetRestTaskState(xls.activityTaskReset.getItem(10454));
    switch (_0x282eed) {
      case 0:
        logger("未完成");
        await this.teamfight();
        addGameLog("领取" + xls.activityTaskReset.getItem(10450).task);
        await this.send_message("cs_get_activity_task_reset_reward", {
          carnivalId: 10450
        });
        break;
      case -1:
        addGameLog(xls.activityTaskReset.getItem(10450).task + "已领取");
        break;
      case 1:
        addGameLog("领取" + xls.activityTaskReset.getItem(10450).task);
        await this.send_message("cs_get_activity_task_reset_reward", {
          carnivalId: 10450
        });
        break;
    }
    switch (_0x321708) {
      case 0:
        logger("未完成");
        await this.fight2();
        await this.fight2();
        addGameLog("领取" + xls.activityTaskReset.getItem(10451).task);
        await this.send_message("cs_get_activity_task_reset_reward", {
          carnivalId: 10451
        });
        addGameLog(xls.activityTaskReset.getItem(10451).task + "已领取");
        break;
      case -1:
        addGameLog(xls.activityTaskReset.getItem(10451).task + "已领取");
        break;
      case 1:
        addGameLog("领取" + xls.activityTaskReset.getItem(10451).task);
        await this.send_message("cs_get_activity_task_reset_reward", {
          carnivalId: 10451
        });
        break;
    }
    switch (_0x5b8fe0) {
      case 0:
        logger("未完成");
        MFC.alert.show("请使用雇佣功能后点击");
        break;
      case -1:
        addGameLog(xls.activityTaskReset.getItem(10452).task + "已领取");
        break;
      case 1:
        addGameLog("领取" + xls.activityTaskReset.getItem(10452).task);
        await this.send_message("cs_get_activity_task_reset_reward", {
          carnivalId: 10452
        });
        break;
    }
    switch (_0x30bff2) {
      case 0:
        if (this.task[3]) {
          logger("未完成");
          await this.teamtechlearn();
          await this.send_message("cs_get_activity_task_reset_reward", {
            carnivalId: 10453
          });
          addGameLog("领取" + xls.activityTaskReset.getItem(10453).task);
          break;
        } else {
          break;
        }
      case -1:
        addGameLog(xls.activityTaskReset.getItem(10453).task + "已领取");
        break;
      case 1:
        addGameLog("领取" + xls.activityTaskReset.getItem(10453).task);
        await this.send_message("cs_get_activity_task_reset_reward", {
          carnivalId: 10453
        });
        break;
    }
    switch (_0x486b4b) {
      case 0:
        if (this.task[2]) {
          GlobalSocket.PROTOCOL_SOCKET.send(4115, {
            freshType: 0
          });
          await wait(50);
          await wait(50);
          GlobalSocket.PROTOCOL_SOCKET.send(4116, {
            pos: 4
          });
          await wait(1000);
          await this.send_message("cs_get_activity_task_reset_reward", {
            carnivalId: 10454
          });
          addGameLog("领取" + xls.activityTaskReset.getItem(10454).task);
          break;
        } else {
          break;
        }
      case -1:
        addGameLog(xls.activityTaskReset.getItem(10454).task + "已领取");
        break;
      case 1:
        addGameLog("领取" + xls.activityTaskReset.getItem(10454).task);
        await this.send_message("cs_get_activity_task_reset_reward", {
          carnivalId: 10454
        });
        break;
    }
  }
  async weektask() {
    let _0x4e6b4f = MFC.attr.getAttr(MFC.attrType.weeklyTeamTaskTimes);
    if (_0x4e6b4f >= 10) {
      addGameLog("本周已完成任务数量：" + _0x4e6b4f);
      if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.weeklyTeamTaskBoxStatus), 1) == 0) {
        await this.send_message("cs_team_task_box_get", {
          i: 0
        });
        MFC.alert.show("一键任务已完成");
      }
      if (_0x4e6b4f >= 15) {
        addGameLog("本周已完成任务数量：" + _0x4e6b4f);
        if (BitUtils.getBit(MFC.attr.getAttr(MFC.attrType.weeklyTeamTaskBoxStatus), 2) == 0) {
          await this.send_message("cs_team_task_box_get", {
            i: 1
          });
          MFC.alert.show("一键任务已完成");
        }
      }
    } else {
      addGameLog("本周已完成任务数量：" + _0x4e6b4f);
    }
    MFC.alert.show("一键任务已完成");
  }
  async teamtechlearn() {
    let _0xa8fc08 = PetSort.getPetList(PetManager.getInstance().getAllPets()).map(_0x5b0e40 => {
      if (_0x5b0e40.level == 100 && _0x5b0e40.teamTechLearnTimes[0] < 5) {
        return _0x5b0e40;
      }
    }).sort((_0x4b6c4c, _0x32030b) => _0x4b6c4c.battleValues[0] - _0x32030b.battleValues[0])[0].getTime;
    const _0x1230a1 = {
      getTime: _0xa8fc08,
      idx: 0,
      flag: 1,
      num: 1
    };
    GlobalSocket.PROTOCOL_SOCKET.send(4630, _0x1230a1);
    await wait(500);
  }
  async teambuy() {
    let _0x12d9fe = await this.send_message("cs_get_team_shop_item", {
      freshType: 0
    });
    if (this.task[4]) {
      if (_0x12d9fe.shop_items.find(_0x58e0c5 => _0x58e0c5.pos == 3 && _0x58e0c5.buyState == 0)) {
        if (MFC.attr.getAttr(64) < 1200) {
          addGameLog("战队币不足,不购买");
        } else {
          await this.send_message("cs_buy_team_shop_item", {
            pos: 3
          });
        }
      } else {
        addGameLog("梦幻宝石已购买");
      }
    }
    if (this.task[5]) {
      if (_0x12d9fe.shop_items.find(_0x1c6f85 => _0x1c6f85.pos == 2 && _0x1c6f85.buyState == 0)) {
        if (MFC.attr.getAttr(64) < 450) {
          addGameLog("战队币不足,不购买");
        } else {
          await this.send_message("cs_buy_team_shop_item", {
            pos: 2
          });
        }
      } else {
        addGameLog("特性改造芯片已购买");
      }
    }
    if (this.task[6]) {
      if (_0x12d9fe.shop_items.find(_0x4e9c0d => _0x4e9c0d.pos == 1 && _0x4e9c0d.buyState == 0)) {
        if (MFC.attr.getAttr(64) < 450) {
          addGameLog("战队币不足,不购买");
        } else {
          await this.send_message("cs_buy_team_shop_item", {
            pos: 1
          });
        }
      } else {
        addGameLog("特性附体芯片已购买");
      }
    }
  }
  async prcessBody() {
    try {
      if (TeamManager.getInstance().teamId == 0) {
        MFC.alert.show("对不起您还未加入战队");
      } else {
        await this.teamcontribute();
        if (this.task[2]) {
          await this.teambuy();
        } else {
          addGameLog("商店购买未开启");
        }
        await this.cheak();
        await this.weektask();
      }
      this.stop();
    } catch (_0x4fbe8a) {}
  }
}
class lukeAct extends SuperTask {
  constructor() {
    super();
    this.nowName = "鲁克的补给";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
  }
  start() {
    super.start();
    let _0x5da7a4 = this;
    MFC.alert.show("确认进行鲁克的物资补给吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x509728) {
      _0x5da7a4.stop();
    }, function (_0x2b2320) {
      _0x5da7a4.prcessBody();
    }]);
  }
  async fight() {
    if (UserManager.getInstance().userInfo.defaultTeam[0].length == 0) {
      addGameLog("请设置阵容");
      this.stop();
    } else {
      let _0x2d3585 = PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam[0]).skills[0];
      await this.send_message("cs_pve_activity_battle", {
        levelId: this.levelId,
        battleType: 3
      });
      await this.initBattle();
      let _0x1f376d = await this.useSkill(_0x2d3585);
      while (_0x1f376d.result.result === 0) {
        let _0x347b65 = _0x1f376d.result.playerInfos.find(_0x3e9c9f => _0x3e9c9f.uid === MFC.userInfo.uid);
        let _0x4f5641 = _0x347b65 ? _0x347b65.nextRoundOP : _0x1f376d.result.playerInfos[1].nextRoundOP;
        if (_0x4f5641 !== 1) {
          addGameLog("首发被击败");
          break;
        }
        if (_0x1f376d.result.roundNum > 5) {
          break;
        }
        addGameLog("未击败，继续攻击");
        _0x1f376d = await this.useSkill(_0x2d3585);
      }
      await wait(300);
    }
  }
  async prcessBody() {
    try {
      let _0x2de960 = new Date().getTime();
      let _0x41cc8c = new Date(xls.activityTimeLimit.getItems()[5].startTime).getTime();
      let _0x40511d = new Date(xls.activityTimeLimit.getItems()[5].endTime).getTime();
      if (_0x41cc8c <= _0x2de960 && _0x2de960 <= _0x40511d) {
        let _0x945127 = parseInt(MFC.serverTimer.date.getHours());
        let _0x5d826a = [322, 323, 324];
        let _0x2083a2 = ["322", "323", "324"];
        if (_0x945127 >= 5 && _0x945127 <= 23) {
          let _0x463eb6 = _0x945127 < 12 ? 0 : _0x945127 < 18 ? 1 : 2;
          let _0x35328a = _0x5d826a[_0x463eb6];
          let _0x48b05c = _0x2083a2[_0x463eb6];
          addGameLog("鲁克" + ["早上", "下午", "晚上"][_0x463eb6] + "开始");
          while (true) {
            let _0x249abd = await this.send_message("cs_get_mapBoss_data", {
              planetId: 6
            });
            let _0x1d37d5 = _0x249abd.reward[_0x48b05c];
            if (_0x1d37d5 === undefined) {
              addGameLog("鲁克第1次奖励！");
            } else if (_0x1d37d5 < 10) {
              addGameLog("鲁克第" + _0x1d37d5 + "次奖励！");
            } else {
              addGameLog("鲁克完成！");
              break;
            }
            this.levelId = _0x35328a;
            await this.fight();
            touchBtn(sta);
            await wait(200);
          }
          this.stop();
        } else {
          MFC.alert.show("不在活动时间内");
          this.stop();
        }
      } else {
        addGameLog("鲁克活动时间在 " + _0x41cc8c + "~" + _0x40511d);
        addGameLog("不在活动时间内");
        this.stop();
      }
    } catch (_0x4c1967) {}
  }
}
class Exploratorymaterials extends SuperTask {
  constructor() {
    super();
    this.nowName = "时光之旅";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
  }
  start() {
    super.start();
    let _0x3ad05e = this;
    MFC.alert.show("确定进行转盘材料收集吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x4e0f1e) {
      _0x3ad05e.stop();
    }, function (_0x1f53ca) {
      _0x3ad05e.prcessBody();
    }]);
  }
  async seniorbossui() {
    super.start();
    let _0x3ddca1 = this;
    MFC.alert.show("确定进行高级转盘材料收集吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x34143a) {
      _0x3ddca1.stop();
    }, function (_0x20c1b5) {
      _0x3ddca1.fight2();
    }]);
  }
  async fight() {
    let _0x259d86 = PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam[0]).skills[0];
    await this.send_message("cs_pve_activity_battle", {
      levelId: this.levelId,
      battleType: 3
    });
    await this.initBattle();
    let _0x52549b = await this.useSkill(_0x259d86);
    while (_0x52549b.result.result === 0) {
      let _0x2dced0 = _0x52549b.result.playerInfos.find(_0x6995ac => _0x6995ac.uid === MFC.userInfo.uid);
      let _0x158235 = _0x2dced0 ? _0x2dced0.nextRoundOP : _0x52549b.result.playerInfos[1].nextRoundOP;
      if (_0x158235 !== 1) {
        addGameLog("首发被击败");
        break;
      }
      if (_0x52549b.result.roundNum > 5) {
        break;
      }
      addGameLog("未击败，继续攻击");
      _0x52549b = await this.useSkill(_0x259d86);
    }
    await wait(300);
  }
  async fight2() {
    if (petConfig.SkillConfig.getDef(PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam1[0]).skills[0]).skillPower < 130) {
      MFC.alert.show("挑战阵容1首技能不是大招");
      this.stop();
    } else {
      let _0x151a7f = [{
        levelId: 178,
        planetId: 6,
        itemId: 100194,
        times: 3,
        logPrefix: "双子阿尔法星2"
      }, {
        levelId: 233,
        planetId: 8,
        itemId: 100314,
        times: 3,
        logPrefix: "暗影星2"
      }];
      for (let _0x333230 of _0x151a7f) {
        while (true) {
          if (getSeerItemNum(_0x333230.itemId) > 1) {
            const _0x4ea67b = {
              planetId: _0x333230.planetId
            };
            let _0x5203cd = await this.send_message("cs_get_mapBoss_data", _0x4ea67b);
            if (_0x5203cd.reward[_0x333230.levelId.toString()] == undefined) {
              addGameLog(_0x333230.logPrefix + "第1次奖励!");
            } else if (_0x5203cd.reward[_0x333230.levelId.toString()] < _0x333230.times) {
              addGameLog(_0x333230.logPrefix + "第" + _0x5203cd.reward[_0x333230.levelId.toString()] + "次奖励!");
            } else {
              addGameLog(_0x333230.logPrefix + "完成！");
              break;
            }
            this.levelId = _0x333230.levelId;
            await this.fight();
            await wait(200);
            if (!xls.timeTraveView.hasLoaded) {
              xls.timeTraveView.load(() => {});
            }
            if (!xls.mapMonster.hasLoaded) {
              xls.mapMonster.load(() => {});
            }
            if (!xls.item.hasLoaded) {
              xls.item.load(() => {});
            }
            let _0x4081f0 = xls.timeTraveView.getItems().find(_0x492ba0 => _0x492ba0.dropItem.includes(xls.mapMonster.getItem(this.levelId).mapId)).items.split(",");
            let _0xde7db7 = "拥有:\n";
            _0xde7db7 += xls.item.getItem(_0x4081f0[_0x4081f0.length - 1]).name + ":" + getSeerItemNum(_0x4081f0[_0x4081f0.length - 1]) + "\n";
            addGameLog(_0xde7db7);
          } else {
            addGameLog("高级材料不足无法进行对战!");
            break;
          }
        }
      }
      this.stop();
    }
  }
  async prcessBody() {
    try {
      let _0x5c0b7c = PetManager.getInstance().getPetInfoByGetTime(UserManager.getInstance().userInfo.defaultTeam[0]).skills[0];
      let _0x3317a7 = petConfig.SkillConfig.getDef(_0x5c0b7c).elemType;
      if (parseInt(_0x3317a7) == 5 || parseInt(_0x3317a7) == 7 || parseInt(_0x3317a7) == 12) {
        MFC.alert.show("首发技能为光系、电系或地面,请切换不为光系、电系或地面系技能!");
        this.stop();
      } else {
        let _0x2affb3 = [{
          planetId: 1,
          levels: [1, 2, 3, 4],
          logPrefix: "皮皮星",
          itemindex: [0]
        }, {
          planetId: 2,
          levels: [9, 10, 11],
          logPrefix: "海洋星",
          itemindex: [0, 1, 2]
        }, {
          planetId: 3,
          levels: [12, 13, 14],
          logPrefix: "火山星",
          itemindex: [0, 1, 2]
        }, {
          planetId: 5,
          levels: [33, 34, 35],
          logPrefix: "云霄星",
          itemindex: [0, 1, 2]
        }, {
          planetId: 6,
          levels: [179, 60],
          logPrefix: "喷泉星",
          itemindex: [0, 1]
        }, {
          planetId: 8,
          levels: [66],
          logPrefix: "暗影星",
          itemindex: [0]
        }];
        for (let _0x4f321f of _0x2affb3) {
          let _0x55f1c0 = 0;
          for (let _0x4f5f83 of _0x4f321f.levels) {
            while (true) {
              const _0x54db2b = {
                planetId: _0x4f321f.planetId
              };
              let _0x322b0c = await this.send_message("cs_get_mapBoss_data", _0x54db2b);
              let _0x1fd0d1 = _0x4f321f.levels.indexOf(_0x4f5f83) + 1;
              if (_0x322b0c.reward[_0x4f5f83.toString()] == undefined) {
                addGameLog(_0x4f321f.logPrefix + _0x1fd0d1 + "第1次奖励!");
              } else if (_0x322b0c.reward[_0x4f5f83.toString()] < 20 && (_0x4f5f83 == 9 || _0x4f5f83 == 13 || _0x4f5f83 == 33 || _0x4f5f83 == 66)) {
                addGameLog(_0x4f321f.logPrefix + _0x1fd0d1 + "第" + _0x322b0c.reward[_0x4f5f83.toString()] + "次奖励!");
              } else if (_0x322b0c.reward[_0x4f5f83.toString()] < 10 && (_0x4f5f83 == 1 || _0x4f5f83 == 2 || _0x4f5f83 == 10 || _0x4f5f83 == 12 || _0x4f5f83 == 34 || _0x4f5f83 == 179 || _0x4f5f83 == 60)) {
                addGameLog(_0x4f321f.logPrefix + _0x1fd0d1 + "第" + _0x322b0c.reward[_0x4f5f83.toString()] + "次奖励!");
              } else if (_0x322b0c.reward[_0x4f5f83.toString()] < 5 && (_0x4f5f83 == 3 || _0x4f5f83 == 35)) {
                addGameLog(_0x4f321f.logPrefix + _0x1fd0d1 + "第" + _0x322b0c.reward[_0x4f5f83.toString()] + "次奖励!");
              } else if (_0x322b0c.reward[_0x4f5f83.toString()] < 5 && _0x4f5f83 == 4) {
                addGameLog(_0x4f321f.logPrefix + (_0x1fd0d1 - 1) + "第" + (_0x322b0c.reward[_0x4f5f83.toString()] + _0x322b0c.reward[(_0x4f5f83 - 1).toString()]) + "次奖励!");
              } else if (_0x322b0c.reward[_0x4f5f83.toString()] < 3 && (_0x4f5f83 == 11 || _0x4f5f83 == 14)) {
                addGameLog(_0x4f321f.logPrefix + _0x1fd0d1 + "第" + _0x322b0c.reward[_0x4f5f83.toString()] + "次奖励!");
              } else {
                if (_0x4f5f83 == 4) {
                  addGameLog(_0x4f321f.logPrefix + (_0x1fd0d1 - 1) + "完成！");
                } else {
                  addGameLog(_0x4f321f.logPrefix + _0x1fd0d1 + "完成！");
                }
                break;
              }
              this.levelId = _0x4f5f83;
              await this.fight();
              if (!xls.timeTraveView.hasLoaded) {
                xls.timeTraveView.load(() => {});
              }
              if (!xls.mapMonster.hasLoaded) {
                xls.mapMonster.load(() => {});
              }
              if (!xls.item.hasLoaded) {
                xls.item.load(() => {});
              }
              let _0x5390eb = xls.timeTraveView.getItems().find(_0x52cb8a => _0x52cb8a.dropItem.includes(xls.mapMonster.getItem(_0x4f5f83).mapId)).items.split(",");
              let _0x46d2a8 = "拥有:\n";
              if (_0x55f1c0 < _0x4f321f.itemindex.length) {
                _0x46d2a8 += xls.item.getItem(_0x5390eb[_0x55f1c0]).name + ":" + getSeerItemNum(_0x5390eb[_0x55f1c0]) + "\n";
              } else {
                _0x46d2a8 += xls.item.getItem(_0x5390eb[0]).name + ":" + getSeerItemNum(_0x5390eb[0]) + "\n";
              }
              addGameLog(_0x46d2a8);
              await wait(200);
            }
            _0x55f1c0++;
          }
        }
        await this.seniorbossui();
        await wait(200);
      }
      await wait(200);
    } catch (_0x1422ca) {
      logger(_0x1422ca);
    }
  }
}
class ReleasePets extends SuperTask {
  constructor() {
    super();
    this.nowName = "放生";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
    this.nowPetData = null;
    this.goalTalent = null;
    this.input2Pwd = null;
  }
  start() {
    super.start();
    let _0x419e8c = this;
    var _0x5063f8 = getTouchs("_source", "release_selected_png");
    if (!_0x5063f8) {
      MFC.alert.show("请先前往精灵放生仓库\n勾选一只目标精灵!");
      _0x419e8c.stop();
      return;
    }
    let _0x5b9bb0 = _0x5063f8[0].parent.$parent._data;
    logger(_0x5b9bb0);
    this.nowPetData = _0x5b9bb0;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x478316 = SimpleAlertUi({});
      const _0xe47b19 = {
        text: "一键放生[二级密码没有不填写]",
        y: _0x478316.height / 11
      };
      var _0x4fcda4 = createLabel(_0xe47b19);
      _0x4fcda4.x = _0x478316.width / 2 - _0x4fcda4.width / 2;
      _0x478316.addChild(_0x4fcda4);
      const _0x3a2371 = {
        text: "锁定精灵也会放生喔\n批量放生目标精灵: " + _0x419e8c.nowPetData.nick,
        y: _0x4fcda4.y + 30,
        textColor: 16776960
      };
      var _0x266fd2 = createLabel(_0x3a2371);
      _0x266fd2.x = _0x478316.width / 2 - _0x266fd2.width / 2;
      _0x478316.addChild(_0x266fd2);
      const _0x5f8637 = {
        prompt: "天赋上限",
        x: 40,
        y: _0x478316.height / 2.2,
        width: 100
      };
      var _0x20707f = createEdit(_0x5f8637);
      _0x478316.addChild(_0x20707f);
      const _0x1b69cb = {
        prompt: "二级密码",
        x: _0x20707f.x + _0x20707f.width + 15,
        y: _0x478316.height / 2.2,
        width: 100
      };
      var _0xb0f88b = createEdit(_0x1b69cb);
      _0x478316.addChild(_0xb0f88b);
      _0x478316.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x419e8c.stop();
      }, async function () {
        if (isNaN(parseInt(_0x20707f.text)) || parseInt(_0x20707f.text) > 31 || parseInt(_0x20707f.text) < 0) {
          MFC.bubbleAlert.showAlert("请输入有效精灵天赋");
          return true;
        }
        if (_0xb0f88b.text != "") {
          if (isNaN(parseInt(_0xb0f88b.text)) && parseInt(_0xb0f88b.text).length == 6) {
            MFC.bubbleAlert.showAlert("请输入有效二级密码");
            return true;
          }
          _0x419e8c.input2Pwd = parseInt(_0xb0f88b.text) + "";
          logger("二级 密码" + _0x419e8c.input2Pwd);
          let _0x8e9f61 = await _0x419e8c.send_message("cs_2nd_passwd", {
            option: 2,
            param: _0x419e8c.input2Pwd
          });
          if (JSON.stringify(_0x8e9f61).indexOf("二级密码解锁失败") != -1) {
            addGameLog("二级密码错误");
            MFC.bubbleAlert.showAlert("二级密码错误");
          }
        }
        _0x419e8c.goalTalent = parseInt(_0x20707f.text);
        _0x419e8c.prcessBody();
      }], null);
      _0x478316.showAlert();
    });
  }
  async prcessBody() {
    try {
      let _0x1623b6 = PetManager.getInstance().getAllPets();
      let _0x20d16d = [];
      for (let _0x407531 = 0; _0x407531 < _0x1623b6.length; _0x407531++) {
        if (this.goalTalent >= _0x1623b6[_0x407531].talent && _0x1623b6[_0x407531].petId == this.nowPetData.petId) {
          if (_0x1623b6[_0x407531].lockFlag == 1) {
            const _0x1cb039 = {
              getTime: _0x1623b6[_0x407531].getTime,
              attrList: [{
                type: "lockFlag",
                value: 0
              }]
            };
            await this.send_message("cs_set_pet_info", _0x1cb039);
          }
          _0x20d16d.push(_0x1623b6[_0x407531].getTime);
        }
      }
      let _0x4cf3ba = _0x20d16d;
      let _0x2d8a9a = splitArray(_0x4cf3ba, 100);
      for (let _0x379fb8 = 0; _0x379fb8 < _0x2d8a9a.length; _0x379fb8++) {
        addGameLog("开始放生!" + _0x2d8a9a[_0x379fb8].length + "只");
        const _0x5d2bf4 = {
          getTime: _0x2d8a9a[_0x379fb8]
        };
        var _0x31dcc9 = await this.send_message("cs_free_pet", _0x5d2bf4);
        if (JSON.stringify(_0x31dcc9).indexOf("二级密码") != -1) {
          addGameLog("请设置二级密码");
          return;
        }
      }
      addGameLog("放生成功 " + this.nowPetData.nick + " " + _0x20d16d.length + " 只");
      this.stop();
    } catch (_0x12b185) {
      logger(_0x12b185);
    }
  }
}
function splitArray(_0x335c69, _0x3cb6b9 = 100) {
  let _0x5b4dfb = [];
  for (let _0x4613ba = 0; _0x4613ba < _0x335c69.length; _0x4613ba += _0x3cb6b9) {
    _0x5b4dfb.push(_0x335c69.slice(_0x4613ba, _0x4613ba + _0x3cb6b9));
  }
  return _0x5b4dfb;
}
class Expstory extends SuperTask {
  constructor() {
    super();
    this.nowName = "经验剧情";
  }
  start() {
    super.start();
    let _0x1cfb75 = this;
    MFC.alert.show("确定进行一键经验剧情吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x5a54a6) {
      _0x1cfb75.stop();
    }, function (_0x456719) {
      _0x1cfb75.prcessBody();
    }]);
  }
  async prcessBody() {
    try {
      let _0x482241 = xls.activityPetStory.getItems().map(_0x2223a3 => {
        if (_0x2223a3.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") <= _0x2223a3.endTime) {
          var _0x2027a4 = _0x2223a3.endTime;
          var _0x2d1af6 = deden.DateUtil.create(_0x2027a4);
          _0x2d1af6.setHours(_0x2d1af6.getHours() - 15);
          var _0x28d163 = deden.DateUtil.dateFormat(_0x2d1af6, "yyyy_MM_dd hh:mm:ss");
          if (_0x28d163 >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss")) {
            if (_0x2223a3.name[_0x2223a3.name.length - 1] != "篇") {
              return _0x2223a3;
            }
          }
        }
      }).sort().filter(_0x299fb6 => _0x299fb6 != undefined);
      for (let _0x130ddf = 0; _0x130ddf < _0x482241.length; _0x130ddf++) {
        if (SpritePlotManager.getInstance().getPlotStateById(_0x482241[_0x130ddf].id) == 3) {
          addGameLog(_0x482241[_0x130ddf].name + _0x482241[_0x130ddf].stepNumber + "已完成");
        } else if (SpritePlotManager.getInstance().getPlotStateById(_0x482241[_0x130ddf].id) == 2) {
          const _0x172151 = {
            id: _0x482241[_0x130ddf].id,
            type: 2,
            getTimeList: []
          };
          await this.send_message("cs_new_pet_story", _0x172151);
        } else if (SpritePlotManager.getInstance().getPlotStateById(_0x482241[_0x130ddf].id) == 0) {
          logger(_0x482241[_0x130ddf].name + "未解锁");
        } else {
          logger(_0x482241[_0x130ddf].id);
          const _0x571027 = {
            id: _0x482241[_0x130ddf].id,
            type: 1,
            getTimeList: []
          };
          await this.send_message("cs_new_pet_story", _0x571027);
          const _0x5d9e30 = {
            id: _0x482241[_0x130ddf].id,
            type: 2,
            getTimeList: []
          };
          await this.send_message("cs_new_pet_story", _0x5d9e30);
          addGameLog(_0x482241[_0x130ddf].name + _0x482241[_0x130ddf].stepNumber + "已完成");
        }
      }
      this.stop();
    } catch (_0x25bbd8) {}
  }
}
class Pvpremind extends SuperTask {
  constructor() {
    super();
    this.nowName = "PVP记牌器";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_notify_change_pet"
    }, {
      watchEventName: "sc_change_default_team"
    }, {
      watchEventName: "sc_notify_item_change"
    }, {
      watchEventName: "sc_query_tianti_extra_status"
    }];
    this.task = [];
  }
  start() {
    super.start();
    if (pokers) {
      let _0x19e5dd = this;
      MFC.alert.show("确定关闭记牌器吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x9b6894) {
        _0x19e5dd.stop();
      }, function (_0x123f90) {
        if (pokers != null) {
          BC.removeEvent(pokers);
          MFC.rootLayer.removeChild(pokers);
          pokers = null;
        }
        addGameLog("巅峰记牌器已经关闭!");
        _0x19e5dd.stop();
      }]);
    } else {
      let _0x346c19 = this;
      MFC.alert.show("确定启动巅峰记牌器吗？\n!!!记牌器文字可以进行拖动!!!", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x47ab58) {
        _0x346c19.stop();
      }, function (_0x24051d) {
        _0x346c19.prcessBody();
      }]);
    }
  }
  async prcessBody() {
    try {
      pokers = new eui.Button();
      pokers.y = 80;
      pokers.x = 20;
      pokers.skinName = getTextBtnNullImageSkinName("巅峰记牌器已开启");
      MFC.rootLayer.addChild(pokers);
      xls.enchanting.load(() => {});
      addGameLog("巅峰记牌器已开启!可进行拖动");
      BC.addEvent(pokers, pokers, egret.TouchEvent.TOUCH_BEGIN, _0x580e17 => {
        pokers.oldx = _0x580e17.stageX;
        pokers.oldy = _0x580e17.stageY;
      });
      BC.addEvent(pokers, pokers, egret.TouchEvent.TOUCH_MOVE, _0x2306ac => {
        if (pokers.oldx) {
          pokers.x = _0x2306ac.stageX - pokers.oldx + pokers.x;
        }
        if (pokers.oldy) {
          pokers.y = _0x2306ac.stageY - pokers.oldy + pokers.y;
        }
        pokers.oldx = _0x2306ac.stageX;
        pokers.oldy = _0x2306ac.stageY;
        if (pokers.$children[pokers.$children.length - 1].textArr[0].text != "巅峰记牌器已开启") {
          pokers.definex = pokers.x;
          pokers.definey = pokers.y;
        }
      });
      this.stop();
    } catch (_0x526cd6) {}
  }
}
class RongHeHelper extends SuperTask {
  constructor() {
    super();
    this.nowName = "融合助手";
    this.recvList = [];
    this.task = [];
  }
  start() {
    super.start();
    if (rongheStatus) {
      let _0x5473eb = this;
      MFC.alert.show("确定关闭融合助手吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0xef1fca) {
        _0x5473eb.stop();
      }, function (_0x170060) {
        if (rongheStatus != null) {
          rongheStatus = null;
        }
        addGameLog("融合助手已经关闭!");
        _0x5473eb.stop();
      }]);
    } else {
      let _0x3e2292 = this;
      MFC.alert.show("确定启动融合助手吗？", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x4ee4cb) {
        _0x3e2292.stop();
      }, function (_0x3948b7) {
        _0x3e2292.prcessBody();
      }]);
    }
  }
  async prcessBody() {
    try {
      rongheStatus = 1;
      this.stop();
    } catch (_0xed9d9c) {}
  }
}
class Coinstory extends SuperTask {
  constructor() {
    super();
    this.nowName = "豆子剧情";
  }
  start() {
    super.start();
    let _0x1c4dd6 = this;
    MFC.alert.show("确定进行一键赛尔豆剧情吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0xc45e) {
      _0x1c4dd6.stop();
    }, function (_0x224263) {
      _0x1c4dd6.prcessBody();
    }]);
  }
  async prcessBody() {
    try {
      let _0x4cc77b = xls.activityPetStory.getItems().map(_0x3632a3 => {
        if (_0x3632a3.startTime <= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") && deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss") <= _0x3632a3.endTime) {
          var _0x41818b = _0x3632a3.endTime;
          var _0x289cb5 = deden.DateUtil.create(_0x41818b);
          _0x289cb5.setHours(_0x289cb5.getHours() - 15);
          var _0xfbc23a = deden.DateUtil.dateFormat(_0x289cb5, "yyyy_MM_dd hh:mm:ss");
          if (_0xfbc23a >= deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy_MM_dd hh:mm:ss")) {
            if (_0x3632a3.name[_0x3632a3.name.length - 1] == "篇") {
              return _0x3632a3;
            }
          }
        }
      }).sort().filter(_0x1da2c8 => _0x1da2c8 != undefined);
      for (let _0x580674 = 0; _0x580674 < _0x4cc77b.length; _0x580674++) {
        if (SpritePlotManager.getInstance().getPlotStateById(_0x4cc77b[_0x580674].id) == 3) {
          addGameLog(_0x4cc77b[_0x580674].name + _0x4cc77b[_0x580674].stepNumber + "已完成");
        } else if (SpritePlotManager.getInstance().getPlotStateById(_0x4cc77b[_0x580674].id) == 2) {
          const _0x28122d = {
            id: _0x4cc77b[_0x580674].id,
            type: 2,
            getTimeList: []
          };
          await this.send_message("cs_new_pet_story", _0x28122d);
        } else if (SpritePlotManager.getInstance().getPlotStateById(_0x4cc77b[_0x580674].id) == 0) {
          logger(_0x4cc77b[_0x580674].name + "未解锁");
        } else {
          logger(_0x4cc77b[_0x580674].id);
          const _0xf9ead4 = {
            id: _0x4cc77b[_0x580674].id,
            type: 1,
            getTimeList: []
          };
          await this.send_message("cs_new_pet_story", _0xf9ead4);
          const _0x125fed = {
            id: _0x4cc77b[_0x580674].id,
            type: 2,
            getTimeList: []
          };
          await this.send_message("cs_new_pet_story", _0x125fed);
          addGameLog(_0x4cc77b[_0x580674].name + _0x4cc77b[_0x580674].stepNumber + "已完成");
        }
      }
      this.stop();
    } catch (_0x28a467) {}
  }
}
class learnAdd extends SuperTask {
  constructor() {
    super();
    this.nowName = "学习力任务";
    this.nowAddLearns = [];
  }
  start() {
    super.start();
    let _0xe1743c = this;
    if (!window.nowCheckBagPet) {
      MFC.alert.show("请先从精灵背包打开\n需要点学习力的精灵的详情页!");
      this.stop();
      return;
    }
    let _0x5bb24a = 0;
    for (let _0x49076c = 0; _0x49076c < window.nowCheckBagPet.effortValues.length; _0x49076c++) {
      _0x5bb24a = _0x5bb24a + window.nowCheckBagPet.effortValues[_0x49076c];
    }
    if (_0x5bb24a >= 510) {
      MFC.alert.show("当前精灵分配学习力已满,请重新选择精灵!");
      this.stop();
      return;
    }
    if (window.learnTimeId != null) {
      MFC.alert.show("学习力任务在后台执行\n是否结束学习力任务?", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x527e29) {
        _0xe1743c.stop();
      }, function (_0x1b079c) {
        clearInterval(learnTimeId);
        window.learnTimeId = null;
        _0xe1743c.learnUi();
      }]);
    } else {
      this.learnUi();
    }
  }
  learnUi() {
    addGameLog("开始新的分配方案!");
    let _0x3b14e2 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      addGameLog("分配学习力面板");
      var _0xa727fc = SimpleAlertUi({
        width: 550,
        height: 350
      });
      this.alertWin = _0xa727fc;
      const _0xe13f03 = {
        text: "分配の学习力",
        y: _0xa727fc.height / 16
      };
      var _0xed7430 = createLabel(_0xe13f03);
      _0xed7430.x = _0xa727fc.width / 2 - _0xed7430.width / 2;
      _0xa727fc.addChild(_0xed7430);
      const _0x4017ec = {
        text: "当前精灵:",
        x: 40,
        y: _0xed7430.y + _0xed7430.height + 15
      };
      var _0x488840 = createLabel(_0x4017ec);
      _0xa727fc.addChild(_0x488840);
      var _0x3e2429 = createLabel({
        text: PetConfig.getDef(window.nowCheckBagPet.petId).name,
        x: _0x488840.x + _0x488840.width + 15,
        y: _0xed7430.y + _0xed7430.height + 15,
        textColor: 16776960
      });
      _0xa727fc.addChild(_0x3e2429);
      const _0x253819 = {
        text: "天赋:",
        x: _0x3e2429.x + _0x3e2429.width + 15,
        y: _0xed7430.y + _0xed7430.height + 15
      };
      var _0x3c37e8 = createLabel(_0x253819);
      _0xa727fc.addChild(_0x3c37e8);
      const _0x1b0c89 = {
        text: window.nowCheckBagPet.talent,
        x: _0x3c37e8.x + _0x3c37e8.width + 15,
        y: _0xed7430.y + _0xed7430.height + 15,
        textColor: 16776960
      };
      var _0x6fa4e0 = createLabel(_0x1b0c89);
      _0xa727fc.addChild(_0x6fa4e0);
      const _0x39b203 = {
        text: "特性:",
        x: _0x6fa4e0.x + _0x6fa4e0.width + 15,
        y: _0xed7430.y + _0xed7430.height + 15
      };
      var _0x29dc8e = createLabel(_0x39b203);
      _0xa727fc.addChild(_0x29dc8e);
      const _0x2423fb = {
        text: window.nowCheckBagPet.talent,
        x: _0x29dc8e.x + _0x29dc8e.width + 15,
        y: _0xed7430.y + _0xed7430.height + 15,
        textColor: 16776960
      };
      var _0x51fe09 = createLabel(_0x2423fb);
      if (window.nowCheckBagPet.featureId == 0) {
        _0x51fe09.text = "无";
      } else {
        _0x51fe09.text = xls.features.getItem(window.nowCheckBagPet.featureId).name;
      }
      _0xa727fc.addChild(_0x51fe09);
      const _0x5a8f08 = {
        text: "等级:",
        x: _0x51fe09.x + _0x51fe09.width + 15,
        y: _0xed7430.y + _0xed7430.height + 15
      };
      var _0x2f4586 = createLabel(_0x5a8f08);
      _0xa727fc.addChild(_0x2f4586);
      const _0x4471db = {
        text: window.nowCheckBagPet.level,
        x: _0x2f4586.x + _0x2f4586.width + 15,
        y: _0xed7430.y + _0xed7430.height + 15,
        textColor: 16776960
      };
      var _0x69c88 = createLabel(_0x4471db);
      _0xa727fc.addChild(_0x69c88);
      let _0x25e7df = [{
        label: {
          text: "攻击"
        },
        input: {
          storageKey: "gongji"
        }
      }, {
        label: {
          text: "防御"
        },
        input: {
          storageKey: "fangyu"
        }
      }, {
        label: {
          text: "特攻"
        },
        input: {
          storageKey: "tegong"
        }
      }, {
        label: {
          text: "特防"
        },
        input: {
          storageKey: "tefang"
        }
      }, {
        label: {
          text: "速度"
        },
        input: {
          storageKey: "sudu"
        }
      }, {
        label: {
          text: "体力"
        },
        input: {
          storageKey: "tili"
        }
      }];
      let _0xe7fb56 = 40;
      let _0x5270ab = _0x3e2429.y + _0x3e2429.height + 25;
      let _0x11a62b = [];
      for (let _0x5d1198 = 0; _0x5d1198 < _0x25e7df.length; _0x5d1198++) {
        const _0x166cff = {
          text: _0x25e7df[_0x5d1198].label.text,
          x: _0xe7fb56,
          y: _0x5270ab
        };
        let _0x487c36 = createLabel(_0x166cff);
        const _0x48a7c2 = {
          x: _0x487c36.x + _0x487c36.width + 15,
          y: _0x5270ab - 5,
          prompt: "请输入0-255",
          storageKey: _0x25e7df[_0x5d1198].input.storageKey
        };
        let _0xfa537e = createEdit(_0x48a7c2);
        _0x11a62b.push(_0xfa537e);
        _0xa727fc.addChild(_0x487c36);
        _0xa727fc.addChild(_0xfa537e);
        _0xe7fb56 = _0xe7fb56 + _0x487c36.width + 15 + _0xfa537e.width + 15;
        if ((_0x5d1198 + 1) % 3 == 0) {
          _0x5270ab = _0x5270ab + _0xfa537e.height + 10;
          _0xe7fb56 = 40;
        }
      }
      const _0x104074 = {
        text: "注意:",
        x: 30,
        y: _0x5270ab + 20,
        textColor: 16776960
      };
      let _0x45a086 = createLabel(_0x104074);
      _0xa727fc.addChild(_0x45a086);
      const _0x46fd8d = {
        text: "执行过后后台会每间隔1分钟,进行加点对应精灵\n必须都要输入",
        x: 40,
        y: _0x45a086.y + 10 + _0x45a086.height,
        textColor: 16777215
      };
      let _0x5cd6f8 = createLabel(_0x46fd8d);
      _0xa727fc.addChild(_0x5cd6f8);
      _0xa727fc.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x3b14e2.stop();
      }, function () {
        _0x3b14e2.nowAddLearns = [];
        _0x3b14e2.nowAddLearns.push(_0x11a62b[_0x11a62b.length - 1].text);
        for (let _0x39de48 = 0; _0x39de48 < _0x11a62b.length - 1; _0x39de48++) {
          _0x3b14e2.nowAddLearns.push(_0x11a62b[_0x39de48].text);
        }
        logger("学习力分配情况:", _0x3b14e2.nowAddLearns);
        let _0x375462 = 0;
        for (var _0x512d99 = 0; _0x512d99 < _0x3b14e2.nowAddLearns.length; _0x512d99++) {
          let _0x90f4c2 = _0x3b14e2.nowAddLearns[_0x512d99];
          if (window.nowCheckBagPet.effortValues[_0x512d99] > _0x90f4c2) {
            if (_0x512d99 == 0) {
              MFC.bubbleAlert.showAlert("当前精灵体力学习力比设置的大,请重新设置");
              return true;
            }
            if (_0x512d99 == 1) {
              MFC.bubbleAlert.showAlert("当前精灵攻击学习力比设置的大,请重新设置");
              return true;
            }
            if (_0x512d99 == 2) {
              MFC.bubbleAlert.showAlert("当前精灵防御学习力比设置的大,请重新设置");
              return true;
            }
            if (_0x512d99 == 3) {
              MFC.bubbleAlert.showAlert("当前精灵特攻学习力比设置的大,请重新设置");
              return true;
            }
            if (_0x512d99 == 4) {
              MFC.bubbleAlert.showAlert("当前精灵特防学习力比设置的大,请重新设置");
              return true;
            }
            if (_0x512d99 == 5) {
              MFC.bubbleAlert.showAlert("当前精灵速度学习力比设置的大,请重新设置");
              return true;
            }
          }
          if (isNaN(parseInt(_0x90f4c2)) || parseInt(_0x90f4c2) > 255 || parseInt(_0x90f4c2) < 0) {
            MFC.bubbleAlert.showAlert("请输入有效学习力,输入框都要输入,可以输入0");
            return true;
          }
          _0x375462 = _0x375462 + parseInt(_0x90f4c2);
        }
        logger("学习力总:", _0x375462);
        if (_0x375462 > 510) {
          MFC.bubbleAlert.showAlert("总学习力大于510,请重新设置学习力分配!");
          return true;
        }
        window.nowAddLearns = _0x3b14e2.nowAddLearns;
        _0x11a62b.forEach(_0x575275 => localStorage.setItem(_0x575275.storageKey, _0x575275.text));
        _0x3b14e2.prcessBody();
      }], null);
      _0xa727fc.showAlert();
    });
  }
  async prcessBody() {
    try {
      addGameLog("学习力任务已经后台开启!");
      window.addPet = window.nowCheckBagPet;
      learnTimeId = // TOLOOK
      setInterval(async () => {
        try {
          window.addPet.haveLearns = null;
          let _0x50b48a = new window.cs_get_effort_value();
          Object.assign(_0x50b48a, {});
          MFC.online.send(_0x50b48a);
          while (1) {
            if (window.addPet.haveLearns != null) {
              break;
            } else {
              await wait(500);
            }
          }
          let _0x11d4bc = PetManager.getInstance().getPetInfoByGetTime(window.addPet.getTime).effortValues;
          let _0x4942e3 = 0;
          for (let _0x3e232d = 0; _0x3e232d < _0x11d4bc.length; _0x3e232d++) {
            if (_0x11d4bc[_0x3e232d] < window.nowAddLearns[_0x3e232d]) {
              let _0x42b376;
              let _0x12b54f = "";
              if (_0x3e232d == 0) {
                _0x42b376 = 6;
                _0x12b54f = "体力";
              }
              if (_0x3e232d == 1) {
                _0x42b376 = 1;
                _0x12b54f = "攻击";
              }
              if (_0x3e232d == 2) {
                _0x42b376 = 2;
                _0x12b54f = "防御";
              }
              if (_0x3e232d == 3) {
                _0x42b376 = 3;
                _0x12b54f = "特攻";
              }
              if (_0x3e232d == 4) {
                _0x42b376 = 4;
                _0x12b54f = "特防";
              }
              if (_0x3e232d == 5) {
                _0x42b376 = 5;
                _0x12b54f = "速度";
              }
              if (window.nowAddLearns[_0x3e232d] - _0x11d4bc[_0x3e232d] >= window.addPet.haveLearns) {
                addGameLog("精灵: " + PetConfig.getDef(window.addPet.petId).name + " 加点" + _0x12b54f + ": " + window.addPet.haveLearns);
                let _0xd05245 = new window.cs_add_effort_value();
                const _0x21fb8f = {
                  getTime: window.addPet.getTime,
                  effortValue: [{
                    idx: _0x3e232d,
                    value: window.addPet.haveLearns
                  }]
                };
                Object.assign(_0xd05245, _0x21fb8f);
                MFC.online.send(_0xd05245);
                _0x4942e3 = 1;
                break;
              } else if (window.nowAddLearns[_0x3e232d] - _0x11d4bc[_0x3e232d] > 0) {
                addGameLog("精灵: " + PetConfig.getDef(window.addPet.petId).name + " 加点" + _0x12b54f + ": " + (window.nowAddLearns[_0x3e232d] - _0x11d4bc[_0x3e232d]));
                _0x4942e3 = 1;
                let _0x4814bd = new window.cs_add_effort_value();
                const _0x5a4d23 = {
                  getTime: window.addPet.getTime,
                  effortValue: [{
                    idx: _0x3e232d,
                    value: window.nowAddLearns[_0x3e232d] - _0x11d4bc[_0x3e232d]
                  }]
                };
                Object.assign(_0x4814bd, _0x5a4d23);
                MFC.online.send(_0x4814bd);
                break;
              }
            }
          }
          if (_0x4942e3 == 0) {
            addGameLog("学习力任务已经分配完成!");
            clearInterval(learnTimeId);
            window.learnTimeId = null;
          }
        } catch (_0x156d3c) {
          logger(_0x156d3c);
        }
      }, 20000);
    } catch (_0x3aa585) {}
    this.stop();
  }
}
class CoinBigBattle extends SuperTask {
  constructor() {
    super();
    this.nowName = "豆子作战";
    this.skillData = {
      堕龙之力: 22615,
      幕夜龙王击: 14816,
      灭世歼星炮: 32127,
      奥义断水击: 32529,
      光闪击: 10630,
      光闪击Plus: 100023
    };
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
    this.infoTimes = "cs_get_campaign_pet_fight_infos";
  }
  start() {
    super.start();
    let _0x53b715 = this;
    MFC.alert.show(`确定进行赛尔豆大作战吗
自动调出背包:
哈肯萨/赫尔卡长老/水次/瞬杀蒙多
[都没有会尝试进行租借]`, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x36e324) {
      _0x53b715.stop();
    }, function (_0x136c6c) {
      _0x53b715.prcessBody();
    }]);
  }
  async prcessBody() {
    try {
      var _0x2fdf3a = MFC.serverTimer.date;
      var _0x2eb724 = _0x2fdf3a.getDay();
      this.battleStyle = "";
      if (_0x2fdf3a.getHours() < 5) {
        if (_0x2eb724 == 0) {
          _0x2eb724 = 6;
        } else {
          _0x2eb724--;
        }
      }
      if ([2, 4, 6].indexOf(_0x2eb724) != -1) {
        this.battleStyle = "cs_start_campaign_pet_test";
        this.batttleInfos = "cs_get_campaign_pet_test_infos";
      } else {
        this.battleStyle = "cs_start_campaign_pet_fight";
        this.batttleInfos = "cs_get_campaign_pet_fight_infos";
      }
      let _0x51ea4c = await this.send_message(this.batttleInfos, {});
      let _0x597bf0 = _0x51ea4c.times;
      let _0x5c52f4 = _0x51ea4c.bossType;
      if (_0x597bf0 <= 9) {
        addGameLog("豆子作战无免费对战次数");
        this.stop();
        return;
      } else {
        let _0x436df2 = await this.getCoinBossId(_0x5c52f4);
        let _0x5d19ca = await this.coinBattle();
        if (!_0x5d19ca) {
          this.stop();
          return;
        }
        let _0x29241c = _0x5d19ca.skillsName;
        while (1) {
          let _0x1107a4 = await this.send_message(this.batttleInfos, {});
          let _0x282ec1 = _0x1107a4.times;
          if (_0x282ec1 <= 9) {
            addGameLog("豆子作战无免费对战次数");
            break;
          }
          while (1) {
            let _0x514a65 = await this.actionCoin(_0x5d19ca.pet, _0x436df2);
            if (!_0x514a65) {
              this.stop();
              return;
            }
            await this.initBattle();
            let _0x45c19f = await this.useSkill(this.skillData[_0x29241c[0]]);
            while (_0x45c19f.result.result == 0) {
              _0x45c19f = await this.useSkill(this.skillData[_0x29241c[1]]);
              let _0x6a8ebe = _0x45c19f.result.playerInfos;
              let _0x2eacb9 = "";
              for (let _0x1e0748 = 0; _0x1e0748 < _0x6a8ebe.length; _0x1e0748++) {
                if (_0x6a8ebe[_0x1e0748].uid == UserManager.getInstance().userInfo.uid) {
                  _0x2eacb9 = _0x6a8ebe[_0x1e0748].petInfos[0];
                  break;
                }
              }
              let _0x377b25 = _0x2eacb9.useSkills.find(_0x4785ac => _0x4785ac.id === this.skillData[_0x29241c[1]]).crtPP;
              if (_0x377b25 <= 1) {
                addGameLog("大招技能次数不足,退出战斗");
                await this.send_message("cs_quit_battle", {});
                break;
              }
              if (_0x2eacb9.crtHp <= 40) {
                addGameLog("血量不足,退出战斗");
                await this.send_message("cs_quit_battle", {});
                break;
              }
              if (_0x45c19f.result.roundNum >= 4) {
                addGameLog("回合数过多,重进!");
                await this.send_message("cs_quit_battle", {});
                break;
              }
            }
            if (_0x45c19f.result.result === 1) {
              addGameLog("顺利击杀赛尔豆boss");
            } else {
              addGameLog("未击败豆子Boss");
            }
            if (_0x45c19f.result.result != 1) {
              addGameLog("继续打豆子作战");
            } else {
              break;
            }
          }
          await wait(200);
        }
      }
      this.stop();
    } catch (_0x211da0) {
      logger(_0x211da0);
    }
  }
  async getCoinBossId(_0x1c0108) {
    try {
      xls.petTest.load(() => {});
    } catch (_0x1ed882) {}
    while (1) {
      let _0x33cfb6 = xls.petTest.getItems();
      if (_0x33cfb6.length >= 35) {
        break;
      } else {
        await wait(400);
      }
    }
    let _0x5a8e0c = xls.petTest.getItems();
    for (let _0x523e03 = 0; _0x523e03 < _0x5a8e0c.length; _0x523e03++) {
      let _0x503599 = _0x5a8e0c[_0x523e03];
      if (_0x503599.difficulty == 5 && _0x503599.bossType == _0x1c0108) {
        logger(_0x503599);
        return _0x503599.id;
      }
    }
  }
  async actionCoin(_0x4ead18, _0x151ded) {
    logger(_0x4ead18);
    if (_0x4ead18.userId) {
      addGameLog("进行租借对战");
      let _0x1cd938 = await this.send_message("cs_start_campaign_pet_fight", {
        levelId: _0x151ded,
        hirePetList: [_0x4ead18.userId + "_" + _0x4ead18.type + "_" + _0x4ead18.pos, PetManager.getInstance().getAllPets()[0].getTime],
        attachBattleSkill: [{
          petId: _0x4ead18.petId,
          level: _0x4ead18.level,
          skillList: _0x4ead18.skills,
          getTime: _0x4ead18.getTime,
          otherUid: _0x4ead18.userId,
          type: _0x4ead18.type
        }]
      });
      if (JSON.stringify(_0x1cd938).indexOf("不是开放时间") != -1) {
        addGameLog("切换回合模式");
        _0x1cd938 = await this.send_message("cs_start_campaign_pet_test", {
          levelId: _0x151ded,
          hirePetList: [_0x4ead18.userId + "_" + _0x4ead18.type + "_" + _0x4ead18.pos, PetManager.getInstance().getAllPets()[0].getTime],
          attachBattleSkill: [{
            petId: _0x4ead18.petId,
            level: _0x4ead18.level,
            skillList: _0x4ead18.skills,
            getTime: _0x4ead18.getTime,
            otherUid: _0x4ead18.userId,
            type: _0x4ead18.type
          }]
        });
      }
      if (JSON.stringify(_0x1cd938).indexOf("没有解锁") != -1) {
        addGameLog("难度没解锁,运行停止");
        return false;
      }
      if (JSON.stringify(_0x1cd938).indexOf("挑战次数已用完") != -1) {
        addGameLog("挑战次数已用完");
        return false;
      }
    } else {
      addGameLog("进行对战");
      await wait(300);
      await this.send_message("cs_new_change_petArray", {
        op: 1,
        arrayType: "campaignDefaultTeam",
        subArray: 0,
        idx: 1,
        teamUp: 0,
        fightType: 0,
        getTimeList: [_0x4ead18.getTime, PetManager.getInstance().getAllPets()[0].getTime]
      });
      let _0x5d0b59 = await this.send_message("cs_start_campaign_pet_fight", {
        levelId: _0x151ded,
        hirePetList: [_0x4ead18.getTime, PetManager.getInstance().getAllPets()[0].getTime],
        attachBattleSkill: []
      });
      await wait(300);
      if (JSON.stringify(_0x5d0b59).indexOf("不是开放时间") != -1) {
        addGameLog("切换回合模式");
        _0x5d0b59 = await this.send_message("cs_start_campaign_pet_test", {
          levelId: _0x151ded,
          hirePetList: [_0x4ead18.getTime, PetManager.getInstance().getAllPets()[0].getTime],
          attachBattleSkill: []
        });
      }
      if (JSON.stringify(_0x5d0b59).indexOf("没有解锁") != -1) {
        addGameLog("难度没解锁,运行停止");
        return false;
      }
      if (JSON.stringify(_0x5d0b59).indexOf("挑战次数已用完") != -1) {
        addGameLog("挑战次数已用完,运行停止");
        return false;
      }
    }
    return true;
  }
  async coinBattle() {
    let _0x2b9e6e = await this.dispatchSelfPet("哈肯萨", ["堕龙之力", "幕夜龙王击"]);
    if (_0x2b9e6e) {
      return {
        pet: _0x2b9e6e,
        skillsName: ["堕龙之力", "幕夜龙王击"]
      };
    }
    let _0x3ff2ee = await this.dispatchSelfPet("赫尔卡长老", ["灭世歼星炮"]);
    if (_0x3ff2ee) {
      return {
        pet: _0x3ff2ee,
        skillsName: ["灭世歼星炮", "灭世歼星炮"]
      };
    }
    let _0x5e543b = await this.dispatchSelfPet("凯西恩", ["奥义断水击"]);
    if (_0x5e543b) {
      return {
        pet: _0x5e543b,
        skillsName: ["奥义断水击", "奥义断水击"]
      };
    }
    let _0x281652 = await this.dispatchSelfPet("蒙多", ["光闪击"], [5, 6, 7, 8]);
    if (_0x281652) {
      return {
        pet: _0x281652,
        skillsName: ["光闪击", "光闪击"]
      };
    }
    let _0x4dda9a = await this.dispatchSelfPet("蒙多", ["光闪击Plus"], [5, 6, 7, 8]);
    if (_0x4dda9a) {
      return {
        pet: _0x4dda9a,
        skillsName: ["光闪击Plus", "光闪击Plus"]
      };
    }
    let _0x166b9d = await this.dispatchHirePet("哈肯萨", ["堕龙之力", "幕夜龙王击"]);
    if (_0x166b9d) {
      return {
        pet: _0x166b9d,
        skillsName: ["堕龙之力", "幕夜龙王击"]
      };
    }
    let _0x442923 = await this.dispatchHirePet("赫尔卡长老", ["灭世歼星炮"]);
    if (_0x442923) {
      return {
        pet: _0x442923,
        skillsName: ["灭世歼星炮", "灭世歼星炮"]
      };
    }
    let _0x137742 = await this.dispatchHirePet("凯西恩", ["奥义断水击"]);
    if (_0x137742) {
      return {
        pet: _0x137742,
        skillsName: ["奥义断水击", "奥义断水击"]
      };
    }
    let _0x209b86 = await this.dispatchHirePet("蒙多", ["光闪击"], [5, 6, 7, 8]);
    if (_0x209b86) {
      return {
        pet: _0x209b86,
        skillsName: ["光闪击", "光闪击"]
      };
    }
    let _0x4c350d = await this.dispatchHirePet("蒙多", ["光闪击Plus"], [5, 6, 7, 8]);
    if (_0x4c350d) {
      return {
        pet: _0x4c350d,
        skillsName: ["光闪击Plus", "光闪击Plus"]
      };
    }
    addGameLog("没有符合条件的精灵进行豆子作战");
    return false;
  }
  async dispatchHirePet(_0x425540, _0x4b1a5c, _0x54fda1) {
    let _0x1fbae7 = [];
    for (let _0x414e82 = 0; _0x414e82 < _0x4b1a5c.length; _0x414e82++) {
      _0x1fbae7.push(this.skillData[_0x4b1a5c[_0x414e82]]);
    }
    let _0x2a2df2 = await this.fromHireGetPetbyskillIdArr(_0x1fbae7, _0x54fda1);
    if (!_0x2a2df2) {
      addGameLog("租借列表没有: " + _0x425540);
      return false;
    }
    addGameLog("找到租借精灵: " + _0x425540);
    return _0x2a2df2;
  }
  async dispatchSelfPet(_0x473648, _0xd1dc98, _0x2e2f8f) {
    let _0x4bbf6d = [];
    for (let _0xe47dc5 = 0; _0xe47dc5 < _0xd1dc98.length; _0xe47dc5++) {
      _0x4bbf6d.push(this.skillData[_0xd1dc98[_0xe47dc5]]);
    }
    const _0x391e69 = {
      skills: _0x4bbf6d,
      features: _0x2e2f8f
    };
    let _0x19ce76 = await getGoalPets([_0x391e69]);
    if (_0x19ce76) {
      addGameLog("精灵背包中携有" + _0x473648 + "+" + _0xd1dc98.join("+"));
      return _0x19ce76;
    } else {
      addGameLog("背包 没有" + _0x473648 + "+" + _0xd1dc98.join("+"));
      return false;
    }
  }
  async fromHireGetPetbyskillIdArr(_0x5d195e, _0x4acb46) {
    addGameLog("检测租借列表中..稍等");
    let _0x409b72 = await this.send_message("cs_new_get_hire_pet_list", {
      friendPageNo: 1,
      friendPageSize: 1000,
      teamPageNo: 1,
      teamPageSize: 1000
    });
    let _0x9b40fe = _0x409b72.friendHireList;
    for (let _0x55604f = 0; _0x55604f < _0x9b40fe.length; _0x55604f++) {
      let _0x482916 = _0x9b40fe[_0x55604f];
      const _0x3f8ce3 = {
        type: _0x482916.type,
        pos: _0x482916.pos,
        targetUid: _0x482916.userId
      };
      let _0x510e1a = await this.send_message("cs_new_get_hire_pet_info", _0x3f8ce3);
      let _0xb5b609 = _0x510e1a.pet.skills;
      let _0x15cc61 = false;
      for (let _0x497bf5 = 0; _0x497bf5 < _0x5d195e.length; _0x497bf5++) {
        if (_0x4acb46) {
          if (_0x4acb46.indexOf(_0x510e1a.pet.featureId) != -1) {
            if (_0xb5b609.indexOf(_0x5d195e[_0x497bf5]) != -1) {
              _0x15cc61 = true;
            } else {
              _0x15cc61 = false;
            }
          }
        } else if (_0xb5b609.indexOf(_0x5d195e[_0x497bf5]) != -1) {
          _0x15cc61 = true;
        } else {
          _0x15cc61 = false;
        }
      }
      if (_0x15cc61) {
        _0x482916.skills = _0x510e1a.pet.skills;
        return _0x482916;
      }
    }
    let _0x4aa83e = _0x409b72.teamHireList;
    for (let _0x171590 = 0; _0x171590 < _0x4aa83e.length; _0x171590++) {
      let _0x1a9c34 = _0x4aa83e[_0x171590];
      const _0x48e5c4 = {
        type: _0x1a9c34.type,
        pos: _0x1a9c34.pos,
        targetUid: _0x1a9c34.userId
      };
      let _0x4142f4 = await this.send_message("cs_new_get_hire_pet_info", _0x48e5c4);
      let _0x17891f = _0x4142f4.pet.skills;
      let _0x2271a6 = false;
      for (let _0x4745c5 = 0; _0x4745c5 < _0x5d195e.length; _0x4745c5++) {
        if (_0x17891f.indexOf(_0x5d195e[_0x4745c5]) != -1) {
          _0x2271a6 = true;
        } else {
          _0x2271a6 = false;
        }
      }
      if (_0x2271a6) {
        _0x1a9c34.skills = _0x4142f4.pet.skills;
        return _0x1a9c34;
      }
    }
    return false;
  }
  async checkSkillPetTeam(_0x781df1, _0x47effa) {
    let _0x257145 = PetManager.getInstance().getAllPets();
    for (let _0x192826 = 0; _0x192826 < _0x257145.length; _0x192826++) {
      let _0xcf7120 = _0x257145[_0x192826];
      let _0x3633cf = _0xcf7120.skills;
      let _0x57b8c2 = false;
      for (let _0x3f6745 = 0; _0x3f6745 < _0x781df1.length; _0x3f6745++) {
        if (_0x47effa) {
          if (_0x47effa.indexOf(_0xcf7120.featureId) != -1) {
            if (_0x3633cf.indexOf(_0x781df1[_0x3f6745]) != -1) {
              _0x57b8c2 = true;
            } else {
              _0x57b8c2 = false;
            }
          }
        } else if (_0x3633cf.indexOf(_0x781df1[_0x3f6745]) != -1) {
          _0x57b8c2 = true;
        } else {
          _0x57b8c2 = false;
        }
      }
      if (_0x57b8c2) {
        return _0xcf7120;
      }
    }
    return false;
  }
}
class dianfeng extends SuperTask {
  constructor() {
    super();
    this.nowName = "巅峰挂机";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_pvp_notify_match_success"
    }];
    this.PvpC = 0;
    this.giveUp = 1;
    this.dianfengStyle = "kuangye";
    this.nowUi;
  }
  start() {
    super.start();
    let _0x394e5e = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x44dae0 = SimpleAlertUi({
        height: 250,
        width: 400
      });
      _0x394e5e.alertWin = _0x44dae0;
      const _0xad178e = {
        text: "确定进行[巅峰]模式挂机吗?",
        y: _0x44dae0.height / 11
      };
      var _0x4b9838 = createLabel(_0xad178e);
      _0x4b9838.x = _0x44dae0.width / 2 - _0x4b9838.width / 2;
      _0x44dae0.addChild(_0x4b9838);
      const _0x18ada4 = {
        text: "[初次安装也许会卡,重启即可]",
        y: _0x4b9838.y + 30,
        textColor: 16776960
      };
      var _0x479d33 = createLabel(_0x18ada4);
      _0x479d33.x = _0x44dae0.width / 2 - _0x479d33.width / 2;
      _0x44dae0.addChild(_0x479d33);
      const _0x4d1d96 = {
        text: "十回合自动投降",
        x: 45,
        y: _0x479d33.y + 32
      };
      let _0x34eb65 = createLabel(_0x4d1d96);
      const _0xb9ffd6 = {
        x: 76,
        y: _0x34eb65.y + _0x34eb65.height + 10,
        selected: false,
        storageKey: "jingji"
      };
      let _0x1c2319 = createRadio(_0xb9ffd6);
      _0x44dae0.addChild(_0x1c2319);
      const _0x2ae4e6 = {
        text: "竞技",
        x: _0x1c2319.width + _0x1c2319.x + 10,
        y: _0x34eb65.y + _0x34eb65.height + 10
      };
      var _0x51887f = createLabel(_0x2ae4e6);
      _0x44dae0.addChild(_0x51887f);
      const _0x277916 = {
        x: _0x51887f.width + _0x51887f.x + 20,
        y: _0x34eb65.y + _0x34eb65.height + 10,
        selected: true,
        storageKey: "kuangye"
      };
      let _0x17bed4 = createRadio(_0x277916);
      _0x44dae0.addChild(_0x17bed4);
      const _0x5682fa = {
        text: "狂野",
        x: _0x17bed4.width + _0x17bed4.x + 10,
        y: _0x34eb65.y + _0x34eb65.height + 10
      };
      var _0x2facce = createLabel(_0x5682fa);
      _0x44dae0.addChild(_0x2facce);
      const _0xbc4ca5 = {
        x: _0x2facce.width + _0x2facce.x + 20,
        y: _0x34eb65.y + _0x34eb65.height + 10,
        selected: false,
        storageKey: "wangzhe"
      };
      let _0x21147a = createRadio(_0xbc4ca5);
      _0x44dae0.addChild(_0x21147a);
      const _0x174527 = {
        text: "王者",
        x: _0x21147a.width + _0x21147a.x + 10,
        y: _0x34eb65.y + _0x34eb65.height + 10
      };
      var _0x2facce = createLabel(_0x174527);
      _0x44dae0.addChild(_0x2facce);
      const _0x3c5094 = {
        x: _0x34eb65.x + _0x34eb65.width + 15,
        y: _0x479d33.y + 30,
        selected: false
      };
      let _0x4be5cd = createToggle(_0x3c5094);
      _0x44dae0.addChild(_0x34eb65);
      _0x44dae0.addChild(_0x4be5cd);
      const _0x49962a = {
        text: "对战次数",
        x: 60,
        y: _0x4b9838.y + _0x4b9838.height + 110
      };
      var _0x1717cb = createLabel(_0x49962a);
      _0x44dae0.addChild(_0x1717cb);
      const _0x5babcb = {
        prompt: "对战次数",
        width: 100,
        x: 30 + _0x1717cb.width + _0x1717cb.x,
        y: _0x4b9838.y + _0x4b9838.height + 105,
        storageKey: "inputDf"
      };
      var _0x2887a1 = createEdit(_0x5babcb);
      _0x44dae0.addChild(_0x2887a1);
      _0x44dae0.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x394e5e.stop();
      }, function () {
        if (!_0x4be5cd.selected) {
          _0x394e5e.giveUp = 0;
        }
        if (_0x1c2319.selected) {
          _0x394e5e.dianfengStyle = "jingji";
          localStorage.setItem("jingji", true);
        }
        if (_0x17bed4.selected) {
          _0x394e5e.dianfengStyle = "kuangye";
          localStorage.setItem("kuangye", true);
        }
        if (_0x21147a.selected) {
          _0x394e5e.dianfengStyle = "wangzhe";
          localStorage.setItem("wangzhe", true);
        }
        if (isNaN(parseInt(_0x2887a1.text))) {
          MFC.bubbleAlert.showAlert("请输入有效对战次数");
          return true;
        }
        localStorage.setItem("inputDf", parseInt(_0x2887a1.text));
        _0x394e5e.inputDf = parseInt(_0x2887a1.text);
        if (_0x21147a.selected) {
          _0x394e5e.wangzhe();
        } else {
          _0x394e5e.prcessBody();
        }
      }], null);
      _0x44dae0.showAlert();
    });
  }
  getFirstSkillId(_0x35133f) {
    let _0x3d2dcf = _0x35133f.useSkills;
    for (var _0x930725 = 0; _0x930725 < _0x3d2dcf.length; _0x930725++) {
      let _0x1ed523 = petConfig.SkillConfig.getDef(_0x3d2dcf[_0x930725].id);
      if (_0x3d2dcf[_0x930725].crtPP > 0 && _0x1ed523.atkType != 5 && _0x1ed523.atkType != 6) {
        return _0x3d2dcf[_0x930725].id;
      }
    }
    return 0;
  }
  getPetIndex(_0x5038ce, _0x36a51b) {
    for (var _0x3ca9c4 = 0; _0x3ca9c4 < _0x5038ce.length; _0x3ca9c4++) {
      var _0xa558f0 = _0x5038ce[_0x3ca9c4];
      if (_0xa558f0.crtHp > 0 && _0x3ca9c4 != _0x36a51b) {
        return _0x3ca9c4;
      }
    }
    return 0;
  }
  async changePet(_0x1bc351, _0x150237) {
    let _0x5ac703 = this.getPetIndex(_0x1bc351, _0x150237);
    await this.send_message("cs_online_load_battle_result", {
      groupId: ""
    });
    addGameLog("切换精灵index " + _0x5ac703);
    const _0x17ca18 = {
      petIndex: _0x5ac703
    };
    const _0x482be7 = {
      opType: 2,
      data: _0x17ca18,
      groupId: ""
    };
    await this.send_message("cs_online_player_operation", _0x482be7);
    let _0x29c0f4 = await this.waitEvent("sc_battle_notify_round_result");
    let _0x47df4c = JSON.parse(_0x29c0f4.gameBody[_0x29c0f4.gameBody.length - 1].raw);
    _0x29c0f4.gameBody.splice(0, _0x29c0f4.gameBody.length);
    return _0x47df4c;
  }
  async V_GetLevel(_0x49dafb) {
    let _0x4d415c = xls.pvpLevel.getItems();
    var _0x1630e5 = 0;
    var _0x4b2802 = 0;
    var _0x40dc14 = xls.pvpLevel.getItem(_0x4d415c.length).newReqCredit;
    switch (_0x49dafb) {
      case 1:
        _0x1630e5 = MFC.userInfo.pvpPoint;
        _0x4b2802 = false && _0x1630e5 >= _0x40dc14 ? 1 : 0;
        break;
      case 2:
        _0x1630e5 = MFC.userInfo.pvpPointWild;
        _0x4b2802 = false && _0x1630e5 >= _0x40dc14 ? 1 : 0;
    }
    if (_0x4b2802 == 1) {
      return _0x4d415c.length;
    }
    for (var _0x49f198 = 1, _0x4939b6 = _0x4d415c, _0x3774e9 = 0; _0x3774e9 < _0x4939b6.length - 1; _0x3774e9++) {
      if (!(_0x1630e5 >= _0x4939b6[_0x3774e9].newReqCredit)) {
        return _0x49f198 || 1;
      }
      _0x49f198 = _0x4939b6[_0x3774e9].id;
    }
    return _0x49f198 || 1;
  }
  getHaveGet(_0x2a7ccc) {
    let _0x9ee1f6 = MFC.attr.getAttr(_0x2a7ccc >= 32 ? 5226122 : 7924);
    let _0x4e22cd = _0x2a7ccc >= 32 ? _0x2a7ccc - 32 + 1 : _0x2a7ccc;
    return BitUtils.getBit(_0x9ee1f6, _0x4e22cd);
  }
  async getRankAward() {
    let _0x3b61aa = await this.V_GetLevel(1);
    let _0x12ba4b = await this.V_GetLevel(2);
    let _0x4f967c = Math.max(_0x3b61aa, _0x12ba4b);
    let _0x34b5f3 = xls.pvpLevel.getItems();
    for (let _0x3015b8 = 0; _0x3015b8 < _0x34b5f3.length; _0x3015b8++) {
      if (_0x4f967c >= _0x34b5f3[_0x3015b8].id && _0x34b5f3[_0x3015b8].id != 1) {
        let _0x455d7d = this.getHaveGet(_0x34b5f3[_0x3015b8].id);
        if (!_0x455d7d) {
          addGameLog("满足段位: " + _0x34b5f3[_0x3015b8].name + ",领取奖励!");
          const _0x333eec = {
            id: _0x34b5f3[_0x3015b8].id
          };
          await this.send_message("cs_ladder_rank_get_award", _0x333eec);
        }
      }
    }
    if (MFC.attr.getAttr(11923) == 3) {
      addGameLog("领取 每日3场巅峰胜利奖励!");
      await this.send_message("cs_get_festival_carnival_award", {
        carnivalId: 10024
      });
    }
    if (MFC.attr.getAttr(11924) == 5) {
      addGameLog("领取 每日5场巅峰对战奖励!");
      await this.send_message("cs_get_festival_carnival_award", {
        carnivalId: 10025
      });
    }
    if (MFC.attr.getAttr(7194) == 1) {
      addGameLog("领取 赛季皮肤卡!");
      await this.send_message("cs_get_tianti_extra_reward", {});
    }
  }
  async prcessBody() {
    try {
      await wait(1200);
      let _0x34f774 = 0;
      let _0x11cba4 = 0;
      let _0x11940a = new Date().getTime() / 1000;
      this.nowUi = createLabel({
        text: "巅峰  回合数:0|耗时:0分0秒|总局数:" + _0x11cba4 + "|胜场:" + _0x34f774 + "|胜率:" + 0 .toFixed(2) + "% ",
        y: 65,
        textColor: 16776960
      });
      this.nowUi.background = true;
      this.nowUi.backgroundColor = 43775;
      this.nowUi.x = MFC.rootLayer.width / 2 - this.nowUi.width / 2;
      MFC.rootLayer.addChild(this.nowUi);
      while (1) {
        MFC.moduleManager.closeModule(249);
        await wait(300);
        if (winLog.x < 0) {
          winLog.onOpenPanel();
        }
        addGameLog("开始匹配....");
        if (this.dianfengStyle.includes("kuangye")) {
          var _0x1eb52d = await this.send_message("cs_pvp_match_rival", {
            pvpType: 5
          });
          if (JSON.stringify(_0x1eb52d).includes("匹配类型与巅峰段位不匹配")) {
            var _0x1eb52d = await this.send_message("cs_pvp_match_rival", {
              pvpType: 2
            });
          }
        }
        if (this.dianfengStyle.includes("jingji")) {
          var _0x1eb52d = await this.send_message("cs_pvp_match_rival", {
            pvpType: 2001
          });
          if (JSON.stringify(_0x1eb52d).includes("匹配类型与巅峰段位不匹配")) {
            var _0x1eb52d = await this.send_message("cs_pvp_match_rival", {
              pvpType: 2000
            });
          }
        }
        if (JSON.stringify(_0x1eb52d).includes("内部错误")) {
          MFC.show.alert("早退行为被限制!~,请稍后重试");
          this.stop();
          return;
        }
        let _0x1ad385 = await this.waitEvent("sc_pvp_notify_match_success");
        var _0x1eb52d = JSON.parse(_0x1ad385.gameBody[_0x1ad385.gameBody.length - 1].raw);
        _0x1ad385.gameBody.splice(0, _0x1ad385.gameBody.length);
        _0x11940a = new Date().getTime() / 1000;
        let _0x2ab46c = _0x1eb52d.teamA.players[0].userId == _0x1eb52d.uid__ ? _0x1eb52d.teamB.players[0].rickNick : _0x1eb52d.teamA.players[0].rickNick;
        addGameLog("匹配对手:" + _0x2ab46c + "  对战中...");
        let _0x5193b9 = await this.initBattle();
        while (!_0x5193b9.result.result) {
          if (this.giveUp && _0x5193b9.result.roundNum >= 9 || _0x5193b9.result.roundNum >= 30) {
            addGameLog("十回合投降/30回合 发起投降");
            await this.send_message("cs_online_player_surrender", {});
            let _0x113e79 = await this.waitEvent("sc_battle_notify_round_result");
            _0x113e79.gameBody.splice(0, _0x113e79.gameBody.length);
            break;
          }
          let _0x2da204 = _0x5193b9.result.playerInfos.find(_0x2819ef => _0x2819ef.uid == _0x5193b9.uid__);
          let _0x4a3429 = _0x2da204.crtPetIndex;
          let _0x4ac844 = _0x5193b9.result.playerInfos.find(_0x8fbb1b => _0x8fbb1b.uid == _0x5193b9.uid__).nextRoundOP;
          if (_0x4ac844 == 3) {
            addGameLog("被击败,更换精灵!");
            _0x5193b9 = await this.changePet(_0x2da204.petInfos, _0x4a3429);
          } else {
            let _0x27cbe4 = _0x2da204.petInfos[_0x4a3429];
            let _0x8aa2ff = this.getFirstSkillId(_0x27cbe4);
            await wait(1500);
            _0x5193b9 = await this.useSkill(_0x8aa2ff);
          }
        }
        _0x11cba4++;
        if (_0x5193b9.result.result == 1) {
          addGameLog("战斗胜利!");
          _0x34f774++;
        } else {
          addGameLog("战斗失败!");
        }
        let _0x347fc6 = new Date().getTime() / 1000;
        var _0x387826 = Math.floor((_0x347fc6 - _0x11940a) / 60);
        var _0x27bf1e = ((_0x347fc6 - _0x11940a) % 60).toFixed(2);
        addGameLog("回合数:" + _0x5193b9.result.roundNum + "|耗时:" + _0x387826 + "分" + _0x27bf1e + "秒|总局数:" + _0x11cba4 + "|胜场:" + _0x34f774 + "|胜率:" + (_0x34f774 / _0x11cba4 * 100).toFixed(2) + "%");
        MFC.rootLayer.removeChild(this.nowUi);
        this.nowUi.text = "巅峰 回合数:" + _0x5193b9.result.roundNum + "|耗时:" + _0x387826 + "分" + _0x27bf1e + "秒|总局数:" + _0x11cba4 + "|胜场:" + _0x34f774 + "|胜率:" + (_0x34f774 / _0x11cba4 * 100).toFixed(2) + "% ";
        MFC.rootLayer.addChild(this.nowUi);
        await wait(1300);
        await this.send_message("cs_get_effort_value", {});
        await this.send_message("cs_query_some_fight_info", {
          type: 1
        });
        await this.send_message("cs_query_some_fight_info", {
          type: 2
        });
        await this.getRankAward();
        if (_0x11cba4 >= this.inputDf) {
          addGameLog("到达目标局数,竞技结束");
          break;
        }
      }
      this.stop();
    } catch (_0x190cce) {
      logger(_0x190cce);
    }
  }
  async wangzhe() {
    let _0x78c44f = await this.send_message("cs_get_new_shop_item", {
      shopType: 2
    });
    _0x78c44f = _0x78c44f.balance;
    this.nowUi = createLabel({
      text: "王者竞技次数 ==> " + this.PvpC + "次积分:" + (MFC.attr.getAttr(MFC.attrType.foreverKingPoint) >> 1),
      y: 65,
      textColor: 16776960
    });
    this.nowUi.x = MFC.rootLayer.width / 2 - this.nowUi.width / 2;
    MFC.rootLayer.addChild(this.nowUi);
    timer.change(1);
    addGameLog("设置默认速度1X");
    while (1) {
      if (MFC.attr.getAttr(5100406) >= 750) {
        addGameLog("累计获得战勋已达最高奖励");
        this.stop();
        break;
      }
      if (this.PvpC >= this.inputDf) {
        addGameLog("对战局数已到达");
        this.stop();
        break;
      }
      while (1) {
        if (!window.nowTask) {
          this.stop();
          break;
        }
        await wait(100);
        var _0x474c78 = getTouchs("_source", "arena_img_go_png");
        if (_0x474c78) {
          touchBtn(_0x474c78[1]);
          await wait(1000);
          addGameLog("前往巅峰");
        }
        var _0x474c78 = getTouchs("_source", "arena_top_fight_img_btn_pipei_png");
        if (_0x474c78) {
          break;
        } else {
          MFC.moduleManager.openModule(249);
          await wait(300);
        }
        var _0x474c78 = getTouchs("_source", "king_competition_img_btn_rival_png");
        if (_0x474c78) {
          break;
        } else {
          MFC.moduleManager.openModule(249);
          await wait(300);
        }
        var _0x474c78 = getTouchs("_source", "arena_77_png");
        if (_0x474c78) {
          var _0x189568 = await findUIs("_source", "close_button_nor_png");
          addGameLog("关闭乱斗窗口");
          touchBtn(_0x189568[0].$parent);
        }
        var _0x474c78 = getTouchs("_source", "arena_06_png");
        if (_0x474c78) {
          var _0x189568 = await findUIs("_source", "close_button_nor_png");
          addGameLog("关闭竞技窗口");
          touchBtn(_0x189568[0].$parent);
        }
      }
      if (!window.nowTask) {
        _this.stop();
        return;
      }
      logger("到达巅峰面板");
      var _0x189568 = await findUIs("_groupName", "rbg_top_switch");
      if (this.dianfengStyle == "jingji") {} else {
        addGameLog("点击王者模式");
        await wait(1000);
        touchBtn(_0x189568[1]);
      }
      await this.send_message("cs_get_festival_carnival_award", {
        carnivalId: 10024
      });
      await wait(100);
      await this.send_message("cs_get_festival_carnival_award", {
        carnivalId: 10025
      });
      if (!window.nowTask) {
        this.stop();
        return;
      }
      await wait(1000);
      let _0xd37598 = 0;
      while (1) {
        if (this.dianfengStyle == "wangzhe") {
          var _0x189568 = await findUIs("_source", "king_competition_img_btn_rival_png");
          if (_0x189568) {
            await wait(1000);
            touchBtn(_0x189568[0]);
            if (!window.nowTask) {
              _this.stop();
              return;
            }
          }
          if (_0xd37598 == 0) {
            var _0x189568 = await findUIs("_source", "twelve_pick_six_bg_petTab1_png");
            if (_0x189568) {
              _0xd37598 = 1;
              addGameLog("禁用精灵1");
              await wait(100);
              touchBtn(_0x189568[13]);
              if (!window.nowTask) {
                _this.stop();
                return;
              }
              var _0x189568 = await findUIs("_source", "twelve_pick_six_ban_up_png");
              await wait(100);
              addGameLog("确定禁用精灵1");
              touchBtn(_0x189568[0].$parent);
              var _0x189568 = await findUIs("_source", "twelve_pick_six_bg_petTab1_png");
              addGameLog("禁用精灵2");
              if (!window.nowTask) {
                _this.stop();
                return;
              }
              await wait(100);
              addGameLog("确定禁用精灵2");
              touchBtn(_0x189568[14]);
              var _0x189568 = await findUIs("_source", "twelve_pick_six_ban_up_png");
              await wait(100);
              touchBtn(_0x189568[0].$parent);
              if (!window.nowTask) {
                _this.stop();
                return;
              }
              addGameLog("选择精灵");
              for (var _0x761e59 = 4; _0x761e59 < 10; _0x761e59++) {
                var _0x189568 = await findUIs("_source", "twelve_pick_six_bg_petTab1_png");
                await wait(50);
                touchBtn(_0x189568[_0x761e59]);
                if (!window.nowTask) {
                  _this.stop();
                  return;
                }
              }
              await wait(100);
              addGameLog("确认选择");
              var _0x189568 = await findUIs("_source", "twelve_pick_six_confirm_up_png");
              await wait(100);
              touchBtn(_0x189568[0].$parent);
              if (!window.nowTask) {
                _this.stop();
                return;
              }
              var _0x189568 = await findUIs("_source", "twelve_pick_six_img_btn_firstFlag_png");
              addGameLog("设置首发!");
              await wait(800);
              touchBtn(_0x189568[0]);
              if (!window.nowTask) {
                _this.stop();
                return;
              }
              var _0x189568 = await findUIs("_className", "Cls_btn_QueRen");
              addGameLog("确认首发!");
              await wait(100);
              touchBtn(_0x189568[0]);
              if (!window.nowTask) {
                _this.stop();
                return;
              }
            }
          }
        }
        if (!window.nowTask) {
          _this.stop();
          return;
        }
        addGameLog("等待出现自动战斗!");
        var _0x189568 = await findUIs("_source", "toolbar_auto_battle_off_png");
        if (_0x189568) {
          addGameLog("开始自动战斗");
          await wait(1000);
          touchBtn(_0x189568[0]);
          if (!window.nowTask) {
            _this.stop();
            return;
          }
          break;
        }
        await wait(800);
      }
      await wait(1500);
      while (1) {
        if (!window.nowTask) {
          _this.stop();
          return;
        }
        let _0x33ccf8 = await this.waitEvent("sc_battle_notify_round_result");
        let _0x10e32e = JSON.parse(_0x33ccf8.gameBody[_0x33ccf8.gameBody.length - 1].raw);
        _0x33ccf8.gameBody.splice(0, _0x33ccf8.gameBody.length);
        await wait(50);
        if (this.giveUp) {
          logger("勾选放弃,判断是否到达十回合");
          if (_0x10e32e.result.roundNum >= 10) {
            addGameLog("到达十回合 发起投降");
            MFC.battleManager.surrenderPvp({
              type: 10,
              cmd: null,
              mapID: 1001
            });
            break;
          }
        } else {
          logger("未勾选放弃!");
        }
        if (_0x10e32e.result.result != 0) {
          logger("战斗完成");
          break;
        }
        var _0x474c78 = getTouchs("_source", "king_competition_img_btn_rival_png");
        if (_0x474c78) {
          break;
        }
        var _0x474c78 = getTouchs("_source", "arena_top_fight_img_btn_pipei_png");
        if (_0x474c78) {
          break;
        }
      }
      addGameLog("战斗结束");
      this.PvpC++;
      MFC.rootLayer.removeChild(this.nowUi);
      let _0x1c1ed3 = await this.send_message("cs_get_new_shop_item", {
        shopType: 2
      });
      _0x1c1ed3 = _0x1c1ed3.balance;
      this.nowUi.text = "王者竞技次数 ==> " + this.PvpC + "次积分:" + MFC.attr.getAttr(MFC.attrType.foreverKingPoint) >> 1;
      MFC.rootLayer.addChild(this.nowUi);
      while (1) {
        if (!window.nowTask) {
          _this.stop();
          return;
        }
        await wait(1000);
        let _0x5bbead = sta.$screen.stage.$stageWidth / 2;
        let _0x4bdc82 = sta.$screen.stage.$stageHeight / 2;
        nnnn.touch.onTouchBegin(_0x5bbead, _0x4bdc82, 0);
        nnnn.touch.onTouchEnd(_0x5bbead, _0x4bdc82, 0);
        var _0x474c78 = getTouchs("_source", "battle_end_king_img_back_png");
        if (_0x474c78) {
          addGameLog("王者战斗结束提示!");
          touchBtn(_0x474c78[0]);
          await wait(800);
        }
        var _0x474c78 = getTouchs("_source", "king_competition_img_btn_rival_png");
        if (_0x474c78) {
          break;
        }
        var _0x474c78 = getTouchs("_source", "arena_top_fight_img_btn_pipei_png");
        if (_0x474c78) {
          break;
        }
      }
    }
  }
}
class luandou extends SuperTask {
  constructor() {
    super();
    this.nowName = "乱斗挂机";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_pvp_notify_match_success"
    }, {
      watchEventName: "sc_pvp_notify_enter_battle"
    }];
    this.PvpC = 0;
    this.giveUp = 1;
    this.nowUi;
    this.luandType = 0;
  }
  start() {
    super.start();
    let _0x31a379 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x13574e = SimpleAlertUi({
        height: 250
      });
      const _0x56ecc2 = {
        text: "确定进行[乱斗]挂机吗?\n等战斗结束再停脚本 以防禁赛",
        y: _0x13574e.height / 11
      };
      var _0x2c6727 = createLabel(_0x56ecc2);
      _0x2c6727.x = _0x13574e.width / 2 - _0x2c6727.width / 2;
      _0x13574e.addChild(_0x2c6727);
      const _0x3b3602 = {
        x: 57,
        y: _0x2c6727.y + _0x2c6727.height + 10,
        selected: false,
        storageKey: "luandou1"
      };
      let _0x4ad7ba = createRadio(_0x3b3602);
      _0x13574e.addChild(_0x4ad7ba);
      const _0x19e32d = {
        text: "经典模式",
        x: _0x4ad7ba.width + _0x4ad7ba.x + 10,
        y: _0x2c6727.y + _0x2c6727.height + 10
      };
      var _0x221d2e = createLabel(_0x19e32d);
      _0x13574e.addChild(_0x221d2e);
      const _0x2b9834 = {
        x: _0x221d2e.width + _0x221d2e.x + 20,
        y: _0x2c6727.y + _0x2c6727.height + 10,
        selected: true,
        storageKey: "luandou2"
      };
      let _0x4c3406 = createRadio(_0x2b9834);
      _0x13574e.addChild(_0x4c3406);
      const _0x144bd4 = {
        text: "主场模式",
        x: _0x4c3406.width + _0x4c3406.x + 10,
        y: _0x2c6727.y + _0x2c6727.height + 10
      };
      var _0xcda46b = createLabel(_0x144bd4);
      _0x13574e.addChild(_0xcda46b);
      const _0x319483 = {
        text: "对战次数",
        x: 60,
        y: _0x2c6727.y + _0x2c6727.height + 45
      };
      var _0x447463 = createLabel(_0x319483);
      _0x13574e.addChild(_0x447463);
      const _0x302d15 = {
        prompt: "对战次数",
        width: 100,
        x: 30 + _0x447463.width + _0x447463.x,
        y: _0x2c6727.y + _0x2c6727.height + 40,
        storageKey: "inputld"
      };
      var _0x35e32e = createEdit(_0x302d15);
      _0x13574e.addChild(_0x35e32e);
      var _0x21eba5 = createLabel({
        text: "十回合自动投降",
        x: 57
      });
      _0x21eba5.y = _0x13574e.height / 2 - _0x21eba5.height / 2 + 20;
      const _0x196573 = {
        x: _0x21eba5.x + _0x21eba5.width + 15,
        y: _0x13574e.height / 2 - _0x21eba5.height / 2 + 20,
        selected: false
      };
      let _0x51457a = createToggle(_0x196573);
      _0x13574e.addChild(_0x21eba5);
      _0x13574e.addChild(_0x51457a);
      _0x13574e.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x31a379.stop();
      }, function () {
        if (isNaN(parseInt(_0x35e32e.text))) {
          MFC.bubbleAlert.showAlert("请输入有效对战次数");
          return true;
        }
        if (!_0x51457a.selected) {
          _0x31a379.giveUp = 0;
        }
        if (_0x4ad7ba.selected) {
          _0x31a379.luandType = 3;
          localStorage.setItem("luandou1", true);
        }
        if (_0x4c3406.selected) {
          _0x31a379.luandType = 16;
          localStorage.setItem("luandou2", true);
        }
        localStorage.setItem("inputld", parseInt(_0x35e32e.text));
        _0x31a379.inputld = parseInt(_0x35e32e.text);
        _0x31a379.prcessBody();
      }], null);
      _0x13574e.showAlert();
    });
  }
  getFirstSkillId(_0x240ac5) {
    let _0x116c80 = _0x240ac5.useSkills;
    for (var _0x3041f1 = 0; _0x3041f1 < _0x116c80.length; _0x3041f1++) {
      let _0x2b32d4 = petConfig.SkillConfig.getDef(_0x116c80[_0x3041f1].id);
      if (_0x116c80[_0x3041f1].crtPP > 0 && _0x2b32d4.atkType != 5 && _0x2b32d4.atkType != 6) {
        return _0x116c80[_0x3041f1].id;
      }
    }
    return 0;
  }
  getPetIndex(_0x5ac317, _0x227859) {
    for (var _0xae3064 = 0; _0xae3064 < _0x5ac317.length; _0xae3064++) {
      var _0x1d08cc = _0x5ac317[_0xae3064];
      if (_0x1d08cc.crtHp > 0 && _0xae3064 != _0x227859) {
        return _0xae3064;
      }
    }
    return 0;
  }
  async changePet(_0x427975, _0x4bc923) {
    let _0x13a601 = this.getPetIndex(_0x427975, _0x4bc923);
    await this.send_message("cs_online_load_battle_result", {
      groupId: ""
    });
    addGameLog("切换精灵index " + _0x13a601);
    const _0x242f8a = {
      petIndex: _0x13a601
    };
    const _0x4b4e12 = {
      opType: 2,
      data: _0x242f8a,
      groupId: ""
    };
    await this.send_message("cs_online_player_operation", _0x4b4e12);
    let _0x52f89f = await this.waitEvent("sc_battle_notify_round_result");
    let _0x551b75 = JSON.parse(_0x52f89f.gameBody[_0x52f89f.gameBody.length - 1].raw);
    _0x52f89f.gameBody.splice(0, _0x52f89f.gameBody.length);
    return _0x551b75;
  }
  async prcessBody() {
    try {
      await wait(1200);
      let _0xe9e446 = 0;
      let _0x55c336 = 0;
      let _0x2a6e08 = new Date().getTime() / 1000;
      this.nowUi = createLabel({
        text: "乱斗 回合数:0|耗时:0分0秒|总局数:" + _0x55c336 + "|胜场:" + _0xe9e446 + "|胜率:" + 0 .toFixed(2) + "%",
        y: 65,
        textColor: 16776960
      });
      this.nowUi.background = true;
      this.nowUi.backgroundColor = 6710886;
      this.nowUi.x = MFC.rootLayer.width / 2 - this.nowUi.width / 2;
      MFC.rootLayer.addChild(this.nowUi);
      while (1) {
        await this.send_message("cs_query_pvp_melee", {});
        MFC.moduleManager.closeModule(1368);
        await wait(300);
        if (winLog.x < 0) {
          winLog.onOpenPanel();
        }
        var _0x2c8b40 = await this.send_message("cs_pvp_match_rival", {
          pvpType: this.luandType
        });
        if (JSON.stringify(_0x2c8b40).includes("内部错误")) {
          MFC.show.alert("早退行为被限制!~,请稍后重试");
          this.stop();
          return;
        }
        let _0x5aeaec = await this.waitEvent("sc_pvp_notify_match_success");
        var _0x2c8b40 = JSON.parse(_0x5aeaec.gameBody[_0x5aeaec.gameBody.length - 1].raw);
        _0x5aeaec.gameBody.splice(0, _0x5aeaec.gameBody.length);
        _0x2a6e08 = new Date().getTime() / 1000;
        let _0x1ebf40 = _0x2c8b40.teamA.players[0].userId == _0x2c8b40.uid__ ? _0x2c8b40.teamB.players[0].rickNick : _0x2c8b40.teamA.players[0].rickNick;
        addGameLog("匹配对手:" + _0x1ebf40 + "  对战中...");
        let _0x431e0b = await this.initBattle();
        while (!_0x431e0b.result.result) {
          if (this.giveUp && _0x431e0b.result.roundNum >= 9 || _0x431e0b.result.roundNum >= 30) {
            addGameLog("十回合投降/30回合 发起投降");
            await this.send_message("cs_online_player_surrender", {});
            let _0x5dfe7e = await this.waitEvent("sc_battle_notify_round_result");
            _0x5dfe7e.gameBody.splice(0, _0x5dfe7e.gameBody.length);
            break;
          }
          let _0x5ec623 = _0x431e0b.result.playerInfos.find(_0x433c4a => _0x433c4a.uid == _0x431e0b.uid__);
          let _0x27c8dc = _0x5ec623.crtPetIndex;
          let _0x466dce = _0x431e0b.result.playerInfos.find(_0x32394c => _0x32394c.uid == _0x431e0b.uid__).nextRoundOP;
          if (_0x466dce == 3) {
            addGameLog("被击败,更换精灵!");
            _0x431e0b = await this.changePet(_0x5ec623.petInfos, _0x27c8dc);
          } else {
            let _0x38cf10 = _0x5ec623.petInfos[_0x27c8dc];
            let _0xe856c0 = this.getFirstSkillId(_0x38cf10);
            await wait(300);
            _0x431e0b = await this.useSkill(_0xe856c0);
          }
        }
        _0x55c336++;
        if (_0x431e0b.result.result == 1) {
          addGameLog("战斗胜利!");
          _0xe9e446++;
        } else {
          addGameLog("战斗失败!");
        }
        let _0x4b221c = new Date().getTime() / 1000;
        var _0x43f484 = Math.floor((_0x4b221c - _0x2a6e08) / 60);
        var _0x4f7fcf = ((_0x4b221c - _0x2a6e08) % 60).toFixed(2);
        addGameLog("回合数:" + _0x431e0b.result.roundNum + "|耗时:" + _0x43f484 + "分" + _0x4f7fcf + "秒|总局数:" + _0x55c336 + "|胜场:" + _0xe9e446 + "|胜率:" + (_0xe9e446 / _0x55c336 * 100).toFixed(2) + "%");
        MFC.rootLayer.removeChild(this.nowUi);
        this.nowUi.text = "乱斗 回合数:" + _0x431e0b.result.roundNum + "|耗时:" + _0x43f484 + "分" + _0x4f7fcf + "秒|总局数:" + _0x55c336 + "|胜场:" + _0xe9e446 + "|胜率:" + (_0xe9e446 / _0x55c336 * 100).toFixed(2) + "%";
        MFC.rootLayer.addChild(this.nowUi);
        await wait(1300);
        await this.send_message("cs_get_effort_value", {});
        await this.send_message("cs_query_some_fight_info", {
          type: 1
        });
        await this.send_message("cs_query_some_fight_info", {
          type: 2
        });
        await this.send_message("cs_query_pvp_melee", {});
        if (_0x55c336 >= this.inputld) {
          addGameLog("到达目标局数,乱斗结束");
          break;
        }
      }
      this.stop();
    } catch (_0x3f5b00) {
      logger(_0x3f5b00);
    }
  }
}
class jingji extends SuperTask {
  constructor() {
    super();
    this.nowName = "竞技挂机";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }, {
      watchEventName: "sc_pvp_notify_match_success"
    }, {
      watchEventName: "sc_pvp_notify_enter_battle"
    }];
    this.PvpC = 0;
    this.giveUp = 1;
    this.nowUi;
    this.luandType = 0;
  }
  start() {
    super.start();
    let _0x7fa27 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x316a03 = SimpleAlertUi({
        height: 250
      });
      const _0x39be23 = {
        text: "确定进行[竞技]挂机吗?\n等战斗结束再停脚本 以防禁赛",
        y: _0x316a03.height / 11
      };
      var _0x38e4bd = createLabel(_0x39be23);
      _0x38e4bd.x = _0x316a03.width / 2 - _0x38e4bd.width / 2;
      _0x316a03.addChild(_0x38e4bd);
      const _0xb967f5 = {
        text: "对战次数",
        x: 60,
        y: _0x38e4bd.y + _0x38e4bd.height + 45
      };
      var _0x26ff85 = createLabel(_0xb967f5);
      _0x316a03.addChild(_0x26ff85);
      const _0x241b86 = {
        prompt: "对战次数",
        width: 100,
        x: 30 + _0x26ff85.width + _0x26ff85.x,
        y: _0x38e4bd.y + _0x38e4bd.height + 40,
        storageKey: "inputjj"
      };
      var _0x15b5b5 = createEdit(_0x241b86);
      _0x316a03.addChild(_0x15b5b5);
      var _0x2601f1 = createLabel({
        text: "十回合自动投降",
        x: 57
      });
      _0x2601f1.y = _0x316a03.height / 2 - _0x2601f1.height / 2 + 20;
      const _0x379fab = {
        x: _0x2601f1.x + _0x2601f1.width + 15,
        y: _0x316a03.height / 2 - _0x2601f1.height / 2 + 20,
        selected: true
      };
      let _0x20238c = createToggle(_0x379fab);
      _0x316a03.addChild(_0x2601f1);
      _0x316a03.addChild(_0x20238c);
      _0x316a03.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x7fa27.stop();
      }, function () {
        if (isNaN(parseInt(_0x15b5b5.text))) {
          MFC.bubbleAlert.showAlert("请输入有效对战次数");
          return true;
        }
        if (!_0x20238c.selected) {
          _0x7fa27.giveUp = 0;
        }
        localStorage.setItem("inputjj", parseInt(_0x15b5b5.text));
        _0x7fa27.inputjj = parseInt(_0x15b5b5.text);
        _0x7fa27.prcessBody();
      }], null);
      _0x316a03.showAlert();
    });
  }
  getFirstSkillId(_0x51dbbf) {
    let _0x53dec8 = _0x51dbbf.useSkills;
    for (var _0xa138e0 = 0; _0xa138e0 < _0x53dec8.length; _0xa138e0++) {
      let _0x35d3dc = petConfig.SkillConfig.getDef(_0x53dec8[_0xa138e0].id);
      if (_0x53dec8[_0xa138e0].crtPP > 0 && _0x35d3dc.atkType != 5 && _0x35d3dc.atkType != 6) {
        return _0x53dec8[_0xa138e0].id;
      }
    }
    return 0;
  }
  getPetIndex(_0x163349, _0x289fea) {
    for (var _0x12fb81 = 0; _0x12fb81 < _0x163349.length; _0x12fb81++) {
      var _0x2176ce = _0x163349[_0x12fb81];
      if (_0x2176ce.crtHp > 0 && _0x12fb81 != _0x289fea) {
        return _0x12fb81;
      }
    }
    return 0;
  }
  async changePet(_0x12d158, _0x2a8d70) {
    let _0x197f96 = this.getPetIndex(_0x12d158, _0x2a8d70);
    await this.send_message("cs_online_load_battle_result", {
      groupId: ""
    });
    addGameLog("切换精灵index " + _0x197f96);
    const _0x28469 = {
      petIndex: _0x197f96
    };
    const _0x11496e = {
      opType: 2,
      data: _0x28469,
      groupId: ""
    };
    await this.send_message("cs_online_player_operation", _0x11496e);
    let _0x52630d = await this.waitEvent("sc_battle_notify_round_result");
    let _0x43979f = JSON.parse(_0x52630d.gameBody[_0x52630d.gameBody.length - 1].raw);
    _0x52630d.gameBody.splice(0, _0x52630d.gameBody.length);
    return _0x43979f;
  }
  async getCastAward() {
    let _0x582e0d = [{
      id: 11650,
      pos: 0,
      type: 1,
      count: 1,
      name: "每日1胜"
    }, {
      id: 11650,
      pos: 1,
      type: 1,
      count: 2,
      name: "每日2胜"
    }, {
      id: 20110,
      pos: 0,
      type: 2,
      count: 6,
      name: "每周6胜"
    }, {
      id: 20110,
      pos: 1,
      type: 2,
      count: 12,
      name: "每周12胜"
    }, {
      id: 20110,
      pos: 2,
      type: 2,
      count: 18,
      name: "每周18胜"
    }];
    for (let _0x4fbd02 = 0; _0x4fbd02 < _0x582e0d.length; _0x4fbd02++) {
      await this.gainCastPosAward(_0x582e0d[_0x4fbd02]);
    }
  }
  async gainCastPosAward(_0x279f91) {
    if (MFC.attr.getAttr(_0x279f91.id) >= _0x279f91.count && this.getCastFlag(_0x279f91.id + 1, _0x279f91.pos)) {
      addGameLog("领取 " + _0x279f91.name + "竞技奖励!");
      const _0x223ca5 = {
        type: _0x279f91.type,
        pos: _0x279f91.pos + 1
      };
      await this.send_message("cs_get_cast_reward", _0x223ca5);
    }
  }
  getCastFlag(_0xdc62ca, _0x42106b) {
    var _0x282a45 = MFC.attr.getAttr(_0xdc62ca);
    var _0x43a358 = BitUtils.getBit(_0x282a45, _0x42106b + 1);
    var _0x455451 = _0x43a358 ? -1 : 1;
    if (_0x455451 == 1) {
      return true;
    }
    return false;
  }
  async prcessBody() {
    try {
      await wait(1200);
      let _0xe296ce = 0;
      let _0x44f81 = 0;
      let _0x4f0b97 = new Date().getTime() / 1000;
      this.nowUi = createLabel({
        text: "竞技  回合数:0|耗时:0分0秒|总局数:" + _0x44f81 + "|胜场:" + _0xe296ce + "|胜率:" + 0 .toFixed(2) + "% 当日获取竞技币数:" + MFC.attr.getAttr(2100462),
        y: 65,
        textColor: 16776960
      });
      this.nowUi.background = true;
      this.nowUi.backgroundColor = 43775;
      this.nowUi.x = MFC.rootLayer.width / 2 - this.nowUi.width / 2;
      MFC.rootLayer.addChild(this.nowUi);
      while (1) {
        MFC.moduleManager.closeModule(249);
        await wait(300);
        if (winLog.x < 0) {
          winLog.onOpenPanel();
        }
        var _0x34377f = await this.send_message("cs_pvp_match_rival", {
          pvpType: 9
        });
        if (JSON.stringify(_0x34377f).includes("内部错误")) {
          MFC.show.alert("早退行为被限制!~,请稍后重试");
          this.stop();
          return;
        }
        let _0x2e254e = await this.waitEvent("sc_pvp_notify_match_success");
        var _0x34377f = JSON.parse(_0x2e254e.gameBody[_0x2e254e.gameBody.length - 1].raw);
        _0x2e254e.gameBody.splice(0, _0x2e254e.gameBody.length);
        _0x4f0b97 = new Date().getTime() / 1000;
        let _0x3a9e6f = _0x34377f.teamA.players[0].userId == _0x34377f.uid__ ? _0x34377f.teamB.players[0].rickNick : _0x34377f.teamA.players[0].rickNick;
        addGameLog("匹配对手:" + _0x3a9e6f + "  对战中...");
        let _0x32540f = await this.initBattle();
        while (!_0x32540f.result.result) {
          if (this.giveUp && _0x32540f.result.roundNum >= 9 || _0x32540f.result.roundNum >= 30) {
            addGameLog("十回合投降/30回合 发起投降");
            await this.send_message("cs_online_player_surrender", {});
            let _0x4ce2dd = await this.waitEvent("sc_battle_notify_round_result");
            _0x4ce2dd.gameBody.splice(0, _0x4ce2dd.gameBody.length);
            break;
          }
          let _0x10804d = _0x32540f.result.playerInfos.find(_0x16c91d => _0x16c91d.uid == _0x32540f.uid__);
          let _0x1a5315 = _0x10804d.crtPetIndex;
          let _0xea22cb = _0x32540f.result.playerInfos.find(_0xdad43c => _0xdad43c.uid == _0x32540f.uid__).nextRoundOP;
          if (_0xea22cb == 3) {
            addGameLog("被击败,更换精灵!");
            _0x32540f = await this.changePet(_0x10804d.petInfos, _0x1a5315);
          } else {
            let _0x1b6832 = _0x10804d.petInfos[_0x1a5315];
            let _0x9e09d = this.getFirstSkillId(_0x1b6832);
            await wait(300);
            _0x32540f = await this.useSkill(_0x9e09d);
          }
        }
        _0x44f81++;
        if (_0x32540f.result.result == 1) {
          addGameLog("战斗胜利!");
          _0xe296ce++;
        } else {
          addGameLog("战斗失败!");
        }
        let _0x21fc1e = new Date().getTime() / 1000;
        var _0x50222 = Math.floor((_0x21fc1e - _0x4f0b97) / 60);
        var _0x2e0176 = ((_0x21fc1e - _0x4f0b97) % 60).toFixed(2);
        addGameLog("回合数:" + _0x32540f.result.roundNum + "|耗时:" + _0x50222 + "分" + _0x2e0176 + "秒|总局数:" + _0x44f81 + "|胜场:" + _0xe296ce + "|胜率:" + (_0xe296ce / _0x44f81 * 100).toFixed(2) + "%");
        MFC.rootLayer.removeChild(this.nowUi);
        this.nowUi.text = "竞技 回合数:" + _0x32540f.result.roundNum + "|耗时:" + _0x50222 + "分" + _0x2e0176 + "秒|总局数:" + _0x44f81 + "|胜场:" + _0xe296ce + "|胜率:" + (_0xe296ce / _0x44f81 * 100).toFixed(2) + "% 当日获取竞技币数:" + MFC.attr.getAttr(2100462);
        MFC.rootLayer.addChild(this.nowUi);
        await wait(1300);
        await this.send_message("cs_get_effort_value", {});
        await this.send_message("cs_query_some_fight_info", {
          type: 1
        });
        await this.send_message("cs_query_some_fight_info", {
          type: 2
        });
        await this.getCastAward();
        if (_0x44f81 >= this.inputjj) {
          addGameLog("到达目标局数,竞技结束");
          break;
        }
      }
      this.stop();
    } catch (_0x27e323) {
      logger(_0x27e323);
    }
  }
}
class ziyou extends SuperTask {
  constructor() {
    super();
    this.nowName = "自由挂机";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
    this.PvpC = 0;
    this.giveUp = 1;
    this.goalTaskCounts = 0;
    this.nowUi;
  }
  start() {
    super.start();
    let _0x336e30 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x4797a1 = SimpleAlertUi({});
      const _0x6b5974 = {
        text: "确定进行[自由对战]挂机吗?",
        y: _0x4797a1.height / 11
      };
      var _0x36260d = createLabel(_0x6b5974);
      _0x36260d.x = _0x4797a1.width / 2 - _0x36260d.width / 2;
      _0x4797a1.addChild(_0x36260d);
      const _0x92662f = {
        text: "[记得确保自由对战阵容设置完毕]",
        y: _0x36260d.y + 30,
        textColor: 16776960
      };
      var _0x23f347 = createLabel(_0x92662f);
      _0x23f347.x = _0x4797a1.width / 2 - _0x23f347.width / 2;
      _0x4797a1.addChild(_0x23f347);
      const _0x48f044 = {
        text: "十回合自动投降",
        x: 45,
        y: _0x23f347.y + 30
      };
      let _0x1f5963 = createLabel(_0x48f044);
      const _0x592200 = {
        x: _0x1f5963.x + _0x1f5963.width + 15,
        y: _0x23f347.y + 30,
        selected: false
      };
      let _0x1bc875 = createToggle(_0x592200);
      _0x4797a1.addChild(_0x1f5963);
      _0x4797a1.addChild(_0x1bc875);
      _0x4797a1.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x336e30.stop();
      }, function () {
        if (!_0x1bc875.selected) {
          _0x336e30.giveUp = 0;
        }
        _0x336e30.prcessBody();
      }], null);
      _0x4797a1.showAlert();
    });
  }
  async prcessBody() {
    try {
      if (window.nowTask.constructor.name == "ziyou") {
        this.nowUi = createLabel({
          text: "自由次数 ==> " + this.PvpC + "次",
          y: 65,
          textColor: 16776960
        });
        this.nowUi.x = MFC.rootLayer.width / 2 - this.nowUi.width / 2;
        MFC.rootLayer.addChild(this.nowUi);
      }
      timer.change(1);
      addGameLog("设置默认速度1X");
      while (1) {
        while (1) {
          if (!window.nowTask) {
            _this.stop();
            break;
          }
          await wait(100);
          var _0x3da896 = getTouchs("_source", "arena_img_go_png");
          if (_0x3da896) {
            touchBtn(_0x3da896[3]);
            await wait(1000);
            addGameLog("前往自由对战");
          }
          var _0x3da896 = getTouchs("_source", "arena_06_png");
          if (_0x3da896) {
            break;
          } else {
            MFC.moduleManager.openModule(249);
            await wait(300);
          }
          var _0x3da896 = getTouchs("_source", "arena_77_png");
          if (_0x3da896) {
            var _0x592ecd = await findUIs("_source", "close_button_nor_png");
            addGameLog("关闭乱斗窗口");
            touchBtn(_0x592ecd[0].$parent);
          }
          var _0x3da896 = getTouchs("_source", "arena_top_fight_img_btn_pipei_png");
          if (_0x3da896) {
            var _0x592ecd = await findUIs("_source", "arena_top_fight_img_close_png");
            addGameLog("关闭巅峰窗口");
            touchBtn(_0x592ecd[0]);
          }
        }
        if (!window.nowTask) {
          _this.stop();
          return;
        }
        logger("到达自由面板");
        await wait(800);
        var _0x592ecd = await findUIs("_source", "arena_06_png");
        addGameLog("点击自由匹配");
        touchBtn(_0x592ecd[0].$parent);
        if (!window.nowTask) {
          _this.stop();
          return;
        }
        await wait(800);
        if (!window.nowTask) {
          _this.stop();
          return;
        }
        var _0x592ecd = await findUIs("_source", "toolbar_auto_battle_off_png");
        addGameLog("开始自动战斗");
        await wait(800);
        touchBtn(_0x592ecd[0]);
        if (!window.nowTask) {
          _this.stop();
          return;
        }
        while (1) {
          if (!window.nowTask) {
            _this.stop();
            return;
          }
          let _0x1a6d76 = await this.waitEvent("sc_battle_notify_round_result");
          let _0x48222b = JSON.parse(_0x1a6d76.gameBody[_0x1a6d76.gameBody.length - 1].raw);
          _0x1a6d76.gameBody.splice(0, _0x1a6d76.gameBody.length);
          await wait(50);
          if (this.giveUp) {
            logger("勾选放弃,判断是否到达十回合");
            if (_0x48222b.result.roundNum >= 10) {
              addGameLog("到达十回合 发起投降");
              MFC.battleManager.surrenderPvp({
                type: 10,
                cmd: null,
                mapID: 1001
              });
              break;
            }
          } else {
            logger("未勾选放弃!");
          }
          if (_0x48222b.result.result != 0) {
            logger("战斗完成");
            break;
          }
        }
        addGameLog("自由战斗结束");
        this.PvpC++;
        addGameLog("PVP 自由: " + this.PvpC + "次");
        if (window.nowTask.constructor.name == "ziyou") {
          MFC.rootLayer.removeChild(this.nowUi);
          this.nowUi.text = "自由次数 ==> " + this.PvpC + "次";
          MFC.rootLayer.addChild(this.nowUi);
        }
        if (this.goalTaskCounts > 0) {
          if (this.PvpC >= this.goalTaskCounts) {
            addGameLog(this.goalTaskCounts + "次对战完成");
            while (1) {
              if (!window.nowTask) {
                _this.stop();
                return;
              }
              await wait(900);
              let _0x3d66a5 = sta.$screen.stage.$stageWidth / 5;
              let _0x4fdb9e = sta.$screen.stage.$stageHeight / 4;
              nnnn.touch.onTouchBegin(_0x3d66a5, _0x4fdb9e, 0);
              nnnn.touch.onTouchEnd(_0x3d66a5, _0x4fdb9e, 0);
              var _0x3da896 = getTouchs("_source", "button_yellow_up_100_png");
              if (_0x3da896) {
                addGameLog("升段提示,点击确认");
                touchBtn(_0x3da896[0]);
                await wait(800);
              }
              var _0x3da896 = getTouchs("_source", "arena_06_png");
              if (_0x3da896) {
                break;
              }
            }
            return;
          }
        }
        while (1) {
          if (!window.nowTask) {
            _this.stop();
            return;
          }
          await wait(900);
          let _0x7af275 = sta.$screen.stage.$stageWidth / 5;
          let _0x22a526 = sta.$screen.stage.$stageHeight / 4;
          nnnn.touch.onTouchBegin(_0x7af275, _0x22a526, 0);
          nnnn.touch.onTouchEnd(_0x7af275, _0x22a526, 0);
          var _0x3da896 = getTouchs("_source", "button_yellow_up_100_png");
          if (_0x3da896) {
            addGameLog("升段提示,点击确认");
            touchBtn(_0x3da896[0]);
            await wait(800);
          }
          var _0x3da896 = getTouchs("_source", "arena_06_png");
          if (_0x3da896) {
            break;
          }
        }
      }
    } catch (_0x34a541) {
      logger(_0x34a541);
    }
  }
}
class Shop extends SuperTask {
  constructor() {
    super();
    this.nowName = "商店购买";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
    this.nowPetData = null;
    this.switchBtnList = [];
  }
  start() {
    super.start();
    let _0x68d2c = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x51f4d6 = SimpleAlertUi({
        height: 480,
        width: 760
      });
      _0x68d2c.alertWin = _0x51f4d6;
      let _0x6482f3 = [];
      var _0x3254f5 = createLabel({
        text: "乱斗商店",
        textColor: 16776960,
        x: 30,
        y: 15
      });
      _0x6482f3.push(_0x3254f5);
      const _0x35e337 = {
        selected: true,
        storageKey: "chujiswitch",
        msgData: {
          logData: "初级融合结晶",
          name: "cs_purchase_shop_item",
          body: {
            shopType: 2,
            itemId: 3
          },
          needCoin: 10
        }
      };
      const _0x46785a = {
        label: {
          text: "初级结晶"
        },
        switch: _0x35e337
      };
      const _0x21b9f6 = {
        selected: true,
        storageKey: "zhongjiswitch",
        msgData: {
          logData: "中级融合结晶",
          name: "cs_purchase_shop_item",
          body: {
            shopType: 2,
            itemId: 4
          },
          needCoin: 10
        }
      };
      const _0x2207b9 = {
        label: {
          text: "中级结晶"
        },
        switch: _0x21b9f6
      };
      const _0x11ca2c = {
        selected: true,
        storageKey: "jinhuasswitch",
        msgData: {
          logData: "万能进化石",
          name: "cs_purchase_shop_item",
          body: {
            shopType: 2,
            itemId: 5
          },
          needCoin: 10
        }
      };
      const _0x5da03c = {
        label: {
          text: "进化石"
        },
        switch: _0x11ca2c
      };
      const _0x4897de = {
        selected: true,
        storageKey: "jinhuayswitch",
        msgData: {
          logData: "万能进化玉",
          name: "cs_purchase_shop_item",
          body: {
            shopType: 2,
            itemId: 6
          },
          needCoin: 10
        }
      };
      const _0x156fc8 = {
        label: {
          text: "进化玉"
        },
        switch: _0x4897de
      };
      const _0x5894e8 = {
        selected: true,
        storageKey: "kztswitch",
        msgData: {
          logData: "肯札特图纸碎片",
          name: "cs_purchase_shop_item",
          body: {
            shopType: 2,
            itemId: 7
          },
          needCoin: 10
        }
      };
      const _0x3f5708 = {
        label: {
          text: "肯札特图纸"
        },
        switch: _0x5894e8
      };
      var _0x56f6e1 = [_0x46785a, _0x2207b9, _0x5da03c, _0x156fc8, _0x3f5708];
      let _0x427f97 = 40;
      let _0x1eb9be = _0x3254f5.y + _0x3254f5.height + 10;
      for (let _0x2eb029 = 0; _0x2eb029 < _0x56f6e1.length; _0x2eb029++) {
        const _0x22c1a3 = {
          text: _0x56f6e1[_0x2eb029].label.text,
          x: _0x427f97,
          y: _0x1eb9be
        };
        let _0x3e86ce = createLabel(_0x22c1a3);
        const _0x4ce2ee = {
          x: _0x3e86ce.x + _0x3e86ce.width + 10,
          y: _0x1eb9be,
          selected: true,
          storageKey: _0x56f6e1[_0x2eb029].switch.storageKey,
          msgData: _0x56f6e1[_0x2eb029].switch.msgData
        };
        let _0x22af81 = createToggle(_0x4ce2ee);
        _0x427f97 = _0x427f97 + _0x3e86ce.width + 10 + _0x22af81.width + 10;
        this.switchBtnList.push(_0x22af81);
        _0x6482f3.push(_0x3e86ce);
        _0x6482f3.push(_0x22af81);
        if (_0x2eb029 == _0x56f6e1.length - 1) {
          _0x1eb9be = _0x3e86ce.y + _0x3e86ce.height + 12;
        }
      }
      const _0x213bad = {
        text: "巅峰商店",
        textColor: 16776960,
        x: 30,
        y: _0x1eb9be
      };
      var _0x3e4842 = createLabel(_0x213bad);
      _0x1eb9be = _0x1eb9be + _0x3254f5.height + 10;
      _0x6482f3.push(_0x3e4842);
      const _0x18f7c6 = {
        selected: true,
        storageKey: "HPswitch",
        msgData: {
          logData: "巅峰HP药",
          name: "cs_buy_new_shop_item",
          body: {
            id: 12101,
            shopType: 2,
            buy_times: 1
          },
          needCoin: 10
        }
      };
      const _0x3e04ad = {
        label: {
          text: "巅峰HP药"
        },
        switch: _0x18f7c6
      };
      const _0x2f66a2 = {
        selected: true,
        storageKey: "PPswitch",
        msgData: {
          logData: "巅峰PP药",
          name: "cs_buy_new_shop_item",
          body: {
            id: 12102,
            shopType: 2,
            buy_times: 1
          },
          needCoin: 10
        }
      };
      const _0x72f7f5 = {
        label: {
          text: "巅峰PP药"
        },
        switch: _0x2f66a2
      };
      const _0x5def3a = {
        selected: true,
        storageKey: "Strongswitch",
        msgData: {
          logData: "强力增幅器",
          name: "cs_buy_new_shop_item",
          body: {
            id: 12104,
            shopType: 2,
            buy_times: 1
          },
          needCoin: 100
        }
      };
      const _0x1305ab = {
        label: {
          text: "增幅器"
        },
        switch: _0x5def3a
      };
      const _0x4f0ecf = {
        selected: true,
        storageKey: "RandomSkillswitch",
        msgData: {
          logData: "随机符文",
          name: "cs_buy_new_shop_item",
          body: {
            id: 13201,
            shopType: 2,
            buy_times: 1
          },
          needCoin: 100
        }
      };
      const _0x8a123b = {
        label: {
          text: "符文"
        },
        switch: _0x4f0ecf
      };
      const _0x5ac359 = {
        selected: true,
        storageKey: "kaluLabelswitch",
        msgData: {
          logData: "卡鲁图纸",
          name: "cs_buy_new_shop_item",
          body: {
            id: 12004,
            shopType: 2,
            buy_times: 1
          },
          needCoin: 100
        }
      };
      const _0x4a63ef = {
        label: {
          text: "卡鲁图纸"
        },
        switch: _0x5ac359
      };
      const _0x39acee = {
        selected: true,
        storageKey: "jimiLabelswitch",
        msgData: {
          logData: "吉米图纸",
          name: "cs_buy_new_shop_item",
          body: {
            id: 12001,
            shopType: 2,
            buy_times: 1
          },
          needCoin: 100
        }
      };
      const _0x2c29ec = {
        label: {
          text: "吉米图纸"
        },
        switch: _0x39acee
      };
      const _0x1745fb = {
        selected: true,
        storageKey: "ngsLabelswitch",
        msgData: {
          logData: "尼古斯图纸",
          name: "cs_buy_new_shop_item",
          body: {
            id: 12036,
            shopType: 2,
            buy_times: 1
          },
          needCoin: 100
        }
      };
      const _0x214b59 = {
        label: {
          text: "尼古斯图纸"
        },
        switch: _0x1745fb
      };
      var _0x56f6e1 = [_0x3e04ad, _0x72f7f5, _0x1305ab, _0x8a123b, _0x4a63ef, _0x2c29ec, _0x214b59];
      _0x427f97 = 40;
      for (let _0x5335b6 = 0; _0x5335b6 < _0x56f6e1.length; _0x5335b6++) {
        const _0x452765 = {
          text: _0x56f6e1[_0x5335b6].label.text,
          x: _0x427f97,
          y: _0x1eb9be
        };
        let _0x5d75fd = createLabel(_0x452765);
        const _0x3a415c = {
          x: _0x5d75fd.x + _0x5d75fd.width + 10,
          y: _0x1eb9be,
          selected: true,
          storageKey: _0x56f6e1[_0x5335b6].switch.storageKey,
          msgData: _0x56f6e1[_0x5335b6].switch.msgData
        };
        let _0x42b44a = createToggle(_0x3a415c);
        _0x427f97 = _0x427f97 + _0x5d75fd.width + 10 + _0x42b44a.width + 10;
        this.switchBtnList.push(_0x42b44a);
        _0x6482f3.push(_0x5d75fd);
        _0x6482f3.push(_0x42b44a);
        if (_0x5335b6 == _0x56f6e1.length - 1) {
          _0x1eb9be = _0x5d75fd.y + _0x5d75fd.height + 12;
        }
        if (_0x5335b6 == 3) {
          _0x427f97 = 40;
          _0x1eb9be = _0x1eb9be + _0x3254f5.height + 10;
        }
      }
      const _0x364727 = {
        text: "竞技商店",
        textColor: 16776960,
        x: 30,
        y: _0x1eb9be
      };
      var _0x541795 = createLabel(_0x364727);
      _0x1eb9be = _0x1eb9be + _0x541795.height + 10;
      _0x6482f3.push(_0x541795);
      const _0x170cc0 = {
        selected: true,
        storageKey: "expswitch",
        msgData: {
          logData: "大型能量包",
          name: "cs_buy_new_shop_item",
          body: {
            id: 13001,
            shopType: 3,
            buy_times: 1
          },
          needCoin: 50
        }
      };
      const _0x5e92ab = {
        label: {
          text: "能量包"
        },
        switch: _0x170cc0
      };
      const _0x3040a1 = {
        selected: true,
        storageKey: "Energyswitch",
        msgData: {
          logData: "小型能源晶块",
          name: "cs_buy_new_shop_item",
          body: {
            id: 13002,
            shopType: 3,
            buy_times: 1
          },
          needCoin: 35
        }
      };
      const _0x1c1b97 = {
        label: {
          text: "小型能源"
        },
        switch: _0x3040a1
      };
      const _0x60a820 = {
        selected: true,
        storageKey: "normalSwitch",
        msgData: {
          logData: "初级胶囊",
          name: "cs_buy_new_shop_item",
          body: {
            id: 13004,
            shopType: 3,
            buy_times: 1
          },
          needCoin: 35
        }
      };
      const _0x3dd3e1 = {
        label: {
          text: "初级胶囊"
        },
        switch: _0x60a820
      };
      const _0x419f59 = {
        selected: true,
        storageKey: "EnchantmentSwitch",
        msgData: {
          logData: "随机附魔",
          name: "cs_buy_new_shop_item",
          body: {
            id: 13202,
            shopType: 3,
            buy_times: 1
          },
          needCoin: 30
        }
      };
      const _0x4e2427 = {
        label: {
          text: "随机附魔"
        },
        switch: _0x419f59
      };
      const _0x77433c = {
        selected: true,
        storageKey: "mengSwitch",
        msgData: {
          logData: "小型梦幻晶",
          name: "cs_buy_new_shop_item",
          body: {
            id: 13003,
            shopType: 3,
            buy_times: 1
          },
          needCoin: 35
        }
      };
      const _0x3b134b = {
        label: {
          text: "梦幻晶"
        },
        switch: _0x77433c
      };
      var _0x56f6e1 = [_0x5e92ab, _0x1c1b97, _0x3dd3e1, _0x4e2427, _0x3b134b];
      _0x427f97 = 40;
      for (let _0x27b857 = 0; _0x27b857 < _0x56f6e1.length; _0x27b857++) {
        const _0x8dcafa = {
          text: _0x56f6e1[_0x27b857].label.text,
          x: _0x427f97,
          y: _0x1eb9be
        };
        let _0x2b3dee = createLabel(_0x8dcafa);
        const _0x50c2da = {
          x: _0x2b3dee.x + _0x2b3dee.width + 10,
          y: _0x1eb9be,
          selected: true,
          storageKey: _0x56f6e1[_0x27b857].switch.storageKey,
          msgData: _0x56f6e1[_0x27b857].switch.msgData
        };
        let _0x42525f = createToggle(_0x50c2da);
        _0x427f97 = _0x427f97 + _0x2b3dee.width + 10 + _0x42525f.width + 10;
        this.switchBtnList.push(_0x42525f);
        _0x6482f3.push(_0x2b3dee);
        _0x6482f3.push(_0x42525f);
        if (_0x27b857 == _0x56f6e1.length - 1) {
          _0x1eb9be = _0x2b3dee.y + _0x2b3dee.height + 12;
        }
      }
      const _0x4a0982 = {
        text: "教皇商店",
        textColor: 16776960,
        x: 30,
        y: _0x1eb9be
      };
      var _0x28a961 = createLabel(_0x4a0982);
      _0x1eb9be = _0x1eb9be + _0x541795.height + 10;
      _0x6482f3.push(_0x28a961);
      const _0x1bf49a = {
        selected: true,
        storageKey: "stoneSwitch",
        msgData: {
          logData: "万能进化石",
          name: "cs_exchange_activity_reward",
          body: {
            id: 11391,
            coeff: 2,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 2
        }
      };
      const _0x432eb5 = {
        label: {
          text: "进化石"
        },
        switch: _0x1bf49a
      };
      const _0x44501d = {
        selected: true,
        storageKey: "JadeSwitch",
        msgData: {
          logData: "万能进化玉",
          name: "cs_exchange_activity_reward",
          body: {
            id: 11392,
            coeff: 2,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 5
        }
      };
      const _0x487f7e = {
        label: {
          text: "进化玉"
        },
        switch: _0x44501d
      };
      const _0x36795a = {
        selected: true,
        storageKey: "popeEncySwitch",
        msgData: {
          logData: "大型能量包",
          name: "cs_exchange_activity_reward",
          body: {
            id: 11393,
            coeff: 2,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 6
        }
      };
      const _0x17d971 = {
        label: {
          text: "能量包"
        },
        switch: _0x36795a
      };
      const _0x16b355 = {
        selected: true,
        storageKey: "popeCoinSwitch",
        msgData: {
          logData: "小型能源晶块",
          name: "cs_exchange_activity_reward",
          body: {
            id: 11394,
            coeff: 2,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 5
        }
      };
      const _0x6879f5 = {
        label: {
          text: "能源晶块"
        },
        switch: _0x16b355
      };
      const _0x28ac56 = {
        selected: true,
        storageKey: "pcapSwitch",
        msgData: {
          logData: "初级胶囊",
          name: "cs_exchange_activity_reward",
          body: {
            id: 11395,
            coeff: 2,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 5
        }
      };
      const _0x5cb17f = {
        label: {
          text: "初级胶囊"
        },
        switch: _0x28ac56
      };
      var _0x56f6e1 = [_0x432eb5, _0x487f7e, _0x17d971, _0x6879f5, _0x5cb17f];
      _0x427f97 = 40;
      for (let _0x584d29 = 0; _0x584d29 < _0x56f6e1.length; _0x584d29++) {
        const _0x37c403 = {
          text: _0x56f6e1[_0x584d29].label.text,
          x: _0x427f97,
          y: _0x1eb9be
        };
        let _0x5067de = createLabel(_0x37c403);
        const _0x3b2195 = {
          x: _0x5067de.x + _0x5067de.width + 10,
          y: _0x1eb9be,
          selected: true,
          storageKey: _0x56f6e1[_0x584d29].switch.storageKey,
          msgData: _0x56f6e1[_0x584d29].switch.msgData
        };
        let _0x557e09 = createToggle(_0x3b2195);
        _0x427f97 = _0x427f97 + _0x5067de.width + 10 + _0x557e09.width + 10;
        this.switchBtnList.push(_0x557e09);
        _0x6482f3.push(_0x5067de);
        _0x6482f3.push(_0x557e09);
        if (_0x584d29 == _0x56f6e1.length - 1) {
          _0x1eb9be = _0x5067de.y + _0x5067de.height + 12;
        }
      }
      const _0xba9c0b = {
        text: "阶梯商店",
        textColor: 16776960,
        x: 30,
        y: _0x1eb9be
      };
      var _0x3861e5 = createLabel(_0xba9c0b);
      _0x1eb9be = _0x1eb9be + _0x541795.height + 10;
      _0x6482f3.push(_0x3861e5);
      const _0x49864e = {
        selected: true,
        storageKey: "FstoneSwitch",
        msgData: {
          logData: "万能进化石",
          name: "cs_exchange_activity_reward",
          body: {
            id: 10131,
            coeff: 1,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 50
        }
      };
      const _0x5429b9 = {
        label: {
          text: "进化石"
        },
        switch: _0x49864e
      };
      const _0x2965ff = {
        selected: true,
        storageKey: "FJadeSwitch",
        msgData: {
          logData: "万能进化玉",
          name: "cs_exchange_activity_reward",
          body: {
            id: 10132,
            coeff: 1,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 250
        }
      };
      const _0x1bddd4 = {
        label: {
          text: "进化玉"
        },
        switch: _0x2965ff
      };
      const _0x2c13da = {
        selected: true,
        storageKey: "FEncySwitch",
        msgData: {
          logData: "大型能量包",
          name: "cs_exchange_activity_reward",
          body: {
            id: 10129,
            coeff: 1,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 200
        }
      };
      const _0x3f7465 = {
        label: {
          text: "能量包"
        },
        switch: _0x2c13da
      };
      const _0x2492ee = {
        selected: true,
        storageKey: "FCoinSwitch",
        msgData: {
          logData: "小型能源晶块",
          name: "cs_exchange_activity_reward",
          body: {
            id: 10130,
            coeff: 1,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 100
        }
      };
      const _0x1d2bc6 = {
        label: {
          text: "能源晶块"
        },
        switch: _0x2492ee
      };
      const _0x5f849e = {
        selected: true,
        storageKey: "FTicketSwitch",
        msgData: {
          logData: "教皇门票",
          name: "cs_exchange_activity_reward",
          body: {
            id: 11158,
            coeff: 1,
            selectIndex: 0,
            subDropIdList: []
          },
          needCoin: 100
        }
      };
      const _0x35f621 = {
        label: {
          text: "教皇门票"
        },
        switch: _0x5f849e
      };
      var _0x56f6e1 = [_0x5429b9, _0x1bddd4, _0x3f7465, _0x1d2bc6, _0x35f621];
      _0x427f97 = 40;
      for (let _0x370db5 = 0; _0x370db5 < _0x56f6e1.length; _0x370db5++) {
        const _0x517bed = {
          text: _0x56f6e1[_0x370db5].label.text,
          x: _0x427f97,
          y: _0x1eb9be
        };
        let _0x3eeadc = createLabel(_0x517bed);
        const _0x2b67d8 = {
          x: _0x3eeadc.x + _0x3eeadc.width + 10,
          y: _0x1eb9be,
          selected: true,
          storageKey: _0x56f6e1[_0x370db5].switch.storageKey,
          msgData: _0x56f6e1[_0x370db5].switch.msgData
        };
        let _0x4a45f0 = createToggle(_0x2b67d8);
        _0x427f97 = _0x427f97 + _0x3eeadc.width + 10 + _0x4a45f0.width + 10;
        this.switchBtnList.push(_0x4a45f0);
        _0x6482f3.push(_0x3eeadc);
        _0x6482f3.push(_0x4a45f0);
        if (_0x370db5 == _0x56f6e1.length - 1) {
          _0x1eb9be = _0x3eeadc.y + _0x3eeadc.height + 12;
        }
      }
      const _0x26b220 = {
        text: "普通商店",
        textColor: 16776960,
        x: 30,
        y: _0x1eb9be
      };
      var _0xd504b8 = createLabel(_0x26b220);
      _0x1eb9be = _0x1eb9be + _0x541795.height + 10;
      _0x6482f3.push(_0xd504b8);
      const _0x840c63 = {
        selected: true,
        storageKey: "CoinNormalSwitch",
        msgData: {
          logData: "初级胶囊",
          itemId: 4001,
          name: "cs_buy_shop_item",
          body: {
            pos: null,
            num: 1
          },
          needCoin: 10000
        }
      };
      const _0x125d86 = {
        label: {
          text: "初级胶囊"
        },
        switch: _0x840c63
      };
      const _0x26788d = {
        selected: true,
        storageKey: "CoinMiddleSwitch",
        msgData: {
          logData: "中级胶囊",
          itemId: 4002,
          name: "cs_buy_shop_item",
          body: {
            pos: null,
            num: 1
          },
          needCoin: 25000
        }
      };
      const _0x576a23 = {
        label: {
          text: "中级胶囊"
        },
        switch: _0x26788d
      };
      const _0x588948 = {
        selected: true,
        storageKey: "CoinHighSwitch",
        msgData: {
          logData: "高级胶囊",
          itemId: 4003,
          name: "cs_buy_shop_item",
          body: {
            pos: null,
            num: 1
          },
          needCoin: 20000
        }
      };
      const _0x428d5d = {
        label: {
          text: "高级胶囊"
        },
        switch: _0x588948
      };
      var _0x56f6e1 = [_0x125d86, _0x576a23, _0x428d5d];
      _0x427f97 = 40;
      for (let _0x5f5852 = 0; _0x5f5852 < _0x56f6e1.length; _0x5f5852++) {
        const _0x480420 = {
          text: _0x56f6e1[_0x5f5852].label.text,
          x: _0x427f97,
          y: _0x1eb9be
        };
        let _0x28d3f8 = createLabel(_0x480420);
        const _0x2de793 = {
          x: _0x28d3f8.x + _0x28d3f8.width + 10,
          y: _0x1eb9be,
          selected: true,
          storageKey: _0x56f6e1[_0x5f5852].switch.storageKey,
          msgData: _0x56f6e1[_0x5f5852].switch.msgData
        };
        let _0x1f3134 = createToggle(_0x2de793);
        _0x427f97 = _0x427f97 + _0x28d3f8.width + 10 + _0x1f3134.width + 10;
        this.switchBtnList.push(_0x1f3134);
        _0x6482f3.push(_0x28d3f8);
        _0x6482f3.push(_0x1f3134);
        if (_0x5f5852 == _0x56f6e1.length - 1) {
          const _0x140e54 = {
            text: "迷航商店",
            textColor: 16776960,
            x: _0x427f97 + 30,
            y: _0x1eb9be - (_0x541795.height + 8)
          };
          var _0x5d684a = createLabel(_0x140e54);
          _0x6482f3.push(_0x5d684a);
          const _0x185bf9 = {
            text: "重塑胶囊",
            x: _0x5d684a.x + 10,
            y: _0x1eb9be
          };
          let _0x403193 = createLabel(_0x185bf9);
          const _0x4ffe70 = {
            x: _0x403193.x + _0x403193.width + 10,
            y: _0x1eb9be,
            selected: true,
            storageKey: "resetSwitch",
            msgData: {
              logData: "重塑胶囊",
              name: "cs_purchase_shop_item",
              body: {
                shopType: 6,
                itemId: 11
              }
            }
          };
          let _0x592839 = createToggle(_0x4ffe70);
          this.switchBtnList.push(_0x592839);
          _0x6482f3.push(_0x403193);
          _0x6482f3.push(_0x592839);
          _0x1eb9be = _0x403193.y + _0x403193.height + 12;
        }
      }
      const _0x38705c = {
        text: "放生商店",
        textColor: 16776960,
        x: 30,
        y: _0x1eb9be
      };
      var _0x3b8009 = createLabel(_0x38705c);
      _0x1eb9be = _0x1eb9be + _0x541795.height + 10;
      _0x6482f3.push(_0x3b8009);
      const _0x5392e5 = {
        selected: true,
        storageKey: "releaseNormalSwitch",
        msgData: {
          logData: "初级胶囊",
          name: "cs_purchase_shop_item",
          body: {
            shopType: 5,
            itemId: 1
          }
        }
      };
      const _0x405520 = {
        label: {
          text: "初级胶囊"
        },
        switch: _0x5392e5
      };
      const _0x3d5858 = {
        selected: true,
        storageKey: "releaseMiddlelSwitch",
        msgData: {
          logData: "中级胶囊",
          name: "cs_purchase_shop_item",
          body: {
            shopType: 5,
            itemId: 2
          }
        }
      };
      const _0x3692a7 = {
        label: {
          text: "中级胶囊"
        },
        switch: _0x3d5858
      };
      const _0x16327a = {
        selected: true,
        storageKey: "releaseHighSwitch",
        msgData: {
          logData: "高级胶囊",
          name: "cs_purchase_shop_item",
          body: {
            shopType: 5,
            itemId: 3
          }
        }
      };
      const _0x42e06d = {
        label: {
          text: "高级胶囊"
        },
        switch: _0x16327a
      };
      const _0x523ee9 = {
        selected: true,
        storageKey: "releaseSuperSwitch",
        msgData: {
          logData: "无敌胶囊",
          name: "cs_purchase_shop_item",
          body: {
            shopType: 5,
            itemId: 4
          }
        }
      };
      const _0x42bd86 = {
        label: {
          text: "无敌胶囊"
        },
        switch: _0x523ee9
      };
      const _0x22e536 = {
        selected: true,
        storageKey: "stoneExchangeSwitch",
        msgData: {
          logData: "矿物换豆",
          name: "cs_exchange_activity_reward",
          body: {
            id: 10207,
            coeff: 1,
            selectIndex: 0,
            subDropIdList: []
          }
        }
      };
      const _0x1217e2 = {
        label: {
          text: "矿物换豆"
        },
        switch: _0x22e536
      };
      var _0x56f6e1 = [_0x405520, _0x3692a7, _0x42e06d, _0x42bd86, _0x1217e2];
      _0x427f97 = 40;
      for (let _0xa61042 = 0; _0xa61042 < _0x56f6e1.length; _0xa61042++) {
        const _0x5a9f32 = {
          text: _0x56f6e1[_0xa61042].label.text,
          x: _0x427f97,
          y: _0x1eb9be
        };
        let _0x429432 = createLabel(_0x5a9f32);
        const _0x517ee0 = {
          x: _0x429432.x + _0x429432.width + 10,
          y: _0x1eb9be,
          selected: true,
          storageKey: _0x56f6e1[_0xa61042].switch.storageKey,
          msgData: _0x56f6e1[_0xa61042].switch.msgData
        };
        let _0xf8f4bb = createToggle(_0x517ee0);
        _0x427f97 = _0x427f97 + _0x429432.width + 10 + _0xf8f4bb.width + 10;
        this.switchBtnList.push(_0xf8f4bb);
        _0x6482f3.push(_0x429432);
        _0x6482f3.push(_0xf8f4bb);
        if (_0xa61042 == _0x56f6e1.length - 1) {
          _0x1eb9be = _0x429432.y + _0x429432.height + 12;
        }
      }
      this.addAllUis(_0x6482f3);
      _0x51f4d6.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x68d2c.stop();
      }, function () {
        _0x68d2c.switchBtnList.forEach(_0x253a0c => localStorage.setItem(_0x253a0c.storageKey, _0x253a0c.selected));
        _0x68d2c.prcessBody();
      }], null);
      _0x51f4d6.showAlert();
      logger(_0x51f4d6);
    });
  }
  async prcessBody() {
    try {
      GlobalDispatcher.getInstance().dispatchEventWith(GameEvent.OPEN_MODULE, false, {
        id: 1081,
        type: 2
      });
      addGameLog("打开商店");
      await wait(200);
      await this.send_message("cs_query_shop_item", {
        shopType: 2
      });
      await wait(200);
      await this.send_message("cs_query_shop_item", {
        shopType: 3
      });
      await wait(200);
      await this.send_message("cs_query_shop_item", {
        shopType: 5
      });
      await wait(200);
      await this.send_message("cs_query_shop_item", {
        shopType: 6
      });
      let _0x381530 = [];
      for (let _0x2723cc = 0; _0x2723cc < this.switchBtnList.length; _0x2723cc++) {
        if (this.switchBtnList[_0x2723cc].selected) {
          _0x381530.push(this.switchBtnList[_0x2723cc]);
        }
      }
      for (let _0x3135ed = 0; _0x3135ed < _0x381530.length; _0x3135ed++) {
        await wait(100);
        let _0x504f14 = _0x381530[_0x3135ed].msgData;
        if (_0x504f14.name == "cs_buy_new_shop_item") {
          const _0x251345 = {
            shopType: _0x504f14.body.shopType
          };
          let _0x1676ff = await this.send_message("cs_get_new_shop_item", _0x251345);
          let _0x91eae4 = _0x1676ff.shop_items;
          let _0x408b28 = 0;
          for (let _0x1ecc47 = 0; _0x1ecc47 < _0x91eae4.length; _0x1ecc47++) {
            if (_0x91eae4[_0x1ecc47].idx == _0x504f14.body.id) {
              if (_0x91eae4[_0x1ecc47].buyNum) {
                _0x408b28 = 1;
              }
              break;
            }
          }
          if (_0x408b28 == 1) {
            addGameLog("已经购买过 =>" + _0x504f14.logData);
            continue;
          }
          if (_0x504f14.body.shopType == 2) {
            if (_0x1676ff.balance >= _0x504f14.needCoin) {
              await this.send_message(_0x504f14.name, _0x504f14.body);
              addGameLog("购买成功 =>" + _0x504f14.logData);
            } else {
              addGameLog("代币不足  跳过购买=>" + _0x504f14.logData);
            }
          }
          if (_0x504f14.body.shopType == 3) {
            await this.send_message(_0x504f14.name, _0x504f14.body);
            addGameLog("尝试购买  =>" + _0x504f14.logData);
          }
        }
        if (_0x504f14.name == "cs_buy_shop_item") {
          if (UserManager.getInstance().userInfo.coin < _0x504f14.needCoin) {
            addGameLog("代币不足  跳过购买=>" + _0x504f14.logData);
            continue;
          }
          let _0x28dde6 = await this.send_message("cs_get_shop_item", {
            freshType: 0
          });
          let _0x5a36b6 = _0x28dde6.shop_items;
          let _0x1cebe7 = 0;
          for (let _0x4464b6 = 0; _0x4464b6 < _0x5a36b6.length; _0x4464b6++) {
            if (_0x5a36b6[_0x4464b6].itemId == _0x504f14.itemId) {
              if (_0x5a36b6[_0x4464b6].buyState) {
                _0x1cebe7 = 1;
              } else {
                _0x504f14.body.pos = _0x5a36b6[_0x4464b6].pos;
                await this.send_message(_0x504f14.name, _0x504f14.body);
                addGameLog("购买成功 =>" + _0x504f14.logData);
              }
            }
          }
          if (_0x1cebe7 == 1) {
            addGameLog("已经购买过 =>" + _0x504f14.logData);
            continue;
          }
          await wait(200);
        }
        if (_0x504f14.name == "cs_exchange_activity_reward") {
          addGameLog("尝试购买: " + _0x504f14.logData);
          await this.send_message(_0x504f14.name, _0x504f14.body);
          if (_0x504f14.logData == "教皇门票") {
            await wait(200);
            await this.send_message("cs_combat_ladder_GhostDom", {
              type: 1,
              choice: 0
            });
            await wait(100);
            const _0x3ef599 = [100975, 100976, 100977, 100978, 100979, 100980, 100981, 100982, 100983, 100984, 100985, 100986];
            let _0x49aaf6 = NumUtils.curStarSign() - 1;
            let _0x50f42b = xls.activityExchange.getItems().find(_0xf6897e => _0xf6897e.consume == _0x3ef599[_0x49aaf6] + "_20");
            if (_0x50f42b) {
              _0x504f14.body.id = _0x50f42b.id;
              await this.send_message(_0x504f14.name, _0x504f14.body);
            }
            const _0x52dde0 = [101282, 101283, 101284, 101285, 101286, 101287, 101288, 101289, 101290, 101291, 101292, 101293];
            let _0x30030e = xls.activityExchange.getItems().find(_0x2baa00 => _0x2baa00.consume == _0x52dde0[_0x49aaf6] + "_20");
            if (_0x30030e) {
              _0x504f14.body.id = _0x30030e.id;
              await this.send_message(_0x504f14.name, _0x504f14.body);
            }
          }
          await wait(200);
        }
        if (_0x504f14.name == "cs_purchase_shop_item") {
          addGameLog("尝试购买: " + _0x504f14.logData);
          await this.send_message(_0x504f14.name, _0x504f14.body);
          await wait(200);
        }
      }
      this.stop();
    } catch (_0x58263a) {
      logger(_0x58263a);
    }
  }
}
class LearnSkill extends SuperTask {
  constructor() {
    super();
    this.nowName = "技能学习";
    this.recvList = [];
  }
  start() {
    super.start();
    let _0x5b79f2 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x4aac8d = SimpleAlertUi({});
      const _0x5eb649 = {
        text: "确定进行一键技能学习吗?",
        y: _0x4aac8d.height / 11
      };
      var _0x5021b6 = createLabel(_0x5eb649);
      _0x5021b6.x = _0x4aac8d.width / 2 - _0x5021b6.width / 2;
      _0x4aac8d.addChild(_0x5021b6);
      const _0x2f25e4 = {
        text: "当前赛尔豆数量",
        y: _0x5021b6.y + 30
      };
      var _0x3a5f93 = createLabel(_0x2f25e4);
      _0x3a5f93.x = _0x5021b6.x;
      _0x4aac8d.addChild(_0x3a5f93);
      const _0x4e2b8a = {
        text: MFC.userInfo._coin,
        y: _0x5021b6.y + 30,
        textColor: 16776960
      };
      var _0x4711e6 = createLabel(_0x4e2b8a);
      _0x4711e6.x = _0x3a5f93.x + _0x3a5f93.width + 10;
      _0x4aac8d.addChild(_0x4711e6);
      const _0x565bff = {
        text: "消耗赛尔豆数量",
        y: _0x3a5f93.y + 30
      };
      var _0x119896 = createLabel(_0x565bff);
      _0x119896.x = _0x5021b6.x;
      _0x4aac8d.addChild(_0x119896);
      let _0x4b4ba0 = petProperty.PetPropertyManager.getInstance().getAllSkillList();
      let _0x2e11f3 = petProperty.PetPropertyManager.getInstance()._curPetInfo.petId;
      for (let _0x4e0bab = 0; _0x4e0bab < petProperty.PetPropertyManager.getInstance()._curPetInfo.totalSkills.length; _0x4e0bab++) {
        if (_0x4b4ba0.indexOf(petProperty.PetPropertyManager.getInstance()._curPetInfo.totalSkills[_0x4e0bab]) !== -1) {
          _0x4b4ba0.splice(_0x4b4ba0.indexOf(petProperty.PetPropertyManager.getInstance()._curPetInfo.totalSkills[_0x4e0bab]), 1);
        }
      }
      let _0x167e2a = 0;
      for (let _0x3e95b6 = 0; _0x3e95b6 < _0x4b4ba0.length; _0x3e95b6++) {
        _0x167e2a = _0x167e2a + PetLearnSkillManager.getLearnSkillInfo(_0x4b4ba0[_0x3e95b6], _0x2e11f3).coin;
      }
      const _0x177586 = {
        text: _0x167e2a,
        y: _0x3a5f93.y + 30,
        textColor: 16776960
      };
      var _0x4e17fb = createLabel(_0x177586);
      _0x4e17fb.x = _0x3a5f93.x + _0x3a5f93.width + 10;
      _0x4aac8d.addChild(_0x4e17fb);
      const _0x497217 = {
        text: "剩余赛尔豆数量",
        y: _0x119896.y + 30
      };
      var _0x2002be = createLabel(_0x497217);
      _0x2002be.x = _0x5021b6.x;
      _0x4aac8d.addChild(_0x2002be);
      const _0x2b7e3c = {
        text: MFC.userInfo._coin - _0x167e2a,
        y: _0x119896.y + 30,
        textColor: 16776960
      };
      var _0x270dbe = createLabel(_0x2b7e3c);
      _0x270dbe.x = _0x3a5f93.x + _0x3a5f93.width + 10;
      _0x4aac8d.addChild(_0x270dbe);
      _0x4aac8d.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x5b79f2.stop();
      }, function () {
        _0x5b79f2.prcessBody();
      }], null);
      _0x4aac8d.showAlert();
    });
  }
  async prcessBody() {
    try {
      let _0x2f15f4 = petProperty.PetPropertyManager.getInstance().getAllSkillList();
      let _0x4d0fee = petProperty.PetPropertyManager.getInstance()._curPetInfo.getTime;
      let _0x310322 = petProperty.PetPropertyManager.getInstance()._curPetInfo.petId;
      let _0x5c1d3a = petProperty.PetPropertyManager.getInstance()._curPetInfo.level;
      for (let _0x2ad6f9 = 0; _0x2ad6f9 < petProperty.PetPropertyManager.getInstance()._curPetInfo.totalSkills.length; _0x2ad6f9++) {
        if (_0x2f15f4.indexOf(petProperty.PetPropertyManager.getInstance()._curPetInfo.totalSkills[_0x2ad6f9]) !== -1) {
          _0x2f15f4.splice(_0x2f15f4.indexOf(petProperty.PetPropertyManager.getInstance()._curPetInfo.totalSkills[_0x2ad6f9]), 1);
        }
      }
      while (true) {
        if (_0x2f15f4.length == 0) {
          break;
        }
        if (PetLearnSkillManager.getLearnSkillInfo(_0x2f15f4[0], _0x310322).level <= _0x5c1d3a) {
          if (UserManager.getInstance().userInfo.coin >= PetLearnSkillManager.getLearnSkillInfo(_0x2f15f4[0], _0x310322).coin) {
            if (PetLearnSkillManager.getLearnSkillInfo(_0x2f15f4[0], _0x310322).items) {
              if (ItemManager.getInstance().getItemNumById(PetLearnSkillManager.getLearnSkillInfo(_0x2f15f4[0], _0x310322).items.split("_")[0]) < PetLearnSkillManager.getLearnSkillInfo(_0x2f15f4[0], _0x310322).items.split("_")[1]) {
                addGameLog("缺少物品" + xls.item.getItem(PetLearnSkillManager.getLearnSkillInfo(_0x2f15f4[0], _0x310322).items.split("_")[0]).name);
                break;
              }
            }
            if (_0x2f15f4[0] >= 70001 && _0x2f15f4[0] <= 70005) {
              if (MFC.attr.getAttr(MFC.attrType.foreverLeagueExecutionEnter) == 0) {
                addGameLog("审判任务未完成");
                break;
              }
            }
            addGameLog("开始学习=>\n" + petConfig.SkillConfig.getDef(_0x2f15f4[0]).name);
            const _0x463360 = {
              getTime: _0x4d0fee,
              skillId: _0x2f15f4[0]
            };
            await this.send_message("cs_learn_skill", _0x463360);
            _0x2f15f4.shift();
          } else {
            addGameLog("赛尔豆不足");
            break;
          }
        } else {
          break;
        }
      }
      addGameLog("技能学习完毕");
      this.stop();
    } catch (_0xb3b69f) {
      logger(_0xb3b69f);
    }
  }
}
class Removenotstarfriend extends SuperTask {
  constructor() {
    super();
    this.nowName = "删除好友";
  }
  start() {
    super.start();
    let _0x43cedd = this;
    MFC.alert.show("确定进行一键删除非星标好友吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x9e351c) {
      _0x43cedd.stop();
    }, function (_0x4333b5) {
      _0x43cedd.prcessBody();
    }]);
  }
  async prcessBody() {
    try {
      let _0x480752 = MFC.friendManager.normalFriendDic.datum.filter(_0x763e21 => _0x763e21.s !== 1);
      for (let _0x4ea79f = 0; _0x4ea79f < _0x480752.length; _0x4ea79f++) {
        const _0x279584 = {
          userid: _0x480752[_0x4ea79f].u
        };
        await this.send_message("cs_remove_friend", _0x279584);
      }
      addGameLog("删除完成");
      this.stop();
    } catch (_0x320eda) {}
  }
}
class braveOfTower extends SuperTask {
  constructor() {
    super();
    this.nowName = "勇者爬塔";
    this.recvList = [{
      watchEventName: "sc_battle_notify_round_result"
    }, {
      watchEventName: "sc_battle_notify_load_resource"
    }];
  }
  start() {
    super.start();
    let _0x5c00bd = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x905a = SimpleAlertUi({});
      const _0x258f3d = {
        text: `确定对战当前层数勇者之塔吗？
1.默认使用精灵首发技能
2.电池不足会停止运行
3.请注意技能对战属性无效伤害
3.精灵等级满100级会停止运行`,
        y: _0x905a.height / 11
      };
      var _0x2a3217 = createLabel(_0x258f3d);
      _0x2a3217.x = _0x905a.width / 2 - _0x2a3217.width / 2;
      _0x905a.addChild(_0x2a3217);
      _0x905a.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x5c00bd.stop();
      }, function () {
        _0x5c00bd.prcessBody();
      }], null);
      _0x905a.showAlert();
    });
  }
  async prcessBody() {
    try {
      MFC.moduleManager.closeModule(310);
      while (1) {
        let _0x29b07f = await this.send_message("cs_get_brave_tower_data", {});
        if (!_0x29b07f.tower.pet) {
          MFC.alert.show("未设置【爬塔精灵】或精灵已经【满级】，请先设置!");
          this.stop();
          return;
        }
        let _0x104d5f = _0x29b07f.tower.curFloor;
        let _0x51849c = _0x29b07f.tower.floor_level.find(_0x222b63 => _0x222b63.isPass != 0);
        if (!_0x51849c) {
          addGameLog("本层已经全部通关！");
          break;
        }
        let _0x179554 = _0x51849c.levelId;
        let _0x13c807 = PetManager.getInstance().getPetInfoByGetTime(_0x29b07f.tower.pet).skills[0];
        if (UserManager.getInstance().userInfo.curEnergy < _0x104d5f) {
          MFC.alert.show("电池不足 爬塔结束！");
          this.stop();
          return;
        }
        await wait(300);
        const _0x1d8f3c = {
          floor: _0x104d5f,
          levelId: _0x179554
        };
        await this.send_message("cs_brave_tower_fight", _0x1d8f3c);
        await this.initBattle();
        let _0x1815f0 = await this.useSkill(_0x13c807);
        while (_0x1815f0.result.result == 0) {
          if (_0x1815f0.result.playerInfos[0].uid == MFC.userInfo.uid) {
            if (_0x1815f0.result.playerInfos[0].nextRoundOP !== 1) {
              addGameLog("首发被击败");
              break;
            }
          } else if (_0x1815f0.result.playerInfos[1].nextRoundOP !== 1) {
            addGameLog("首发被击败");
            break;
          }
          addGameLog("未击败，继续攻击");
          _0x1815f0 = await this.useSkill(_0x13c807);
        }
        if (_0x1815f0.result.result === 1) {
          addGameLog("顺利打败勇者之塔");
        } else {
          addGameLog("被勇者之塔击败");
        }
        await wait(300);
      }
      MFC.moduleManager.closeModule(310);
      this.stop();
    } catch (_0x327935) {
      logger(_0x327935);
    }
  }
}
class ExpUp extends SuperTask {
  constructor() {
    super();
    this.nowName = "经验升级";
    this.recvList = [];
    this.levelupnum = 0;
  }
  start() {
    super.start();
    let _0x32a0e5 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x360db4 = SimpleAlertUi({});
      const _0x315488 = {
        text: "自定义经验升级(当前精灵等级",
        y: _0x360db4.height / 11
      };
      var _0x15a045 = createLabel(_0x315488);
      _0x15a045.x = _0x360db4.width / 2 - _0x15a045.width / 2 - 10;
      _0x360db4.addChild(_0x15a045);
      var _0x42de06 = createLabel({
        text: expDevice.ExpDeviceManager.getInstance().curPet.level,
        y: _0x360db4.height / 11,
        textColor: 16776960,
        size: 20
      });
      _0x42de06.x = _0x15a045.x + _0x15a045.width + 5;
      _0x360db4.addChild(_0x42de06);
      const _0xb5d52a = {
        text: ")",
        y: _0x360db4.height / 11
      };
      var _0x2d3e1e = createLabel(_0xb5d52a);
      _0x2d3e1e.x = _0x42de06.x + _0x42de06.width + 5;
      _0x360db4.addChild(_0x2d3e1e);
      const _0x3a6e98 = {
        prompt: "请输入等级",
        width: 100,
        x: 30,
        y: _0x15a045.y + 30,
        storageKey: "inputzdyexp"
      };
      var _0x1f73ae = createEdit(_0x3a6e98);
      _0x360db4.addChild(_0x1f73ae);
      const _0x1496f8 = {
        text: "输入等级不超过100\n输入等级不低于当前等级",
        y: _0x15a045.y + 30,
        textColor: 16776960,
        size: 12
      };
      var _0x1f8902 = createLabel(_0x1496f8);
      _0x1f8902.x = _0x1f73ae.x + _0x1f73ae.width + 20;
      _0x360db4.addChild(_0x1f8902);
      const _0x50ae62 = {
        text: "说明:比如精灵59,输入65,\n     就会升到65",
        y: _0x1f8902.y + 40,
        textColor: 16776960,
        size: 16
      };
      var _0x3537a4 = createLabel(_0x50ae62);
      _0x3537a4.x = 30;
      _0x360db4.addChild(_0x3537a4);
      _0x360db4.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x32a0e5.stop();
      }, function () {
        localStorage.setItem("inputzdyexp", _0x1f73ae.text);
        if (isNaN(parseInt(_0x1f73ae.text))) {
          MFC.bubbleAlert.showAlert("请输入有效等级");
          return true;
        } else if (parseInt(_0x1f73ae.text) > 100 || parseInt(_0x1f73ae.text) <= expDevice.ExpDeviceManager.getInstance().curPet.level) {
          MFC.bubbleAlert.showAlert("输入等级错误");
          return true;
        } else {
          _0x32a0e5.levelupnum = parseInt(_0x1f73ae.text) - expDevice.ExpDeviceManager.getInstance().curPet.level;
        }
        _0x32a0e5.upui();
      }], null);
      _0x360db4.showAlert();
    });
  }
  async upui() {
    super.start();
    let _0x59d234 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x4e61db = SimpleAlertUi({});
      const _0xb1debc = {
        text: "确定进行经验升级吗?",
        y: _0x4e61db.height / 11
      };
      var _0x5d47ce = createLabel(_0xb1debc);
      _0x5d47ce.x = _0x4e61db.width / 2 - _0x5d47ce.width / 2;
      _0x4e61db.addChild(_0x5d47ce);
      const _0x18bfdb = {
        text: "当前拥有经验",
        y: _0x5d47ce.y + 30
      };
      var _0x3e12c3 = createLabel(_0x18bfdb);
      _0x3e12c3.x = _0x5d47ce.x;
      _0x4e61db.addChild(_0x3e12c3);
      var _0x35ef95 = createLabel({
        text: expDevice.ExpDeviceManager.getInstance().totalExp,
        y: _0x5d47ce.y + 30,
        textColor: 16776960
      });
      _0x35ef95.x = _0x3e12c3.x + _0x3e12c3.width + 10;
      _0x4e61db.addChild(_0x35ef95);
      const _0x3f0372 = {
        text: "升级所需经验",
        y: _0x3e12c3.y + 30
      };
      var _0x212d2e = createLabel(_0x3f0372);
      _0x212d2e.x = _0x5d47ce.x;
      _0x4e61db.addChild(_0x212d2e);
      let _0x4214f4 = 0;
      for (let _0x2567a4 = 0; _0x2567a4 < this.levelupnum; _0x2567a4++) {
        if (expDevice.ExpDeviceManager.getInstance().curPet.level + _0x2567a4 == 100) {
          break;
        } else if (_0x2567a4 == 0) {
          _0x4214f4 = _0x4214f4 + Math.round(xls.exp.getItem(expDevice.ExpDeviceManager.getInstance().curPet.level).exp * PetConfig.getDef(expDevice.ExpDeviceManager.getInstance().curPet.petId).expNum) - expDevice.ExpDeviceManager.getInstance().curPet.exp;
        } else {
          _0x4214f4 = _0x4214f4 + Math.round(xls.exp.getItem(expDevice.ExpDeviceManager.getInstance().curPet.level + _0x2567a4).exp * PetConfig.getDef(expDevice.ExpDeviceManager.getInstance().curPet.petId).expNum);
        }
      }
      const _0x402c84 = {
        text: _0x4214f4,
        y: _0x3e12c3.y + 30,
        textColor: 16776960
      };
      var _0x54d967 = createLabel(_0x402c84);
      _0x54d967.x = _0x3e12c3.x + _0x3e12c3.width + 10;
      _0x4e61db.addChild(_0x54d967);
      const _0x5d55c9 = {
        text: "剩余经验",
        y: _0x212d2e.y + 30
      };
      var _0x59fb58 = createLabel(_0x5d55c9);
      _0x59fb58.x = _0x5d47ce.x;
      _0x4e61db.addChild(_0x59fb58);
      var _0x200a8e = createLabel({
        text: expDevice.ExpDeviceManager.getInstance().totalExp - _0x4214f4,
        y: _0x212d2e.y + 30,
        textColor: 16776960
      });
      _0x200a8e.x = _0x3e12c3.x + _0x3e12c3.width + 10;
      _0x4e61db.addChild(_0x200a8e);
      _0x4e61db.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x59d234.stop();
      }, function () {
        _0x59d234.prcessBody();
      }], null);
      _0x4e61db.showAlert();
    });
  }
  async prcessBody() {
    try {
      let _0x236507 = 0;
      for (let _0x2706db = 0; _0x2706db < this.levelupnum; _0x2706db++) {
        if (expDevice.ExpDeviceManager.getInstance().curPet.level + _0x2706db == 100) {
          break;
        } else if (_0x2706db == 0) {
          _0x236507 = _0x236507 + Math.round(xls.exp.getItem(expDevice.ExpDeviceManager.getInstance().curPet.level).exp * PetConfig.getDef(expDevice.ExpDeviceManager.getInstance().curPet.petId).expNum) - expDevice.ExpDeviceManager.getInstance().curPet.exp;
        } else {
          _0x236507 = _0x236507 + Math.round(xls.exp.getItem(expDevice.ExpDeviceManager.getInstance().curPet.level + _0x2706db).exp * PetConfig.getDef(expDevice.ExpDeviceManager.getInstance().curPet.petId).expNum);
        }
      }
      if (_0x236507 > expDevice.ExpDeviceManager.getInstance().totalExp) {
        addGameLog("所拥有经验不足以提升" + this.levelupnum + "级");
        let _0xaadd27 = this;
        MFC.alert.show("确定将所有经验进行升级吗", null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function (_0x17af5d) {
          _0xaadd27.stop();
        }, function (_0x401689) {
          _0xaadd27.send_message("cs_pet_inject_exp", {
            getTime: expDevice.ExpDeviceManager.getInstance().curPet.getTime,
            addExp: expDevice.ExpDeviceManager.getInstance().totalExp
          });
          addGameLog("经验升级完毕");
          _0xaadd27.stop();
        }]);
      } else {
        await this.send_message("cs_pet_inject_exp", {
          getTime: expDevice.ExpDeviceManager.getInstance().curPet.getTime,
          addExp: _0x236507
        });
        addGameLog("经验升级完毕");
        this.stop();
      }
    } catch (_0x43e126) {}
  }
}
class cusExpUp extends SuperTask {
  constructor() {
    super();
    this.nowName = "自定义经验升级";
    this.recvList = [];
    this.expnum = 0;
  }
  start() {
    super.start();
    let _0x502bfb = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x404500 = SimpleAlertUi({});
      const _0x1a188e = {
        text: "自定义经验升级(当前精灵等级",
        y: _0x404500.height / 11
      };
      var _0x1e067a = createLabel(_0x1a188e);
      _0x1e067a.x = _0x404500.width / 2 - _0x1e067a.width / 2 - 10;
      _0x404500.addChild(_0x1e067a);
      var _0x47deda = createLabel({
        text: expDevice.ExpDeviceManager.getInstance().curPet.level,
        y: _0x404500.height / 11,
        textColor: 16776960,
        size: 20
      });
      _0x47deda.x = _0x1e067a.x + _0x1e067a.width + 5;
      _0x404500.addChild(_0x47deda);
      const _0x1ae316 = {
        text: ")",
        y: _0x404500.height / 11
      };
      var _0x44ebce = createLabel(_0x1ae316);
      _0x44ebce.x = _0x47deda.x + _0x47deda.width + 5;
      _0x404500.addChild(_0x44ebce);
      const _0x32937a = {
        prompt: "请输入经验",
        width: 100,
        x: 30,
        y: _0x1e067a.y + 30,
        storageKey: "inputexp"
      };
      var _0x83c186 = createEdit(_0x32937a);
      _0x404500.addChild(_0x83c186);
      var _0x1a8c78 = createLabel({
        text: "输入经验不超过\n" + expDevice.ExpDeviceManager.getInstance().totalExp,
        y: _0x1e067a.y + 30,
        textColor: 16776960,
        size: 12
      });
      _0x1a8c78.x = _0x83c186.x + _0x83c186.width + 20;
      _0x404500.addChild(_0x1a8c78);
      _0x404500.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x502bfb.stop();
      }, function () {
        localStorage.setItem("inputexp", _0x83c186.text);
        if (isNaN(parseInt(_0x83c186.text))) {
          MFC.bubbleAlert.showAlert("请输入有效数字");
          return true;
        } else if (parseInt(_0x83c186.text) > expDevice.ExpDeviceManager.getInstance().totalExp || parseInt(_0x83c186.text) < 0) {
          MFC.bubbleAlert.showAlert("输入经验数量错误");
          return true;
        } else {
          _0x502bfb.expnum = parseInt(_0x83c186.text);
        }
        _0x502bfb.upui();
      }], null);
      _0x404500.showAlert();
    });
  }
  async upui() {
    super.start();
    let _0xab64c1 = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x3736db = SimpleAlertUi({});
      const _0x135b2e = {
        text: "确定进行经验升级吗?",
        y: _0x3736db.height / 11
      };
      var _0x1a23df = createLabel(_0x135b2e);
      _0x1a23df.x = _0x3736db.width / 2 - _0x1a23df.width / 2;
      _0x3736db.addChild(_0x1a23df);
      const _0x4e02b8 = {
        text: "当前拥有经验",
        y: _0x1a23df.y + 30
      };
      var _0xce8467 = createLabel(_0x4e02b8);
      _0xce8467.x = _0x1a23df.x;
      _0x3736db.addChild(_0xce8467);
      var _0x17b79d = createLabel({
        text: expDevice.ExpDeviceManager.getInstance().totalExp,
        y: _0x1a23df.y + 30,
        textColor: 16776960
      });
      _0x17b79d.x = _0xce8467.x + _0xce8467.width + 10;
      _0x3736db.addChild(_0x17b79d);
      const _0x1a7b84 = {
        text: "消耗的经验",
        y: _0xce8467.y + 30
      };
      var _0x47b5f5 = createLabel(_0x1a7b84);
      _0x47b5f5.x = _0x1a23df.x;
      _0x3736db.addChild(_0x47b5f5);
      let _0x68e8d = this.expnum;
      const _0x8ac48f = {
        text: _0x68e8d,
        y: _0xce8467.y + 30,
        textColor: 16776960
      };
      var _0xf5c7d0 = createLabel(_0x8ac48f);
      _0xf5c7d0.x = _0xce8467.x + _0xce8467.width + 10;
      _0x3736db.addChild(_0xf5c7d0);
      const _0x596883 = {
        text: "剩余经验",
        y: _0x47b5f5.y + 30
      };
      var _0x128da1 = createLabel(_0x596883);
      _0x128da1.x = _0x1a23df.x;
      _0x3736db.addChild(_0x128da1);
      var _0x574280 = createLabel({
        text: expDevice.ExpDeviceManager.getInstance().totalExp - _0x68e8d,
        y: _0x47b5f5.y + 30,
        textColor: 16776960
      });
      _0x574280.x = _0xce8467.x + _0xce8467.width + 10;
      _0x3736db.addChild(_0x574280);
      _0x3736db.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0xab64c1.stop();
      }, function () {
        _0xab64c1.prcessBody();
      }], null);
      _0x3736db.showAlert();
    });
  }
  async prcessBody() {
    try {
      let _0x748652 = this.expnum;
      await this.send_message("cs_pet_inject_exp", {
        getTime: expDevice.ExpDeviceManager.getInstance().curPet.getTime,
        addExp: _0x748652
      });
      addGameLog("经验升级完毕");
      this.stop();
    } catch (_0x5f467a) {}
  }
}
class Cztalent extends SuperTask {
  constructor() {
    super();
    this.nowName = "基因重组";
    this.recvList = [];
    this.nowpet = null;
    this.input2Pwd = null;
    this.costtalent = null;
    this.stoptalent = null;
    this.coinnum = null;
    this.cznum = null;
    this.needcoin = null;
    this.parent = null;
  }
  start() {
    super.start();
    let _0x434ec0 = this;
    var _0x22d6bd = getTouchs("_source", "item_frame_1_mask_png");
    if (_0x22d6bd.filter(function (_0x99ee38) {
      return _0x99ee38.$explicitBitmapHeight == 183 && _0x99ee38.$explicitBitmapWidth == 144;
    })[0].$parent._combinPetInfo == undefined) {
      MFC.alert.show("请先前往选择精灵\n选择一只目标精灵!");
      _0x434ec0.stop();
      return;
    } else {
      _0x434ec0.nowpet = _0x22d6bd.filter(function (_0x3fea5f) {
        return _0x3fea5f.$explicitBitmapHeight == 183 && _0x3fea5f.$explicitBitmapWidth == 144;
      })[0].$parent._combinPetInfo;
      _0x434ec0.needcoin = _0x22d6bd.filter(function (_0x2dd12a) {
        return _0x2dd12a.$explicitBitmapHeight == 183 && _0x2dd12a.$explicitBitmapWidth == 144;
      })[0].$parent._needCoin;
      _0x434ec0.parent = _0x22d6bd.filter(function (_0x22e035) {
        return _0x22e035.$explicitBitmapHeight == 183 && _0x22e035.$explicitBitmapWidth == 144;
      })[0].$parent;
    }
    if (!xls.item.hasLoaded) {
      xls.item.load(() => {});
    }
    if (!xls.geneRecombine.hasLoaded) {
      xls.geneRecombine.load(() => {});
    }
    if (!xls.petEgg.hasLoaded) {
      xls.petEgg.load(() => {});
    }
    logger(_0x22d6bd.filter(function (_0x435cb4) {
      return _0x435cb4.$explicitBitmapHeight == 183 && _0x435cb4.$explicitBitmapWidth == 144;
    })[0].$parent._combinPetInfo);
    logger(_0x22d6bd.filter(function (_0xef57bf) {
      return _0xef57bf.$explicitBitmapHeight == 183 && _0xef57bf.$explicitBitmapWidth == 144;
    })[0].$parent);
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x8e5be8 = SimpleAlertUi({
        width: 400,
        height: 350
      });
      const _0x4ed2c4 = {
        text: "确定进行一键基因重组吗?",
        y: _0x8e5be8.height / 11
      };
      var _0x14ca6c = createLabel(_0x4ed2c4);
      _0x14ca6c.x = _0x8e5be8.width / 2 - _0x14ca6c.width / 2;
      _0x8e5be8.addChild(_0x14ca6c);
      const _0x366fd5 = {
        prompt: "二级密码",
        x: 40,
        y: _0x14ca6c.y + 30,
        width: 100
      };
      var _0x45ff83 = createEdit(_0x366fd5);
      _0x8e5be8.addChild(_0x45ff83);
      const _0x18a65b = {
        text: "[没有二级密码不输入]",
        x: _0x45ff83.x + 120,
        y: _0x45ff83.y + 5
      };
      var _0x53e854 = createLabel(_0x18a65b);
      _0x8e5be8.addChild(_0x53e854);
      testBtn = new eui.Button();
      testBtn.x = _0x45ff83.x + 140 + _0x53e854.width;
      testBtn.y = _0x45ff83.y;
      testBtn.skinName = gethelpBtnSkinName();
      BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
        var _0x43d899 = new geneCombin.GeneCombinRule();
        _0x43d899.$children[1].$children[1].textArr[0].text = "没有二级密码不输入\n二级密码为6位";
        _0x43d899.$children[1].$children[0].height = 61;
        _0x43d899.showRule();
        MFC.rootLayer.addChild(_0x43d899);
      });
      _0x8e5be8.addChild(testBtn);
      if (xls.geneRecombine.getItem(PetConfig.getDef(_0x434ec0.nowpet.petId).petClass).recombine == "1") {
        var _0x3c11b0 = createLabel({
          text: "当前精灵需消耗" + _0x22d6bd.filter(function (_0x2457bf) {
            return _0x2457bf.$explicitBitmapHeight == 183 && _0x2457bf.$explicitBitmapWidth == 144;
          })[0].$parent._combinPetInfo.nick + "重组",
          x: 40,
          y: _0x45ff83.y + 50
        });
        _0x8e5be8.addChild(_0x3c11b0);
        const _0x24c408 = {
          prompt: "消耗精灵天赋",
          x: _0x3c11b0.x + _0x3c11b0.width + 10,
          y: _0x3c11b0.y,
          width: 100,
          storageKey: "costtalent"
        };
        var _0x4ac3c2 = createEdit(_0x24c408);
        _0x8e5be8.addChild(_0x4ac3c2);
        testBtn = new eui.Button();
        testBtn.x = _0x45ff83.x + 140 + _0x53e854.width;
        testBtn.y = _0x3c11b0.y;
        testBtn.skinName = gethelpBtnSkinName();
        BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
          var _0x1f3cba = new geneCombin.GeneCombinRule();
          _0x1f3cba.$children[1].$children[1].textArr[0].text = "如果天赋输入26只会消耗26以下精灵重组(不包括26)";
          _0x1f3cba.showRule();
          MFC.rootLayer.addChild(_0x1f3cba);
        });
        _0x8e5be8.addChild(testBtn);
      } else if (xls.geneRecombine.getItem(PetConfig.getDef(_0x434ec0.nowpet.petId).petClass).recombine == "2") {
        var _0x3c11b0 = createLabel({
          text: "当前精灵需消耗精元" + xls.petEgg.getItem(xls.geneRecombine.getItem(PetConfig.getDef(this.nowpet.petId).petClass).eggId.split("_")[0]).name + "重组",
          x: 40,
          y: _0x45ff83.y + 50
        });
        _0x8e5be8.addChild(_0x3c11b0);
      } else {
        var _0x3c11b0 = createLabel({
          text: "当前精灵需消耗物品" + xls.item.getItem(xls.geneRecombine.getItem(PetConfig.getDef(this.nowpet.petId).petClass).itemId.split("_")[0]).name + "重组",
          x: 40,
          y: _0x45ff83.y + 50
        });
        _0x8e5be8.addChild(_0x3c11b0);
      }
      const _0x35412a = {
        prompt: "输入停止天赋",
        x: 40,
        y: _0x3c11b0.y + 40,
        width: 100,
        storageKey: "stoptalent"
      };
      var _0x2d38cf = createEdit(_0x35412a);
      _0x8e5be8.addChild(_0x2d38cf);
      testBtn = new eui.Button();
      testBtn.x = _0x2d38cf.x + _0x2d38cf.width + 30;
      testBtn.y = _0x2d38cf.y;
      testBtn.skinName = gethelpBtnSkinName();
      BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
        var _0x4da1ba = new geneCombin.GeneCombinRule();
        _0x4da1ba.$children[1].$children[1].textArr[0].text = "如果天赋输入26会在重组达到26及以上停止(包括26!!!必须输入)";
        _0x4da1ba.showRule();
        MFC.rootLayer.addChild(_0x4da1ba);
      });
      _0x8e5be8.addChild(testBtn);
      const _0x416b39 = {
        prompt: "输入重组次数",
        x: _0x2d38cf.x + _0x2d38cf.width + 80,
        y: _0x3c11b0.y + 40,
        width: 100,
        storageKey: "cznum"
      };
      var _0x1ae897 = createEdit(_0x416b39);
      _0x8e5be8.addChild(_0x1ae897);
      testBtn = new eui.Button();
      testBtn.x = _0x1ae897.x + _0x1ae897.width + 20;
      testBtn.y = _0x2d38cf.y;
      testBtn.skinName = gethelpBtnSkinName();
      BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
        var _0x104a72 = new geneCombin.GeneCombinRule();
        _0x104a72.$children[1].$children[1].textArr[0].text = "(不必须输入)输入次数不超过拥有数";
        _0x104a72.showRule();
        MFC.rootLayer.addChild(_0x104a72);
      });
      _0x8e5be8.addChild(testBtn);
      const _0x2c6c86 = {
        text: "当前赛尔豆数量",
        x: 40,
        y: _0x1ae897.y + 40
      };
      var _0xd73112 = createLabel(_0x2c6c86);
      _0x8e5be8.addChild(_0xd73112);
      const _0x4abc6d = {
        text: MFC.userInfo._coin,
        x: _0xd73112.x + _0xd73112.width + 20,
        y: _0x1ae897.y + 40
      };
      var _0x47fed2 = createLabel(_0x4abc6d);
      _0x47fed2.textColor = 16776960;
      _0x8e5be8.addChild(_0x47fed2);
      const _0x3c6d01 = {
        prompt: "输入赛尔豆",
        x: 40,
        y: _0xd73112.y + 40,
        width: 100,
        storageKey: "coinnum"
      };
      var _0x304824 = createEdit(_0x3c6d01);
      _0x8e5be8.addChild(_0x304824);
      testBtn = new eui.Button();
      testBtn.x = _0x2d38cf.x + _0x2d38cf.width + 30;
      testBtn.y = _0x304824.y;
      testBtn.skinName = gethelpBtnSkinName();
      BC.addEvent(testBtn, testBtn, egret.TouchEvent.TOUCH_TAP, () => {
        var _0x2efecd = new geneCombin.GeneCombinRule();
        _0x2efecd.$children[1].$children[1].textArr[0].text = "(不必须输入)决定会不会破产关键,不输入会重组到豆子不足停止";
        _0x2efecd.showRule();
        MFC.rootLayer.addChild(_0x2efecd);
      });
      _0x8e5be8.addChild(testBtn);
      _0x8e5be8.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x434ec0.stop();
      }, function () {
        if (xls.geneRecombine.getItem(PetConfig.getDef(_0x434ec0.nowpet.petId).petClass).recombine == "1") {
          if (isNaN(parseInt(_0x4ac3c2.text)) || parseInt(_0x4ac3c2.text) > 31 || parseInt(_0x4ac3c2.text) < 0) {
            MFC.bubbleAlert.showAlert("请输入有效消耗天赋");
            addGameLog("请输入有效消耗天赋");
            this.stop();
          } else {
            localStorage.setItem("costtalent", _0x4ac3c2.text);
            _0x434ec0.costtalent = parseInt(_0x4ac3c2.text);
          }
        }
        if (isNaN(parseInt(_0x2d38cf.text)) || parseInt(_0x2d38cf.text) > 31 || parseInt(_0x2d38cf.text) < 0) {
          MFC.bubbleAlert.showAlert("请输入有效停止天赋");
          addGameLog("请输入有效停止天赋");
          this.stop();
        } else {
          localStorage.setItem("stoptalent", _0x2d38cf.text);
          _0x434ec0.stoptalent = parseInt(_0x2d38cf.text);
        }
        if (_0x1ae897.text != "") {
          if (isNaN(parseInt(_0x1ae897.text))) {
            MFC.bubbleAlert.showAlert("请输入有效重组次数");
            addGameLog("请输入有效重组次数");
            this.stop();
          } else {
            localStorage.setItem("cznum", _0x1ae897.text);
            _0x434ec0.cznum = parseInt(_0x1ae897.text);
          }
        }
        if (_0x304824.text != "") {
          if (isNaN(parseInt(_0x304824.text))) {
            MFC.bubbleAlert.showAlert("请输入有效赛尔豆数");
            addGameLog("请输入有效赛尔豆数");
            this.stop();
          } else {
            localStorage.setItem("coinnum", _0x304824.text);
            _0x434ec0.coinnum = parseInt(_0x304824.text);
          }
        }
        if (_0x45ff83.text != "") {
          if (isNaN(parseInt(_0x45ff83.text)) || _0x45ff83.text.length !== 6) {
            MFC.bubbleAlert.showAlert("请输入有效二级密码");
            addGameLog("请输入有效二级密码");
            this.stop();
          }
          _0x434ec0.input2Pwd = parseInt(_0x45ff83.text) + "";
        }
        _0x434ec0.prcessBody();
      }], null);
      _0x8e5be8.showAlert();
    });
  }
  async prcessBody() {
    try {
      let _0x1d9201 = false;
      if (this.input2Pwd) {
        let _0x33f074 = await this.send_message("cs_2nd_passwd", {
          option: 2,
          param: this.input2Pwd
        });
        if (JSON.stringify(_0x33f074).indexOf("二级密码解锁失败") != -1) {
          addGameLog("二级密码错误");
          MFC.bubbleAlert.showAlert("二级密码错误");
        } else {
          _0x1d9201 = true;
        }
      } else {
        _0x1d9201 = true;
      }
      if (_0x1d9201) {
        if (!this.cznum) {
          this.cznum = 99999;
        }
        if (!this.coinnum) {
          this.coinnum = 0;
        }
        let _0x34caa6 = 0;
        while (1) {
          let _0x1d85fd = this.costtalent;
          if (MFC.userInfo._coin < this.coinnum) {
            addGameLog("赛尔豆达到停止");
            break;
          } else if (this.nowpet.talent >= this.stoptalent) {
            addGameLog("天赋达到停止");
            break;
          } else if (_0x34caa6 > this.cznum) {
            addGameLog("次数达到停止");
            break;
          } else {
            if (this.needcoin > MFC.userInfo._coin) {
              addGameLog("赛尔豆不足");
              break;
            } else if (xls.geneRecombine.getItem(PetConfig.getDef(this.nowpet.petId).petClass).recombine == "1") {
              if (this.parent._currPetList.filter(function (_0x4cdd83) {
                return _0x4cdd83.talent < _0x1d85fd;
              }).length == 0) {
                addGameLog("没有精灵可以重组");
                break;
              } else {
                let _0x5e95af = this.parent._currPetList.filter(function (_0x1f58c1) {
                  return _0x1f58c1.talent < _0x1d85fd;
                }).sort((_0x3111f4, _0x48e532) => _0x3111f4.talent - _0x48e532.talent);
                addGameLog("即将消耗" + _0x5e95af[0].nick + "天赋" + _0x5e95af[0].talent);
                let _0x1373bf = await this.send_message("cs_gene_reconf", {
                  getTime: this.nowpet.getTime,
                  costType: 1,
                  param: [_0x5e95af[0].getTime]
                });
                if (JSON.stringify(_0x1373bf).indexOf("请先解锁二级密码") != -1) {
                  addGameLog("二级密码错误");
                  MFC.bubbleAlert.showAlert("二级密码错误");
                  break;
                }
                addGameLog("剩余赛尔豆" + MFC.userInfo._coin);
              }
            } else if (xls.geneRecombine.getItem(PetConfig.getDef(this.nowpet.petId).petClass).recombine == "2") {
              let _0x9c822a = this.parent.combinInfo.eggId.split("_")[0];
              let _0x45882e = this.parent.combinInfo.eggId.split("_")[1];
              if (PetManager.getInstance().getAllEggs().filter(function (_0x43e4d3) {
                return _0x43e4d3.eggId == _0x9c822a;
              }).length < _0x45882e) {
                addGameLog(xls.petEgg.getItem(_0x9c822a).name + "不足");
                break;
              } else {
                let _0x9eff64 = await this.send_message("cs_gene_reconf", {
                  getTime: this.nowpet.getTime,
                  costType: 2,
                  param: [PetManager.getInstance().getAllEggs().filter(function (_0x3abdb4) {
                    return _0x3abdb4.eggId == _0x9c822a;
                  })[0].getTime]
                });
                if (JSON.stringify(_0x9eff64).indexOf("请先解锁二级密码") != -1) {
                  addGameLog("二级密码错误");
                  MFC.bubbleAlert.showAlert("二级密码错误");
                  break;
                }
                addGameLog("剩余赛尔豆" + MFC.userInfo._coin);
              }
            } else {
              let _0x49d5f8 = this.parent.combinInfo.itemId.split("_")[0];
              let _0x325a47 = this.parent.combinInfo.itemId.split("_")[1];
              let _0xd7e845 = this.nowpet.petId;
              if (ItemManager.getInstance().getItemNumById(_0x49d5f8) < _0x325a47) {
                addGameLog(xls.item.getItem(xls.geneRecombine.getItem(PetConfig.getDef(_0xd7e845).petClass).itemId.split("_")[0]).name + "不足");
                break;
              } else {
                let _0x5603f0 = await this.send_message("cs_gene_reconf", {
                  getTime: this.nowpet.getTime,
                  costType: 3,
                  param: []
                });
                if (JSON.stringify(_0x5603f0).indexOf("请先解锁二级密码") != -1) {
                  addGameLog("二级密码错误");
                  MFC.bubbleAlert.showAlert("二级密码错误");
                  break;
                }
                addGameLog("剩余赛尔豆" + MFC.userInfo._coin);
              }
            }
            _0x34caa6++;
          }
        }
      }
      addGameLog("基因重组完毕");
      this.stop();
    } catch (_0x1d6688) {}
  }
}
// TOLOOK
setInterval(function () {
  _0x2372d6();
}, 4000);
class Relicsfj extends SuperTask {
  constructor() {
    super();
    this.nowName = "分解遗物";
    this.recvList = [];
    this.fjstatus = null;
  }
  start() {
    super.start();
    let _0x15b75d = this;
    RES.loadConfig("resource/ui/personal_center.json", "resource/ui/").then(() => {
      var _0x1f66c9 = SimpleAlertUi({
        height: 230,
        width: 300
      });
      const _0x487acc = {
        text: "分解遗物",
        y: _0x1f66c9.height / 11
      };
      var _0x2b9f2a = createLabel(_0x487acc);
      _0x2b9f2a.x = _0x1f66c9.width / 2 - _0x2b9f2a.width / 2;
      _0x1f66c9.addChild(_0x2b9f2a);
      const _0x31551e = {
        text: "当前遗物:",
        x: 40,
        y: _0x2b9f2a.y + 30
      };
      var _0x374d92 = createLabel(_0x31551e);
      _0x1f66c9.addChild(_0x374d92);
      var _0xafc375 = createLabel({
        text: xls.itemRelic.getItem(holeRelicBag.crtSeRelics).name,
        x: _0x374d92.x + _0x374d92.width + 10,
        y: _0x2b9f2a.y + 20,
        bold: true,
        stroke: 1,
        strokeColor: 9297,
        textColor: 16711680,
        size: 23,
        fontFamily: "楷体",
        bold: 1
      });
      _0x1f66c9.addChild(_0xafc375);
      const _0x291922 = {
        text: "遗物数量:",
        x: 40,
        y: _0x374d92.y + 30
      };
      var _0x4bf8e0 = createLabel(_0x291922);
      _0x1f66c9.addChild(_0x4bf8e0);
      var _0x3daf72 = createLabel({
        text: HoleItemManager.getInstance().getItemNumById(holeRelicBag.crtSeRelics[0]),
        x: _0x374d92.x + _0x374d92.width + 10,
        y: _0x4bf8e0.y,
        bold: true,
        stroke: 1,
        strokeColor: 9297,
        textColor: 16711680,
        size: 23,
        fontFamily: "楷体",
        bold: 1
      });
      _0x1f66c9.addChild(_0x3daf72);
      const _0x978950 = {
        text: "是否保留一个",
        x: 40,
        y: _0x3daf72.y + 30
      };
      var _0xa43f90 = createLabel(_0x978950);
      _0x1f66c9.addChild(_0xa43f90);
      const _0x29232d = {
        x: _0xa43f90.x + _0xa43f90.width + 10,
        y: _0xa43f90.y,
        selected: true,
        storageKey: "yiwufenjie"
      };
      var _0x3e1d52 = createToggle(_0x29232d);
      _0x1f66c9.addChild(_0x3e1d52);
      _0x1f66c9.setContent(null, null, [alert.BUTTONS.btn_QuXiao, alert.BUTTONS.btn_QueRen], [function () {
        _0x15b75d.stop();
      }, function () {
        localStorage.setItem("yiwufenjie", _0x3e1d52.selected);
        _0x15b75d.fjstatus = _0x3e1d52.selected;
        _0x15b75d.prcessBody();
      }], null);
      _0x1f66c9.showAlert();
    });
  }
  async prcessBody() {
    if (this.fjstatus) {
      if (HoleItemManager.getInstance().getItemNumById(holeRelicBag.crtSeRelics[0]) <= 1) {
        addGameLog(xls.itemRelic.getItem(holeRelicBag.crtSeRelics).name + "数量不超过1");
      } else {
        await this.send_message("cs_rogue_relic_decompose", {
          relics: [{
            i: holeRelicBag.crtSeRelics[0],
            n: HoleItemManager.getInstance().getItemNumById(holeRelicBag.crtSeRelics[0]) - 1
          }],
          version: 202310
        });
      }
    } else {
      await this.send_message("cs_rogue_relic_decompose", {
        relics: [{
          i: holeRelicBag.crtSeRelics[0],
          n: HoleItemManager.getInstance().getItemNumById(holeRelicBag.crtSeRelics[0])
        }],
        version: 202310
      });
    }
    addGameLog("分解遗物结束");
    this.stop();
  }
}
function wait(_0x310fb7) {
  return new Promise(_0x20ce87 => // TOLOOK
  setTimeout(() => _0x20ce87(), _0x310fb7));
}
function SimpleAlertUi(_0x17a5d0) {
  let _0x5986fe = new alert.SimpleAlert();
  _0x5986fe.initialize(alert.ALERT_ROOT);
  _0x5986fe.effectTrigger.showEffect = alert.SHOW_EFFECT;
  _0x5986fe.effectTrigger.hideEffect = alert.HIDE_EFFECT;
  if (_0x17a5d0.width) {
    _0x5986fe.applicationWidth = _0x17a5d0.width;
  }
  if (_0x17a5d0.height) {
    _0x5986fe._minHeight = _0x17a5d0.height;
    _0x5986fe.height = _0x17a5d0.height;
  }
  return _0x5986fe;
}
function createLabel(_0x350435) {
  let _0x3536cb = new eui.Label();
  _0x3536cb.lineSpacing = 3;
  _0x3536cb.size = 16;
  _0x3536cb.textColor = 16777215;
  _0x3536cb.touchEnabled = false;
  Object.keys(_0x350435).forEach(_0x255f79 => {
    _0x3536cb[_0x255f79] = _0x350435[_0x255f79];
  });
  return _0x3536cb;
}
function gethelpBtnSkinName() {
  return function (_0x1b5299) {
    function _0x4820a2() {
      _0x1b5299.call(this);
      this.skinParts = [];
      this.elementsContent = [this._Image1_i()];
      this.states = [new eui.State("up", []), new eui.State("down", [new eui.SetProperty("_Image1", "source", "common_hd_questionmark_button_nor2_png")])];
    }
    __extends(_0x4820a2, _0x1b5299);
    _0x4820a2.prototype._Image1_i = function () {
      let _0x94ecfa = new eui.Image();
      this._Image1 = _0x94ecfa;
      _0x94ecfa.scaleX = 0.5;
      _0x94ecfa.scaleY = 0.5;
      _0x94ecfa.source = "common_hd_questionmark_button_nor1_png";
      return _0x94ecfa;
    };
    return _0x4820a2;
  }(eui.Skin);
}
function createToggle(_0x1f096f) {
  let _0x5809bd = new eui.ToggleButton();
  _0x5809bd.skinName = getCheckBoxSkinName();
  Object.keys(_0x1f096f).forEach(_0x313d5f => {
    _0x5809bd[_0x313d5f] = _0x1f096f[_0x313d5f];
  });
  if (_0x1f096f.storageKey) {
    if (_0x1f096f.selected != undefined) {
      _0x5809bd.selected = localStorage.getItem(_0x1f096f.storageKey) !== null ? JSON.parse(localStorage.getItem(_0x1f096f.storageKey)) : _0x5809bd.selected;
    } else {
      _0x5809bd.selected = localStorage.getItem(_0x1f096f.storageKey) !== null ? JSON.parse(localStorage.getItem(_0x1f096f.storageKey)) : false;
    }
  }
  return _0x5809bd;
}
function createRadio(_0x1af71e) {
  let _0x1769ae = new eui.RadioButton();
  _0x1769ae.skinName = getRadioBoxSkinName();
  Object.keys(_0x1af71e).forEach(_0x2218ed => {
    _0x1769ae[_0x2218ed] = _0x1af71e[_0x2218ed];
  });
  if (_0x1af71e.storageKey) {
    if (_0x1af71e.selected != undefined) {
      _0x1769ae.selected = localStorage.getItem(_0x1af71e.storageKey) !== null ? JSON.parse(localStorage.getItem(_0x1af71e.storageKey)) : _0x1af71e.selected;
    } else {
      _0x1769ae.selected = localStorage.getItem(_0x1af71e.storageKey) !== null ? JSON.parse(localStorage.getItem(_0x1af71e.storageKey)) : false;
    }
  }
  return _0x1769ae;
}
function createEdit(_0x925eff) {
  let _0x1a0227 = new eui.EditableText();
  _0x1a0227.alpha = 1;
  _0x1a0227.blendMode = "blendMode";
  _0x1a0227.lineSpacing = 3;
  _0x1a0227.prompt = "对战次数";
  _0x1a0227.promptColor = 16777215;
  _0x1a0227.size = 16;
  _0x1a0227.textAlign = "center";
  _0x1a0227.textColor = 16777215;
  _0x1a0227.verticalAlign = "middle";
  _0x1a0227.background = true;
  _0x1a0227.backgroundColor = 6710886;
  Object.keys(_0x925eff).forEach(_0x4c96fb => {
    _0x1a0227[_0x4c96fb] = _0x925eff[_0x4c96fb];
  });
  if (_0x925eff.storageKey) {
    _0x1a0227.text = localStorage.getItem(_0x925eff.storageKey);
  }
  return _0x1a0227;
}
function getCheckBoxSkinName() {
  return function (_0x40c539) {
    function _0x7852a5() {
      _0x40c539.call(this);
      this.skinParts = [];
      this.elementsContent = [this._Image1_i()];
      this.states = [new eui.State("up", [new eui.SetProperty("_Image1", "source", "personal_center_setup_toggle_up_png"), new eui.SetProperty("_Image1", "x", 0), new eui.SetProperty("_Image1", "y", 0), new eui.SetProperty("_Image1", "width", 53), new eui.SetProperty("_Image1", "height", 20)]), new eui.State("down", [new eui.SetProperty("_Image1", "source", "personal_center_setup_toggle_down_png"), new eui.SetProperty("_Image1", "x", 0), new eui.SetProperty("_Image1", "y", 0), new eui.SetProperty("_Image1", "width", 53), new eui.SetProperty("_Image1", "height", 20)]), new eui.State("disabled", [])];
    }
    __extends(_0x7852a5, _0x40c539);
    _0x7852a5.prototype._Image1_i = function () {
      let _0x3c0928 = new eui.Image();
      this._Image1 = _0x3c0928;
      return _0x3c0928;
    };
    return _0x7852a5;
  }(eui.Skin);
}
function getTextBtnSkinName(_0x26099f) {
  return function (_0x10576f) {
    function _0x427e8c() {
      _0x10576f.call(this);
      this.skinParts = [];
      const _0x258048 = {
        text: _0x26099f,
        x: 20,
        y: 10,
        bold: true,
        stroke: 1,
        strokeColor: 9297,
        textColor: 14745599,
        size: 17,
        fontFamily: "楷体",
        bold: 1,
        textAlign: "center"
      };
      let _0x35a7e7 = createLabel(_0x258048);
      _0x35a7e7.x = 50 - _0x35a7e7.width / 2;
      this.elementsContent = [this._Image1_i(), _0x35a7e7];
      this.states = [new eui.State("up", []), new eui.State("down", [new eui.SetProperty("_Image1", "source", "button_blue_down_105_png"), new eui.SetProperty("_Image2", "source", "lineup_txt_hover_png")])];
    }
    __extends(_0x427e8c, _0x10576f);
    _0x427e8c.prototype._Image1_i = function () {
      let _0x1f6df8 = new eui.Image();
      this._Image1 = _0x1f6df8;
      _0x1f6df8.source = "button_blue_up_105_png";
      return _0x1f6df8;
    };
    return _0x427e8c;
  }(eui.Skin);
}
function getTextBtnNullImageSkinName(_0x35fcdc) {
  return function (_0x2a32c0) {
    function _0x50b3bd() {
      _0x2a32c0.call(this);
      this.skinParts = [];
      let _0x8ec89 = _0x35fcdc.split("\n");
      let _0x1876e1 = [];
      let _0xe8e198 = 0;
      _0x8ec89.forEach(_0x2ed2ef => {
        if (_0x2ed2ef.includes("HP: 0")) {
          const _0x4f90a1 = {
            text: _0x2ed2ef,
            x: 0,
            y: 0,
            bold: true,
            stroke: 1,
            strokeColor: 9297,
            textColor: 12632256,
            size: 16,
            fontFamily: "楷体",
            bold: 1,
            textAlign: "center"
          };
          let _0x52923c = createLabel(_0x4f90a1);
          _0x52923c.y = _0xe8e198;
          _0x1876e1.push(_0x52923c);
          _0xe8e198 += _0x52923c.height + 10;
        } else {
          const _0xb4c672 = {
            text: _0x2ed2ef,
            x: 0,
            y: 0,
            bold: true,
            stroke: 1,
            strokeColor: 9297,
            textColor: 16776960,
            size: 16,
            fontFamily: "楷体",
            bold: 1,
            textAlign: "center"
          };
          let _0x1c5e9b = createLabel(_0xb4c672);
          _0x1c5e9b.y = _0xe8e198;
          _0x1876e1.push(_0x1c5e9b);
          _0xe8e198 += _0x1c5e9b.height + 10;
        }
      });
      this.elementsContent = _0x1876e1;
      this.states = [new eui.State("up", []), new eui.State("down", [new eui.SetProperty("_Image1", "source", "button_blue_down_105_png"), new eui.SetProperty("_Image2", "source", "lineup_txt_hover_png")])];
    }
    __extends(_0x50b3bd, _0x2a32c0);
    return _0x50b3bd;
  }(eui.Skin);
}
function getRealAndBeReal(_0x3b5cbb) {
  if (_0x3b5cbb == 1) {
    _0x3b5cbb = {
      color: 65535,
      text: "普通 " + _0x3b5cbb
    };
  }
  if (_0x3b5cbb < 1) {
    _0x3b5cbb = {
      color: 13882323,
      text: "微弱 " + _0x3b5cbb
    };
  }
  if (_0x3b5cbb > 1) {
    _0x3b5cbb = {
      color: 16711680,
      text: "克制 " + _0x3b5cbb
    };
  }
  return _0x3b5cbb;
}
function getRadioBoxSkinName() {
  let _0x5c0cd3 = function (_0x418ca4) {
    function _0x32a78e() {
      _0x418ca4.call(this);
      this.skinParts = [];
      this.elementsContent = [this._Image1_i()];
      this.states = [new eui.State("up", [new eui.SetProperty("_Image1", "source", "personal_center_setup_checkbox_up_png"), new eui.SetProperty("_Image1", "x", 0), new eui.SetProperty("_Image1", "y", 0), new eui.SetProperty("_Image1", "width", 20), new eui.SetProperty("_Image1", "height", 21)]), new eui.State("down", [new eui.SetProperty("_Image1", "source", "personal_center_setup_checkbox_down_png"), new eui.SetProperty("_Image1", "x", 0), new eui.SetProperty("_Image1", "y", 1), new eui.SetProperty("_Image1", "width", 20), new eui.SetProperty("_Image1", "height", 20)]), new eui.State("disabled", [])];
    }
    __extends(_0x32a78e, _0x418ca4);
    _0x32a78e.prototype._Image1_i = function () {
      let _0x7f210c = new eui.Image();
      this._Image1 = _0x7f210c;
      return _0x7f210c;
    };
    return _0x32a78e;
  }(eui.Skin);
  return _0x5c0cd3;
}
function produceLog() {
  winLog = new WatchChatList();
  winLog.skinName = "WatchChatListSkin";
  winLog.strMsg = "";
  winLog.y = 100;
  RES.loadConfig("resource/ui/battle.json", "resource/ui/").then(() => {
    MFC.rootLayer.addChild(winLog);
    winLog.btnApply.visible = false;
    winLog.btnExt.visible = false;
    winLog.$children[1].visible = false;
    winLog.$children[3].visible = false;
    winLog.$children[8].visible = false;
    winLog.btnOpen.y = 50;
    winLog.txtWatcher.x = 10;
    winLog.txtWatcher.text = "正在执行:无";
    winLog.scroller.height = 200;
    winLog.$children[2].height = 200;
    winLog.txtWatcher.width = winLog.width;
    logger(winLog.txtWatcher);
    winLog.txtWatcher.textColor = 65535;
    winLog.onOpenPanel();
    winLog.btnOpen.selected = false;
    winLog.strMsg = "<font color='#FFFF00'>[更新日志]\n" + gameVersion + "</font><font color='#FF0000'>\n</font><font color='#97FFFF'>" + 开发日志 + "</font>";
    let _0x40a93e = egret.HtmlTextParser;
    winLog.txtMsg.textFlow = new _0x40a93e().parser(winLog.strMsg);
    window.gameLog = winLog;
    sta = winLog.$stage;
  });
}
function addGameLog(_0x1eac60) {
  try {
    if (winLog.strMsg.split("\n").length > 255) {
      let _0x207d68 = winLog.strMsg.split("\n");
      _0x207d68.splice(_0x207d68.length - 100);
      winLog.strMsg = _0x207d68.join("\n");
    }
  } catch (_0x1ec860) {
    console.error(_0x1ec860);
  }
  winLog.strMsg = "<font color='#bbff00'>[" + formatTime(new Date().getTime()) + "]</font><font color='#FFFFFF'>" + _0x1eac60 + "</font>\n" + winLog.strMsg;
  let _0x5c325c = egret.HtmlTextParser;
  winLog.txtMsg.textFlow = new _0x5c325c().parser(winLog.strMsg);
}
function formatTime(_0x12e14a) {
  var _0x2fc3b4 = new Date(_0x12e14a);
  var _0x56f1e9 = _0x2fc3b4.getHours();
  var _0x1b871d = _0x2fc3b4.getMinutes();
  var _0xcbb9c4 = _0x2fc3b4.getSeconds();
  if (_0x56f1e9 < 10) {
    _0x56f1e9 = "0" + _0x56f1e9;
  }
  if (_0x1b871d < 10) {
    _0x1b871d = "0" + _0x1b871d;
  }
  if (_0xcbb9c4 < 10) {
    _0xcbb9c4 = "0" + _0xcbb9c4;
  }
  return _0x56f1e9 + ":" + _0x1b871d + ":" + _0xcbb9c4;
}
function getSeerItemNum(_0x2a1dbe) {
  return ItemManager.getInstance().getItemNumById(_0x2a1dbe);
}
function randomCap(_0x1c35ba) {
  let _0x6b278d = [];
  for (let _0x17b5f2 = 0; _0x17b5f2 < _0x1c35ba.length; _0x17b5f2++) {
    if (getSeerItemNum(_0x1c35ba[_0x17b5f2]) > 0) {
      _0x6b278d.push(_0x1c35ba[_0x17b5f2]);
    }
  }
  if (_0x6b278d.length == 0) {
    return "NoCap";
  }
  let _0x478f30 = _0x6b278d[0];
  let _0x549d10 = _0x478f30 == "4001" ? "普通" : _0x478f30 == "4002" ? "中级" : _0x478f30 == "4003" ? "高级" : _0x478f30 == "4004" ? "无敌" : "";
  return {
    name: _0x549d10,
    num: getSeerItemNum(_0x478f30),
    itemId: _0x478f30
  };
}
function getTouchs(_0x15a866, _0x3b63d0) {
  var _0xb5cc3d = [];
  function _0x368102(_0x5c6ffe) {
    var _0xd84334 = _0x5c6ffe.$children;
    for (var _0xe90e48 = 0; _0xe90e48 < _0xd84334.length; _0xe90e48++) {
      var _0x422f98 = _0xd84334[_0xe90e48];
      if (_0x422f98 instanceof egret.DisplayObjectContainer) {
        _0xb5cc3d.push(_0x422f98);
        _0x368102(_0x422f98);
      } else {}
    }
  }
  _0x368102(sta);
  var _0x357dd4 = [];
  for (let _0x2d565d = 0; _0x2d565d < _0xb5cc3d.length; _0x2d565d++) {
    let _0x190d4 = _0xb5cc3d[_0x2d565d];
    if (_0x190d4.$children) {
      let _0x2cc30c = _0x190d4.$children;
      _0x2cc30c.forEach(_0x447699 => {
        try {
          if (_0x447699[_0x15a866 + ""] && _0x447699[_0x15a866 + ""] == _0x3b63d0) {
            _0x357dd4.push(_0x447699);
          }
        } catch (_0xede131) {}
      });
    }
  }
  if (_0x357dd4.length == 0) {
    return false;
  }
  return _0x357dd4;
}
function touchBtn(_0x4163dc) {
  egret.TouchEvent.dispatchTouchEvent(_0x4163dc, egret.TouchEvent.TOUCH_BEGIN, true, true, 111, 111, 0, true);
  egret.TouchEvent.dispatchTouchEvent(_0x4163dc, egret.TouchEvent.TOUCH_TAP, true, true, 111, 111, 0, true);
  egret.TouchEvent.dispatchTouchEvent(_0x4163dc, egret.TouchEvent.TOUCH_END, true, true, 111, 111, 0, true);
}
function splitArray(_0x6bb4a5, _0x374978) {
  const _0x102bda = [];
  for (let _0x54af9c = 0; _0x54af9c < _0x6bb4a5.length; _0x54af9c += _0x374978) {
    _0x102bda.push(_0x6bb4a5.slice(_0x54af9c, _0x54af9c + _0x374978));
  }
  return _0x102bda;
}
async function findUIs(_0xe07bd7, _0x366f59) {
  while (1) {
    await wait(100);
    var _0x25c9ab = getTouchs(_0xe07bd7, _0x366f59);
    if (_0x25c9ab) {
      return _0x25c9ab;
    }
    if (!window.nowTask) {
      return false;
    }
  }
}
function getGoalPets(_0x4718c0) {
  let _0x2f5143 = PetManager.getInstance().getAllPets();
  let _0x206297 = _0x2f5143.find(_0x3eed1 => {
    for (let _0x950505 = 0; _0x950505 < _0x4718c0.length; _0x950505++) {
      let _0x4c14c6 = _0x4718c0[_0x950505].skills.every(_0x5a95e6 => _0x3eed1.skills.includes(_0x5a95e6)) && (_0x4718c0[_0x950505].features ? _0x4718c0[_0x950505].features.includes(_0x3eed1.featureId) : true);
      if (_0x4c14c6) {
        return _0x4c14c6;
      }
    }
  });
  return _0x206297;
}
function canNowTime(_0x17b656) {
  var _0x17b656 = deden.DateUtil.dateFormat(deden.DateUtil.create(_0x17b656), "yyyy/MM/dd hh:mm:ss");
  var _0x491797 = deden.DateUtil.dateFormat(MFC.serverTimer.date, "yyyy/MM/dd hh:mm:ss");
  if (_0x491797 <= _0x17b656) {
    return true;
  }
  return false;
}
function fixBattleRes(_0xeb8c70) {
  let _0x556c00 = _0xeb8c70.result.playerInfos.find(_0x1b9137 => _0x1b9137.uid == _0xeb8c70.uid__);
  if (!_0x556c00) {
    return _0xeb8c70;
  }
  let _0x35b99c = _0x556c00.teamFlag;
  let _0x31ab60 = _0xeb8c70.result.processQueue.find(_0x4b6127 => _0x4b6127.uid == _0xeb8c70.uid__);
  if (_0xeb8c70.result.result != 0) {
    if (_0x35b99c == 2 && (_0xeb8c70.result.result == 1 || _0xeb8c70.result.result == 2)) {
      _0xeb8c70.result.result = 3 - _0xeb8c70.result.result;
    }
    return _0xeb8c70;
  }
  let _0x1919ba = _0x556c00.crtPetIndex;
  if (_0x31ab60) {
    let _0x4bda50 = _0x31ab60.opInfo;
    if (_0x4bda50 && _0x4bda50.opID == 1) {
      _0x1919ba = _0x4bda50.petIndex;
    }
  } else if (_0xeb8c70.result.affects) {
    let _0x460b68 = _0xeb8c70.result.affects.find(_0x42f155 => _0x42f155.crtPetIndex != undefined && _0x42f155.uid == _0xeb8c70.uid__);
    if (_0x460b68) {
      _0x1919ba = _0x460b68.crtPetIndex;
    }
  }
  let _0x155019 = _0xeb8c70.result.playerInfos.findIndex(_0x4486a7 => _0x4486a7.teamFlag === _0x35b99c);
  _0xeb8c70.result.playerInfos[_0x155019].crtPetIndex = _0x1919ba;
  if (_0x31ab60) {
    let _0x5bfef9 = _0x31ab60.opInfo;
    if (_0x5bfef9) {
      if (_0x5bfef9.opID == 2) {
        let _0x46c41b = _0x31ab60.opInfo.addPP;
        if (_0x46c41b) {
          let _0x5cc433 = _0x556c00.petInfos[_0x1919ba].useSkills;
          for (let _0x17f247 = 0; _0x17f247 < _0x5cc433.length; _0x17f247++) {
            _0x5cc433[_0x17f247].crtPP = _0x5cc433[_0x17f247].crtPP + _0x46c41b;
            let _0xdedad = petConfig.SkillConfig.getDef(_0x5cc433[_0x17f247]);
            let _0x155bb4 = parseInt(_0xdedad.maxPP);
            if (_0x5cc433[_0x17f247].crtPP > _0x155bb4) {
              _0x5cc433[_0x17f247].crtPP = _0x155bb4;
            }
          }
          _0x556c00.petInfos[_0x1919ba].useSkills = _0x5cc433;
        }
      }
      if (_0x5bfef9.skillID) {
        _0x556c00.petInfos[_0x1919ba].useSkills.forEach(_0x48f75c => {
          if (_0x48f75c.id == _0x5bfef9.skillID) {
            _0x48f75c.crtPP--;
          } else {
            "";
          }
        });
      }
    }
  }
  let _0xad87e7 = _0x556c00.petInfos[_0x1919ba].useSkills;
  let _0x2fd6f5 = [];
  for (let _0x1dc500 = 0; _0x1dc500 < _0xad87e7.length; _0x1dc500++) {
    let _0x566f0c = petConfig.SkillConfig.getDef(_0xad87e7[_0x1dc500].id);
    _0x2fd6f5.push(_0x566f0c);
  }
  let _0xb2d12f = Array.prototype.concat.apply([], _0xeb8c70.result.processQueue.map(_0x5d3d04 => _0x5d3d04.affects)).filter(_0x640bca => _0x640bca.uid == _0xeb8c70.uid__).map(_0x4569a6 => {
    if (_0x4569a6.onlySkill.length > 0) {
      _0x556c00.petInfos[_0x1919ba].useSkills.forEach(_0x1a4fc0 => {
        if (_0x4569a6.onlySkill.indexOf(_0x1a4fc0.id) != -1) {
          _0x1a4fc0.crtPP = _0x1a4fc0.crtPP + _0x4569a6.ppChange;
          let _0x178dbf = _0x2fd6f5.find(_0x837c45 => _0x837c45.id == _0x1a4fc0.id);
          if (_0x1a4fc0.crtPP > _0x178dbf.maxPP) {
            _0x1a4fc0.crtPP = parseInt(_0x178dbf.maxPP);
          }
          if (_0x1a4fc0.crtPP < 0) {
            _0x1a4fc0.crtPP = 0;
          }
        }
      });
      return 0;
    } else {
      return _0x4569a6.ppChange;
    }
  });
  let _0x5d7da7 = _0xb2d12f.reduce((_0x2516c6, _0x1ba93a) => {
    return _0x2516c6 + _0x1ba93a;
  }, 0);
  let _0x73af13 = _0xeb8c70.result.affects.filter(_0x27fe7f => _0x27fe7f.uid == _0xeb8c70.uid__).map(_0x3faa72 => {
    if (_0x3faa72.onlySkill.length > 0) {
      _0x556c00.petInfos[_0x1919ba].useSkills.forEach(_0x2daf45 => {
        if (_0x3faa72.onlySkill.indexOf(_0x2daf45.id) != -1) {
          _0x2daf45.crtPP = _0x2daf45.crtPP + _0x3faa72.ppChange;
          let _0xe8b5c8 = _0x2fd6f5.find(_0x111081 => _0x111081.id == _0x2daf45.id);
          if (_0x2daf45.crtPP > _0xe8b5c8.maxPP) {
            _0x2daf45.crtPP = parseInt(_0xe8b5c8.maxPP);
          }
          if (_0x2daf45.crtPP < 0) {
            _0x2daf45.crtPP = 0;
          }
        }
      });
      return 0;
    } else {
      return _0x3faa72.ppChange;
    }
  });
  let _0x54198b = _0x73af13.reduce((_0x5481f1, _0x59c685) => {
    return _0x5481f1 + _0x59c685;
  }, 0);
  _0x556c00.petInfos[_0x1919ba].useSkills.forEach(_0x13a30a => {
    _0x13a30a.crtPP = _0x13a30a.crtPP + _0x5d7da7 + _0x54198b;
    let _0x3c7e59 = _0x2fd6f5.find(_0x481520 => _0x481520.id == _0x13a30a.id);
    if (_0x13a30a.crtPP > _0x3c7e59.maxPP) {
      _0x13a30a.crtPP = parseInt(_0x3c7e59.maxPP);
    }
    if (_0x13a30a.crtPP < 0) {
      _0x13a30a.crtPP = 0;
    }
  });
  _0xeb8c70.result.playerInfos[_0x155019].petInfos = _0x556c00.petInfos;
  return _0xeb8c70;
}
if (!window.navigator.userAgent.includes("echo-seer")) {
  $("body").append(`
<div style="position: absolute; z-index: 9999999999999999999999999; top: 20px; left: 40px; " id="menu">
<div id="app">
<el-button id="menu-btn" @click="clickLove" class="custom-button-background" v-if="show_love" style="
                        border-radius: 50%;
                    "></el-button>
<el-button id="menu-btn" v-if="!show_love" @click="clickLove" style="width: 100px !important;"
    class="custom-button-background rounded-border">
</el-button>
<div v-show="!show_love" class="slider-demo-block">
    <el-menu :unique-opened="true">
        <el-menu-item class="rounded-rate" @click="stopTask">
            <span slot="title">停止任务</span>
        </el-menu-item>
        <el-menu-item class="rounded-rate" @click="showLog">
        <span slot="title">弹出日志</span>
    </el-menu-item>
        <el-menu-item index="rate" class="rounded-rate"
            style=" border-bottom: none;height: 20px !important;">
            <i class="el-icon-d-arrow-left" style="font-size: 10px !important;margin: 0 auto !important;"
                @click="doneRate"></i>
            <span style="padding: 0 20px;" @click="resetRate">{{nowRate}}</span>
            <i class="el-icon-d-arrow-right" style="font-size: 10px !important" @click="addRate"></i>
        </el-menu-item>
        <el-menu-item index="rate_index" class="rounded-rate-bar" style="height: 20px !important;">
            <div>
                <el-slider v-model="nowRate" :min="1" :max="128" @input="inputRate" @change="changeRate"
                    :show-tooltip="false" />
            </div>
        </el-menu-item>
    </el-menu>
    <el-scrollbar style="height: 180px !important;">
        <el-menu :unique-opened="true">
            <template v-for="(task, taskIndex) in tasks">
                <el-menu-item v-if="!task.subtasks.length" :index="'end-' + taskIndex"
                    class="rounded-border" @click="task.onClick" :key="'task - ' + taskIndex">
                    {{ task.title }}
                </el-menu-item>

                <el-popover v-else trigger="click" placement="right" :key="'popover - ' + taskIndex">
                    <el-scrollbar style="height:auto !important;max-height: 120px !important;">
                        <el-menu class="scrollbar_list">
                            <el-menu-item v-for="(subtask, subtaskIndex) in task.subtasks"
                                :key="'subtask - ' + taskIndex + ' - ' + subtaskIndex"
                                class="rounded-border" @click="subtask.onClick">
                                {{ subtask.title }}
                            </el-menu-item>
                        </el-menu>
                    </el-scrollbar>
                    <el-menu-item slot="reference" class="rounded-border">{{ task.title
                        }}</el-menu-item>
                </el-popover>
            </template>
        </el-menu>
    </el-scrollbar>
</div>
<el-dialog title="echo官网" :visible.sync="addVis" width="60%" >
    <span>{{address}}</span>&nbsp;
    <br>
    <span>点击确认复制网址,浏览器打开</span>&nbsp;
    <span slot="footer" class="dialog-footer">
        <el-button  @click="CopyContent(1)">确 定</el-button>
    </span>
</el-dialog>

<el-dialog title="echo交流群" :visible.sync="QQGroupsVis" width="60%" >
    <span>{{groups[0]}}</span>&nbsp;
    <span>{{groups[1]}}</span>&nbsp;
    <br>
    <span>{{groups[2]}}</span>&nbsp;
    <span>{{groups[3]}}</span>&nbsp;
    <br>
    <span>{{groups[4]}}</span>&nbsp;
    <br>
    <br>
    <span>点击确认复制群号</span>&nbsp;
    <span slot="footer" class="dialog-footer">
        <el-button  @click="CopyContent(2)">确 定</el-button>
    </span>
</el-dialog>

<el-dialog title="输入变速倍率" :visible.sync="dialogSpeedVisible">
      <el-input v-model="txtNowRate" autocomplete="off"></el-input>
  <div slot="footer" class="dialog-footer">
    <el-button @click="dialogSpeedVisible = false">取 消</el-button>
    <el-button type="primary" @click="changeByIput">确 定</el-button>
  </div>
</el-dialog>


</div>
</div>
`);
  let fixDialog = // TOLOOK
  setInterval(() => {
    if (document.getElementsByClassName("taomeesdk-dialog__body")[0]) {
      document.getElementsByClassName("taomeesdk-dialog__body")[0].style.width = "";
      document.getElementsByClassName("taomeesdk-dialog__body")[0].style.height = "300px";
      clearInterval(fixDialog);
    }
  }, 200);
  new Vue({
    el: "#app",
    data() {
      const _0x255633 = {
        groups: ["①群:283260916", "②群:113884358", "③群:744308936", "④群:235816877", "⑤群:435644842"],
        address: "http://www.echo61.online",
        QQGroupsVis: false,
        addVis: false,
        rate: 1,
        nowRate: 1,
        txtNowRate: "1",
        dialogSpeedVisible: false,
        tasks: [{
          title: "常用功能",
          subtasks: [{
            title: "融合助手",
            taskName: "RongHeHelper"
          }, {
            title: "时光之旅",
            taskName: "Exploratorymaterials"
          }, {
            title: "抽轮盘",
            taskName: "Pool"
          }, {
            title: "打野怪",
            taskName: "FightMapBoss"
          }, {
            title: "学习力自动",
            taskName: "learnAdd"
          }, {
            title: "雇佣刷豆",
            taskName: "HireCoin"
          }, {
            title: "赛尔豆作战",
            taskName: "CoinBigBattle"
          }, {
            title: "星际迷航",
            taskName: "Trek"
          }, {
            title: "关卡捕捉",
            taskName: "LevelCatch"
          }, {
            title: "地图捕捉",
            taskName: "MapCatch"
          }, {
            title: "战斗阶梯",
            taskName: "Ladder"
          }, {
            title: "教皇",
            taskName: "Pope"
          }, {
            title: "采矿",
            taskName: "Mine"
          }]
        }, {
          title: "一键专区",
          subtasks: [{
            title: "一键日常",
            taskName: "DailyTask"
          }, {
            title: "一键杂项",
            taskName: "Misc"
          }, {
            title: "一键战队任务",
            taskName: "Team"
          }, {
            title: "一键委派",
            taskName: "Delegate"
          }, {
            title: "一键商店",
            taskName: "Shop"
          }, {
            title: "一键放生",
            taskName: "ReleasePets"
          }, {
            title: "一键刷水滴",
            taskName: "Kloswamp"
          }]
        }, {
          title: "PVP专区",
          subtasks: [{
            title: "乱斗挂机",
            taskName: "luandou"
          }, {
            title: "巅峰挂机",
            taskName: "dianfeng"
          }, {
            title: "竞技挂机",
            taskName: "jingji"
          }, {
            title: "自由挂机",
            taskName: "ziyou"
          }, {
            title: "巅峰记牌器",
            taskName: "Pvpremind"
          }]
        }, {
          title: "常规活动",
          subtasks: [{
            title: "豆子剧情",
            taskName: "Coinstory"
          }, {
            title: "经验剧情",
            taskName: "Expstory"
          }, {
            title: "鲁克补给",
            taskName: "lukeAct"
          }, {
            title: "探索小分队",
            taskName: "Timetask"
          }, {
            title: "派特博士",
            taskName: "Paitepet"
          }]
        }, {
          title: "默认配置",
          subtasks: [],
          taskName: "Defaultsetup"
        }, {
          title: "888活动",
          subtasks: [],
          taskName: "Activity888"
        }, {
          title: "限时活动",
          subtasks: [],
          taskName: "LimitActivity"
        }, {
          title: "娱乐功能",
          subtasks: [{
            title: "金灿灿",
            taskName: "talentAll31"
          }]
        }, {
          title: "关于",
          subtasks: [{
            title: "echo官网"
          }, {
            title: "交流群"
          }]
        }],
        more_menu: false,
        show_love: true,
        activeIndex: "1",
        activeIndex2: "1"
      };
      return _0x255633;
    },
    methods: {
      showLog() {
        if (winLog) {
          winLog.onOpenPanel();
        }
      },
      changeByIput() {
        if (!isNaN(this.txtNowRate.trim())) {
          this.nowRate = parseInt(this.txtNowRate);
          this.dialogSpeedVisible = false;
        }
      },
      stopTask() {
        try {
          window.nowTask.stop();
          0;
        } catch (_0x3c888f) {
          MFC.bubbleAlert.showAlert("当前无任务");
        }
      },
      CopyContent(_0x19a6e9) {
        if (_0x19a6e9 == 1) {
          var _0x5ae635 = this.address;
          this.addVis = false;
        }
        if (_0x19a6e9 == 2) {
          var _0x5ae635 = this.groups.join("\n");
          this.QQGroupsVis = false;
        }
        let _0x27d926 = document.createElement("input");
        document.body.appendChild(_0x27d926);
        _0x27d926.setAttribute("value", _0x5ae635);
        _0x27d926.select();
        if (document.execCommand("copy")) {
          document.execCommand("copy");
        }
        document.body.removeChild(_0x27d926);
      },
      doneRate() {
        if (this.nowRate - 2 > 0) {
          this.nowRate = this.nowRate - 2;
          return;
        }
        if (this.nowRate - 2 <= 0) {
          this.nowRate = 1;
        }
      },
      addRate() {
        if (this.nowRate + 2 <= 128) {
          this.nowRate = this.nowRate + 2;
          return;
        }
        if (this.nowRate + 2 == 128) {
          this.nowRate = 128;
        }
      },
      resetRate() {
        this.dialogSpeedVisible = true;
      },
      inputRate() {
        try {
          global.timer.change(1 / this.nowRate);
        } catch (_0x648db2) {}
      },
      changeRate(_0x4d0875) {
        this.nowRate = parseFloat(_0x4d0875);
      },
      clickLove() {
        if (!this.show_love) {
          this.show_love = true;
        } else {
          this.show_love = false;
        }
      },
      handleTaskClick(_0x4ad400) {
        console.log(_0x4ad400.title + " clicked");
        let _0x4938f8 = this.tasks.find(_0x1e80e1 => _0x1e80e1.title == _0x4ad400.title);
        this.excuteTask(_0x4938f8);
      },
      handleSubtaskClick(_0x208543) {
        console.log(_0x208543.title + " clicked");
        let _0x1e3d36 = this.tasks.flatMap(_0x54a3d0 => _0x54a3d0.subtasks).find(_0x1ebc3e => _0x1ebc3e.title === _0x208543.title);
        console.log(_0x1e3d36);
        this.excuteTask(_0x1e3d36);
      },
      excuteTask(_0xf49c78) {
        if (_0xf49c78.title == "交流群") {
          this.QQGroupsVis = true;
          return;
        }
        if (_0xf49c78.title == "echo官网") {
          this.addVis = true;
          return;
        }
        if (UserManager.getInstance().userInfo) {
          try {
            if (echoServerTime == "null") {
              MFC.bubbleAlert.showCustomAlert("设备并未登录!");
              return;
            }
            if (echoServerTime && echoNowTime) {
              let _0x11bb97 = new Date(echoServerTime).getTime();
              if (_0x11bb97 <= echoNowTime) {
                MFC.bubbleAlert.showCustomAlert("已到期,请前往echo官网进行续费,并重启echo\n续费链接已经复制到剪贴板");
                let _0x2759a5 = document.createElement("input");
                document.body.appendChild(_0x2759a5);
                _0x2759a5.setAttribute("value", "http://www.echo61.online/home");
                _0x2759a5.select();
                if (document.execCommand("copy")) {
                  document.execCommand("copy");
                }
                document.body.removeChild(_0x2759a5);
                return;
              }
            } else {
              MFC.bubbleAlert.showCustomAlert("请稍等,正在加载配置!");
              return;
            }
          } catch (_0x2a5afd) {}
          if (window.nowTask) {
            MFC.bubbleAlert.showCustomAlert("当前已有任务正在运行!请先停止");
            addGameLog("当前已有任务正在运行,请先停止!");
          } else {
            eval("window.nowTask = new " + _0xf49c78.taskName + "(); window.nowTask.start()");
          }
        } else {
          MFC.bubbleAlert.showCustomAlert("请先登录!");
        }
      },
      initializeTaskHandlers() {
        this.tasks.forEach(_0x3adceb => {
          _0x3adceb.onClick = () => this.handleTaskClick(_0x3adceb);
          _0x3adceb.subtasks.forEach(_0x2f9752 => {
            _0x2f9752.onClick = () => this.handleSubtaskClick(_0x2f9752);
          });
        });
      }
    },
    mounted() {},
    created() {
      this.initializeTaskHandlers();
    }
  });
  const menuEl = document.getElementById("menu");
  const menu_btn = document.getElementById("menu-btn");
  const pageWidth = window.innerWidth;
  const pageHeight = window.innerHeight;
  menu_btn.addEventListener("mousedown", dragMouseDown);
  menu_btn.addEventListener("touchstart", touchStart);
  function dragMouseDown(_0x5dc2b6) {
    _0x5dc2b6.preventDefault();
    document.addEventListener("mousemove", _0x3c7d64);
    document.addEventListener("mouseup", _0x22769f);
    let _0x325780 = _0x5dc2b6.clientX;
    let _0x4fce11 = _0x5dc2b6.clientY;
    function _0x3c7d64(_0x54e125) {
      _0x54e125.preventDefault();
      const _0x5a4878 = _0x325780 - _0x54e125.clientX;
      const _0x135dbc = _0x4fce11 - _0x54e125.clientY;
      _0x325780 = _0x54e125.clientX;
      _0x4fce11 = _0x54e125.clientY;
      let _0x5053c7 = menuEl.offsetTop - _0x135dbc;
      let _0x5dfee8 = menuEl.offsetLeft - _0x5a4878;
      _0x5053c7 = Math.max(0, Math.min(_0x5053c7, pageHeight - menuEl.offsetHeight));
      _0x5dfee8 = Math.max(0, Math.min(_0x5dfee8, pageWidth - menuEl.offsetWidth));
      menuEl.style.top = _0x5053c7 + "px";
      menuEl.style.left = _0x5dfee8 + "px";
    }
    function _0x22769f() {
      document.removeEventListener("mouseup", _0x22769f);
      document.removeEventListener("mousemove", _0x3c7d64);
    }
  }
  function touchStart(_0x26f724) {
    startX = _0x26f724.touches[0].clientX;
    startY = _0x26f724.touches[0].clientY;
    menuEl.addEventListener("touchmove", touchMove);
    menuEl.addEventListener("touchend", touchEnd);
    menuEl.addEventListener("touchcancel", touchCancel);
  }
  function touchMove(_0xaef732) {
    const _0x56cb0e = _0xaef732.touches[0].clientX;
    const _0x4a786c = _0xaef732.touches[0].clientY;
    const _0x474887 = _0x56cb0e - startX;
    const _0x2bd931 = _0x4a786c - startY;
    let _0x16fa99 = menuEl.offsetTop + _0x2bd931;
    let _0x282560 = menuEl.offsetLeft + _0x474887;
    _0x16fa99 = Math.max(0, Math.min(_0x16fa99, pageHeight - menuEl.offsetHeight));
    _0x282560 = Math.max(0, Math.min(_0x282560, pageWidth - menuEl.offsetWidth));
    menuEl.style.top = _0x16fa99 + "px";
    menuEl.style.left = _0x282560 + "px";
    startX = _0x56cb0e;
    startY = _0x4a786c;
  }
  function touchEnd(_0x461831) {
    menuEl.removeEventListener("touchmove", touchMove);
    menuEl.removeEventListener("touchend", touchEnd);
    menuEl.removeEventListener("touchcancel", touchCancel);
  }
  function touchCancel(_0x1e76c9) {
    menuEl.removeEventListener("touchmove", touchMove);
    menuEl.removeEventListener("touchend", touchEnd);
    menuEl.removeEventListener("touchcancel", touchCancel);
  }
}